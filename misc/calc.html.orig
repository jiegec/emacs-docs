<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents Calc, the GNU Emacs calculator, included with
GNU Emacs 26.0.90.

Copyright (C) 1990-1991, 2001-2017 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being just "GNU GENERAL PUBLIC LICENSE", with the
Front-Cover Texts being "A GNU Manual," and with the Back-Cover
Texts as in (a) below.  A copy of the license is included in the section
entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual." -->
<!-- Created by GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>GNU Emacs Calc Manual</title>

<meta name="description" content="GNU Emacs Calc Manual">
<meta name="keywords" content="GNU Emacs Calc Manual">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<link href="#Top" rel="start" title="Top">
<link href="#Key-Index" rel="index" title="Key Index">
<link href="#SEC_Contents" rel="contents" title="Table of Contents">
<link href="dir.html#Top" rel="up" title="(dir)">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.indentedblock {margin-right: 0em}
blockquote.smallindentedblock {margin-right: 0em; font-size: smaller}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smalllisp {margin-left: 3.2em}
kbd {font-style: oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nolinebreak {white-space: nowrap}
span.roman {font-family: initial; font-weight: normal}
span.sansserif {font-family: sans-serif; font-weight: normal}
ul.no-bullet {list-style: none}
-->
</style>


</head>

<body lang="en">
<h1 class="settitle" align="center">GNU Emacs Calc Manual</h1>













<a name="SEC_Overview"></a>
<h2 class="shortcontents-heading">Short Table of Contents</h2>

<div class="shortcontents">
<ul class="no-bullet">
<li><a name="stoc-Getting-Started-1" href="#toc-Getting-Started-1">1 Getting Started</a></li>
<li><a name="stoc-Tutorial-1" href="#toc-Tutorial-1">2 Tutorial</a></li>
<li><a name="stoc-Introduction-1" href="#toc-Introduction-1">3 Introduction</a></li>
<li><a name="stoc-Data-Types-1" href="#toc-Data-Types-1">4 Data Types</a></li>
<li><a name="stoc-Stack-and-Trail-Commands" href="#toc-Stack-and-Trail-Commands">5 Stack and Trail Commands</a></li>
<li><a name="stoc-Mode-Settings-1" href="#toc-Mode-Settings-1">6 Mode Settings</a></li>
<li><a name="stoc-Arithmetic-Functions" href="#toc-Arithmetic-Functions">7 Arithmetic Functions</a></li>
<li><a name="stoc-Scientific-Functions-1" href="#toc-Scientific-Functions-1">8 Scientific Functions</a></li>
<li><a name="stoc-Vector_002fMatrix-Functions" href="#toc-Vector_002fMatrix-Functions">9 Vector/Matrix Functions</a></li>
<li><a name="stoc-Algebra-1" href="#toc-Algebra-1">10 Algebra</a></li>
<li><a name="stoc-Operating-on-Units" href="#toc-Operating-on-Units">11 Operating on Units</a></li>
<li><a name="stoc-Storing-and-Recalling" href="#toc-Storing-and-Recalling">12 Storing and Recalling</a></li>
<li><a name="stoc-Graphics-1" href="#toc-Graphics-1">13 Graphics</a></li>
<li><a name="stoc-Kill-and-Yank-Functions" href="#toc-Kill-and-Yank-Functions">14 Kill and Yank Functions</a></li>
<li><a name="stoc-Keypad-Mode-1" href="#toc-Keypad-Mode-1">15 Keypad Mode</a></li>
<li><a name="stoc-Embedded-Mode-1" href="#toc-Embedded-Mode-1">16 Embedded Mode</a></li>
<li><a name="stoc-Programming-1" href="#toc-Programming-1">17 Programming</a></li>
<li><a name="stoc-GNU-GENERAL-PUBLIC-LICENSE" href="#toc-GNU-GENERAL-PUBLIC-LICENSE">Appendix A GNU GENERAL PUBLIC LICENSE</a></li>
<li><a name="stoc-GNU-Free-Documentation-License-1" href="#toc-GNU-Free-Documentation-License-1">Appendix B GNU Free Documentation License</a></li>
<li><a name="stoc-Customizing-Calc-1" href="#toc-Customizing-Calc-1">Appendix C Customizing Calc</a></li>
<li><a name="stoc-Reporting-Bugs-1" href="#toc-Reporting-Bugs-1">Appendix D Reporting Bugs</a></li>
<li><a name="stoc-Calc-Summary" href="#toc-Calc-Summary">Appendix E Calc Summary</a></li>
<li><a name="stoc-Index-of-Key-Sequences" href="#toc-Index-of-Key-Sequences">Index of Key Sequences</a></li>
<li><a name="stoc-Index-of-Calculator-Commands" href="#toc-Index-of-Calculator-Commands">Index of Calculator Commands</a></li>
<li><a name="stoc-Index-of-Algebraic-Functions" href="#toc-Index-of-Algebraic-Functions">Index of Algebraic Functions</a></li>
<li><a name="stoc-Concept-Index-1" href="#toc-Concept-Index-1">Concept Index</a></li>
<li><a name="stoc-Index-of-Variables" href="#toc-Index-of-Variables">Index of Variables</a></li>
<li><a name="stoc-Index-of-Lisp-Math-Functions" href="#toc-Index-of-Lisp-Math-Functions">Index of Lisp Math Functions</a></li>
</ul>
</div>



<a name="SEC_Contents"></a>
<h2 class="contents-heading">Table of Contents</h2>

<div class="contents">

<ul class="no-bullet">
  <li><a name="toc-Getting-Started-1" href="#Getting-Started">1 Getting Started</a>
  <ul class="no-bullet">
    <li><a name="toc-What-is-Calc_003f" href="#What-is-Calc">1.1 What is Calc?</a></li>
    <li><a name="toc-About-This-Manual-1" href="#About-This-Manual">1.2 About This Manual</a></li>
    <li><a name="toc-Notations-Used-in-This-Manual-1" href="#Notations-Used-in-This-Manual">1.3 Notations Used in This Manual</a></li>
    <li><a name="toc-A-Demonstration-of-Calc" href="#Demonstration-of-Calc">1.4 A Demonstration of Calc</a></li>
    <li><a name="toc-Using-Calc-1" href="#Using-Calc">1.5 Using Calc</a>
    <ul class="no-bullet">
      <li><a name="toc-Starting-Calc-1" href="#Starting-Calc">1.5.1 Starting Calc</a></li>
      <li><a name="toc-The-Standard-Calc-Interface" href="#The-Standard-Interface">1.5.2 The Standard Calc Interface</a></li>
      <li><a name="toc-Quick-Mode-_0028Overview_0029" href="#Quick-Mode-Overview">1.5.3 Quick Mode (Overview)</a></li>
      <li><a name="toc-Keypad-Mode-_0028Overview_0029" href="#Keypad-Mode-Overview">1.5.4 Keypad Mode (Overview)</a></li>
      <li><a name="toc-Standalone-Operation-1" href="#Standalone-Operation">1.5.5 Standalone Operation</a></li>
      <li><a name="toc-Embedded-Mode-_0028Overview_0029" href="#Embedded-Mode-Overview">1.5.6 Embedded Mode (Overview)</a></li>
      <li><a name="toc-Other-C_002dx-_002a-Commands-1" href="#Other-C_002dx-_002a-Commands">1.5.7 Other <kbd>C-x *</kbd> Commands</a></li>
    </ul></li>
    <li><a name="toc-History-and-Acknowledgments-1" href="#History-and-Acknowledgments">1.6 History and Acknowledgments</a></li>
  </ul></li>
  <li><a name="toc-Tutorial-1" href="#Tutorial">2 Tutorial</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Tutorial-1" href="#Basic-Tutorial">2.1 Basic Tutorial</a>
    <ul class="no-bullet">
      <li><a name="toc-RPN-Calculations-and-the-Stack" href="#RPN-Tutorial">2.1.1 RPN Calculations and the Stack</a></li>
      <li><a name="toc-Algebraic_002dStyle-Calculations" href="#Algebraic-Tutorial">2.1.2 Algebraic-Style Calculations</a></li>
      <li><a name="toc-Undo-and-Redo" href="#Undo-Tutorial">2.1.3 Undo and Redo</a></li>
      <li><a name="toc-Mode_002dSetting-Commands" href="#Modes-Tutorial">2.1.4 Mode-Setting Commands</a></li>
    </ul></li>
    <li><a name="toc-Arithmetic-Tutorial-1" href="#Arithmetic-Tutorial">2.2 Arithmetic Tutorial</a></li>
    <li><a name="toc-Vector_002fMatrix-Tutorial-1" href="#Vector_002fMatrix-Tutorial">2.3 Vector/Matrix Tutorial</a>
    <ul class="no-bullet">
      <li><a name="toc-Vector-Analysis" href="#Vector-Analysis-Tutorial">2.3.1 Vector Analysis</a></li>
      <li><a name="toc-Matrices" href="#Matrix-Tutorial">2.3.2 Matrices</a></li>
      <li><a name="toc-Vectors-as-Lists" href="#List-Tutorial">2.3.3 Vectors as Lists</a></li>
    </ul></li>
    <li><a name="toc-Types-Tutorial-1" href="#Types-Tutorial">2.4 Types Tutorial</a></li>
    <li><a name="toc-Algebra-and-Calculus-Tutorial" href="#Algebra-Tutorial">2.5 Algebra and Calculus Tutorial</a>
    <ul class="no-bullet">
      <li><a name="toc-Basic-Algebra" href="#Basic-Algebra-Tutorial">2.5.1 Basic Algebra</a></li>
      <li><a name="toc-Rewrite-Rules-1" href="#Rewrites-Tutorial">2.5.2 Rewrite Rules</a></li>
    </ul></li>
    <li><a name="toc-Programming-Tutorial-1" href="#Programming-Tutorial">2.6 Programming Tutorial</a></li>
    <li><a name="toc-Answers-to-Exercises-1" href="#Answers-to-Exercises">2.7 Answers to Exercises</a>
    <ul class="no-bullet">
      <li><a name="toc-RPN-Tutorial-Exercise-1" href="#RPN-Answer-1">2.7.1 RPN Tutorial Exercise 1</a></li>
      <li><a name="toc-RPN-Tutorial-Exercise-2" href="#RPN-Answer-2">2.7.2 RPN Tutorial Exercise 2</a></li>
      <li><a name="toc-RPN-Tutorial-Exercise-3" href="#RPN-Answer-3">2.7.3 RPN Tutorial Exercise 3</a></li>
      <li><a name="toc-RPN-Tutorial-Exercise-4" href="#RPN-Answer-4">2.7.4 RPN Tutorial Exercise 4</a></li>
      <li><a name="toc-Algebraic-Entry-Tutorial-Exercise-1" href="#Algebraic-Answer-1">2.7.5 Algebraic Entry Tutorial Exercise 1</a></li>
      <li><a name="toc-Algebraic-Entry-Tutorial-Exercise-2" href="#Algebraic-Answer-2">2.7.6 Algebraic Entry Tutorial Exercise 2</a></li>
      <li><a name="toc-Algebraic-Entry-Tutorial-Exercise-3" href="#Algebraic-Answer-3">2.7.7 Algebraic Entry Tutorial Exercise 3</a></li>
      <li><a name="toc-Modes-Tutorial-Exercise-1" href="#Modes-Answer-1">2.7.8 Modes Tutorial Exercise 1</a></li>
      <li><a name="toc-Modes-Tutorial-Exercise-2" href="#Modes-Answer-2">2.7.9 Modes Tutorial Exercise 2</a></li>
      <li><a name="toc-Modes-Tutorial-Exercise-3" href="#Modes-Answer-3">2.7.10 Modes Tutorial Exercise 3</a></li>
      <li><a name="toc-Modes-Tutorial-Exercise-4" href="#Modes-Answer-4">2.7.11 Modes Tutorial Exercise 4</a></li>
      <li><a name="toc-Arithmetic-Tutorial-Exercise-1" href="#Arithmetic-Answer-1">2.7.12 Arithmetic Tutorial Exercise 1</a></li>
      <li><a name="toc-Arithmetic-Tutorial-Exercise-2" href="#Arithmetic-Answer-2">2.7.13 Arithmetic Tutorial Exercise 2</a></li>
      <li><a name="toc-Vector-Tutorial-Exercise-1" href="#Vector-Answer-1">2.7.14 Vector Tutorial Exercise 1</a></li>
      <li><a name="toc-Vector-Tutorial-Exercise-2" href="#Vector-Answer-2">2.7.15 Vector Tutorial Exercise 2</a></li>
      <li><a name="toc-Matrix-Tutorial-Exercise-1" href="#Matrix-Answer-1">2.7.16 Matrix Tutorial Exercise 1</a></li>
      <li><a name="toc-Matrix-Tutorial-Exercise-2" href="#Matrix-Answer-2">2.7.17 Matrix Tutorial Exercise 2</a></li>
      <li><a name="toc-Matrix-Tutorial-Exercise-3" href="#Matrix-Answer-3">2.7.18 Matrix Tutorial Exercise 3</a></li>
      <li><a name="toc-List-Tutorial-Exercise-1" href="#List-Answer-1">2.7.19 List Tutorial Exercise 1</a></li>
      <li><a name="toc-List-Tutorial-Exercise-2" href="#List-Answer-2">2.7.20 List Tutorial Exercise 2</a></li>
      <li><a name="toc-List-Tutorial-Exercise-3" href="#List-Answer-3">2.7.21 List Tutorial Exercise 3</a></li>
      <li><a name="toc-List-Tutorial-Exercise-4" href="#List-Answer-4">2.7.22 List Tutorial Exercise 4</a></li>
      <li><a name="toc-List-Tutorial-Exercise-5" href="#List-Answer-5">2.7.23 List Tutorial Exercise 5</a></li>
      <li><a name="toc-List-Tutorial-Exercise-6" href="#List-Answer-6">2.7.24 List Tutorial Exercise 6</a></li>
      <li><a name="toc-List-Tutorial-Exercise-7" href="#List-Answer-7">2.7.25 List Tutorial Exercise 7</a></li>
      <li><a name="toc-List-Tutorial-Exercise-8" href="#List-Answer-8">2.7.26 List Tutorial Exercise 8</a></li>
      <li><a name="toc-List-Tutorial-Exercise-9" href="#List-Answer-9">2.7.27 List Tutorial Exercise 9</a></li>
      <li><a name="toc-List-Tutorial-Exercise-10" href="#List-Answer-10">2.7.28 List Tutorial Exercise 10</a></li>
      <li><a name="toc-List-Tutorial-Exercise-11" href="#List-Answer-11">2.7.29 List Tutorial Exercise 11</a></li>
      <li><a name="toc-List-Tutorial-Exercise-12" href="#List-Answer-12">2.7.30 List Tutorial Exercise 12</a></li>
      <li><a name="toc-List-Tutorial-Exercise-13" href="#List-Answer-13">2.7.31 List Tutorial Exercise 13</a></li>
      <li><a name="toc-List-Tutorial-Exercise-14" href="#List-Answer-14">2.7.32 List Tutorial Exercise 14</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-1" href="#Types-Answer-1">2.7.33 Types Tutorial Exercise 1</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-2" href="#Types-Answer-2">2.7.34 Types Tutorial Exercise 2</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-3" href="#Types-Answer-3">2.7.35 Types Tutorial Exercise 3</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-4" href="#Types-Answer-4">2.7.36 Types Tutorial Exercise 4</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-5" href="#Types-Answer-5">2.7.37 Types Tutorial Exercise 5</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-6" href="#Types-Answer-6">2.7.38 Types Tutorial Exercise 6</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-7" href="#Types-Answer-7">2.7.39 Types Tutorial Exercise 7</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-8" href="#Types-Answer-8">2.7.40 Types Tutorial Exercise 8</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-9" href="#Types-Answer-9">2.7.41 Types Tutorial Exercise 9</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-10" href="#Types-Answer-10">2.7.42 Types Tutorial Exercise 10</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-11" href="#Types-Answer-11">2.7.43 Types Tutorial Exercise 11</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-12" href="#Types-Answer-12">2.7.44 Types Tutorial Exercise 12</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-13" href="#Types-Answer-13">2.7.45 Types Tutorial Exercise 13</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-14" href="#Types-Answer-14">2.7.46 Types Tutorial Exercise 14</a></li>
      <li><a name="toc-Types-Tutorial-Exercise-15" href="#Types-Answer-15">2.7.47 Types Tutorial Exercise 15</a></li>
      <li><a name="toc-Algebra-Tutorial-Exercise-1" href="#Algebra-Answer-1">2.7.48 Algebra Tutorial Exercise 1</a></li>
      <li><a name="toc-Algebra-Tutorial-Exercise-2" href="#Algebra-Answer-2">2.7.49 Algebra Tutorial Exercise 2</a></li>
      <li><a name="toc-Algebra-Tutorial-Exercise-3" href="#Algebra-Answer-3">2.7.50 Algebra Tutorial Exercise 3</a></li>
      <li><a name="toc-Algebra-Tutorial-Exercise-4" href="#Algebra-Answer-4">2.7.51 Algebra Tutorial Exercise 4</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-1" href="#Rewrites-Answer-1">2.7.52 Rewrites Tutorial Exercise 1</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-2" href="#Rewrites-Answer-2">2.7.53 Rewrites Tutorial Exercise 2</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-3" href="#Rewrites-Answer-3">2.7.54 Rewrites Tutorial Exercise 3</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-4" href="#Rewrites-Answer-4">2.7.55 Rewrites Tutorial Exercise 4</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-5" href="#Rewrites-Answer-5">2.7.56 Rewrites Tutorial Exercise 5</a></li>
      <li><a name="toc-Rewrites-Tutorial-Exercise-6" href="#Rewrites-Answer-6">2.7.57 Rewrites Tutorial Exercise 6</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-1" href="#Programming-Answer-1">2.7.58 Programming Tutorial Exercise 1</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-2" href="#Programming-Answer-2">2.7.59 Programming Tutorial Exercise 2</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-3" href="#Programming-Answer-3">2.7.60 Programming Tutorial Exercise 3</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-4" href="#Programming-Answer-4">2.7.61 Programming Tutorial Exercise 4</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-5" href="#Programming-Answer-5">2.7.62 Programming Tutorial Exercise 5</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-6" href="#Programming-Answer-6">2.7.63 Programming Tutorial Exercise 6</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-7" href="#Programming-Answer-7">2.7.64 Programming Tutorial Exercise 7</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-8" href="#Programming-Answer-8">2.7.65 Programming Tutorial Exercise 8</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-9" href="#Programming-Answer-9">2.7.66 Programming Tutorial Exercise 9</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-10" href="#Programming-Answer-10">2.7.67 Programming Tutorial Exercise 10</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-11" href="#Programming-Answer-11">2.7.68 Programming Tutorial Exercise 11</a></li>
      <li><a name="toc-Programming-Tutorial-Exercise-12" href="#Programming-Answer-12">2.7.69 Programming Tutorial Exercise 12</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-Introduction-1" href="#Introduction">3 Introduction</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Commands-1" href="#Basic-Commands">3.1 Basic Commands</a></li>
    <li><a name="toc-Help-Commands-1" href="#Help-Commands">3.2 Help Commands</a></li>
    <li><a name="toc-Stack-Basics-1" href="#Stack-Basics">3.3 Stack Basics</a></li>
    <li><a name="toc-Numeric-Entry-1" href="#Numeric-Entry">3.4 Numeric Entry</a></li>
    <li><a name="toc-Algebraic-Entry-1" href="#Algebraic-Entry">3.5 Algebraic Entry</a></li>
    <li><a name="toc-_0060_0060Quick-Calculator_0027_0027-Mode" href="#Quick-Calculator">3.6 &ldquo;Quick Calculator&rdquo; Mode</a></li>
    <li><a name="toc-Numeric-Prefix-Arguments" href="#Prefix-Arguments">3.7 Numeric Prefix Arguments</a></li>
    <li><a name="toc-Undoing-Mistakes" href="#Undo">3.8 Undoing Mistakes</a></li>
    <li><a name="toc-Error-Messages-1" href="#Error-Messages">3.9 Error Messages</a></li>
    <li><a name="toc-Multiple-Calculators-1" href="#Multiple-Calculators">3.10 Multiple Calculators</a></li>
    <li><a name="toc-Troubleshooting-Commands-1" href="#Troubleshooting-Commands">3.11 Troubleshooting Commands</a>
    <ul class="no-bullet">
      <li><a name="toc-Autoloading-Problems-1" href="#Autoloading-Problems">3.11.1 Autoloading Problems</a></li>
      <li><a name="toc-Recursion-Depth-1" href="#Recursion-Depth">3.11.2 Recursion Depth</a></li>
      <li><a name="toc-Caches-1" href="#Caches">3.11.3 Caches</a></li>
      <li><a name="toc-Debugging-Calc-1" href="#Debugging-Calc">3.11.4 Debugging Calc</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-Data-Types-1" href="#Data-Types">4 Data Types</a>
  <ul class="no-bullet">
    <li><a name="toc-Integers-1" href="#Integers">4.1 Integers</a></li>
    <li><a name="toc-Fractions-1" href="#Fractions">4.2 Fractions</a></li>
    <li><a name="toc-Floats-1" href="#Floats">4.3 Floats</a></li>
    <li><a name="toc-Complex-Numbers-1" href="#Complex-Numbers">4.4 Complex Numbers</a></li>
    <li><a name="toc-Infinities-1" href="#Infinities">4.5 Infinities</a></li>
    <li><a name="toc-Vectors-and-Matrices-1" href="#Vectors-and-Matrices">4.6 Vectors and Matrices</a></li>
    <li><a name="toc-Strings-1" href="#Strings">4.7 Strings</a></li>
    <li><a name="toc-HMS-Forms-1" href="#HMS-Forms">4.8 HMS Forms</a></li>
    <li><a name="toc-Date-Forms-1" href="#Date-Forms">4.9 Date Forms</a></li>
    <li><a name="toc-Modulo-Forms-1" href="#Modulo-Forms">4.10 Modulo Forms</a></li>
    <li><a name="toc-Error-Forms-1" href="#Error-Forms">4.11 Error Forms</a></li>
    <li><a name="toc-Interval-Forms-1" href="#Interval-Forms">4.12 Interval Forms</a></li>
    <li><a name="toc-Incomplete-Objects-1" href="#Incomplete-Objects">4.13 Incomplete Objects</a></li>
    <li><a name="toc-Variables-1" href="#Variables">4.14 Variables</a></li>
    <li><a name="toc-Formulas-1" href="#Formulas">4.15 Formulas</a></li>
  </ul></li>
  <li><a name="toc-Stack-and-Trail-Commands" href="#Stack-and-Trail">5 Stack and Trail Commands</a>
  <ul class="no-bullet">
    <li><a name="toc-Stack-Manipulation-Commands" href="#Stack-Manipulation">5.1 Stack Manipulation Commands</a></li>
    <li><a name="toc-Editing-Stack-Entries-1" href="#Editing-Stack-Entries">5.2 Editing Stack Entries</a></li>
    <li><a name="toc-Trail-Commands-1" href="#Trail-Commands">5.3 Trail Commands</a></li>
    <li><a name="toc-Keep-Arguments-1" href="#Keep-Arguments">5.4 Keep Arguments</a></li>
  </ul></li>
  <li><a name="toc-Mode-Settings-1" href="#Mode-Settings">6 Mode Settings</a>
  <ul class="no-bullet">
    <li><a name="toc-General-Mode-Commands-1" href="#General-Mode-Commands">6.1 General Mode Commands</a></li>
    <li><a name="toc-Precision-1" href="#Precision">6.2 Precision</a></li>
    <li><a name="toc-Inverse-and-Hyperbolic-Flags" href="#Inverse-and-Hyperbolic">6.3 Inverse and Hyperbolic Flags</a></li>
    <li><a name="toc-Calculation-Modes-1" href="#Calculation-Modes">6.4 Calculation Modes</a>
    <ul class="no-bullet">
      <li><a name="toc-Angular-Modes-1" href="#Angular-Modes">6.4.1 Angular Modes</a></li>
      <li><a name="toc-Polar-Mode-1" href="#Polar-Mode">6.4.2 Polar Mode</a></li>
      <li><a name="toc-Fraction-Mode-1" href="#Fraction-Mode">6.4.3 Fraction Mode</a></li>
      <li><a name="toc-Infinite-Mode-1" href="#Infinite-Mode">6.4.4 Infinite Mode</a></li>
      <li><a name="toc-Symbolic-Mode-1" href="#Symbolic-Mode">6.4.5 Symbolic Mode</a></li>
      <li><a name="toc-Matrix-and-Scalar-Modes" href="#Matrix-Mode">6.4.6 Matrix and Scalar Modes</a></li>
      <li><a name="toc-Automatic-Recomputation-1" href="#Automatic-Recomputation">6.4.7 Automatic Recomputation</a></li>
      <li><a name="toc-Working-Messages" href="#Working-Message">6.4.8 Working Messages</a></li>
    </ul></li>
    <li><a name="toc-Simplification-Modes-1" href="#Simplification-Modes">6.5 Simplification Modes</a></li>
    <li><a name="toc-Declarations-1" href="#Declarations">6.6 Declarations</a>
    <ul class="no-bullet">
      <li><a name="toc-Declaration-Basics-1" href="#Declaration-Basics">6.6.1 Declaration Basics</a></li>
      <li><a name="toc-Kinds-of-Declarations-1" href="#Kinds-of-Declarations">6.6.2 Kinds of Declarations</a></li>
      <li><a name="toc-Functions-for-Declarations-1" href="#Functions-for-Declarations">6.6.3 Functions for Declarations</a></li>
    </ul></li>
    <li><a name="toc-Display-Modes-1" href="#Display-Modes">6.7 Display Modes</a>
    <ul class="no-bullet">
      <li><a name="toc-Radix-Modes-1" href="#Radix-Modes">6.7.1 Radix Modes</a></li>
      <li><a name="toc-Grouping-Digits-1" href="#Grouping-Digits">6.7.2 Grouping Digits</a></li>
      <li><a name="toc-Float-Formats-1" href="#Float-Formats">6.7.3 Float Formats</a></li>
      <li><a name="toc-Complex-Formats-1" href="#Complex-Formats">6.7.4 Complex Formats</a></li>
      <li><a name="toc-Fraction-Formats-1" href="#Fraction-Formats">6.7.5 Fraction Formats</a></li>
      <li><a name="toc-HMS-Formats-1" href="#HMS-Formats">6.7.6 HMS Formats</a></li>
      <li><a name="toc-Date-Formats-1" href="#Date-Formats">6.7.7 Date Formats</a>
      <ul class="no-bullet">
        <li><a name="toc-ISO-8601-1" href="#ISO-8601">6.7.7.1 ISO 8601</a></li>
        <li><a name="toc-Date-Formatting-Codes-1" href="#Date-Formatting-Codes">6.7.7.2 Date Formatting Codes</a></li>
        <li><a name="toc-Free_002dForm-Dates-1" href="#Free_002dForm-Dates">6.7.7.3 Free-Form Dates</a></li>
        <li><a name="toc-Standard-Date-Formats-1" href="#Standard-Date-Formats">6.7.7.4 Standard Date Formats</a></li>
      </ul></li>
      <li><a name="toc-Truncating-the-Stack-1" href="#Truncating-the-Stack">6.7.8 Truncating the Stack</a></li>
      <li><a name="toc-Justification-1" href="#Justification">6.7.9 Justification</a></li>
      <li><a name="toc-Labels-1" href="#Labels">6.7.10 Labels</a></li>
    </ul></li>
    <li><a name="toc-Language-Modes-1" href="#Language-Modes">6.8 Language Modes</a>
    <ul class="no-bullet">
      <li><a name="toc-Normal-Language-Modes-1" href="#Normal-Language-Modes">6.8.1 Normal Language Modes</a></li>
      <li><a name="toc-C_002c-FORTRAN_002c-and-Pascal-Modes" href="#C-FORTRAN-Pascal">6.8.2 C, FORTRAN, and Pascal Modes</a></li>
      <li><a name="toc-TeX-and-LaTeX-Language-Modes-1" href="#TeX-and-LaTeX-Language-Modes">6.8.3 TeX and LaTeX Language Modes</a></li>
      <li><a name="toc-Eqn-Language-Mode-1" href="#Eqn-Language-Mode">6.8.4 Eqn Language Mode</a></li>
      <li><a name="toc-Yacas-Language-Mode-1" href="#Yacas-Language-Mode">6.8.5 Yacas Language Mode</a></li>
      <li><a name="toc-Maxima-Language-Mode-1" href="#Maxima-Language-Mode">6.8.6 Maxima Language Mode</a></li>
      <li><a name="toc-Giac-Language-Mode-1" href="#Giac-Language-Mode">6.8.7 Giac Language Mode</a></li>
      <li><a name="toc-Mathematica-Language-Mode-1" href="#Mathematica-Language-Mode">6.8.8 Mathematica Language Mode</a></li>
      <li><a name="toc-Maple-Language-Mode-1" href="#Maple-Language-Mode">6.8.9 Maple Language Mode</a></li>
      <li><a name="toc-Compositions-1" href="#Compositions">6.8.10 Compositions</a>
      <ul class="no-bullet">
        <li><a name="toc-Composition-Basics-1" href="#Composition-Basics">6.8.10.1 Composition Basics</a></li>
        <li><a name="toc-Horizontal-Compositions-1" href="#Horizontal-Compositions">6.8.10.2 Horizontal Compositions</a></li>
        <li><a name="toc-Vertical-Compositions-1" href="#Vertical-Compositions">6.8.10.3 Vertical Compositions</a></li>
        <li><a name="toc-Other-Compositions-1" href="#Other-Compositions">6.8.10.4 Other Compositions</a></li>
        <li><a name="toc-Information-about-Compositions-1" href="#Information-about-Compositions">6.8.10.5 Information about Compositions</a></li>
        <li><a name="toc-User_002dDefined-Compositions-1" href="#User_002dDefined-Compositions">6.8.10.6 User-Defined Compositions</a></li>
      </ul></li>
      <li><a name="toc-Syntax-Tables-1" href="#Syntax-Tables">6.8.11 Syntax Tables</a>
      <ul class="no-bullet">
        <li><a name="toc-Syntax-Table-Basics-1" href="#Syntax-Table-Basics">6.8.11.1 Syntax Table Basics</a></li>
        <li><a name="toc-Precedence" href="#Precedence-in-Syntax-Tables">6.8.11.2 Precedence</a></li>
        <li><a name="toc-Advanced-Syntax-Patterns-1" href="#Advanced-Syntax-Patterns">6.8.11.3 Advanced Syntax Patterns</a></li>
        <li><a name="toc-Conditional-Syntax-Rules-1" href="#Conditional-Syntax-Rules">6.8.11.4 Conditional Syntax Rules</a></li>
      </ul></li>
    </ul></li>
    <li><a name="toc-The-Modes-Variable" href="#Modes-Variable">6.9 The <code>Modes</code> Variable</a></li>
    <li><a name="toc-The-Calc-Mode-Line" href="#Calc-Mode-Line">6.10 The Calc Mode Line</a></li>
  </ul></li>
  <li><a name="toc-Arithmetic-Functions" href="#Arithmetic">7 Arithmetic Functions</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Arithmetic-1" href="#Basic-Arithmetic">7.1 Basic Arithmetic</a></li>
    <li><a name="toc-Integer-Truncation-1" href="#Integer-Truncation">7.2 Integer Truncation</a></li>
    <li><a name="toc-Complex-Number-Functions-1" href="#Complex-Number-Functions">7.3 Complex Number Functions</a></li>
    <li><a name="toc-Conversions-1" href="#Conversions">7.4 Conversions</a></li>
    <li><a name="toc-Date-Arithmetic-1" href="#Date-Arithmetic">7.5 Date Arithmetic</a>
    <ul class="no-bullet">
      <li><a name="toc-Date-Conversions-1" href="#Date-Conversions">7.5.1 Date Conversions</a></li>
      <li><a name="toc-Date-Functions-1" href="#Date-Functions">7.5.2 Date Functions</a></li>
      <li><a name="toc-Business-Days-1" href="#Business-Days">7.5.3 Business Days</a></li>
      <li><a name="toc-Time-Zones-1" href="#Time-Zones">7.5.4 Time Zones</a></li>
    </ul></li>
    <li><a name="toc-Financial-Functions-1" href="#Financial-Functions">7.6 Financial Functions</a>
    <ul class="no-bullet">
      <li><a name="toc-Percentages-1" href="#Percentages">7.6.1 Percentages</a></li>
      <li><a name="toc-Future-Value-1" href="#Future-Value">7.6.2 Future Value</a></li>
      <li><a name="toc-Present-Value-1" href="#Present-Value">7.6.3 Present Value</a></li>
      <li><a name="toc-Related-Financial-Functions-1" href="#Related-Financial-Functions">7.6.4 Related Financial Functions</a></li>
      <li><a name="toc-Depreciation-Functions-1" href="#Depreciation-Functions">7.6.5 Depreciation Functions</a></li>
      <li><a name="toc-Definitions" href="#Definitions-of-Financial-Functions">7.6.6 Definitions</a></li>
    </ul></li>
    <li><a name="toc-Binary-Number-Functions" href="#Binary-Functions">7.7 Binary Number Functions</a></li>
  </ul></li>
  <li><a name="toc-Scientific-Functions-1" href="#Scientific-Functions">8 Scientific Functions</a>
  <ul class="no-bullet">
    <li><a name="toc-Logarithmic-Functions-1" href="#Logarithmic-Functions">8.1 Logarithmic Functions</a></li>
    <li><a name="toc-Trigonometric_002fHyperbolic-Functions" href="#Trigonometric-and-Hyperbolic-Functions">8.2 Trigonometric/Hyperbolic Functions</a></li>
    <li><a name="toc-Advanced-Mathematical-Functions" href="#Advanced-Math-Functions">8.3 Advanced Mathematical Functions</a></li>
    <li><a name="toc-Branch-Cuts-and-Principal-Values" href="#Branch-Cuts">8.4 Branch Cuts and Principal Values</a></li>
    <li><a name="toc-Random-Numbers-1" href="#Random-Numbers">8.5 Random Numbers</a>
    <ul class="no-bullet">
      <li><a name="toc-Random-Number-Generator-1" href="#Random-Number-Generator">8.5.1 Random Number Generator</a></li>
    </ul></li>
    <li><a name="toc-Combinatorial-Functions-1" href="#Combinatorial-Functions">8.6 Combinatorial Functions</a></li>
    <li><a name="toc-Probability-Distribution-Functions-1" href="#Probability-Distribution-Functions">8.7 Probability Distribution Functions</a></li>
  </ul></li>
  <li><a name="toc-Vector_002fMatrix-Functions" href="#Matrix-Functions">9 Vector/Matrix Functions</a>
  <ul class="no-bullet">
    <li><a name="toc-Packing-and-Unpacking-1" href="#Packing-and-Unpacking">9.1 Packing and Unpacking</a></li>
    <li><a name="toc-Building-Vectors-1" href="#Building-Vectors">9.2 Building Vectors</a></li>
    <li><a name="toc-Extracting-Vector-Elements" href="#Extracting-Elements">9.3 Extracting Vector Elements</a></li>
    <li><a name="toc-Manipulating-Vectors-1" href="#Manipulating-Vectors">9.4 Manipulating Vectors</a></li>
    <li><a name="toc-Vector-and-Matrix-Arithmetic-1" href="#Vector-and-Matrix-Arithmetic">9.5 Vector and Matrix Arithmetic</a></li>
    <li><a name="toc-Set-Operations-using-Vectors" href="#Set-Operations">9.6 Set Operations using Vectors</a></li>
    <li><a name="toc-Statistical-Operations-on-Vectors" href="#Statistical-Operations">9.7 Statistical Operations on Vectors</a>
    <ul class="no-bullet">
      <li><a name="toc-Single_002dVariable-Statistics-1" href="#Single_002dVariable-Statistics">9.7.1 Single-Variable Statistics</a></li>
      <li><a name="toc-Paired_002dSample-Statistics-1" href="#Paired_002dSample-Statistics">9.7.2 Paired-Sample Statistics</a></li>
    </ul></li>
    <li><a name="toc-Reducing-and-Mapping-Vectors" href="#Reducing-and-Mapping">9.8 Reducing and Mapping Vectors</a>
    <ul class="no-bullet">
      <li><a name="toc-Specifying-Operators-1" href="#Specifying-Operators">9.8.1 Specifying Operators</a></li>
      <li><a name="toc-Mapping-1" href="#Mapping">9.8.2 Mapping</a></li>
      <li><a name="toc-Reducing-1" href="#Reducing">9.8.3 Reducing</a></li>
      <li><a name="toc-Nesting-and-Fixed-Points-1" href="#Nesting-and-Fixed-Points">9.8.4 Nesting and Fixed Points</a></li>
      <li><a name="toc-Generalized-Products-1" href="#Generalized-Products">9.8.5 Generalized Products</a></li>
    </ul></li>
    <li><a name="toc-Vector-and-Matrix-Display-Formats" href="#Vector-and-Matrix-Formats">9.9 Vector and Matrix Display Formats</a></li>
  </ul></li>
  <li><a name="toc-Algebra-1" href="#Algebra">10 Algebra</a>
  <ul class="no-bullet">
    <li><a name="toc-Selecting-Sub_002dFormulas" href="#Selecting-Subformulas">10.1 Selecting Sub-Formulas</a>
    <ul class="no-bullet">
      <li><a name="toc-Making-Selections-1" href="#Making-Selections">10.1.1 Making Selections</a></li>
      <li><a name="toc-Changing-Selections-1" href="#Changing-Selections">10.1.2 Changing Selections</a></li>
      <li><a name="toc-Displaying-Selections-1" href="#Displaying-Selections">10.1.3 Displaying Selections</a></li>
      <li><a name="toc-Operating-on-Selections-1" href="#Operating-on-Selections">10.1.4 Operating on Selections</a></li>
      <li><a name="toc-Rearranging-Formulas-using-Selections" href="#Rearranging-with-Selections">10.1.5 Rearranging Formulas using Selections</a></li>
    </ul></li>
    <li><a name="toc-Algebraic-Manipulation-1" href="#Algebraic-Manipulation">10.2 Algebraic Manipulation</a></li>
    <li><a name="toc-Simplifying-Formulas-1" href="#Simplifying-Formulas">10.3 Simplifying Formulas</a>
    <ul class="no-bullet">
      <li><a name="toc-Basic-Simplifications-1" href="#Basic-Simplifications">10.3.1 Basic Simplifications</a></li>
      <li><a name="toc-Algebraic-Simplifications-1" href="#Algebraic-Simplifications">10.3.2 Algebraic Simplifications</a></li>
      <li><a name="toc-_0060_0060Unsafe_0027_0027-Simplifications" href="#Unsafe-Simplifications">10.3.3 &ldquo;Unsafe&rdquo; Simplifications</a></li>
      <li><a name="toc-Simplification-of-Units-1" href="#Simplification-of-Units">10.3.4 Simplification of Units</a></li>
    </ul></li>
    <li><a name="toc-Polynomials-1" href="#Polynomials">10.4 Polynomials</a></li>
    <li><a name="toc-Calculus-1" href="#Calculus">10.5 Calculus</a>
    <ul class="no-bullet">
      <li><a name="toc-Differentiation-1" href="#Differentiation">10.5.1 Differentiation</a></li>
      <li><a name="toc-Integration-1" href="#Integration">10.5.2 Integration</a></li>
      <li><a name="toc-Customizing-the-Integrator-1" href="#Customizing-the-Integrator">10.5.3 Customizing the Integrator</a></li>
      <li><a name="toc-Numerical-Integration-1" href="#Numerical-Integration">10.5.4 Numerical Integration</a></li>
      <li><a name="toc-Taylor-Series-1" href="#Taylor-Series">10.5.5 Taylor Series</a></li>
    </ul></li>
    <li><a name="toc-Solving-Equations-1" href="#Solving-Equations">10.6 Solving Equations</a>
    <ul class="no-bullet">
      <li><a name="toc-Multiple-Solutions-1" href="#Multiple-Solutions">10.6.1 Multiple Solutions</a></li>
      <li><a name="toc-Solving-Systems-of-Equations-1" href="#Solving-Systems-of-Equations">10.6.2 Solving Systems of Equations</a></li>
      <li><a name="toc-Decomposing-Polynomials-1" href="#Decomposing-Polynomials">10.6.3 Decomposing Polynomials</a></li>
    </ul></li>
    <li><a name="toc-Numerical-Solutions-1" href="#Numerical-Solutions">10.7 Numerical Solutions</a>
    <ul class="no-bullet">
      <li><a name="toc-Root-Finding-1" href="#Root-Finding">10.7.1 Root Finding</a></li>
      <li><a name="toc-Minimization-1" href="#Minimization">10.7.2 Minimization</a></li>
      <li><a name="toc-Systems-of-Equations" href="#Numerical-Systems-of-Equations">10.7.3 Systems of Equations</a></li>
    </ul></li>
    <li><a name="toc-Curve-Fitting-1" href="#Curve-Fitting">10.8 Curve Fitting</a>
    <ul class="no-bullet">
      <li><a name="toc-Linear-Fits-1" href="#Linear-Fits">10.8.1 Linear Fits</a></li>
      <li><a name="toc-Polynomial-and-Multilinear-Fits-1" href="#Polynomial-and-Multilinear-Fits">10.8.2 Polynomial and Multilinear Fits</a></li>
      <li><a name="toc-Error-Estimates-for-Fits-1" href="#Error-Estimates-for-Fits">10.8.3 Error Estimates for Fits</a></li>
      <li><a name="toc-Standard-Nonlinear-Models-1" href="#Standard-Nonlinear-Models">10.8.4 Standard Nonlinear Models</a></li>
      <li><a name="toc-Curve-Fitting-Details-1" href="#Curve-Fitting-Details">10.8.5 Curve Fitting Details</a></li>
      <li><a name="toc-Polynomial-Interpolation" href="#Interpolation">10.8.6 Polynomial Interpolation</a></li>
    </ul></li>
    <li><a name="toc-Summations-1" href="#Summations">10.9 Summations</a></li>
    <li><a name="toc-Logical-Operations-1" href="#Logical-Operations">10.10 Logical Operations</a></li>
    <li><a name="toc-Rewrite-Rules-2" href="#Rewrite-Rules">10.11 Rewrite Rules</a>
    <ul class="no-bullet">
      <li><a name="toc-Entering-Rewrite-Rules-1" href="#Entering-Rewrite-Rules">10.11.1 Entering Rewrite Rules</a></li>
      <li><a name="toc-Basic-Rewrite-Rules-1" href="#Basic-Rewrite-Rules">10.11.2 Basic Rewrite Rules</a></li>
      <li><a name="toc-Conditional-Rewrite-Rules-1" href="#Conditional-Rewrite-Rules">10.11.3 Conditional Rewrite Rules</a></li>
      <li><a name="toc-Algebraic-Properties-of-Rewrite-Rules-1" href="#Algebraic-Properties-of-Rewrite-Rules">10.11.4 Algebraic Properties of Rewrite Rules</a></li>
      <li><a name="toc-Other-Features-of-Rewrite-Rules-1" href="#Other-Features-of-Rewrite-Rules">10.11.5 Other Features of Rewrite Rules</a></li>
      <li><a name="toc-Composing-Patterns-in-Rewrite-Rules-1" href="#Composing-Patterns-in-Rewrite-Rules">10.11.6 Composing Patterns in Rewrite Rules</a></li>
      <li><a name="toc-Nested-Formulas-with-Rewrite-Rules-1" href="#Nested-Formulas-with-Rewrite-Rules">10.11.7 Nested Formulas with Rewrite Rules</a></li>
      <li><a name="toc-Multi_002dPhase-Rewrite-Rules-1" href="#Multi_002dPhase-Rewrite-Rules">10.11.8 Multi-Phase Rewrite Rules</a></li>
      <li><a name="toc-Selections-with-Rewrite-Rules-1" href="#Selections-with-Rewrite-Rules">10.11.9 Selections with Rewrite Rules</a></li>
      <li><a name="toc-Matching-Commands-1" href="#Matching-Commands">10.11.10 Matching Commands</a></li>
      <li><a name="toc-Automatic-Rewrites-1" href="#Automatic-Rewrites">10.11.11 Automatic Rewrites</a></li>
      <li><a name="toc-Debugging-Rewrites-1" href="#Debugging-Rewrites">10.11.12 Debugging Rewrites</a></li>
      <li><a name="toc-Examples-of-Rewrite-Rules-1" href="#Examples-of-Rewrite-Rules">10.11.13 Examples of Rewrite Rules</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-Operating-on-Units" href="#Units">11 Operating on Units</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Operations-on-Units-1" href="#Basic-Operations-on-Units">11.1 Basic Operations on Units</a></li>
    <li><a name="toc-The-Units-Table-1" href="#The-Units-Table">11.2 The Units Table</a></li>
    <li><a name="toc-Predefined-Units-1" href="#Predefined-Units">11.3 Predefined Units</a></li>
    <li><a name="toc-User_002dDefined-Units-1" href="#User_002dDefined-Units">11.4 User-Defined Units</a></li>
    <li><a name="toc-Logarithmic-Units-1" href="#Logarithmic-Units">11.5 Logarithmic Units</a></li>
    <li><a name="toc-Musical-Notes-1" href="#Musical-Notes">11.6 Musical Notes</a></li>
  </ul></li>
  <li><a name="toc-Storing-and-Recalling" href="#Store-and-Recall">12 Storing and Recalling</a>
  <ul class="no-bullet">
    <li><a name="toc-Storing-Variables-1" href="#Storing-Variables">12.1 Storing Variables</a></li>
    <li><a name="toc-Recalling-Variables-1" href="#Recalling-Variables">12.2 Recalling Variables</a></li>
    <li><a name="toc-Other-Operations-on-Variables" href="#Operations-on-Variables">12.3 Other Operations on Variables</a></li>
    <li><a name="toc-The-Let-Command" href="#Let-Command">12.4 The Let Command</a></li>
    <li><a name="toc-The-Evaluates_002dTo-Operator" href="#Evaluates_002dTo-Operator">12.5 The Evaluates-To Operator</a></li>
  </ul></li>
  <li><a name="toc-Graphics-1" href="#Graphics">13 Graphics</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Graphics-1" href="#Basic-Graphics">13.1 Basic Graphics</a></li>
    <li><a name="toc-Three_002dDimensional-Graphics" href="#Three-Dimensional-Graphics">13.2 Three-Dimensional Graphics</a></li>
    <li><a name="toc-Managing-Curves-1" href="#Managing-Curves">13.3 Managing Curves</a></li>
    <li><a name="toc-Graphics-Options-1" href="#Graphics-Options">13.4 Graphics Options</a></li>
    <li><a name="toc-Graphical-Devices" href="#Devices">13.5 Graphical Devices</a></li>
  </ul></li>
  <li><a name="toc-Kill-and-Yank-Functions" href="#Kill-and-Yank">14 Kill and Yank Functions</a>
  <ul class="no-bullet">
    <li><a name="toc-Killing-from-the-Stack" href="#Killing-From-Stack">14.1 Killing from the Stack</a></li>
    <li><a name="toc-Yanking-into-the-Stack" href="#Yanking-Into-Stack">14.2 Yanking into the Stack</a></li>
    <li><a name="toc-Saving-into-Registers" href="#Saving-Into-Registers">14.3 Saving into Registers</a></li>
    <li><a name="toc-Inserting-from-Registers" href="#Inserting-From-Registers">14.4 Inserting from Registers</a></li>
    <li><a name="toc-Grabbing-from-Other-Buffers" href="#Grabbing-From-Buffers">14.5 Grabbing from Other Buffers</a></li>
    <li><a name="toc-Yanking-into-Other-Buffers" href="#Yanking-Into-Buffers">14.6 Yanking into Other Buffers</a></li>
    <li><a name="toc-X-Cut-and-Paste-1" href="#X-Cut-and-Paste">14.7 X Cut and Paste</a></li>
  </ul></li>
  <li><a name="toc-Keypad-Mode-1" href="#Keypad-Mode">15 Keypad Mode</a>
  <ul class="no-bullet">
    <li><a name="toc-Main-Menu" href="#Keypad-Main-Menu">15.1 Main Menu</a></li>
    <li><a name="toc-Functions-Menu" href="#Keypad-Functions-Menu">15.2 Functions Menu</a></li>
    <li><a name="toc-Binary-Menu" href="#Keypad-Binary-Menu">15.3 Binary Menu</a></li>
    <li><a name="toc-Vectors-Menu" href="#Keypad-Vectors-Menu">15.4 Vectors Menu</a></li>
    <li><a name="toc-Modes-Menu" href="#Keypad-Modes-Menu">15.5 Modes Menu</a></li>
  </ul></li>
  <li><a name="toc-Embedded-Mode-1" href="#Embedded-Mode">16 Embedded Mode</a>
  <ul class="no-bullet">
    <li><a name="toc-Basic-Embedded-Mode-1" href="#Basic-Embedded-Mode">16.1 Basic Embedded Mode</a></li>
    <li><a name="toc-More-About-Embedded-Mode-1" href="#More-About-Embedded-Mode">16.2 More About Embedded Mode</a></li>
    <li><a name="toc-Assignments-in-Embedded-Mode-1" href="#Assignments-in-Embedded-Mode">16.3 Assignments in Embedded Mode</a></li>
    <li><a name="toc-Mode-Settings-in-Embedded-Mode-1" href="#Mode-Settings-in-Embedded-Mode">16.4 Mode Settings in Embedded Mode</a></li>
    <li><a name="toc-Customizing-Embedded-Mode-1" href="#Customizing-Embedded-Mode">16.5 Customizing Embedded Mode</a></li>
  </ul></li>
  <li><a name="toc-Programming-1" href="#Programming">17 Programming</a>
  <ul class="no-bullet">
    <li><a name="toc-Creating-User-Keys-1" href="#Creating-User-Keys">17.1 Creating User Keys</a></li>
    <li><a name="toc-Programming-with-Keyboard-Macros" href="#Keyboard-Macros">17.2 Programming with Keyboard Macros</a>
    <ul class="no-bullet">
      <li><a name="toc-Naming-Keyboard-Macros-1" href="#Naming-Keyboard-Macros">17.2.1 Naming Keyboard Macros</a></li>
      <li><a name="toc-Conditionals-in-Keyboard-Macros" href="#Conditionals-in-Macros">17.2.2 Conditionals in Keyboard Macros</a></li>
      <li><a name="toc-Loops-in-Keyboard-Macros" href="#Loops-in-Macros">17.2.3 Loops in Keyboard Macros</a></li>
      <li><a name="toc-Local-Values-in-Macros-1" href="#Local-Values-in-Macros">17.2.4 Local Values in Macros</a></li>
      <li><a name="toc-Queries-in-Keyboard-Macros" href="#Queries-in-Macros">17.2.5 Queries in Keyboard Macros</a></li>
    </ul></li>
    <li><a name="toc-Invocation-Macros-1" href="#Invocation-Macros">17.3 Invocation Macros</a></li>
    <li><a name="toc-Programming-with-Formulas" href="#Algebraic-Definitions">17.4 Programming with Formulas</a></li>
    <li><a name="toc-Programming-with-Lisp" href="#Lisp-Definitions">17.5 Programming with Lisp</a>
    <ul class="no-bullet">
      <li><a name="toc-Defining-New-Functions" href="#Defining-Functions">17.5.1 Defining New Functions</a></li>
      <li><a name="toc-Defining-New-Simple-Commands" href="#Defining-Simple-Commands">17.5.2 Defining New Simple Commands</a></li>
      <li><a name="toc-Defining-New-Stack_002dBased-Commands" href="#Defining-Stack-Commands">17.5.3 Defining New Stack-Based Commands</a></li>
      <li><a name="toc-Argument-Qualifiers-1" href="#Argument-Qualifiers">17.5.4 Argument Qualifiers</a></li>
      <li><a name="toc-Example-Definitions-1" href="#Example-Definitions">17.5.5 Example Definitions</a>
      <ul class="no-bullet">
        <li><a name="toc-Bit_002dCounting" href="#Bit-Counting-Example">17.5.5.1 Bit-Counting</a></li>
        <li><a name="toc-The-Sine-Function" href="#Sine-Example">17.5.5.2 The Sine Function</a></li>
      </ul></li>
      <li><a name="toc-Calling-Calc-from-Your-Lisp-Programs" href="#Calling-Calc-from-Your-Programs">17.5.6 Calling Calc from Your Lisp Programs</a>
      <ul class="no-bullet">
        <li><a name="toc-Additional-Arguments-to-calc_002deval" href="#Additional-Arguments-to-calc_002deval">17.5.6.1 Additional Arguments to <code>calc-eval</code></a></li>
        <li><a name="toc-Error-Handling" href="#Error-Handling">17.5.6.2 Error Handling</a></li>
        <li><a name="toc-Numbers-Only" href="#Numbers-Only">17.5.6.3 Numbers Only</a></li>
        <li><a name="toc-Default-Modes" href="#Default-Modes">17.5.6.4 Default Modes</a></li>
        <li><a name="toc-Raw-Numbers" href="#Raw-Numbers">17.5.6.5 Raw Numbers</a></li>
        <li><a name="toc-Predicates-1" href="#Predicates-1">17.5.6.6 Predicates</a></li>
        <li><a name="toc-Variable-Values" href="#Variable-Values">17.5.6.7 Variable Values</a></li>
        <li><a name="toc-Stack-Access" href="#Stack-Access">17.5.6.8 Stack Access</a></li>
        <li><a name="toc-Keyboard-Macros-1" href="#Keyboard-Macros-1">17.5.6.9 Keyboard Macros</a></li>
        <li><a name="toc-Lisp-Evaluation" href="#Lisp-Evaluation">17.5.6.10 Lisp Evaluation</a></li>
        <li><a name="toc-Example" href="#Example">17.5.6.11 Example</a></li>
      </ul></li>
      <li><a name="toc-Calculator-Internals" href="#Internals">17.5.7 Calculator Internals</a>
      <ul class="no-bullet">
        <li><a name="toc-Data-Type-Formats-1" href="#Data-Type-Formats">17.5.7.1 Data Type Formats</a></li>
        <li><a name="toc-Interactive-Functions" href="#Interactive-Lisp-Functions">17.5.7.2 Interactive Functions</a></li>
        <li><a name="toc-Stack_002dOriented-Functions" href="#Stack-Lisp-Functions">17.5.7.3 Stack-Oriented Functions</a></li>
        <li><a name="toc-Predicates-2" href="#Predicates">17.5.7.4 Predicates</a></li>
        <li><a name="toc-Computational-Functions" href="#Computational-Lisp-Functions">17.5.7.5 Computational Functions</a></li>
        <li><a name="toc-Vector-Functions" href="#Vector-Lisp-Functions">17.5.7.6 Vector Functions</a></li>
        <li><a name="toc-Symbolic-Functions" href="#Symbolic-Lisp-Functions">17.5.7.7 Symbolic Functions</a></li>
        <li><a name="toc-I_002fO-and-Formatting-Functions" href="#Formatting-Lisp-Functions">17.5.7.8 I/O and Formatting Functions</a></li>
        <li><a name="toc-Hooks-1" href="#Hooks">17.5.7.9 Hooks</a></li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-GNU-GENERAL-PUBLIC-LICENSE" href="#Copying">Appendix A GNU GENERAL PUBLIC LICENSE</a></li>
  <li><a name="toc-GNU-Free-Documentation-License-1" href="#GNU-Free-Documentation-License">Appendix B GNU Free Documentation License</a></li>
  <li><a name="toc-Customizing-Calc-1" href="#Customizing-Calc">Appendix C Customizing Calc</a></li>
  <li><a name="toc-Reporting-Bugs-1" href="#Reporting-Bugs">Appendix D Reporting Bugs</a></li>
  <li><a name="toc-Calc-Summary" href="#Summary">Appendix E Calc Summary</a></li>
  <li><a name="toc-Index-of-Key-Sequences" href="#Key-Index">Index of Key Sequences</a></li>
  <li><a name="toc-Index-of-Calculator-Commands" href="#Command-Index">Index of Calculator Commands</a></li>
  <li><a name="toc-Index-of-Algebraic-Functions" href="#Function-Index">Index of Algebraic Functions</a></li>
  <li><a name="toc-Concept-Index-1" href="#Concept-Index">Concept Index</a></li>
  <li><a name="toc-Index-of-Variables" href="#Variable-Index">Index of Variables</a></li>
  <li><a name="toc-Index-of-Lisp-Math-Functions" href="#Lisp-Function-Index">Index of Lisp Math Functions</a></li>
</ul>
</div>


<a name="Top"></a>
<div class="header">
<p>
Next: <a href="#Getting-Started" accesskey="n" rel="next">Getting Started</a>, Previous: <a href="dir.html#Top" accesskey="p" rel="prev">(dir)</a>, Up: <a href="dir.html#Top" accesskey="u" rel="up">(dir)</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-GNU-Emacs-Calculator"></a>
<h1 class="top">The GNU Emacs Calculator</h1>

<p><em>Calc</em> is an advanced desk calculator and mathematical tool
written by Dave Gillespie that runs as part of the GNU Emacs environment.
</p>
<p>This manual, also written (mostly) by Dave Gillespie, is divided into
three major parts: &ldquo;Getting Started,&rdquo; the &ldquo;Calc Tutorial,&rdquo; and the
&ldquo;Calc Reference.&rdquo;  The Tutorial introduces all the major aspects of
Calculator use in an easy, hands-on way.  The remainder of the manual is
a complete reference to the features of the Calculator.
</p>

<p>This file documents Calc, the GNU Emacs calculator, included with
GNU Emacs 26.0.90.
</p>
<p>Copyright &copy; 1990&ndash;1991, 2001&ndash;2017 Free Software Foundation, Inc.
</p>
<blockquote>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being just &ldquo;GNU GENERAL PUBLIC LICENSE&rdquo;, with the
Front-Cover Texts being &ldquo;A GNU Manual,&rdquo; and with the Back-Cover
Texts as in (a) below.  A copy of the license is included in the section
entitled &ldquo;GNU Free Documentation License.&rdquo;
</p>
<p>(a) The FSF&rsquo;s Back-Cover Text is: &ldquo;You have the freedom to copy and
modify this GNU manual.&rdquo;
</p></blockquote>


<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Getting-Started" accesskey="1">Getting Started</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General description and overview.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Tutorial" accesskey="2">Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A step-by-step introduction for beginners.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Introduction" accesskey="3">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introduction to the Calc reference manual.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Data-Types" accesskey="4">Data Types</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Types of objects manipulated by Calc.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Stack-and-Trail" accesskey="5">Stack and Trail</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Manipulating the stack and trail buffers.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mode-Settings" accesskey="6">Mode Settings</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adjusting display format and other modes.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Arithmetic" accesskey="7">Arithmetic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Basic arithmetic functions.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Scientific-Functions" accesskey="8">Scientific Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Transcendentals and other scientific functions.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Functions" accesskey="9">Matrix Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operations on vectors and matrices.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra">Algebra</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Manipulating expressions algebraically.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Units">Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operations on numbers with units.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Store-and-Recall">Store and Recall</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Storing and recalling variables.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Graphics">Graphics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for making graphs of data.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Kill-and-Yank">Kill and Yank</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving data into and out of Calc.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Mode">Keypad Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating Calc from a keypad.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Embedded-Mode">Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Working with formulas embedded in a file.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming">Programming</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Calc as a programmable calculator.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Copying">Copying</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How you can copy and share Calc.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The license for this documentation.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Customizing-Calc">Customizing Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customizing Calc.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Reporting-Bugs">Reporting Bugs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to report bugs and make suggestions.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Summary">Summary</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Summary of Calc commands and functions.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Key-Index">Key Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The standard Calc key sequences.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Command-Index">Command Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The interactive Calc commands.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Function-Index">Function Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Functions (in algebraic formulas).
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Concept-Index">Concept Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General concepts.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Variable-Index">Variable Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables used by Calc (both user and internal).
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lisp-Function-Index">Lisp Function Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Internal Lisp math functions.
</td></tr>
</table>

<hr>
<a name="Getting-Started"></a>
<div class="header">
<p>
Next: <a href="#Tutorial" accesskey="n" rel="next">Tutorial</a>, Previous: <a href="#Top" accesskey="p" rel="prev">Top</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Getting-Started-1"></a>
<h2 class="chapter">1 Getting Started</h2>
<p>This chapter provides a general overview of Calc, the GNU Emacs
Calculator:  What it is, how to start it and how to exit from it,
and what are the various ways that it can be used.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#What-is-Calc" accesskey="1">What is Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#About-This-Manual" accesskey="2">About This Manual</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Notations-Used-in-This-Manual" accesskey="3">Notations Used in This Manual</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Demonstration-of-Calc" accesskey="4">Demonstration of Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Using-Calc" accesskey="5">Using Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#History-and-Acknowledgments" accesskey="6">History and Acknowledgments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="What-is-Calc"></a>
<div class="header">
<p>
Next: <a href="#About-This-Manual" accesskey="n" rel="next">About This Manual</a>, Previous: <a href="#Getting-Started" accesskey="p" rel="prev">Getting Started</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="What-is-Calc_003f"></a>
<h3 class="section">1.1 What is Calc?</h3>

<p><em>Calc</em> is an advanced calculator and mathematical tool that runs as
part of the GNU Emacs environment.  Very roughly based on the HP-28/48
series of calculators, its many features include:
</p>
<ul>
<li> Choice of algebraic or RPN (stack-based) entry of calculations.

</li><li> Arbitrary precision integers and floating-point numbers.

</li><li> Arithmetic on rational numbers, complex numbers (rectangular and polar),
error forms with standard deviations, open and closed intervals, vectors
and matrices, dates and times, infinities, sets, quantities with units,
and algebraic formulas.

</li><li> Mathematical operations such as logarithms and trigonometric functions.

</li><li> Programmer&rsquo;s features (bitwise operations, non-decimal numbers).

</li><li> Financial functions such as future value and internal rate of return.

</li><li> Number theoretical features such as prime factorization and arithmetic
modulo <var>m</var> for any <var>m</var>.

</li><li> Algebraic manipulation features, including symbolic calculus.

</li><li> Moving data to and from regular editing buffers.

</li><li> Embedded mode for manipulating Calc formulas and data directly
inside any editing buffer.

</li><li> Graphics using GNUPLOT, a versatile (and free) plotting program.

</li><li> Easy programming using keyboard macros, algebraic formulas,
algebraic rewrite rules, or extended Emacs Lisp.
</li></ul>

<p>Calc tries to include a little something for everyone; as a result it is
large and might be intimidating to the first-time user.  If you plan to
use Calc only as a traditional desk calculator, all you really need to
read is the &ldquo;Getting Started&rdquo; chapter of this manual and possibly the
first few sections of the tutorial.  As you become more comfortable with
the program you can learn its additional features.  Calc does not
have the scope and depth of a fully-functional symbolic math package,
but Calc has the advantages of convenience, portability, and freedom.
</p>
<hr>
<a name="About-This-Manual"></a>
<div class="header">
<p>
Next: <a href="#Notations-Used-in-This-Manual" accesskey="n" rel="next">Notations Used in This Manual</a>, Previous: <a href="#What-is-Calc" accesskey="p" rel="prev">What is Calc</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="About-This-Manual-1"></a>
<h3 class="section">1.2 About This Manual</h3>

<p>This document serves as a complete description of the GNU Emacs
Calculator.  It works both as an introduction for novices and as
a reference for experienced users.  While it helps to have some
experience with GNU Emacs in order to get the most out of Calc,
this manual ought to be readable even if you don&rsquo;t know or use Emacs
regularly.
</p>
<p>This manual is divided into three major parts: the &ldquo;Getting
Started&rdquo; chapter you are reading now, the Calc tutorial, and the Calc
reference manual.
</p>
<p>If you are in a hurry to use Calc, there is a brief &ldquo;demonstration&rdquo;
below which illustrates the major features of Calc in just a couple of
pages.  If you don&rsquo;t have time to go through the full tutorial, this
will show you everything you need to know to begin.
See <a href="#Demonstration-of-Calc">Demonstration of Calc</a>.
</p>
<p>The tutorial chapter walks you through the various parts of Calc
with lots of hands-on examples and explanations.  If you are new
to Calc and you have some time, try going through at least the
beginning of the tutorial.  The tutorial includes about 70 exercises
with answers.  These exercises give you some guided practice with
Calc, as well as pointing out some interesting and unusual ways
to use its features.
</p>
<p>The reference section discusses Calc in complete depth.  You can read
the reference from start to finish if you want to learn every aspect
of Calc.  Or, you can look in the table of contents or the Concept
Index to find the parts of the manual that discuss the things you
need to know.
</p>
<p>Every Calc keyboard command is listed in the Calc Summary, and also
in the Key Index.  Algebraic functions, <kbd>M-x</kbd> commands, and
variables also have their own indices.
</p>
<p>You can access this manual on-line at any time within Calc by pressing
the <kbd>h i</kbd> key sequence.  Outside of the Calc window, you can press
<kbd>C-x * i</kbd> to read the manual on-line.  From within Calc the command
<kbd>h t</kbd> will jump directly to the Tutorial; from outside of Calc the
command <kbd>C-x * t</kbd> will jump to the Tutorial and start Calc if
necessary.  Pressing <kbd>h s</kbd> or <kbd>C-x * s</kbd> will take you directly
to the Calc Summary.  Within Calc, you can also go to the part of the
manual describing any Calc key, function, or variable using
<kbd>h&nbsp;k</kbd><!-- /@w -->, <kbd>h f</kbd>, or <kbd>h v</kbd>, respectively.  See <a href="#Help-Commands">Help Commands</a>.
</p>
<p>The Calc manual can be printed, but because the manual is so large, you
should only make a printed copy if you really need it.  To print the
manual, you will need the TeX typesetting program (this is a free
program by Donald Knuth at Stanford University) as well as the
<samp>texindex</samp> program and <samp>texinfo.tex</samp> file, both of which can
be obtained from the FSF as part of the <code>texinfo</code> package.
To print the Calc manual in one huge tome, you will need the
Emacs source, which contains the source code to this manual,
<samp>calc.texi</samp>.  Change to the <samp>doc/misc</samp> subdirectory of the
Emacs source distribution, which contains source code for this manual,
and type <kbd>make calc.pdf</kbd>. (Don&rsquo;t worry if you get some &ldquo;overfull
box&rdquo; warnings while TeX runs.)   The result will be this entire
manual as a pdf file.
</p>
<hr>
<a name="Notations-Used-in-This-Manual"></a>
<div class="header">
<p>
Next: <a href="#Demonstration-of-Calc" accesskey="n" rel="next">Demonstration of Calc</a>, Previous: <a href="#About-This-Manual" accesskey="p" rel="prev">About This Manual</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Notations-Used-in-This-Manual-1"></a>
<h3 class="section">1.3 Notations Used in This Manual</h3>

<p>This section describes the various notations that are used
throughout the Calc manual.
</p>
<p>In keystroke sequences, uppercase letters mean you must hold down
the shift key while typing the letter.  Keys pressed with Control
held down are shown as <kbd>C-x</kbd>.  Keys pressed with Meta held down
are shown as <kbd>M-x</kbd>.  Other notations are <tt class="key">RET</tt> for the
Return key, <tt class="key">SPC</tt> for the space bar, <tt class="key">TAB</tt> for the Tab key,
<tt class="key">DEL</tt> for the Delete key, and <tt class="key">LFD</tt> for the Line-Feed key.
The <tt class="key">DEL</tt> key is called Backspace on some keyboards, it is
whatever key you would use to correct a simple typing error when
regularly using Emacs.
</p>
<p>(If you don&rsquo;t have the <tt class="key">LFD</tt> or <tt class="key">TAB</tt> keys on your keyboard,
the <kbd>C-j</kbd> and <kbd>C-i</kbd> keys are equivalent to them, respectively.
If you don&rsquo;t have a Meta key, look for Alt or Extend Char.  You can
also press <tt class="key">ESC</tt> or <kbd>C-[</kbd> first to get the same effect, so
that <kbd>M-x</kbd>, <kbd><span class="key">ESC</span> x</kbd>, and <kbd>C-[ x</kbd> are all equivalent.)
</p>
<p>Sometimes the <tt class="key">RET</tt> key is not shown when it is &ldquo;obvious&rdquo;
that you must press <tt class="key">RET</tt> to proceed.  For example, the <tt class="key">RET</tt>
is usually omitted in key sequences like <kbd>M-x calc-keypad <span class="key">RET</span></kbd>.
</p>
<p>Commands are generally shown like this:  <kbd>p</kbd> (<code>calc-precision</code>)
or <kbd>C-x * k</kbd> (<code>calc-keypad</code>).  This means that the command is
normally used by pressing the <kbd>p</kbd> key or <kbd>C-x * k</kbd> key sequence,
but it also has the full-name equivalent shown, e.g., <kbd>M-x calc-precision</kbd>.
</p>
<p>Commands that correspond to functions in algebraic notation
are written:  <kbd>C</kbd> (<code>calc-cos</code>) [<code>cos</code>].  This means
the <kbd>C</kbd> key is equivalent to <kbd>M-x calc-cos</kbd>, and that
the corresponding function in an algebraic-style formula would
be &lsquo;<samp>cos(<var>x</var>)</samp>&rsquo;.
</p>
<p>A few commands don&rsquo;t have key equivalents:  <code>calc-sincos</code>
[<code>sincos</code>].
</p>
<hr>
<a name="Demonstration-of-Calc"></a>
<div class="header">
<p>
Next: <a href="#Using-Calc" accesskey="n" rel="next">Using Calc</a>, Previous: <a href="#Notations-Used-in-This-Manual" accesskey="p" rel="prev">Notations Used in This Manual</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="A-Demonstration-of-Calc"></a>
<h3 class="section">1.4 A Demonstration of Calc</h3>

<p><a name="index-Demonstration-of-Calc"></a>
This section will show some typical small problems being solved with
Calc.  The focus is more on demonstration than explanation, but
everything you see here will be covered more thoroughly in the
Tutorial.
</p>
<p>To begin, start Emacs if necessary (usually the command <code>emacs</code>
does this), and type <kbd>C-x * c</kbd> to start the
Calculator.  (You can also use <kbd>M-x calc</kbd> if this doesn&rsquo;t work.
See <a href="#Starting-Calc">Starting Calc</a>, for various ways of starting the Calculator.)
</p>
<p>Be sure to type all the sample input exactly, especially noting the
difference between lower-case and upper-case letters.  Remember,
<tt class="key">RET</tt>, <tt class="key">TAB</tt>, <tt class="key">DEL</tt>, and <tt class="key">SPC</tt> are the Return, Tab,
Delete, and Space keys.
</p>
<p><strong>RPN calculation.</strong>  In RPN, you type the input number(s) first,
then the command to operate on the numbers.
</p>
<p>Type <kbd>2 <span class="key">RET</span> 3 + Q</kbd> to compute
the square root of 2+3, which is 2.2360679775.
</p>
<p>Type <kbd>P 2 ^</kbd> to compute
the value of &lsquo;<samp>pi</samp>&rsquo; squared, 9.86960440109.
</p>
<p>Type <tt class="key">TAB</tt> to exchange the order of these two results.
</p>
<p>Type <kbd>- I H S</kbd> to subtract these results and compute the Inverse
Hyperbolic sine of the difference, 2.72996136574.
</p>
<p>Type <tt class="key">DEL</tt> to erase this result.
</p>
<p><strong>Algebraic calculation.</strong>  You can also enter calculations using
conventional &ldquo;algebraic&rdquo; notation.  To enter an algebraic formula,
use the apostrophe key.
</p>
<p>Type <kbd>' sqrt(2+3) <span class="key">RET</span></kbd> to compute
the square root of 2+3.
</p>
<p>Type <kbd>' pi^2 <span class="key">RET</span></kbd> to enter
&lsquo;<samp>pi</samp>&rsquo; squared.
To evaluate this symbolic formula as a number, type <kbd>=</kbd>.
</p>
<p>Type <kbd>' arcsinh($ - $$) <span class="key">RET</span></kbd> to subtract the second-most-recent
result from the most-recent and compute the Inverse Hyperbolic sine.
</p>
<p><strong>Keypad mode.</strong>  If you are using the X window system, press
<kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;k</kbd><!-- /@w --> to get Keypad mode.  (If you don&rsquo;t use X, skip to
the next section.)
</p>
<p>Click on the <tt class="key">2</tt>, <tt class="key">ENTER</tt>, <tt class="key">3</tt>, <tt class="key">+</tt>, and <tt class="key">SQRT</tt>
&ldquo;buttons&rdquo; using your left mouse button.
</p>
<p>Click on <tt class="key">PI</tt>, <tt class="key">2</tt>, and <tt>y^x</tt>.
</p>
<p>Click on <tt class="key">INV</tt>, then <tt class="key">ENTER</tt> to swap the two results.
</p>
<p>Click on <tt class="key">-</tt>, <tt class="key">INV</tt>, <tt class="key">HYP</tt>, and <tt class="key">SIN</tt>.
</p>
<p>Click on <tt class="key">&lt;-</tt> to erase the result, then click <tt class="key">OFF</tt> to turn
the Keypad Calculator off.
</p>
<p><strong>Grabbing data.</strong>  Type <kbd>C-x * x</kbd> if necessary to exit Calc.
Now select the following numbers as an Emacs region:  &ldquo;Mark&rdquo; the
front of the list by typing <kbd>C-<span class="key">SPC</span></kbd> or <kbd>C-@</kbd> there,
then move to the other end of the list.  (Either get this list from
the on-line copy of this manual, accessed by <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;i</kbd><!-- /@w -->, or just
type these numbers into a scratch file.)  Now type <kbd>C-x * g</kbd> to
&ldquo;grab&rdquo; these numbers into Calc.
</p>
<div class="example">
<pre class="example">1.23  1.97
1.6   2
1.19  1.08
</pre></div>

<p>The result &lsquo;<samp>[1.23, 1.97, 1.6, 2, 1.19, 1.08]</samp>&rsquo; is a Calc &ldquo;vector.&rdquo;
Type <kbd>V&nbsp;R&nbsp;+</kbd><!-- /@w --> to compute the sum of these numbers.
</p>
<p>Type <kbd>U</kbd> to Undo this command, then type <kbd>V R *</kbd> to compute
the product of the numbers.
</p>
<p>You can also grab data as a rectangular matrix.  Place the cursor on
the upper-leftmost &lsquo;<samp>1</samp>&rsquo; and set the mark, then move to just after
the lower-right &lsquo;<samp>8</samp>&rsquo; and press <kbd>C-x * r</kbd>.
</p>
<p>Type <kbd>v t</kbd> to transpose this
3x2
matrix into a
2x3
matrix.  Type <kbd>v&nbsp;u</kbd><!-- /@w --> to unpack the rows into two separate
vectors.  Now type <kbd>V&nbsp;R&nbsp;+&nbsp;<span class="key">TAB</span>&nbsp;V&nbsp;R&nbsp;+</kbd><!-- /@w --> to compute the sums
of the two original columns. (There is also a special
grab-and-sum-columns command, <kbd>C-x * :</kbd>.)
</p>
<p><strong>Units conversion.</strong>  Units are entered algebraically.
Type <kbd>'&nbsp;43&nbsp;mi/hr&nbsp;<span class="key">RET</span></kbd><!-- /@w --> to enter the quantity 43 miles-per-hour.
Type <kbd>u&nbsp;c&nbsp;km/hr&nbsp;<span class="key">RET</span></kbd><!-- /@w -->.  Type <kbd>u&nbsp;c&nbsp;m/s&nbsp;<span class="key">RET</span></kbd><!-- /@w -->.
</p>
<p><strong>Date arithmetic.</strong>  Type <kbd>t N</kbd> to get the current date and
time.  Type <kbd>90 +</kbd> to find the date 90 days from now.  Type
<kbd>' &lt;25 dec 87&gt; <span class="key">RET</span></kbd> to enter a date, then <kbd>- 7 /</kbd> to see how
many weeks have passed since then.
</p>
<p><strong>Algebra.</strong>  Algebraic entries can also include formulas
or equations involving variables.  Type <kbd>'&nbsp;[x&nbsp;+&nbsp;y<!-- /@w --> = a, x y = 1] <span class="key">RET</span></kbd>
to enter a pair of equations involving three variables.
(Note the leading apostrophe in this example; also, note that the space
in &lsquo;<samp>x y</samp>&rsquo; is required.)  Type <kbd>a&nbsp;S&nbsp;x,y&nbsp;<span class="key">RET</span></kbd><!-- /@w --> to solve
these equations for the variables &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;.
</p>
<p>Type <kbd>d B</kbd> to view the solutions in more readable notation.
Type <kbd>d&nbsp;C</kbd><!-- /@w --> to view them in C language notation, <kbd>d T</kbd>
to view them in the notation for the TeX typesetting system,
and <kbd>d L</kbd> to view them in the notation for the LaTeX typesetting
system.  Type <kbd>d N</kbd> to return to normal notation.
</p>
<p>Type <kbd>7.5</kbd>, then <kbd>s l a <span class="key">RET</span></kbd> to let &lsquo;<samp>a = 7.5</samp>&rsquo; in these formulas.
(That&rsquo;s the letter <kbd>l</kbd>, not the numeral <kbd>1</kbd>.)
</p>
<p><strong>Help functions.</strong>  You can read about any command in the on-line
manual.  Type <kbd>C-x * c</kbd> to return to Calc after each of these
commands: <kbd>h k t N</kbd> to read about the <kbd>t N</kbd> command,
<kbd>h f sqrt <span class="key">RET</span></kbd> to read about the <code>sqrt</code> function, and
<kbd>h s</kbd> to read the Calc summary.
</p>
<p>Press <tt class="key">DEL</tt> repeatedly to remove any leftover results from the stack.
To exit from Calc, press <kbd>q</kbd> or <kbd>C-x * c</kbd> again.
</p>
<hr>
<a name="Using-Calc"></a>
<div class="header">
<p>
Next: <a href="#History-and-Acknowledgments" accesskey="n" rel="next">History and Acknowledgments</a>, Previous: <a href="#Demonstration-of-Calc" accesskey="p" rel="prev">Demonstration of Calc</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Using-Calc-1"></a>
<h3 class="section">1.5 Using Calc</h3>

<p>Calc has several user interfaces that are specialized for
different kinds of tasks.  As well as Calc&rsquo;s standard interface,
there are Quick mode, Keypad mode, and Embedded mode.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Starting-Calc" accesskey="1">Starting Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Standard-Interface" accesskey="2">The Standard Interface</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Quick-Mode-Overview" accesskey="3">Quick Mode Overview</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Mode-Overview" accesskey="4">Keypad Mode Overview</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standalone-Operation" accesskey="5">Standalone Operation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Embedded-Mode-Overview" accesskey="6">Embedded Mode Overview</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Other-C_002dx-_002a-Commands" accesskey="7">Other C-x * Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Starting-Calc"></a>
<div class="header">
<p>
Next: <a href="#The-Standard-Interface" accesskey="n" rel="next">The Standard Interface</a>, Previous: <a href="#Using-Calc" accesskey="p" rel="prev">Using Calc</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Starting-Calc-1"></a>
<h4 class="subsection">1.5.1 Starting Calc</h4>

<p>On most systems, you can type <kbd>C-x *</kbd> to start the Calculator.
The key sequence <kbd>C-x *</kbd> is bound to the command <code>calc-dispatch</code>,
which can be rebound if convenient (see <a href="#Customizing-Calc">Customizing Calc</a>).
</p>
<p>When you press <kbd>C-x *</kbd>, Emacs waits for you to press a second key to
complete the command.  In this case, you will follow <kbd>C-x *</kbd> with a
letter (upper- or lower-case, it doesn&rsquo;t matter for <kbd>C-x *</kbd>) that says
which Calc interface you want to use.
</p>
<p>To get Calc&rsquo;s standard interface, type <kbd>C-x * c</kbd>.  To get
Keypad mode, type <kbd>C-x * k</kbd>.  Type <kbd>C-x * ?</kbd> to get a brief
list of the available options, and type a second <kbd>?</kbd> to get
a complete list.
</p>
<p>To ease typing, <kbd>C-x * *</kbd> also works to start Calc.  It starts the
same interface (either <kbd>C-x * c</kbd> or <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;k</kbd><!-- /@w -->) that you last
used, selecting the <kbd>C-x * c</kbd> interface by default.
</p>
<p>If <kbd>C-x *</kbd> doesn&rsquo;t work for you, you can always type explicit
commands like <kbd>M-x calc</kbd> (for the standard user interface) or
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">calc-keypad</span></kbd><!-- /@w --> (for Keypad mode).  First type <kbd>M-x</kbd>
(that&rsquo;s Meta with the letter <kbd>x</kbd>), then, at the prompt,
type the full command (like <kbd>calc-keypad</kbd>) and press Return.
</p>
<p>The same commands (like <kbd>C-x * c</kbd> or <kbd>C-x * *</kbd>) that start
the Calculator also turn it off if it is already on.
</p>
<hr>
<a name="The-Standard-Interface"></a>
<div class="header">
<p>
Next: <a href="#Quick-Mode-Overview" accesskey="n" rel="next">Quick Mode Overview</a>, Previous: <a href="#Starting-Calc" accesskey="p" rel="prev">Starting Calc</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Standard-Calc-Interface"></a>
<h4 class="subsection">1.5.2 The Standard Calc Interface</h4>

<p><a name="index-Standard-user-interface"></a>
Calc&rsquo;s standard interface acts like a traditional RPN calculator,
operated by the normal Emacs keyboard.  When you type <kbd>C-x * c</kbd>
to start the Calculator, the Emacs screen splits into two windows
with the file you were editing on top and Calc on the bottom.
</p>
<div class="smallexample">
<pre class="smallexample">

...
--**-Emacs: myfile             (Fundamental)----All----------------------
--- Emacs Calculator Mode ---                   |Emacs Calculator Trail
2:  17.3                                        |    17.3
1:  -5                                          |    3
    .                                           |    2
                                                |    4
                                                |  * 8
                                                |  -&gt;-5
                                                |
--%*-Calc: 12 Deg       (Calculator)----All----- --%*- *Calc Trail*
</pre></div>

<p>In this figure, the mode-line for <samp>myfile</samp> has moved up and the
&ldquo;Calculator&rdquo; window has appeared below it.  As you can see, Calc
actually makes two windows side-by-side.  The lefthand one is
called the <em>stack window</em> and the righthand one is called the
<em>trail window.</em>  The stack holds the numbers involved in the
calculation you are currently performing.  The trail holds a complete
record of all calculations you have done.  In a desk calculator with
a printer, the trail corresponds to the paper tape that records what
you do.
</p>
<p>In this case, the trail shows that four numbers (17.3, 3, 2, and 4)
were first entered into the Calculator, then the 2 and 4 were
multiplied to get 8, then the 3 and 8 were subtracted to get <i>-5</i>.
(The &lsquo;<samp>&gt;</samp>&rsquo; symbol shows that this was the most recent calculation.)
The net result is the two numbers 17.3 and <i>-5</i> sitting on the stack.
</p>
<p>Most Calculator commands deal explicitly with the stack only, but
there is a set of commands that allow you to search back through
the trail and retrieve any previous result.
</p>
<p>Calc commands use the digits, letters, and punctuation keys.
Shifted (i.e., upper-case) letters are different from lowercase
letters.  Some letters are <em>prefix</em> keys that begin two-letter
commands.  For example, <kbd>e</kbd> means &ldquo;enter exponent&rdquo; and shifted
<kbd>E</kbd> means &lsquo;<samp>e^x</samp>&rsquo;.  With the <kbd>d</kbd> (&ldquo;display modes&rdquo;) prefix
the letter &ldquo;e&rdquo; takes on very different meanings:  <kbd>d e</kbd> means
&ldquo;engineering notation&rdquo; and <kbd>d E</kbd> means &ldquo;<em>eqn</em> language mode.&rdquo;
</p>
<p>There is nothing stopping you from switching out of the Calc
window and back into your editing window, say by using the Emacs
<kbd><span class="nolinebreak">C-x</span>&nbsp;o</kbd><!-- /@w --> (<code>other-window</code>) command.  When the cursor is
inside a regular window, Emacs acts just like normal.  When the
cursor is in the Calc stack or trail windows, keys are interpreted
as Calc commands.
</p>
<p>When you quit by pressing <kbd>C-x * c</kbd> a second time, the Calculator
windows go away but the actual Stack and Trail are not gone, just
hidden.  When you press <kbd>C-x * c</kbd> once again you will get the
same stack and trail contents you had when you last used the
Calculator.
</p>
<p>The Calculator does not remember its state between Emacs sessions.
Thus if you quit Emacs and start it again, <kbd>C-x * c</kbd> will give you
a fresh stack and trail.  There is a command (<kbd>m m</kbd>) that lets
you save your favorite mode settings between sessions, though.
One of the things it saves is which user interface (standard or
Keypad) you last used; otherwise, a freshly started Emacs will
always treat <kbd>C-x * *</kbd> the same as <kbd>C-x * c</kbd>.
</p>
<p>The <kbd>q</kbd> key is another equivalent way to turn the Calculator off.
</p>
<p>If you type <kbd>C-x * b</kbd> first and then <kbd>C-x * c</kbd>, you get a
full-screen version of Calc (<code>full-calc</code>) in which the stack and
trail windows are still side-by-side but are now as tall as the whole
Emacs screen.  When you press <kbd>q</kbd> or <kbd>C-x * c</kbd> again to quit,
the file you were editing before reappears.  The <kbd>C-x * b</kbd> key
switches back and forth between &ldquo;big&rdquo; full-screen mode and the
normal partial-screen mode.
</p>
<p>Finally, <kbd>C-x * o</kbd> (<code>calc-other-window</code>) is like <kbd>C-x * c</kbd>
except that the Calc window is not selected.  The buffer you were
editing before remains selected instead.  If you are in a Calc window,
then <kbd>C-x * o</kbd> will switch you out of it, being careful not to
switch you to the Calc Trail window.  So <kbd>C-x * o</kbd> is a handy
way to switch out of Calc momentarily to edit your file; you can then
type <kbd>C-x * c</kbd> to switch back into Calc when you are done.
</p>
<hr>
<a name="Quick-Mode-Overview"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Mode-Overview" accesskey="n" rel="next">Keypad Mode Overview</a>, Previous: <a href="#The-Standard-Interface" accesskey="p" rel="prev">The Standard Interface</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Quick-Mode-_0028Overview_0029"></a>
<h4 class="subsection">1.5.3 Quick Mode (Overview)</h4>

<p><em>Quick mode</em> is a quick way to use Calc when you don&rsquo;t need the
full complexity of the stack and trail.  To use it, type <kbd>C-x * q</kbd>
(<code>quick-calc</code>) in any regular editing buffer.
</p>
<p>Quick mode is very simple:  It prompts you to type any formula in
standard algebraic notation (like &lsquo;<samp>4 - 2/3</samp>&rsquo;) and then displays
the result at the bottom of the Emacs screen (<i>3.33333333333</i>
in this case).  You are then back in the same editing buffer you
were in before, ready to continue editing or to type <kbd>C-x * q</kbd>
again to do another quick calculation.  The result of the calculation
will also be in the Emacs &ldquo;kill ring&rdquo; so that a <kbd>C-y</kbd> command
at this point will yank the result into your editing buffer.
</p>
<p>Calc mode settings affect Quick mode, too, though you will have to
go into regular Calc (with <kbd>C-x * c</kbd>) to change the mode settings.
</p>
<p>See <a href="#Quick-Calculator">Quick Calculator</a>, for further information.
</p>
<hr>
<a name="Keypad-Mode-Overview"></a>
<div class="header">
<p>
Next: <a href="#Standalone-Operation" accesskey="n" rel="next">Standalone Operation</a>, Previous: <a href="#Quick-Mode-Overview" accesskey="p" rel="prev">Quick Mode Overview</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Keypad-Mode-_0028Overview_0029"></a>
<h4 class="subsection">1.5.4 Keypad Mode (Overview)</h4>

<p><em>Keypad mode</em> is a mouse-based interface to the Calculator.
It is designed for use with terminals that support a mouse.  If you
don&rsquo;t have a mouse, you will have to operate Keypad mode with your
arrow keys (which is probably more trouble than it&rsquo;s worth).
</p>
<p>Type <kbd>C-x * k</kbd> to turn Keypad mode on or off.  Once again you
get two new windows, this time on the righthand side of the screen
instead of at the bottom.  The upper window is the familiar Calc
Stack; the lower window is a picture of a typical calculator keypad.
</p>
<div class="smallexample">
<pre class="smallexample">|--- Emacs Calculator Mode ---
|2:  17.3
|1:  -5
|    .
|--%*-Calc: 12 Deg       (Calcul
|----+----+--Calc---+----+----1
|FLR |CEIL|RND |TRNC|CLN2|FLT |
|----+----+----+----+----+----|
| LN |EXP |    |ABS |IDIV|MOD |
|----+----+----+----+----+----|
|SIN |COS |TAN |SQRT|y^x |1/x |
|----+----+----+----+----+----|
|  ENTER  |+/- |EEX |UNDO| &lt;- |
|-----+---+-+--+--+-+---++----|
| INV |  7  |  8  |  9  |  /  |
|-----+-----+-----+-----+-----|
| HYP |  4  |  5  |  6  |  *  |
|-----+-----+-----+-----+-----|
|EXEC |  1  |  2  |  3  |  -  |
|-----+-----+-----+-----+-----|
| OFF |  0  |  .  | PI  |  +  |
|-----+-----+-----+-----+-----+
</pre></div>

<p>Keypad mode is much easier for beginners to learn, because there
is no need to memorize lots of obscure key sequences.  But not all
commands in regular Calc are available on the Keypad.  You can
always switch the cursor into the Calc stack window to use
standard Calc commands if you need.  Serious Calc users, though,
often find they prefer the standard interface over Keypad mode.
</p>
<p>To operate the Calculator, just click on the &ldquo;buttons&rdquo; of the
keypad using your left mouse button.  To enter the two numbers
shown here you would click <kbd>1&nbsp;7&nbsp;.&nbsp;3&nbsp;ENTER&nbsp;5&nbsp;<span class="nolinebreak">+/-</span>&nbsp;ENTER</kbd><!-- /@w -->; to
add them together you would then click <kbd>+</kbd> (to get 12.3 on
the stack).
</p>
<p>If you click the right mouse button, the top three rows of the
keypad change to show other sets of commands, such as advanced
math functions, vector operations, and operations on binary
numbers.
</p>
<p>Because Keypad mode doesn&rsquo;t use the regular keyboard, Calc leaves
the cursor in your original editing buffer.  You can type in
this buffer in the usual way while also clicking on the Calculator
keypad.  One advantage of Keypad mode is that you don&rsquo;t need an
explicit command to switch between editing and calculating.
</p>
<p>If you press <kbd>C-x * b</kbd> first, you get a full-screen Keypad mode
(<code>full-calc-keypad</code>) with three windows:  The keypad in the lower
left, the stack in the lower right, and the trail on top.
</p>
<p>See <a href="#Keypad-Mode">Keypad Mode</a>, for further information.
</p>
<hr>
<a name="Standalone-Operation"></a>
<div class="header">
<p>
Next: <a href="#Embedded-Mode-Overview" accesskey="n" rel="next">Embedded Mode Overview</a>, Previous: <a href="#Keypad-Mode-Overview" accesskey="p" rel="prev">Keypad Mode Overview</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standalone-Operation-1"></a>
<h4 class="subsection">1.5.5 Standalone Operation</h4>

<p><a name="index-Standalone-Operation"></a>
If you are not in Emacs at the moment but you wish to use Calc,
you must start Emacs first.  If all you want is to run Calc, you
can give the commands:
</p>
<div class="example">
<pre class="example">emacs -f full-calc
</pre></div>

<p>or
</p>
<div class="example">
<pre class="example">emacs -f full-calc-keypad
</pre></div>

<p>which run a full-screen Calculator (as if by <kbd>C-x * b C-x * c</kbd>) or
a full-screen X-based Calculator (as if by <kbd>C-x * b C-x * k</kbd>).
In standalone operation, quitting the Calculator (by pressing
<kbd>q</kbd> or clicking on the keypad <tt class="key">EXIT</tt> button) quits Emacs
itself.
</p>
<hr>
<a name="Embedded-Mode-Overview"></a>
<div class="header">
<p>
Next: <a href="#Other-C_002dx-_002a-Commands" accesskey="n" rel="next">Other C-x * Commands</a>, Previous: <a href="#Standalone-Operation" accesskey="p" rel="prev">Standalone Operation</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Embedded-Mode-_0028Overview_0029"></a>
<h4 class="subsection">1.5.6 Embedded Mode (Overview)</h4>

<p><em>Embedded mode</em> is a way to use Calc directly from inside an
editing buffer.  Suppose you have a formula written as part of a
document like this:
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                                   ln(ln(x))

is
</pre></div>

<p>and you wish to have Calc compute and format the derivative for
you and store this derivative in the buffer automatically.  To
do this with Embedded mode, first copy the formula down to where
you want the result to be, leaving a blank line before and after the
formula:
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                                   ln(ln(x))

is

                                   ln(ln(x))
</pre></div>

<p>Now, move the cursor onto this new formula and press <kbd>C-x * e</kbd>.
Calc will read the formula (using the surrounding blank lines to tell
how much text to read), then push this formula (invisibly) onto the Calc
stack.  The cursor will stay on the formula in the editing buffer, but
the line with the formula will now appear as it would on the Calc stack
(in this case, it will be left-aligned) and the buffer&rsquo;s mode line will
change to look like the Calc mode line (with mode indicators like
&lsquo;<samp>12 Deg</samp>&rsquo; and so on).  Even though you are still in your editing
buffer, the keyboard now acts like the Calc keyboard, and any new result
you get is copied from the stack back into the buffer.  To take the
derivative, you would type <kbd>a d x <span class="key">RET</span></kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                                   ln(ln(x))

is

1 / x ln(x)
</pre></div>

<p>(Note that by default, Calc gives division lower precedence than multiplication,
so that &lsquo;<samp>1 / x ln(x)</samp>&rsquo; is equivalent to &lsquo;<samp>1 / (x ln(x))</samp>&rsquo;.)
</p>
<p>To make this look nicer, you might want to press <kbd>d =</kbd> to center
the formula, and even <kbd>d B</kbd> to use Big display mode.
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                                   ln(ln(x))

is
% [calc-mode: justify: center]
% [calc-mode: language: big]

                                       1
                                    -------
                                    x ln(x)
</pre></div>

<p>Calc has added annotations to the file to help it remember the modes
that were used for this formula.  They are formatted like comments
in the TeX typesetting language, just in case you are using TeX or
LaTeX. (In this example TeX is not being used, so you might want
to move these comments up to the top of the file or otherwise put them
out of the way.)
</p>
<p>As an extra flourish, we can add an equation number using a
righthand label:  Type <kbd>d } (1) <span class="key">RET</span></kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">% [calc-mode: justify: center]
% [calc-mode: language: big]
% [calc-mode: right-label: &quot; (1)&quot;]

                                       1
                                    -------                      (1)
                                    ln(x) x
</pre></div>

<p>To leave Embedded mode, type <kbd>C-x * e</kbd> again.  The mode line
and keyboard will revert to the way they were before.
</p>
<p>The related command <kbd>C-x * w</kbd> operates on a single word, which
generally means a single number, inside text.  It searches for an
expression which &ldquo;looks&rdquo; like a number containing the point.
Here&rsquo;s an example of its use (before you try this, remove the Calc
annotations or use a new buffer so that the extra settings in the
annotations don&rsquo;t take effect):
</p>
<div class="smallexample">
<pre class="smallexample">A slope of one-third corresponds to an angle of 1 degrees.
</pre></div>

<p>Place the cursor on the &lsquo;<samp>1</samp>&rsquo;, then type <kbd>C-x * w</kbd> to enable
Embedded mode on that number.  Now type <kbd>3 /</kbd> (to get one-third),
and <kbd>I T</kbd> (the Inverse Tangent converts a slope into an angle),
then <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;w</kbd><!-- /@w --> again to exit Embedded mode.
</p>
<div class="smallexample">
<pre class="smallexample">A slope of one-third corresponds to an angle of 18.4349488229 degrees.
</pre></div>

<p>See <a href="#Embedded-Mode">Embedded Mode</a>, for full details.
</p>
<hr>
<a name="Other-C_002dx-_002a-Commands"></a>
<div class="header">
<p>
Previous: <a href="#Embedded-Mode-Overview" accesskey="p" rel="prev">Embedded Mode Overview</a>, Up: <a href="#Using-Calc" accesskey="u" rel="up">Using Calc</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-C_002dx-_002a-Commands-1"></a>
<h4 class="subsection">1.5.7 Other <kbd>C-x *</kbd> Commands</h4>

<p>Two more Calc-related commands are <kbd>C-x * g</kbd> and <kbd>C-x * r</kbd>,
which &ldquo;grab&rdquo; data from a selected region of a buffer into the
Calculator.  The region is defined in the usual Emacs way, by
a &ldquo;mark&rdquo; placed at one end of the region, and the Emacs
cursor or &ldquo;point&rdquo; placed at the other.
</p>
<p>The <kbd>C-x * g</kbd> command reads the region in the usual left-to-right,
top-to-bottom order.  The result is packaged into a Calc vector
of numbers and placed on the stack.  Calc (in its standard
user interface) is then started.  Type <kbd>v u</kbd> if you want
to unpack this vector into separate numbers on the stack.  Also,
<kbd>C-u C-x * g</kbd> interprets the region as a single number or
formula.
</p>
<p>The <kbd>C-x * r</kbd> command reads a rectangle, with the point and
mark defining opposite corners of the rectangle.  The result
is a matrix of numbers on the Calculator stack.
</p>
<p>Complementary to these is <kbd>C-x * y</kbd>, which &ldquo;yanks&rdquo; the
value at the top of the Calc stack back into an editing buffer.
If you type <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;y</kbd><!-- /@w --> while in such a buffer, the value is
yanked at the current position.  If you type <kbd>C-x * y</kbd> while
in the Calc buffer, Calc makes an educated guess as to which
editing buffer you want to use.  The Calc window does not have
to be visible in order to use this command, as long as there
is something on the Calc stack.
</p>
<p>Here, for reference, is the complete list of <kbd>C-x *</kbd> commands.
The shift, control, and meta keys are ignored for the keystroke
following <kbd>C-x *</kbd>.
</p>
<p>Commands for turning Calc on and off:
</p>
<dl compact="compact">
<dt><kbd>*</kbd></dt>
<dd><p>Turn Calc on or off, employing the same user interface as last time.
</p>
</dd>
<dt><kbd>=, +, -, /, \, &amp;, #</kbd></dt>
<dd><p>Alternatives for <kbd>*</kbd>.
</p>
</dd>
<dt><kbd>C</kbd></dt>
<dd><p>Turn Calc on or off using its standard bottom-of-the-screen
interface.  If Calc is already turned on but the cursor is not
in the Calc window, move the cursor into the window.
</p>
</dd>
<dt><kbd>O</kbd></dt>
<dd><p>Same as <kbd>C</kbd>, but don&rsquo;t select the new Calc window.  If
Calc is already turned on and the cursor is in the Calc window,
move it out of that window.
</p>
</dd>
<dt><kbd>B</kbd></dt>
<dd><p>Control whether <kbd>C-x * c</kbd> and <kbd>C-x * k</kbd> use the full screen.
</p>
</dd>
<dt><kbd>Q</kbd></dt>
<dd><p>Use Quick mode for a single short calculation.
</p>
</dd>
<dt><kbd>K</kbd></dt>
<dd><p>Turn Calc Keypad mode on or off.
</p>
</dd>
<dt><kbd>E</kbd></dt>
<dd><p>Turn Calc Embedded mode on or off at the current formula.
</p>
</dd>
<dt><kbd>J</kbd></dt>
<dd><p>Turn Calc Embedded mode on or off, select the interesting part.
</p>
</dd>
<dt><kbd>W</kbd></dt>
<dd><p>Turn Calc Embedded mode on or off at the current word (number).
</p>
</dd>
<dt><kbd>Z</kbd></dt>
<dd><p>Turn Calc on in a user-defined way, as defined by a <kbd>Z I</kbd> command.
</p>
</dd>
<dt><kbd>X</kbd></dt>
<dd><p>Quit Calc; turn off standard, Keypad, or Embedded mode if on.
(This is like <kbd>q</kbd> or <tt class="key">OFF</tt> inside of Calc.)
</p></dd>
</dl>

<p>Commands for moving data into and out of the Calculator:
</p>
<dl compact="compact">
<dt><kbd>G</kbd></dt>
<dd><p>Grab the region into the Calculator as a vector.
</p>
</dd>
<dt><kbd>R</kbd></dt>
<dd><p>Grab the rectangular region into the Calculator as a matrix.
</p>
</dd>
<dt><kbd>:</kbd></dt>
<dd><p>Grab the rectangular region and compute the sums of its columns.
</p>
</dd>
<dt><kbd>_</kbd></dt>
<dd><p>Grab the rectangular region and compute the sums of its rows.
</p>
</dd>
<dt><kbd>Y</kbd></dt>
<dd><p>Yank a value from the Calculator into the current editing buffer.
</p></dd>
</dl>

<p>Commands for use with Embedded mode:
</p>
<dl compact="compact">
<dt><kbd>A</kbd></dt>
<dd><p>&ldquo;Activate&rdquo; the current buffer.  Locate all formulas that
contain &lsquo;<samp>:=</samp>&rsquo; or &lsquo;<samp>=&gt;</samp>&rsquo; symbols and record their locations
so that they can be updated automatically as variables are changed.
</p>
</dd>
<dt><kbd>D</kbd></dt>
<dd><p>Duplicate the current formula immediately below and select
the duplicate.
</p>
</dd>
<dt><kbd>F</kbd></dt>
<dd><p>Insert a new formula at the current point.
</p>
</dd>
<dt><kbd>N</kbd></dt>
<dd><p>Move the cursor to the next active formula in the buffer.
</p>
</dd>
<dt><kbd>P</kbd></dt>
<dd><p>Move the cursor to the previous active formula in the buffer.
</p>
</dd>
<dt><kbd>U</kbd></dt>
<dd><p>Update (i.e., as if by the <kbd>=</kbd> key) the formula at the current point.
</p>
</dd>
<dt><kbd>`</kbd></dt>
<dd><p>Edit (as if by <code>calc-edit</code>) the formula at the current point.
</p></dd>
</dl>

<p>Miscellaneous commands:
</p>
<dl compact="compact">
<dt><kbd>I</kbd></dt>
<dd><p>Run the Emacs Info system to read the Calc manual.
(This is the same as <kbd>h i</kbd> inside of Calc.)
</p>
</dd>
<dt><kbd>T</kbd></dt>
<dd><p>Run the Emacs Info system to read the Calc Tutorial.
</p>
</dd>
<dt><kbd>S</kbd></dt>
<dd><p>Run the Emacs Info system to read the Calc Summary.
</p>
</dd>
<dt><kbd>L</kbd></dt>
<dd><p>Load Calc entirely into memory.  (Normally the various parts
are loaded only as they are needed.)
</p>
</dd>
<dt><kbd>M</kbd></dt>
<dd><p>Read a region of written keystroke names (like <kbd>C-n a b c <span class="key">RET</span></kbd>)
and record them as the current keyboard macro.
</p>
</dd>
<dt><kbd>0</kbd></dt>
<dd><p>(This is the &ldquo;zero&rdquo; digit key.)  Reset the Calculator to
its initial state:  Empty stack, and initial mode settings.
</p></dd>
</dl>

<hr>
<a name="History-and-Acknowledgments"></a>
<div class="header">
<p>
Previous: <a href="#Using-Calc" accesskey="p" rel="prev">Using Calc</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="History-and-Acknowledgments-1"></a>
<h3 class="section">1.6 History and Acknowledgments</h3>

<p>Calc was originally started as a two-week project to occupy a lull
in the author&rsquo;s schedule.  Basically, a friend asked if I remembered
the value of
&lsquo;<samp>2^32</samp>&rsquo;.
I didn&rsquo;t offhand, but I said, &ldquo;that&rsquo;s easy, just call up an
<code>xcalc</code>.&rdquo;  <code>Xcalc</code> duly reported that the answer to our
question was &lsquo;<samp>4.294967e+09</samp>&rsquo;&mdash;with no way to see the full ten
digits even though we knew they were there in the program&rsquo;s memory!  I
was so annoyed, I vowed to write a calculator of my own, once and for
all.
</p>
<p>I chose Emacs Lisp, a) because I had always been curious about it
and b) because, being only a text editor extension language after
all, Emacs Lisp would surely reach its limits long before the project
got too far out of hand.
</p>
<p>To make a long story short, Emacs Lisp turned out to be a distressingly
solid implementation of Lisp, and the humble task of calculating
turned out to be more open-ended than one might have expected.
</p>
<p>Emacs Lisp didn&rsquo;t have built-in floating point math (now it does), so
this had to be simulated in software.  In fact, Emacs integers would
only comfortably fit six decimal digits or so (at the time)&mdash;not
enough for a decent calculator.  So I had to write my own
high-precision integer code as well, and once I had this I figured
that arbitrary-size integers were just as easy as large integers.
Arbitrary floating-point precision was the logical next step.  Also,
since the large integer arithmetic was there anyway it seemed only
fair to give the user direct access to it, which in turn made it
practical to support fractions as well as floats. All these features
inspired me to look around for other data types that might be worth
having.
</p>
<p>Around this time, my friend Rick Koshi showed me his nifty new HP-28
calculator.  It allowed the user to manipulate formulas as well as
numerical quantities, and it could also operate on matrices.  I
decided that these would be good for Calc to have, too.  And once
things had gone this far, I figured I might as well take a look at
serious algebra systems for further ideas.  Since these systems did
far more than I could ever hope to implement, I decided to focus on
rewrite rules and other programming features so that users could
implement what they needed for themselves.
</p>
<p>Rick complained that matrices were hard to read, so I put in code to
format them in a 2D style.  Once these routines were in place, Big mode
was obligatory.  Gee, what other language modes would be useful?
</p>
<p>Scott Hemphill and Allen Knutson, two friends with a strong mathematical
bent, contributed ideas and algorithms for a number of Calc features
including modulo forms, primality testing, and float-to-fraction conversion.
</p>
<p>Units were added at the eager insistence of Mass Sivilotti.  Later,
Ulrich Mueller at CERN and Przemek Klosowski at NIST provided invaluable
expert assistance with the units table.  As far as I can remember, the
idea of using algebraic formulas and variables to represent units dates
back to an ancient article in Byte magazine about muMath, an early
algebra system for microcomputers.
</p>
<p>Many people have contributed to Calc by reporting bugs and suggesting
features, large and small.  A few deserve special mention:  Tim Peters,
who helped develop the ideas that led to the selection commands, rewrite
rules, and many other algebra features; François
Pinard, who contributed an early prototype of the Calc Summary appendix
as well as providing valuable suggestions in many other areas of Calc;
Carl Witty, whose eagle eyes discovered many typographical and factual
errors in the Calc manual; Tim Kay, who drove the development of
Embedded mode; Ove Ewerlid, who made many suggestions relating to the
algebra commands and contributed some code for polynomial operations;
Randal Schwartz, who suggested the <code>calc-eval</code> function; Juha
Sarlin, who first worked out how to split Calc into quickly-loading
parts; Bob Weiner, who helped immensely with the Lucid Emacs port; and
Robert J. Chassell, who suggested the Calc Tutorial and exercises as
well as many other things.
</p>
<a name="index-Bibliography"></a>
<a name="index-Knuth_002c-Art-of-Computer-Programming"></a>
<a name="index-Numerical-Recipes"></a>
<p>Among the books used in the development of Calc were Knuth&rsquo;s <em>Art
of Computer Programming</em> (especially volume II, <em>Seminumerical
Algorithms</em>); <em>Numerical Recipes</em> by Press, Flannery, Teukolsky,
and Vetterling; Bevington&rsquo;s <em>Data Reduction and Error Analysis
for the Physical Sciences</em>; <em>Concrete Mathematics</em> by Graham,
Knuth, and Patashnik; Steele&rsquo;s <em>Common Lisp, the Language</em>; the
<em>CRC Standard Math Tables</em> (William H. Beyer, ed.); and
Abramowitz and Stegun&rsquo;s venerable <em>Handbook of Mathematical
Functions</em>.  Also, of course, Calc could not have been written without
the excellent <em>GNU Emacs Lisp Reference Manual</em>, by Bil Lewis and
Dan LaLiberte.
</p>
<p>Final thanks go to Richard Stallman, without whose fine implementations
of the Emacs editor, language, and environment, Calc would have been
finished in two weeks.
</p>

<hr>
<a name="Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Introduction" accesskey="n" rel="next">Introduction</a>, Previous: <a href="#Getting-Started" accesskey="p" rel="prev">Getting Started</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Tutorial-1"></a>
<h2 class="chapter">2 Tutorial</h2>

<p>This chapter explains how to use Calc and its many features, in
a step-by-step, tutorial way.  You are encouraged to run Calc and
work along with the examples as you read (see <a href="#Starting-Calc">Starting Calc</a>).
If you are already familiar with advanced calculators, you may wish
to skip on to the rest of this manual.
</p>
<p>This tutorial describes the standard user interface of Calc only.
The Quick mode and Keypad mode interfaces are fairly
self-explanatory.  See <a href="#Embedded-Mode">Embedded Mode</a>, for a description of
the Embedded mode interface.
</p>
<p>The easiest way to read this tutorial on-line is to have two windows on
your Emacs screen, one with Calc and one with the Info system.  Press
<kbd>C-x * t</kbd> to set this up; the on-line tutorial will be opened in the
current window and Calc will be started in another window.  From the
Info window, the command <kbd>C-x * c</kbd> can be used to switch to the Calc
window and <kbd>C-x * o</kbd> can be used to switch back to the Info window.
(If you have a printed copy of the manual you can use that instead; in
that case you only need to press <kbd>C-x * c</kbd> to start Calc.)
</p>
<p>This tutorial is designed to be done in sequence.  But the rest of this
manual does not assume you have gone through the tutorial.  The tutorial
does not cover everything in the Calculator, but it touches on most
general areas.
</p>
<p>You may wish to print out a copy of the Calc Summary and keep notes on
it as you learn Calc.  See <a href="#About-This-Manual">About This Manual</a>, to see how to make a
printed summary.  See <a href="#Summary">Summary</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Tutorial" accesskey="1">Basic Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Arithmetic-Tutorial" accesskey="2">Arithmetic Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector_002fMatrix-Tutorial" accesskey="3">Vector/Matrix Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Tutorial" accesskey="4">Types Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra-Tutorial" accesskey="5">Algebra Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Tutorial" accesskey="6">Programming Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Answers-to-Exercises" accesskey="7">Answers to Exercises</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Arithmetic-Tutorial" accesskey="n" rel="next">Arithmetic Tutorial</a>, Previous: <a href="#Tutorial" accesskey="p" rel="prev">Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Tutorial-1"></a>
<h3 class="section">2.1 Basic Tutorial</h3>

<p>In this section, we learn how RPN and algebraic-style calculations
work, how to undo and redo an operation done by mistake, and how
to control various modes of the Calculator.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#RPN-Tutorial" accesskey="1">RPN Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Basic operations with the stack.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Tutorial" accesskey="2">Algebraic Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Algebraic entry; variables.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Undo-Tutorial" accesskey="3">Undo Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">If you make a mistake: Undo and the trail.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Tutorial" accesskey="4">Modes Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Common mode-setting commands.
</td></tr>
</table>

<hr>
<a name="RPN-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Tutorial" accesskey="n" rel="next">Algebraic Tutorial</a>, Previous: <a href="#Basic-Tutorial" accesskey="p" rel="prev">Basic Tutorial</a>, Up: <a href="#Basic-Tutorial" accesskey="u" rel="up">Basic Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="RPN-Calculations-and-the-Stack"></a>
<h4 class="subsection">2.1.1 RPN Calculations and the Stack</h4>

<a name="index-RPN-notation"></a>
<p>Calc normally uses RPN notation.  You may be familiar with the RPN
system from Hewlett-Packard calculators, FORTH, or PostScript.
(Reverse Polish Notation, RPN, is named after the Polish mathematician
Jan Lukasiewicz.)
</p>
<p>The central component of an RPN calculator is the <em>stack</em>.  A
calculator stack is like a stack of dishes.  New dishes (numbers) are
added at the top of the stack, and numbers are normally only removed
from the top of the stack.
</p>
<a name="index-Operators"></a>
<a name="index-Operands"></a>
<p>In an operation like &lsquo;<samp>2+3</samp>&rsquo;, the 2 and 3 are called the <em>operands</em>
and the &lsquo;<samp>+</samp>&rsquo; is the <em>operator</em>.  In an RPN calculator you always
enter the operands first, then the operator.  Each time you type a
number, Calc adds or <em>pushes</em> it onto the top of the Stack.
When you press an operator key like <kbd>+</kbd>, Calc <em>pops</em> the appropriate
number of operands from the stack and pushes back the result.
</p>
<p>Thus we could add the numbers 2 and 3 in an RPN calculator by typing:
<kbd>2 <span class="key">RET</span> 3 <span class="key">RET</span> +</kbd>.  (The <tt class="key">RET</tt> key, Return, corresponds to
the <tt class="key">ENTER</tt> key on traditional RPN calculators.)  Try this now if
you wish; type <kbd>C-x * c</kbd> to switch into the Calc window (you can type
<kbd>C-x * c</kbd> again or <kbd>C-x * o</kbd> to switch back to the Tutorial window).
The first four keystrokes &ldquo;push&rdquo; the numbers 2 and 3 onto the stack.
The <kbd>+</kbd> key &ldquo;pops&rdquo; the top two numbers from the stack, adds them,
and pushes the result (5) back onto the stack.  Here&rsquo;s how the stack
will look at various points throughout the calculation:
</p>
<div class="smallexample">
<pre class="smallexample">    .          1:  2          2:  2          1:  5              .
                   .          1:  3              .
                                  .

  C-x * c          2 <span class="key">RET</span>          3 <span class="key">RET</span>            +             <span class="key">DEL</span>
</pre></div>

<p>The &lsquo;<samp>.</samp>&rsquo; symbol is a marker that represents the top of the stack.
Note that the &ldquo;top&rdquo; of the stack is really shown at the bottom of
the Stack window.  This may seem backwards, but it turns out to be
less distracting in regular use.
</p>
<a name="index-Stack-levels"></a>
<a name="index-Levels-of-stack"></a>
<p>The numbers &lsquo;<samp>1:</samp>&rsquo; and &lsquo;<samp>2:</samp>&rsquo; on the left are <em>stack level
numbers</em>.  Old RPN calculators always had four stack levels called
&lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>y</samp>&rsquo;, &lsquo;<samp>z</samp>&rsquo;, and &lsquo;<samp>t</samp>&rsquo;.  Calc&rsquo;s stack can grow
as large as you like, so it uses numbers instead of letters.  Some
stack-manipulation commands accept a numeric argument that says
which stack level to work on.  Normal commands like <kbd>+</kbd> always
work on the top few levels of the stack.
</p>
<p>The Stack buffer is just an Emacs buffer, and you can move around in
it using the regular Emacs motion commands.  But no matter where the
cursor is, even if you have scrolled the &lsquo;<samp>.</samp>&rsquo; marker out of
view, most Calc commands always move the cursor back down to level 1
before doing anything.  It is possible to move the &lsquo;<samp>.</samp>&rsquo; marker
upwards through the stack, temporarily &ldquo;hiding&rdquo; some numbers from
commands like <kbd>+</kbd>.  This is called <em>stack truncation</em> and
we will not cover it in this tutorial; see <a href="#Truncating-the-Stack">Truncating the Stack</a>,
if you are interested.
</p>
<p>You don&rsquo;t really need the second <tt class="key">RET</tt> in <kbd>2 <span class="key">RET</span> 3
<span class="key">RET</span> +</kbd>.  That&rsquo;s because if you type any operator name or
other non-numeric key when you are entering a number, the Calculator
automatically enters that number and then does the requested command.
Thus <kbd>2 <span class="key">RET</span> 3 +</kbd> will work just as well.
</p>
<p>Examples in this tutorial will often omit <tt class="key">RET</tt> even when the
stack displays shown would only happen if you did press <tt class="key">RET</tt>:
</p>
<div class="smallexample">
<pre class="smallexample">1:  2          2:  2          1:  5
    .          1:  3              .
                   .

  2 <span class="key">RET</span>            3              +
</pre></div>

<p>Here, after pressing <kbd>3</kbd> the stack would really show &lsquo;<samp>1:  2</samp>&rsquo;
with &lsquo;<samp>Calc: 3</samp>&rsquo; in the minibuffer.  In these situations, you can
press the optional <tt class="key">RET</tt> to see the stack as the figure shows.
</p>
<p>(&bull;) <strong>Exercise 1.</strong>  (This tutorial will include exercises
at various points.  Try them if you wish.  Answers to all the exercises
are located at the end of the Tutorial chapter.  Each exercise will
include a cross-reference to its particular answer.  If you are
reading with the Emacs Info system, press <kbd>f</kbd> and the
exercise number to go to the answer, then the letter <kbd>l</kbd> to
return to where you were.)
</p>
<p>Here&rsquo;s the first exercise:  What will the keystrokes <kbd>1 <span class="key">RET</span> 2
<span class="key">RET</span> 3 <span class="key">RET</span> 4 + * -</kbd> compute?  (&lsquo;<samp>*</samp>&rsquo; is the symbol for
multiplication.)  Figure it out by hand, then try it with Calc to see
if you&rsquo;re right.  See <a href="#RPN-Answer-1">1</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Compute
&lsquo;<samp>2*4 + 7*9.5 + 5/4</samp>&rsquo;
using the stack.  See <a href="#RPN-Answer-2">2</a>. (&bull;)
</p>
<p>The <tt class="key">DEL</tt> key is called Backspace on some keyboards.  It is
whatever key you would use to correct a simple typing error when
regularly using Emacs.  The <tt class="key">DEL</tt> key pops and throws away the
top value on the stack.  (You can still get that value back from
the Trail if you should need it later on.)  There are many places
in this tutorial where we assume you have used <tt class="key">DEL</tt> to erase the
results of the previous example at the beginning of a new example.
In the few places where it is really important to use <tt class="key">DEL</tt> to
clear away old results, the text will remind you to do so.
</p>
<p>(It won&rsquo;t hurt to let things accumulate on the stack, except that
whenever you give a display-mode-changing command Calc will have to
spend a long time reformatting such a large stack.)
</p>
<p>Since the <kbd>-</kbd> key is also an operator (it subtracts the top two
stack elements), how does one enter a negative number?  Calc uses
the <kbd>_</kbd> (underscore) key to act like the minus sign in a number.
So, typing <kbd>-5 <span class="key">RET</span></kbd> won&rsquo;t work because the <kbd>-</kbd> key
will try to do a subtraction, but <kbd>_5 <span class="key">RET</span></kbd> works just fine.
</p>
<p>You can also press <kbd>n</kbd>, which means &ldquo;change sign.&rdquo;  It changes
the number at the top of the stack (or the number being entered)
from positive to negative or vice-versa:  <kbd>5 n <span class="key">RET</span></kbd>.
</p>
<a name="index-Duplicating-a-stack-entry"></a>
<p>If you press <tt class="key">RET</tt> when you&rsquo;re not entering a number, the effect
is to duplicate the top number on the stack.  Consider this calculation:
</p>
<div class="smallexample">
<pre class="smallexample">1:  3          2:  3          1:  9          2:  9          1:  81
    .          1:  3              .          1:  9              .
                   .                             .

  3 <span class="key">RET</span>           <span class="key">RET</span>             *             <span class="key">RET</span>             *
</pre></div>

<p>(Of course, an easier way to do this would be <kbd>3 <span class="key">RET</span> 4 ^</kbd>,
to raise 3 to the fourth power.)
</p>
<p>The space-bar key (denoted <tt class="key">SPC</tt> here) performs the same function
as <tt class="key">RET</tt>; you could replace all three occurrences of <tt class="key">RET</tt> in
the above example with <tt class="key">SPC</tt> and the effect would be the same.
</p>
<a name="index-Exchanging-stack-entries"></a>
<p>Another stack manipulation key is <tt class="key">TAB</tt>.  This exchanges the top
two stack entries.  Suppose you have computed <kbd>2 <span class="key">RET</span> 3 +</kbd>
to get 5, and then you realize what you really wanted to compute
was &lsquo;<samp>20 / (2+3)</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">1:  5          2:  5          2:  20         1:  4
    .          1:  20         1:  5              .
                   .              .

 2 <span class="key">RET</span> 3 +         20            <span class="key">TAB</span>             /
</pre></div>

<p>Planning ahead, the calculation would have gone like this:
</p>
<div class="smallexample">
<pre class="smallexample">1:  20         2:  20         3:  20         2:  20         1:  4
    .          1:  2          2:  2          1:  5              .
                   .          1:  3              .
                                  .

  20 <span class="key">RET</span>         2 <span class="key">RET</span>            3              +              /
</pre></div>

<p>A related stack command is <kbd>M-<span class="key">TAB</span></kbd> (hold <tt class="key">META</tt> and type
<tt class="key">TAB</tt>).  It rotates the top three elements of the stack upward,
bringing the object in level 3 to the top.
</p>
<div class="smallexample">
<pre class="smallexample">1:  10         2:  10         3:  10         3:  20         3:  30
    .          1:  20         2:  20         2:  30         2:  10
                   .          1:  30         1:  10         1:  20
                                  .              .              .

  10 <span class="key">RET</span>         20 <span class="key">RET</span>         30 <span class="key">RET</span>         M-<span class="key">TAB</span>          M-<span class="key">TAB</span>
</pre></div>

<p>(&bull;) <strong>Exercise 3.</strong> Suppose the numbers 10, 20, and 30 are
on the stack.  Figure out how to add one to the number in level 2
without affecting the rest of the stack.  Also figure out how to add
one to the number in level 3.  See <a href="#RPN-Answer-3">3</a>. (&bull;)
</p>
<p>Operations like <kbd>+</kbd>, <kbd>-</kbd>, <kbd>*</kbd>, <kbd>/</kbd>, and <kbd>^</kbd> pop two
arguments from the stack and push a result.  Operations like <kbd>n</kbd> and
<kbd>Q</kbd> (square root) pop a single number and push the result.  You can
think of them as simply operating on the top element of the stack.
</p>
<div class="smallexample">
<pre class="smallexample">1:  3          1:  9          2:  9          1:  25         1:  5
    .              .          1:  16             .              .
                                  .

  3 <span class="key">RET</span>          <span class="key">RET</span> *        4 <span class="key">RET</span> <span class="key">RET</span> *        +              Q
</pre></div>

<p>(Note that capital <kbd>Q</kbd> means to hold down the Shift key while
typing <kbd>q</kbd>.  Remember, plain unshifted <kbd>q</kbd> is the Quit command.)
</p>
<a name="index-Pythagorean-Theorem"></a>
<p>Here we&rsquo;ve used the Pythagorean Theorem to determine the hypotenuse of a
right triangle.  Calc actually has a built-in command for that called
<kbd>f h</kbd>, but let&rsquo;s suppose we can&rsquo;t remember the necessary keystrokes.
We can still enter it by its full name using <kbd>M-x</kbd> notation:
</p>
<div class="smallexample">
<pre class="smallexample">1:  3          2:  3          1:  5
    .          1:  4              .
                   .

  3 <span class="key">RET</span>          4 <span class="key">RET</span>      M-x calc-hypot
</pre></div>

<p>All Calculator commands begin with the word &lsquo;<samp>calc-</samp>&rsquo;.  Since it
gets tiring to type this, Calc provides an <kbd>x</kbd> key which is just
like the regular Emacs <kbd>M-x</kbd> key except that it types the &lsquo;<samp>calc-</samp>&rsquo;
prefix for you:
</p>
<div class="smallexample">
<pre class="smallexample">1:  3          2:  3          1:  5
    .          1:  4              .
                   .

  3 <span class="key">RET</span>          4 <span class="key">RET</span>         x hypot
</pre></div>

<p>What happens if you take the square root of a negative number?
</p>
<div class="smallexample">
<pre class="smallexample">1:  4          1:  -4         1:  (0, 2)
    .              .              .

  4 <span class="key">RET</span>            n              Q
</pre></div>

<p>The notation &lsquo;<samp>(a, b)</samp>&rsquo; represents a complex number.
Complex numbers are more traditionally written &lsquo;<samp>a + b i</samp>&rsquo;;
Calc can display in this format, too, but for now we&rsquo;ll stick to the
&lsquo;<samp>(a, b)</samp>&rsquo; notation.
</p>
<p>If you don&rsquo;t know how complex numbers work, you can safely ignore this
feature.  Complex numbers only arise from operations that would be
errors in a calculator that didn&rsquo;t have complex numbers.  (For example,
taking the square root or logarithm of a negative number produces a
complex result.)
</p>
<p>Complex numbers are entered in the notation shown.  The <kbd>(</kbd> and
<kbd>,</kbd> and <kbd>)</kbd> keys manipulate &ldquo;incomplete complex numbers.&rdquo;
</p>
<div class="smallexample">
<pre class="smallexample">1:  ( ...      2:  ( ...      1:  (2, ...    1:  (2, ...    1:  (2, 3)
    .          1:  2              .              3              .
                   .                             .

    (              2              ,              3              )
</pre></div>

<p>You can perform calculations while entering parts of incomplete objects.
However, an incomplete object cannot actually participate in a calculation:
</p>
<div class="smallexample">
<pre class="smallexample">1:  ( ...      2:  ( ...      3:  ( ...      1:  ( ...      1:  ( ...
    .          1:  2          2:  2              5              5
                   .          1:  3              .              .
                                  .
                                                             (error)
    (             2 <span class="key">RET</span>           3              +              +
</pre></div>

<p>Adding 5 to an incomplete object makes no sense, so the last command
produces an error message and leaves the stack the same.
</p>
<p>Incomplete objects can&rsquo;t participate in arithmetic, but they can be
moved around by the regular stack commands.
</p>
<div class="smallexample">
<pre class="smallexample">2:  2          3:  2          3:  3          1:  ( ...      1:  (2, 3)
1:  3          2:  3          2:  ( ...          2              .
    .          1:  ( ...      1:  2              3
                   .              .              .

2 <span class="key">RET</span> 3 <span class="key">RET</span>        (            M-<span class="key">TAB</span>          M-<span class="key">TAB</span>            )
</pre></div>

<p>Note that the <kbd>,</kbd> (comma) key did not have to be used here.
When you press <kbd>)</kbd> all the stack entries between the incomplete
entry and the top are collected, so there&rsquo;s never really a reason
to use the comma.  It&rsquo;s up to you.
</p>
<p>(&bull;) <strong>Exercise 4.</strong>  To enter the complex number &lsquo;<samp>(2, 3)</samp>&rsquo;,
your friend Joe typed <kbd>( 2 , <span class="key">SPC</span> 3 )</kbd>.  What happened?
(Joe thought of a clever way to correct his mistake in only two
keystrokes, but it didn&rsquo;t quite work.  Try it to find out why.)
See <a href="#RPN-Answer-4">4</a>. (&bull;)
</p>
<p>Vectors are entered the same way as complex numbers, but with square
brackets in place of parentheses.  We&rsquo;ll meet vectors again later in
the tutorial.
</p>
<p>Any Emacs command can be given a <em>numeric prefix argument</em> by
typing a series of <tt class="key">META</tt>-digits beforehand.  If <tt class="key">META</tt> is
awkward for you, you can instead type <kbd>C-u</kbd> followed by the
necessary digits.  Numeric prefix arguments can be negative, as in
<kbd>M-- M-3 M-5</kbd> or <kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">-</span>&nbsp;3&nbsp;5</kbd><!-- /@w -->.  Calc commands use numeric
prefix arguments in a variety of ways.  For example, a numeric prefix
on the <kbd>+</kbd> operator adds any number of stack entries at once:
</p>
<div class="smallexample">
<pre class="smallexample">1:  10         2:  10         3:  10         3:  10         1:  60
    .          1:  20         2:  20         2:  20             .
                   .          1:  30         1:  30
                                  .              .

  10 <span class="key">RET</span>         20 <span class="key">RET</span>         30 <span class="key">RET</span>         C-u 3            +
</pre></div>

<p>For stack manipulation commands like <tt class="key">RET</tt>, a positive numeric
prefix argument operates on the top <var>n</var> stack entries at once.  A
negative argument operates on the entry in level <var>n</var> only.  An
argument of zero operates on the entire stack.  In this example, we copy
the second-to-top element of the stack:
</p>
<div class="smallexample">
<pre class="smallexample">1:  10         2:  10         3:  10         3:  10         4:  10
    .          1:  20         2:  20         2:  20         3:  20
                   .          1:  30         1:  30         2:  30
                                  .              .          1:  20
                                                                .

  10 <span class="key">RET</span>         20 <span class="key">RET</span>         30 <span class="key">RET</span>         C-u -2          <span class="key">RET</span>
</pre></div>

<a name="index-Clearing-the-stack"></a>
<a name="index-Emptying-the-stack"></a>
<p>Another common idiom is <kbd>M-0 <span class="key">DEL</span></kbd>, which clears the stack.
(The <kbd>M-0</kbd> numeric prefix tells <tt class="key">DEL</tt> to operate on the
entire stack.)
</p>
<hr>
<a name="Algebraic-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Undo-Tutorial" accesskey="n" rel="next">Undo Tutorial</a>, Previous: <a href="#RPN-Tutorial" accesskey="p" rel="prev">RPN Tutorial</a>, Up: <a href="#Basic-Tutorial" accesskey="u" rel="up">Basic Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic_002dStyle-Calculations"></a>
<h4 class="subsection">2.1.2 Algebraic-Style Calculations</h4>

<p>If you are not used to RPN notation, you may prefer to operate the
Calculator in Algebraic mode, which is closer to the way
non-RPN calculators work.  In Algebraic mode, you enter formulas
in traditional &lsquo;<samp>2+3</samp>&rsquo; notation.
</p>
<p><strong>Notice:</strong> Calc gives &lsquo;<samp>/</samp>&rsquo; lower precedence than &lsquo;<samp>*</samp>&rsquo;, so
that &lsquo;<samp>a/b*c</samp>&rsquo; is interpreted as &lsquo;<samp>a/(b*c)</samp>&rsquo;; this is not
standard across all computer languages.  See below for details.
</p>
<p>You don&rsquo;t really need any special &ldquo;mode&rdquo; to enter algebraic formulas.
You can enter a formula at any time by pressing the apostrophe (<kbd>'</kbd>)
key.  Answer the prompt with the desired formula, then press <tt class="key">RET</tt>.
The formula is evaluated and the result is pushed onto the RPN stack.
If you don&rsquo;t want to think in RPN at all, you can enter your whole
computation as a formula, read the result from the stack, then press
<tt class="key">DEL</tt> to delete it from the stack.
</p>
<p>Try pressing the apostrophe key, then <kbd>2+3+4</kbd>, then <tt class="key">RET</tt>.
The result should be the number 9.
</p>
<p>Algebraic formulas use the operators &lsquo;<samp>+</samp>&rsquo;, &lsquo;<samp>-</samp>&rsquo;, &lsquo;<samp>*</samp>&rsquo;,
&lsquo;<samp>/</samp>&rsquo;, and &lsquo;<samp>^</samp>&rsquo;.  You can use parentheses to make the order
of evaluation clear.  In the absence of parentheses, &lsquo;<samp>^</samp>&rsquo; is
evaluated first, then &lsquo;<samp>*</samp>&rsquo;, then &lsquo;<samp>/</samp>&rsquo;, then finally
&lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>-</samp>&rsquo;.  For example, the expression
</p>
<div class="example">
<pre class="example">2 + 3*4*5 / 6*7^8 - 9
</pre></div>

<p>is equivalent to
</p>
<div class="example">
<pre class="example">2 + ((3*4*5) / (6*(7^8)) - 9
</pre></div>

<p>or, in large mathematical notation,
</p>
<div class="example">
<pre class="example">    3 * 4 * 5
2 + --------- - 9
          8
     6 * 7
</pre></div>

<p>The result of this expression will be the number <i>-6.99999826533</i>.
</p>
<p>Calc&rsquo;s order of evaluation is the same as for most computer languages,
except that &lsquo;<samp>*</samp>&rsquo; binds more strongly than &lsquo;<samp>/</samp>&rsquo;, as the above
example shows.  As in normal mathematical notation, the &lsquo;<samp>*</samp>&rsquo; symbol
can often be omitted:  &lsquo;<samp>2 a</samp>&rsquo; is the same as &lsquo;<samp>2*a</samp>&rsquo;.
</p>
<p>Operators at the same level are evaluated from left to right, except
that &lsquo;<samp>^</samp>&rsquo; is evaluated from right to left.  Thus, &lsquo;<samp>2-3-4</samp>&rsquo; is
equivalent to &lsquo;<samp>(2-3)-4</samp>&rsquo; or <i>-5</i>, whereas &lsquo;<samp>2^3^4</samp>&rsquo; is equivalent
to &lsquo;<samp>2^(3^4)</samp>&rsquo; (a very large integer; try it!).
</p>
<p>If you tire of typing the apostrophe all the time, there is
Algebraic mode, where Calc automatically senses
when you are about to type an algebraic expression.  To enter this
mode, press the two letters <kbd>m&nbsp;a</kbd><!-- /@w -->.  (An &lsquo;<samp>Alg</samp>&rsquo; indicator
should appear in the Calc window&rsquo;s mode line.)
</p>
<p>Press <kbd>m a</kbd>, then <kbd>2+3+4</kbd> with no apostrophe, then <tt class="key">RET</tt>.
</p>
<p>In Algebraic mode, when you press any key that would normally begin
entering a number (such as a digit, a decimal point, or the <kbd>_</kbd>
key), or if you press <kbd>(</kbd> or <kbd>[</kbd>, Calc automatically begins
an algebraic entry.
</p>
<p>Functions which do not have operator symbols like &lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>*</samp>&rsquo;
must be entered in formulas using function-call notation.  For example,
the function name corresponding to the square-root key <kbd>Q</kbd> is
<code>sqrt</code>.  To compute a square root in a formula, you would use
the notation &lsquo;<samp>sqrt(<var>x</var>)</samp>&rsquo;.
</p>
<p>Press the apostrophe, then type <kbd>sqrt(5*2) - 3</kbd>.  The result should
be &lsquo;<samp>0.16227766017</samp>&rsquo;.
</p>
<p>Note that if the formula begins with a function name, you need to use
the apostrophe even if you are in Algebraic mode.  If you type <kbd>arcsin</kbd>
out of the blue, the <kbd>a r</kbd> will be taken as an Algebraic Rewrite
command, and the <kbd>csin</kbd> will be taken as the name of the rewrite
rule to use!
</p>
<p>Some people prefer to enter complex numbers and vectors in algebraic
form because they find RPN entry with incomplete objects to be too
distracting, even though they otherwise use Calc as an RPN calculator.
</p>
<p>Still in Algebraic mode, type:
</p>
<div class="smallexample">
<pre class="smallexample">1:  (2, 3)     2:  (2, 3)     1:  (8, -1)    2:  (8, -1)    1:  (9, -1)
    .          1:  (1, -2)        .          1:  1              .
                   .                             .

 (2,3) <span class="key">RET</span>      (1,-2) <span class="key">RET</span>        *              1 <span class="key">RET</span>          +
</pre></div>

<p>Algebraic mode allows us to enter complex numbers without pressing
an apostrophe first, but it also means we need to press <tt class="key">RET</tt>
after every entry, even for a simple number like &lsquo;<samp>1</samp>&rsquo;.
</p>
<p>(You can type <kbd>C-u m a</kbd> to enable a special Incomplete Algebraic
mode in which the <kbd>(</kbd> and <kbd>[</kbd> keys use algebraic entry even
though regular numeric keys still use RPN numeric entry.  There is also
Total Algebraic mode, started by typing <kbd>m t</kbd>, in which all
normal keys begin algebraic entry.  You must then use the <tt class="key">META</tt> key
to type Calc commands:  <kbd>M-m t</kbd> to get back out of Total Algebraic
mode, <kbd>M-q</kbd> to quit, etc.)
</p>
<p>If you&rsquo;re still in Algebraic mode, press <kbd>m a</kbd> again to turn it off.
</p>
<p>Actual non-RPN calculators use a mixture of algebraic and RPN styles.
In general, operators of two numbers (like <kbd>+</kbd> and <kbd>*</kbd>)
use algebraic form, but operators of one number (like <kbd>n</kbd> and <kbd>Q</kbd>)
use RPN form.  Also, a non-RPN calculator allows you to see the
intermediate results of a calculation as you go along.  You can
accomplish this in Calc by performing your calculation as a series
of algebraic entries, using the <kbd>$</kbd> sign to tie them together.
In an algebraic formula, <kbd>$</kbd> represents the number on the top
of the stack.  Here, we perform the calculation
&lsquo;<samp>sqrt(2*4+1)</samp>&rsquo;,
which on a traditional calculator would be done by pressing
<kbd>2 * 4 + 1 =</kbd> and then the square-root key.
</p>
<div class="smallexample">
<pre class="smallexample">1:  8          1:  9          1:  3
    .              .              .

  ' 2*4 <span class="key">RET</span>        $+1 <span class="key">RET</span>        Q
</pre></div>

<p>Notice that we didn&rsquo;t need to press an apostrophe for the <kbd>$+1</kbd>,
because the dollar sign always begins an algebraic entry.
</p>
<p>(&bull;) <strong>Exercise 1.</strong>  How could you get the same effect as
pressing <kbd>Q</kbd> but using an algebraic entry instead?  How about
if the <kbd>Q</kbd> key on your keyboard were broken?
See <a href="#Algebraic-Answer-1">1</a>. (&bull;)
</p>
<p>The notations <kbd>$$</kbd>, <kbd>$$$</kbd>, and so on stand for higher stack
entries.  For example, <kbd>' $$+$ <span class="key">RET</span></kbd> is just like typing <kbd>+</kbd>.
</p>
<p>Algebraic formulas can include <em>variables</em>.  To store in a
variable, press <kbd>s s</kbd>, then type the variable name, then press
<tt class="key">RET</tt>.  (There are actually two flavors of store command:
<kbd>s s</kbd> stores a number in a variable but also leaves the number
on the stack, while <kbd>s&nbsp;t</kbd><!-- /@w --> removes a number from the stack and
stores it in the variable.)  A variable name should consist of one
or more letters or digits, beginning with a letter.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17             .          1:  a + a^2    1:  306
    .                             .              .

    17          s t a <span class="key">RET</span>      ' a+a^2 <span class="key">RET</span>       =
</pre></div>

<p>The <kbd>=</kbd> key <em>evaluates</em> a formula by replacing all its
variables by the values that were stored in them.
</p>
<p>For RPN calculations, you can recall a variable&rsquo;s value on the
stack either by entering its name as a formula and pressing <kbd>=</kbd>,
or by using the <kbd>s r</kbd> command.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17         2:  17         3:  17         2:  17         1:  306
    .          1:  17         2:  17         1:  289            .
                   .          1:  2              .
                                  .

  s r a <span class="key">RET</span>     ' a <span class="key">RET</span> =         2              ^              +
</pre></div>

<p>If you press a single digit for a variable name (as in <kbd>s t 3</kbd>, you
get one of ten <em>quick variables</em> <code>q0</code> through <code>q9</code>.
They are &ldquo;quick&rdquo; simply because you don&rsquo;t have to type the letter
<code>q</code> or the <tt class="key">RET</tt> after their names.  In fact, you can type
simply <kbd>s 3</kbd> as a shorthand for <kbd>s s 3</kbd>, and likewise for
<kbd>t 3</kbd> and <kbd>r&nbsp;3</kbd><!-- /@w -->.
</p>
<p>Any variables in an algebraic formula for which you have not stored
values are left alone, even when you evaluate the formula.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2 a + 2 b     1:  2 b + 34
    .                 .

 ' 2a+2b <span class="key">RET</span>          =
</pre></div>

<p>Calls to function names which are undefined in Calc are also left
alone, as are calls for which the value is undefined.
</p>
<div class="smallexample">
<pre class="smallexample">1:  log10(0) + log10(x) + log10(5, 6) + foo(3) + 2
    .

 ' log10(100) + log10(0) + log10(x) + log10(5,6) + foo(3) <span class="key">RET</span>
</pre></div>

<p>In this example, the first call to <code>log10</code> works, but the other
calls are not evaluated.  In the second call, the logarithm is
undefined for that value of the argument; in the third, the argument
is symbolic, and in the fourth, there are too many arguments.  In the
fifth case, there is no function called <code>foo</code>.  You will see a
&ldquo;Wrong number of arguments&rdquo; message referring to &lsquo;<samp>log10(5,6)</samp>&rsquo;.
Press the <kbd>w</kbd> (&ldquo;why&rdquo;) key to see any other messages that may
have arisen from the last calculation.  In this case you will get
&ldquo;logarithm of zero,&rdquo; then &ldquo;number expected: <code>x</code>&rdquo;.  Calc
automatically displays the first message only if the message is
sufficiently important; for example, Calc considers &ldquo;wrong number
of arguments&rdquo; and &ldquo;logarithm of zero&rdquo; to be important enough to
report automatically, while a message like &ldquo;number expected: <code>x</code>&rdquo;
will only show up if you explicitly press the <kbd>w</kbd> key.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Joe entered the formula &lsquo;<samp>2 x y</samp>&rsquo;,
stored 5 in <code>x</code>, pressed <kbd>=</kbd>, and got the expected result,
&lsquo;<samp>10 y</samp>&rsquo;.  He then tried the same for the formula &lsquo;<samp>2 x (1+y)</samp>&rsquo;,
expecting &lsquo;<samp>10 (1+y)</samp>&rsquo;, but it didn&rsquo;t work.  Why not?
See <a href="#Algebraic-Answer-2">2</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 3.</strong>  What result would you expect
<kbd>1 <span class="key">RET</span> 0 /</kbd> to give?  What if you then type <kbd>0 *</kbd>?
See <a href="#Algebraic-Answer-3">3</a>. (&bull;)
</p>
<p>One interesting way to work with variables is to use the
<em>evaluates-to</em> (&lsquo;<samp>=&gt;</samp>&rsquo;) operator.  It works like this:
Enter a formula algebraically in the usual way, but follow
the formula with an &lsquo;<samp>=&gt;</samp>&rsquo; symbol.  (There is also an <kbd>s =</kbd>
command which builds an &lsquo;<samp>=&gt;</samp>&rsquo; formula using the stack.)  On
the stack, you will see two copies of the formula with an &lsquo;<samp>=&gt;</samp>&rsquo;
between them.  The lefthand formula is exactly like you typed it;
the righthand formula has been evaluated as if by typing <kbd>=</kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">2:  2 + 3 =&gt; 5                     2:  2 + 3 =&gt; 5
1:  2 a + 2 b =&gt; 34 + 2 b          1:  2 a + 2 b =&gt; 20 + 2 b
    .                                  .

' 2+3 =&gt; <span class="key">RET</span>  ' 2a+2b <span class="key">RET</span> s =          10 s t a <span class="key">RET</span>
</pre></div>

<p>Notice that the instant we stored a new value in <code>a</code>, all
&lsquo;<samp>=&gt;</samp>&rsquo; operators already on the stack that referred to &lsquo;<samp>a</samp>&rsquo;
were updated to use the new value.  With &lsquo;<samp>=&gt;</samp>&rsquo;, you can push a
set of formulas on the stack, then change the variables experimentally
to see the effects on the formulas&rsquo; values.
</p>
<p>You can also &ldquo;unstore&rdquo; a variable when you are through with it:
</p>
<div class="smallexample">
<pre class="smallexample">2:  2 + 5 =&gt; 5
1:  2 a + 2 b =&gt; 2 a + 2 b
    .

    s u a <span class="key">RET</span>
</pre></div>

<p>We will encounter formulas involving variables and functions again
when we discuss the algebra and calculus features of the Calculator.
</p>
<hr>
<a name="Undo-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Modes-Tutorial" accesskey="n" rel="next">Modes Tutorial</a>, Previous: <a href="#Algebraic-Tutorial" accesskey="p" rel="prev">Algebraic Tutorial</a>, Up: <a href="#Basic-Tutorial" accesskey="u" rel="up">Basic Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Undo-and-Redo"></a>
<h4 class="subsection">2.1.3 Undo and Redo</h4>

<p>If you make a mistake, you can usually correct it by pressing shift-<kbd>U</kbd>,
the &ldquo;undo&rdquo; command.  First, clear the stack (<kbd>M-0 <span class="key">DEL</span></kbd>) and exit
and restart Calc (<kbd>C-x * * C-x * *</kbd>) to make sure things start off
with a clean slate.  Now:
</p>
<div class="smallexample">
<pre class="smallexample">1:  2          2:  2          1:  8          2:  2          1:  6
    .          1:  3              .          1:  3              .
                   .                             .

   2 <span class="key">RET</span>           3              ^              U              *
</pre></div>

<p>You can undo any number of times.  Calc keeps a complete record of
all you have done since you last opened the Calc window.  After the
above example, you could type:
</p>
<div class="smallexample">
<pre class="smallexample">1:  6          2:  2          1:  2              .              .
    .          1:  3              .
                   .
                                                             (error)
                   U              U              U              U
</pre></div>

<p>You can also type <kbd>D</kbd> to &ldquo;redo&rdquo; a command that you have undone
mistakenly.
</p>
<div class="smallexample">
<pre class="smallexample">    .          1:  2          2:  2          1:  6          1:  6
                   .          1:  3              .              .
                                  .
                                                             (error)
                   D              D              D              D
</pre></div>

<p>It was not possible to redo past the &lsquo;<samp>6</samp>&rsquo;, since that was placed there
by something other than an undo command.
</p>
<a name="index-Time-travel"></a>
<p>You can think of undo and redo as a sort of &ldquo;time machine.&rdquo;  Press
<kbd>U</kbd> to go backward in time, <kbd>D</kbd> to go forward.  If you go
backward and do something (like <kbd>*</kbd>) then, as any science fiction
reader knows, you have changed your future and you cannot go forward
again.  Thus, the inability to redo past the &lsquo;<samp>6</samp>&rsquo; even though there
was an earlier undo command.
</p>
<p>You can always recall an earlier result using the Trail.  We&rsquo;ve ignored
the trail so far, but it has been faithfully recording everything we
did since we loaded the Calculator.  If the Trail is not displayed,
press <kbd>t d</kbd> now to turn it on.
</p>
<p>Let&rsquo;s try grabbing an earlier result.  The &lsquo;<samp>8</samp>&rsquo; we computed was
undone by a <kbd>U</kbd> command, and was lost even to Redo when we pressed
<kbd>*</kbd>, but it&rsquo;s still there in the trail.  There should be a little
&lsquo;<samp>&gt;</samp>&rsquo; arrow (the <em>trail pointer</em>) resting on the last trail
entry.  If there isn&rsquo;t, press <kbd>t ]</kbd> to reset the trail pointer.
Now, press <kbd>t&nbsp;p</kbd><!-- /@w --> to move the arrow onto the line containing
&lsquo;<samp>8</samp>&rsquo;, and press <kbd>t&nbsp;y</kbd><!-- /@w --> to &ldquo;yank&rdquo; that number back onto the
stack.
</p>
<p>If you press <kbd>t ]</kbd> again, you will see that even our Yank command
went into the trail.
</p>
<p>Let&rsquo;s go further back in time.  Earlier in the tutorial we computed
a huge integer using the formula &lsquo;<samp>2^3^4</samp>&rsquo;.  We don&rsquo;t remember
what it was, but the first digits were &ldquo;241&rdquo;.  Press <kbd>t r</kbd>
(which stands for trail-search-reverse), then type <kbd>241</kbd>.
The trail cursor will jump back to the next previous occurrence of
the string &ldquo;241&rdquo; in the trail.  This is just a regular Emacs
incremental search; you can now press <kbd>C-s</kbd> or <kbd>C-r</kbd> to
continue the search forwards or backwards as you like.
</p>
<p>To finish the search, press <tt class="key">RET</tt>.  This halts the incremental
search and leaves the trail pointer at the thing we found.  Now we
can type <kbd>t y</kbd> to yank that number onto the stack.  If we hadn&rsquo;t
remembered the &ldquo;241&rdquo;, we could simply have searched for <kbd>2^3^4</kbd>,
then pressed <kbd><span class="key">RET</span> t n</kbd> to halt and then move to the next item.
</p>
<p>You may have noticed that all the trail-related commands begin with
the letter <kbd>t</kbd>.  (The store-and-recall commands, on the other hand,
all began with <kbd>s</kbd>.)  Calc has so many commands that there aren&rsquo;t
enough keys for all of them, so various commands are grouped into
two-letter sequences where the first letter is called the <em>prefix</em>
key.  If you type a prefix key by accident, you can press <kbd>C-g</kbd>
to cancel it.  (In fact, you can press <kbd>C-g</kbd> to cancel almost
anything in Emacs.)  To get help on a prefix key, press that key
followed by <kbd>?</kbd>.  Some prefixes have several lines of help,
so you need to press <kbd>?</kbd> repeatedly to see them all.
You can also type <kbd>h h</kbd> to see all the help at once.
</p>
<p>Try pressing <kbd>t ?</kbd> now.  You will see a line of the form,
</p>
<div class="smallexample">
<pre class="smallexample">trail/time: Display; Fwd, Back; Next, Prev, Here, [, ]; Yank:  [MORE]  t-
</pre></div>

<p>The word &ldquo;trail&rdquo; indicates that the <kbd>t</kbd> prefix key contains
trail-related commands.  Each entry on the line shows one command,
with a single capital letter showing which letter you press to get
that command.  We have used <kbd>t n</kbd>, <kbd>t p</kbd>, <kbd>t ]</kbd>, and
<kbd>t y</kbd> so far.  The &lsquo;<samp>[MORE]</samp>&rsquo; means you can press <kbd>?</kbd>
again to see more <kbd>t</kbd>-prefix commands.  Notice that the commands
are roughly divided (by semicolons) into related groups.
</p>
<p>When you are in the help display for a prefix key, the prefix is
still active.  If you press another key, like <kbd>y</kbd> for example,
it will be interpreted as a <kbd>t y</kbd> command.  If all you wanted
was to look at the help messages, press <kbd>C-g</kbd> afterwards to cancel
the prefix.
</p>
<p>One more way to correct an error is by editing the stack entries.
The actual Stack buffer is marked read-only and must not be edited
directly, but you can press <kbd>`</kbd> (grave accent)
to edit a stack entry.
</p>
<p>Try entering &lsquo;<samp>3.141439</samp>&rsquo; now.  If this is supposed to represent
&lsquo;<samp>pi</samp>&rsquo;, it&rsquo;s got several errors.  Press <kbd>`</kbd> to edit this number.
Now use the normal Emacs cursor motion and editing keys to change
the second 4 to a 5, and to transpose the 3 and the 9.  When you
press <tt class="key">RET</tt>, the number on the stack will be replaced by your
new number.  This works for formulas, vectors, and all other types
of values you can put on the stack.  The <kbd>`</kbd> key also works
during entry of a number or algebraic formula.
</p>
<hr>
<a name="Modes-Tutorial"></a>
<div class="header">
<p>
Previous: <a href="#Undo-Tutorial" accesskey="p" rel="prev">Undo Tutorial</a>, Up: <a href="#Basic-Tutorial" accesskey="u" rel="up">Basic Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mode_002dSetting-Commands"></a>
<h4 class="subsection">2.1.4 Mode-Setting Commands</h4>

<p>Calc has many types of <em>modes</em> that affect the way it interprets
your commands or the way it displays data.  We have already seen one
mode, namely Algebraic mode.  There are many others, too; we&rsquo;ll
try some of the most common ones here.
</p>
<p>Perhaps the most fundamental mode in Calc is the current <em>precision</em>.
Notice the &lsquo;<samp>12</samp>&rsquo; on the Calc window&rsquo;s mode line:
</p>
<div class="smallexample">
<pre class="smallexample">--%*-Calc: 12 Deg       (Calculator)----All------
</pre></div>

<p>Most of the symbols there are Emacs things you don&rsquo;t need to worry
about, but the &lsquo;<samp>12</samp>&rsquo; and the &lsquo;<samp>Deg</samp>&rsquo; are mode indicators.
The &lsquo;<samp>12</samp>&rsquo; means that calculations should always be carried to
12 significant figures.  That is why, when we type <kbd>1 <span class="key">RET</span> 7 /</kbd>,
we get &lsquo;<samp>0.142857142857</samp>&rsquo; with exactly 12 digits, not counting
leading and trailing zeros.
</p>
<p>You can set the precision to anything you like by pressing <kbd>p</kbd>,
then entering a suitable number.  Try pressing <kbd>p 30 <span class="key">RET</span></kbd>,
then doing <kbd>1 <span class="key">RET</span> 7 /</kbd> again:
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.142857142857
2:  0.142857142857142857142857142857
    .
</pre></div>

<p>Although the precision can be set arbitrarily high, Calc always
has to have <em>some</em> value for the current precision.  After
all, the true value &lsquo;<samp>1/7</samp>&rsquo; is an infinitely repeating decimal;
Calc has to stop somewhere.
</p>
<p>Of course, calculations are slower the more digits you request.
Press <kbd>p&nbsp;12</kbd><!-- /@w --> now to set the precision back down to the default.
</p>
<p>Calculations always use the current precision.  For example, even
though we have a 30-digit value for &lsquo;<samp>1/7</samp>&rsquo; on the stack, if
we use it in a calculation in 12-digit mode it will be rounded
down to 12 digits before it is used.  Try it; press <tt class="key">RET</tt> to
duplicate the number, then <kbd>1&nbsp;+</kbd><!-- /@w -->.  Notice that the <tt class="key">RET</tt>
key didn&rsquo;t round the number, because it doesn&rsquo;t do any calculation.
But the instant we pressed <kbd>+</kbd>, the number was rounded down.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.142857142857
2:  0.142857142857142857142857142857
3:  1.14285714286
    .
</pre></div>

<p>In fact, since we added a digit on the left, we had to lose one
digit on the right from even the 12-digit value of &lsquo;<samp>1/7</samp>&rsquo;.
</p>
<p>How did we get more than 12 digits when we computed &lsquo;<samp>2^3^4</samp>&rsquo;?  The
answer is that Calc makes a distinction between <em>integers</em> and
<em>floating-point</em> numbers, or <em>floats</em>.  An integer is a number
that does not contain a decimal point.  There is no such thing as an
&ldquo;infinitely repeating fraction integer,&rdquo; so Calc doesn&rsquo;t have to limit
itself.  If you asked for &lsquo;<samp>2^10000</samp>&rsquo; (don&rsquo;t try this!), you would
have to wait a long time but you would eventually get an exact answer.
If you ask for &lsquo;<samp>2.^10000</samp>&rsquo;, you will quickly get an answer which is
correct only to 12 places.  The decimal point tells Calc that it should
use floating-point arithmetic to get the answer, not exact integer
arithmetic.
</p>
<p>You can use the <kbd>F</kbd> (<code>calc-floor</code>) command to convert a
floating-point value to an integer, and <kbd>c f</kbd> (<code>calc-float</code>)
to convert an integer to floating-point form.
</p>
<p>Let&rsquo;s try entering that last calculation:
</p>
<div class="smallexample">
<pre class="smallexample">1:  2.         2:  2.         1:  1.99506311689e3010
    .          1:  10000          .
                   .

  2.0 <span class="key">RET</span>          10000 <span class="key">RET</span>      ^
</pre></div>

<p><a name="index-Scientific-notation_002c-entry-of"></a>
Notice the letter &lsquo;<samp>e</samp>&rsquo; in there.  It represents &ldquo;times ten to the
power of,&rdquo; and is used by Calc automatically whenever writing the
number out fully would introduce more extra zeros than you probably
want to see.  You can enter numbers in this notation, too.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2.         2:  2.         1:  1.99506311678e3010
    .          1:  10000.         .
                   .

  2.0 <span class="key">RET</span>          1e4 <span class="key">RET</span>        ^
</pre></div>

<a name="index-Round_002doff-errors"></a>
<p>Hey, the answer is different!  Look closely at the middle columns
of the two examples.  In the first, the stack contained the
exact integer &lsquo;<samp>10000</samp>&rsquo;, but in the second it contained
a floating-point value with a decimal point.  When you raise a
number to an integer power, Calc uses repeated squaring and
multiplication to get the answer.  When you use a floating-point
power, Calc uses logarithms and exponentials.  As you can see,
a slight error crept in during one of these methods.  Which
one should we trust?  Let&rsquo;s raise the precision a bit and find
out:
</p>
<div class="smallexample">
<pre class="smallexample">    .          1:  2.         2:  2.         1:  1.995063116880828e3010
                   .          1:  10000.         .
                                  .

 p 16 <span class="key">RET</span>        2. <span class="key">RET</span>           1e4            ^    p 12 <span class="key">RET</span>
</pre></div>

<p><a name="index-Guard-digits"></a>
Presumably, it doesn&rsquo;t matter whether we do this higher-precision
calculation using an integer or floating-point power, since we
have added enough &ldquo;guard digits&rdquo; to trust the first 12 digits
no matter what.  And the verdict is&hellip;  Integer powers were more
accurate; in fact, the result was only off by one unit in the
last place.
</p>
<a name="index-Guard-digits-1"></a>
<p>Calc does many of its internal calculations to a slightly higher
precision, but it doesn&rsquo;t always bump the precision up enough.
In each case, Calc added about two digits of precision during
its calculation and then rounded back down to 12 digits
afterward.  In one case, it was enough; in the other, it
wasn&rsquo;t.  If you really need <var>x</var> digits of precision, it
never hurts to do the calculation with a few extra guard digits.
</p>
<p>What if we want guard digits but don&rsquo;t want to look at them?
We can set the <em>float format</em>.  Calc supports four major
formats for floating-point numbers, called <em>normal</em>,
<em>fixed-point</em>, <em>scientific notation</em>, and <em>engineering
notation</em>.  You get them by pressing <kbd>d&nbsp;n</kbd><!-- /@w -->, <kbd>d f</kbd>,
<kbd>d s</kbd>, and <kbd>d e</kbd>, respectively.  In each case, you can
supply a numeric prefix argument which says how many digits
should be displayed.  As an example, let&rsquo;s put a few numbers
onto the stack and try some different display modes.  First,
use <kbd>M-0 <span class="key">DEL</span></kbd> to clear the stack, then enter the four
numbers shown here:
</p>
<div class="smallexample">
<pre class="smallexample">4:  12345      4:  12345      4:  12345      4:  12345      4:  12345
3:  12345.     3:  12300.     3:  1.2345e4   3:  1.23e4     3:  12345.000
2:  123.45     2:  123.       2:  1.2345e2   2:  1.23e2     2:  123.450
1:  12.345     1:  12.3       1:  1.2345e1   1:  1.23e1     1:  12.345
    .              .              .              .              .

   d n          M-3 d n          d s          M-3 d s        M-3 d f
</pre></div>

<p>Notice that when we typed <kbd>M-3 d n</kbd>, the numbers were rounded down
to three significant digits, but then when we typed <kbd>d s</kbd> all
five significant figures reappeared.  The float format does not
affect how numbers are stored, it only affects how they are
displayed.  Only the current precision governs the actual rounding
of numbers in the Calculator&rsquo;s memory.
</p>
<p>Engineering notation, not shown here, is like scientific notation
except the exponent (the power-of-ten part) is always adjusted to be
a multiple of three (as in &ldquo;kilo,&rdquo; &ldquo;micro,&rdquo; etc.).  As a result
there will be one, two, or three digits before the decimal point.
</p>
<p>Whenever you change a display-related mode, Calc redraws everything
in the stack.  This may be slow if there are many things on the stack,
so Calc allows you to type shift-<kbd>H</kbd> before any mode command to
prevent it from updating the stack.  Anything Calc displays after the
mode-changing command will appear in the new format.
</p>
<div class="smallexample">
<pre class="smallexample">4:  12345      4:  12345      4:  12345      4:  12345      4:  12345
3:  12345.000  3:  12345.000  3:  12345.000  3:  1.2345e4   3:  12345.
2:  123.450    2:  123.450    2:  1.2345e1   2:  1.2345e1   2:  123.45
1:  12.345     1:  1.2345e1   1:  1.2345e2   1:  1.2345e2   1:  12.345
    .              .              .              .              .

    H d s          <span class="key">DEL</span> U          <span class="key">TAB</span>            d <span class="key">SPC</span>          d n
</pre></div>

<p>Here the <kbd>H d s</kbd> command changes to scientific notation but without
updating the screen.  Deleting the top stack entry and undoing it back
causes it to show up in the new format; swapping the top two stack
entries reformats both entries.  The <kbd>d <span class="key">SPC</span></kbd> command refreshes the
whole stack.  The <kbd>d n</kbd> command changes back to the normal float
format; since it doesn&rsquo;t have an <kbd>H</kbd> prefix, it also updates all
the stack entries to be in <kbd>d n</kbd> format.
</p>
<p>Notice that the integer &lsquo;<samp>12345</samp>&rsquo; was not affected by any
of the float formats.  Integers are integers, and are always
displayed exactly.
</p>
<a name="index-Large-numbers_002c-readability"></a>
<p>Large integers have their own problems.  Let&rsquo;s look back at
the result of <kbd>2^3^4</kbd>.
</p>
<div class="example">
<pre class="example">2417851639229258349412352
</pre></div>

<p>Quick&mdash;how many digits does this have?  Try typing <kbd>d g</kbd>:
</p>
<div class="example">
<pre class="example">2,417,851,639,229,258,349,412,352
</pre></div>

<p>Now how many digits does this have?  It&rsquo;s much easier to tell!
We can actually group digits into clumps of any size.  Some
people prefer <kbd>M-5 d g</kbd>:
</p>
<div class="example">
<pre class="example">24178,51639,22925,83494,12352
</pre></div>

<p>Let&rsquo;s see what happens to floating-point numbers when they are grouped.
First, type <kbd>p 25 <span class="key">RET</span></kbd> to make sure we have enough precision
to get ourselves into trouble.  Now, type <kbd>1e13 /</kbd>:
</p>
<div class="example">
<pre class="example">24,17851,63922.9258349412352
</pre></div>

<p>The integer part is grouped but the fractional part isn&rsquo;t.  Now try
<kbd>M-- M-5 d g</kbd> (that&rsquo;s meta-minus-sign, meta-five):
</p>
<div class="example">
<pre class="example">24,17851,63922.92583,49412,352
</pre></div>

<p>If you find it hard to tell the decimal point from the commas, try
changing the grouping character to a space with <kbd>d , <span class="key">SPC</span></kbd>:
</p>
<div class="example">
<pre class="example">24 17851 63922.92583 49412 352
</pre></div>

<p>Type <kbd>d , ,</kbd> to restore the normal grouping character, then
<kbd>d g</kbd> again to turn grouping off.  Also, press <kbd>p 12</kbd> to
restore the default precision.
</p>
<p>Press <kbd>U</kbd> enough times to get the original big integer back.
(Notice that <kbd>U</kbd> does not undo each mode-setting command; if
you want to undo a mode-setting command, you have to do it yourself.)
Now, type <kbd>d r 16 <span class="key">RET</span></kbd>:
</p>
<div class="example">
<pre class="example">16#200000000000000000000
</pre></div>

<p>The number is now displayed in <em>hexadecimal</em>, or &ldquo;base-16&rdquo; form.
Suddenly it looks pretty simple; this should be no surprise, since we
got this number by computing a power of two, and 16 is a power of 2.
In fact, we can use <kbd>d&nbsp;r&nbsp;2&nbsp;<span class="key">RET</span></kbd><!-- /@w --> to see it in actual binary
form:
</p>
<div class="example">
<pre class="example">2#1000000000000000000000000000000000000000000000000000000 &hellip;
</pre></div>

<p>We don&rsquo;t have enough space here to show all the zeros!  They won&rsquo;t
fit on a typical screen, either, so you will have to use horizontal
scrolling to see them all.  Press <kbd>&lt;</kbd> and <kbd>&gt;</kbd> to scroll the
stack window left and right by half its width.  Another way to view
something large is to press <kbd>`</kbd> (grave accent) to edit the top of
stack in a separate window.  (Press <kbd>C-c C-c</kbd> when you are done.)
</p>
<p>You can enter non-decimal numbers using the <kbd>#</kbd> symbol, too.
Let&rsquo;s see what the hexadecimal number &lsquo;<samp>5FE</samp>&rsquo; looks like in
binary.  Type <kbd>16#5FE</kbd> (the letters can be typed in upper or
lower case; they will always appear in upper case).  It will also
help to turn grouping on with <kbd>d g</kbd>:
</p>
<div class="example">
<pre class="example">2#101,1111,1110
</pre></div>

<p>Notice that <kbd>d g</kbd> groups by fours by default if the display radix
is binary or hexadecimal, but by threes if it is decimal, octal, or any
other radix.
</p>
<p>Now let&rsquo;s see that number in decimal; type <kbd>d r 10</kbd>:
</p>
<div class="example">
<pre class="example">1,534
</pre></div>

<p>Numbers are not <em>stored</em> with any particular radix attached.  They&rsquo;re
just numbers; they can be entered in any radix, and are always displayed
in whatever radix you&rsquo;ve chosen with <kbd>d r</kbd>.  The current radix applies
to integers, fractions, and floats.
</p>
<a name="index-Roundoff-errors_002c-in-non_002ddecimal-numbers"></a>
<p>(&bull;) <strong>Exercise 1.</strong>  Your friend Joe tried to enter one-third
as &lsquo;<samp>3#0.1</samp>&rsquo; in <kbd>d r 3</kbd> mode with a precision of 12.  He got
&lsquo;<samp>3#0.0222222...</samp>&rsquo; (with 25 2&rsquo;s) in the display.  When he multiplied
that by three, he got &lsquo;<samp>3#0.222222...</samp>&rsquo; instead of the expected
&lsquo;<samp>3#1</samp>&rsquo;.  Next, Joe entered &lsquo;<samp>3#0.2</samp>&rsquo; and, to his great relief,
saw &lsquo;<samp>3#0.2</samp>&rsquo; on the screen.  But when he typed <kbd>2 /</kbd>, he got
&lsquo;<samp>3#0.10000001</samp>&rsquo; (some zeros omitted).  What&rsquo;s going on here?
See <a href="#Modes-Answer-1">1</a>. (&bull;)
</p>
<a name="index-Scientific-notation_002c-in-non_002ddecimal-numbers"></a>
<p>(&bull;) <strong>Exercise 2.</strong>  Scientific notation works in non-decimal
modes in the natural way (the exponent is a power of the radix instead of
a power of ten, although the exponent itself is always written in decimal).
Thus &lsquo;<samp>8#1.23e3 = 8#1230.0</samp>&rsquo;.  Suppose we have the hexadecimal number
&lsquo;<samp>f.e8f</samp>&rsquo; times 16 to the 15th power:  We write &lsquo;<samp>16#f.e8fe15</samp>&rsquo;.
What is wrong with this picture?  What could we write instead that would
work better?  See <a href="#Modes-Answer-2">2</a>. (&bull;)
</p>
<p>The <kbd>m</kbd> prefix key has another set of modes, relating to the way
Calc interprets your inputs and does computations.  Whereas <kbd>d</kbd>-prefix
modes generally affect the way things look, <kbd>m</kbd>-prefix modes affect
the way they are actually computed.
</p>
<p>The most popular <kbd>m</kbd>-prefix mode is the <em>angular mode</em>.  Notice
the &lsquo;<samp>Deg</samp>&rsquo; indicator in the mode line.  This means that if you use
a command that interprets a number as an angle, it will assume the
angle is measured in degrees.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">1:  45         1:  0.707106781187   1:  0.500000000001    1:  0.5
    .              .                    .                     .

    45             S                    2 ^                   c 1
</pre></div>

<p>The shift-<kbd>S</kbd> command computes the sine of an angle.  The sine
of 45 degrees is
&lsquo;<samp>sqrt(2)/2</samp>&rsquo;;
squaring this yields &lsquo;<samp>2/4 = 0.5</samp>&rsquo;.  However, there has been a slight
roundoff error because the representation of
&lsquo;<samp>sqrt(2)/2</samp>&rsquo;
wasn&rsquo;t exact.  The <kbd>c 1</kbd> command is a handy way to clean up numbers
in this case; it temporarily reduces the precision by one digit while it
re-rounds the number on the top of the stack.
</p>
<a name="index-Roundoff-errors_002c-examples"></a>
<p>(&bull;) <strong>Exercise 3.</strong>  Your friend Joe computed the sine
of 45 degrees as shown above, then, hoping to avoid an inexact
result, he increased the precision to 16 digits before squaring.
What happened?  See <a href="#Modes-Answer-3">3</a>. (&bull;)
</p>
<p>To do this calculation in radians, we would type <kbd>m r</kbd> first.
(The indicator changes to &lsquo;<samp>Rad</samp>&rsquo;.)  45 degrees corresponds to
&lsquo;<samp>pi/4</samp>&rsquo; radians.  To get &lsquo;<samp>pi</samp>&rsquo;, press the <kbd>P</kbd> key.  (Once
again, this is a shifted capital <kbd>P</kbd>.  Remember, unshifted
<kbd>p</kbd> sets the precision.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  3.14159265359   1:  0.785398163398   1:  0.707106781187
    .                   .                .

    P                   4 /       m r    S
</pre></div>

<p>Likewise, inverse trigonometric functions generate results in
either radians or degrees, depending on the current angular mode.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.707106781187   1:  0.785398163398   1:  45.
    .                    .                    .

    .5 Q        m r      I S        m d       U I S
</pre></div>

<p>Here we compute the Inverse Sine of
&lsquo;<samp>sqrt(0.5)</samp>&rsquo;,
first in radians, then in degrees.
</p>
<p>Use <kbd>c d</kbd> and <kbd>c r</kbd> to convert a number from radians to degrees
and vice-versa.
</p>
<div class="smallexample">
<pre class="smallexample">1:  45         1:  0.785398163397     1:  45.
    .              .                      .

    45             c r                    c d
</pre></div>

<p>Another interesting mode is <em>Fraction mode</em>.  Normally,
dividing two integers produces a floating-point result if the
quotient can&rsquo;t be expressed as an exact integer.  Fraction mode
causes integer division to produce a fraction, i.e., a rational
number, instead.
</p>
<div class="smallexample">
<pre class="smallexample">2:  12         1:  1.33333333333    1:  4:3
1:  9              .                    .
    .

 12 <span class="key">RET</span> 9          /          m f       U /      m f
</pre></div>

<p>In the first case, we get an approximate floating-point result.
In the second case, we get an exact fractional result (four-thirds).
</p>
<p>You can enter a fraction at any time using <kbd>:</kbd> notation.
(Calc uses <kbd>:</kbd> instead of <kbd>/</kbd> as the fraction separator
because <kbd>/</kbd> is already used to divide the top two stack
elements.)  Calculations involving fractions will always
produce exact fractional results; Fraction mode only says
what to do when dividing two integers.
</p>
<a name="index-Fractions-vs_002e-floats"></a>
<a name="index-Floats-vs_002e-fractions"></a>
<p>(&bull;) <strong>Exercise 4.</strong>  If fractional arithmetic is exact,
why would you ever use floating-point numbers instead?
See <a href="#Modes-Answer-4">4</a>. (&bull;)
</p>
<p>Typing <kbd>m f</kbd> doesn&rsquo;t change any existing values in the stack.
In the above example, we had to Undo the division and do it over
again when we changed to Fraction mode.  But if you use the
evaluates-to operator you can get commands like <kbd>m f</kbd> to
recompute for you.
</p>
<div class="smallexample">
<pre class="smallexample">1:  12 / 9 =&gt; 1.33333333333    1:  12 / 9 =&gt; 1.333    1:  12 / 9 =&gt; 4:3
    .                              .                      .

   ' 12/9 =&gt; <span class="key">RET</span>                   p 4 <span class="key">RET</span>                m f
</pre></div>

<p>In this example, the righthand side of the &lsquo;<samp>=&gt;</samp>&rsquo; operator
on the stack is recomputed when we change the precision, then
again when we change to Fraction mode.  All &lsquo;<samp>=&gt;</samp>&rsquo; expressions
on the stack are recomputed every time you change any mode that
might affect their values.
</p>
<hr>
<a name="Arithmetic-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Vector_002fMatrix-Tutorial" accesskey="n" rel="next">Vector/Matrix Tutorial</a>, Previous: <a href="#Basic-Tutorial" accesskey="p" rel="prev">Basic Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Arithmetic-Tutorial-1"></a>
<h3 class="section">2.2 Arithmetic Tutorial</h3>

<p>In this section, we explore the arithmetic and scientific functions
available in the Calculator.
</p>
<p>The standard arithmetic commands are <kbd>+</kbd>, <kbd>-</kbd>, <kbd>*</kbd>, <kbd>/</kbd>,
and <kbd>^</kbd>.  Each normally takes two numbers from the top of the stack
and pushes back a result.  The <kbd>n</kbd> and <kbd>&amp;</kbd> keys perform
change-sign and reciprocal operations, respectively.
</p>
<div class="smallexample">
<pre class="smallexample">1:  5          1:  0.2        1:  5.         1:  -5.        1:  5.
    .              .              .              .              .

    5              &amp;              &amp;              n              n
</pre></div>

<a name="index-Binary-operators"></a>
<p>You can apply a &ldquo;binary operator&rdquo; like <kbd>+</kbd> across any number of
stack entries by giving it a numeric prefix.  You can also apply it
pairwise to several stack elements along with the top one if you use
a negative prefix.
</p>
<div class="smallexample">
<pre class="smallexample">3:  2          1:  9          3:  2          4:  2          3:  12
2:  3              .          2:  3          3:  3          2:  13
1:  4                         1:  4          2:  4          1:  14
    .                             .          1:  10             .
                                                 .

2 <span class="key">RET</span> 3 <span class="key">RET</span> 4     M-3 +           U              10          M-- M-3 +
</pre></div>

<a name="index-Unary-operators"></a>
<p>You can apply a &ldquo;unary operator&rdquo; like <kbd>&amp;</kbd> to the top <var>n</var>
stack entries with a numeric prefix, too.
</p>
<div class="smallexample">
<pre class="smallexample">3:  2          3:  0.5                3:  0.5
2:  3          2:  0.333333333333     2:  3.
1:  4          1:  0.25               1:  4.
    .              .                      .

2 <span class="key">RET</span> 3 <span class="key">RET</span> 4      M-3 &amp;                  M-2 &amp;
</pre></div>

<p>Notice that the results here are left in floating-point form.
We can convert them back to integers by pressing <kbd>F</kbd>, the
&ldquo;floor&rdquo; function.  This function rounds down to the next lower
integer.  There is also <kbd>R</kbd>, which rounds to the nearest
integer.
</p>
<div class="smallexample">
<pre class="smallexample">7:  2.         7:  2          7:  2
6:  2.4        6:  2          6:  2
5:  2.5        5:  2          5:  3
4:  2.6        4:  2          4:  3
3:  -2.        3:  -2         3:  -2
2:  -2.4       2:  -3         2:  -2
1:  -2.6       1:  -3         1:  -3
    .              .              .

                  M-7 F        U M-7 R
</pre></div>

<p>Since dividing-and-flooring (i.e., &ldquo;integer quotient&rdquo;) is such a
common operation, Calc provides a special command for that purpose, the
backslash <kbd>\</kbd>.  Another common arithmetic operator is <kbd>%</kbd>, which
computes the remainder that would arise from a <kbd>\</kbd> operation, i.e.,
the &ldquo;modulo&rdquo; of two numbers.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">2:  1234       1:  12         2:  1234       1:  34
1:  100            .          1:  100            .
    .                             .

1234 <span class="key">RET</span> 100       \              U              %
</pre></div>

<p>These commands actually work for any real numbers, not just integers.
</p>
<div class="smallexample">
<pre class="smallexample">2:  3.1415     1:  3          2:  3.1415     1:  0.1415
1:  1              .          1:  1              .
    .                             .

3.1415 <span class="key">RET</span> 1       \              U              %
</pre></div>

<p>(&bull;) <strong>Exercise 1.</strong>  The <kbd>\</kbd> command would appear to be a
frill, since you could always do the same thing with <kbd>/ F</kbd>.  Think
of a situation where this is not true&mdash;<kbd>/ F</kbd> would be inadequate.
Now think of a way you could get around the problem if Calc didn&rsquo;t
provide a <kbd>\</kbd> command.  See <a href="#Arithmetic-Answer-1">1</a>. (&bull;)
</p>
<p>We&rsquo;ve already seen the <kbd>Q</kbd> (square root) and <kbd>S</kbd> (sine)
commands.  Other commands along those lines are <kbd>C</kbd> (cosine),
<kbd>T</kbd> (tangent), <kbd>E</kbd> (&lsquo;<samp>e^x</samp>&rsquo;) and <kbd>L</kbd> (natural
logarithm).  These can be modified by the <kbd>I</kbd> (inverse) and
<kbd>H</kbd> (hyperbolic) prefix keys.
</p>
<p>Let&rsquo;s compute the sine and cosine of an angle, and verify the
identity
&lsquo;<samp>sin(x)^2 + cos(x)^2 = 1</samp>&rsquo;.
We&rsquo;ll arbitrarily pick <i>-64</i> degrees as a good value for &lsquo;<samp>x</samp>&rsquo;.
With the angular mode set to degrees (type <kbd>m&nbsp;d</kbd><!-- /@w -->), do:
</p>
<div class="smallexample">
<pre class="smallexample">2:  -64        2:  -64        2:  -0.89879   2:  -0.89879   1:  1.
1:  -64        1:  -0.89879   1:  -64        1:  0.43837        .
    .              .              .              .

 64 n <span class="key">RET</span> <span class="key">RET</span>      S              <span class="key">TAB</span>            C              f h
</pre></div>

<p>(For brevity, we&rsquo;re showing only five digits of the results here.
You can of course do these calculations to any precision you like.)
</p>
<p>Remember, <kbd>f h</kbd> is the <code>calc-hypot</code>, or square-root of sum
of squares, command.
</p>
<p>Another identity is
&lsquo;<samp>tan(x) = sin(x) / cos(x)</samp>&rsquo;.
</p><div class="smallexample">
<pre class="smallexample">

2:  -0.89879   1:  -2.0503    1:  -64.
1:  0.43837        .              .
    .

    U              /              I T
</pre></div>

<p>A physical interpretation of this calculation is that if you move
&lsquo;<samp>0.89879</samp>&rsquo; units downward and &lsquo;<samp>0.43837</samp>&rsquo; units to the right,
your direction of motion is <i>-64</i> degrees from horizontal.  Suppose
we move in the opposite direction, up and to the left:
</p>
<div class="smallexample">
<pre class="smallexample">2:  -0.89879   2:  0.89879    1:  -2.0503    1:  -64.
1:  0.43837    1:  -0.43837       .              .
    .              .

    U U            M-2 n          /              I T
</pre></div>

<p>How can the angle be the same?  The answer is that the <kbd>/</kbd> operation
loses information about the signs of its inputs.  Because the quotient
is negative, we know exactly one of the inputs was negative, but we
can&rsquo;t tell which one.  There is an <kbd>f T</kbd> [<code>arctan2</code>] function which
computes the inverse tangent of the quotient of a pair of numbers.
Since you feed it the two original numbers, it has enough information
to give you a full 360-degree answer.
</p>
<div class="smallexample">
<pre class="smallexample">2:  0.89879    1:  116.       3:  116.       2:  116.       1:  180.
1:  -0.43837       .          2:  -0.89879   1:  -64.           .
    .                         1:  0.43837        .
                                  .

    U U            f T         M-<span class="key">RET</span> M-2 n       f T            -
</pre></div>

<p>The resulting angles differ by 180 degrees; in other words, they
point in opposite directions, just as we would expect.
</p>
<p>The <tt class="key">META</tt>-<tt class="key">RET</tt> we used in the third step is the
&ldquo;last-arguments&rdquo; command.  It is sort of like Undo, except that it
restores the arguments of the last command to the stack without removing
the command&rsquo;s result.  It is useful in situations like this one,
where we need to do several operations on the same inputs.  We could
have accomplished the same thing by using <kbd>M-2 <span class="key">RET</span></kbd> to duplicate
the top two stack elements right after the <kbd>U U</kbd>, then a pair of
<kbd>M-<span class="key">TAB</span></kbd> commands to cycle the 116 up around the duplicates.
</p>
<p>A similar identity is supposed to hold for hyperbolic sines and cosines,
except that it is the <em>difference</em>
&lsquo;<samp>cosh(x)^2 - sinh(x)^2</samp>&rsquo;
that always equals one.  Let&rsquo;s try to verify this identity.
</p>
<div class="smallexample">
<pre class="smallexample">2:  -64        2:  -64        2:  -64        2:  9.7192e54  2:  9.7192e54
1:  -64        1:  -3.1175e27 1:  9.7192e54  1:  -64        1:  9.7192e54
    .              .              .              .              .

 64 n <span class="key">RET</span> <span class="key">RET</span>      H C            2 ^            <span class="key">TAB</span>            H S 2 ^
</pre></div>

<p><a name="index-Roundoff-errors_002c-examples-1"></a>
Something&rsquo;s obviously wrong, because when we subtract these numbers
the answer will clearly be zero!  But if you think about it, if these
numbers <em>did</em> differ by one, it would be in the 55th decimal
place.  The difference we seek has been lost entirely to roundoff
error.
</p>
<p>We could verify this hypothesis by doing the actual calculation with,
say, 60 decimal places of precision.  This will be slow, but not
enormously so.  Try it if you wish; sure enough, the answer is
0.99999, reasonably close to 1.
</p>
<p>Of course, a more reasonable way to verify the identity is to use
a more reasonable value for &lsquo;<samp>x</samp>&rsquo;!
</p>
<a name="index-Common-logarithm"></a>
<p>Some Calculator commands use the Hyperbolic prefix for other purposes.
The logarithm and exponential functions, for example, work to the base
&lsquo;<samp>e</samp>&rsquo; normally but use base-10 instead if you use the Hyperbolic
prefix.
</p>
<div class="smallexample">
<pre class="smallexample">1:  1000       1:  6.9077     1:  1000       1:  3
    .              .              .              .

    1000           L              U              H L
</pre></div>

<p>First, we mistakenly compute a natural logarithm.  Then we undo
and compute a common logarithm instead.
</p>
<p>The <kbd>B</kbd> key computes a general base-<var>b</var> logarithm for any
value of <var>b</var>.
</p>
<div class="smallexample">
<pre class="smallexample">2:  1000       1:  3          1:  1000.      2:  1000.      1:  6.9077
1:  10             .              .          1:  2.71828        .
    .                                            .

 1000 <span class="key">RET</span> 10       B              H E            H P            B
</pre></div>

<p>Here we first use <kbd>B</kbd> to compute the base-10 logarithm, then use
the &ldquo;hyperbolic&rdquo; exponential as a cheap hack to recover the number
1000, then use <kbd>B</kbd> again to compute the natural logarithm.  Note
that <kbd>P</kbd> with the hyperbolic prefix pushes the constant &lsquo;<samp>e</samp>&rsquo;
onto the stack.
</p>
<p>You may have noticed that both times we took the base-10 logarithm
of 1000, we got an exact integer result.  Calc always tries to give
an exact rational result for calculations involving rational numbers
where possible.  But when we used <kbd>H E</kbd>, the result was a
floating-point number for no apparent reason.  In fact, if we had
computed <kbd>10 <span class="key">RET</span> 3 ^</kbd> we <em>would</em> have gotten an
exact integer 1000.  But the <kbd>H E</kbd> command is rigged to generate
a floating-point result all of the time so that <kbd>1000 H E</kbd> will
not waste time computing a thousand-digit integer when all you
probably wanted was &lsquo;<samp>1e1000</samp>&rsquo;.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Find a pair of integer inputs to
the <kbd>B</kbd> command for which Calc could find an exact rational
result but doesn&rsquo;t.  See <a href="#Arithmetic-Answer-2">2</a>. (&bull;)
</p>
<p>The Calculator also has a set of functions relating to combinatorics
and statistics.  You may be familiar with the <em>factorial</em> function,
which computes the product of all the integers up to a given number.
</p>
<div class="smallexample">
<pre class="smallexample">1:  100        1:  93326215443...    1:  100.       1:  9.3326e157
    .              .                     .              .

    100            !                     U c f          !
</pre></div>

<p>Recall, the <kbd>c f</kbd> command converts the integer or fraction at the
top of the stack to floating-point format.  If you take the factorial
of a floating-point number, you get a floating-point result
accurate to the current precision.  But if you give <kbd>!</kbd> an
exact integer, you get an exact integer result (158 digits long
in this case).
</p>
<p>If you take the factorial of a non-integer, Calc uses a generalized
factorial function defined in terms of Euler&rsquo;s Gamma function
&lsquo;<samp>gamma(n)</samp>&rsquo;
(which is itself available as the <kbd>f g</kbd> command).
</p>
<div class="smallexample">
<pre class="smallexample">3:  4.         3:  24.               1:  5.5        1:  52.342777847
2:  4.5        2:  52.3427777847         .              .
1:  5.         1:  120.
    .              .

                   M-3 !              M-0 <span class="key">DEL</span> 5.5       f g
</pre></div>

<p>Here we verify the identity
&lsquo;<samp><var>n</var>! = gamma(<var>n</var>+1)</samp>&rsquo;.
</p>
<p>The binomial coefficient <var>n</var>-choose-<var>m</var>
is defined by
&lsquo;<samp>n! / m! (n-m)!</samp>&rsquo;
for all reals &lsquo;<samp>n</samp>&rsquo; and &lsquo;<samp>m</samp>&rsquo;.  The intermediate results in this
formula can become quite large even if the final result is small; the
<kbd>k c</kbd> command computes a binomial coefficient in a way that avoids
large intermediate values.
</p>
<p>The <kbd>k</kbd> prefix key defines several common functions out of
combinatorics and number theory.  Here we compute the binomial
coefficient 30-choose-20, then determine its prime factorization.
</p>
<div class="smallexample">
<pre class="smallexample">2:  30         1:  30045015   1:  [3, 3, 5, 7, 11, 13, 23, 29]
1:  20             .              .
    .

 30 <span class="key">RET</span> 20         k c            k f
</pre></div>

<p>You can verify these prime factors by using <kbd>V R *</kbd> to multiply
together the elements of this vector.  The result is the original
number, 30045015.
</p>
<a name="index-Hash-tables"></a>
<p>Suppose a program you are writing needs a hash table with at least
10000 entries.  It&rsquo;s best to use a prime number as the actual size
of a hash table.  Calc can compute the next prime number after 10000:
</p>
<div class="smallexample">
<pre class="smallexample">1:  10000      1:  10007      1:  9973
    .              .              .

    10000          k n            I k n
</pre></div>

<p>Just for kicks we&rsquo;ve also computed the next prime <em>less</em> than
10000.
</p>
<p>See <a href="#Financial-Functions">Financial Functions</a>, for a description of the Calculator
commands that deal with business and financial calculations (functions
like <code>pv</code>, <code>rate</code>, and <code>sln</code>).
</p>
<p>See <a href="#Binary-Functions">Binary Functions</a>, to read about the commands for operating
on binary numbers (like <code>and</code>, <code>xor</code>, and <code>lsh</code>).
</p>
<hr>
<a name="Vector_002fMatrix-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Types-Tutorial" accesskey="n" rel="next">Types Tutorial</a>, Previous: <a href="#Arithmetic-Tutorial" accesskey="p" rel="prev">Arithmetic Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector_002fMatrix-Tutorial-1"></a>
<h3 class="section">2.3 Vector/Matrix Tutorial</h3>

<p>A <em>vector</em> is a list of numbers or other Calc data objects.
Calc provides a large set of commands that operate on vectors.  Some
are familiar operations from vector analysis.  Others simply treat
a vector as a list of objects.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Vector-Analysis-Tutorial" accesskey="1">Vector Analysis Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Tutorial" accesskey="2">Matrix Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Tutorial" accesskey="3">List Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Vector-Analysis-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Tutorial" accesskey="n" rel="next">Matrix Tutorial</a>, Previous: <a href="#Vector_002fMatrix-Tutorial" accesskey="p" rel="prev">Vector/Matrix Tutorial</a>, Up: <a href="#Vector_002fMatrix-Tutorial" accesskey="u" rel="up">Vector/Matrix Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-Analysis"></a>
<h4 class="subsection">2.3.1 Vector Analysis</h4>

<p>If you add two vectors, the result is a vector of the sums of the
elements, taken pairwise.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3]     2:  [1, 2, 3]     1:  [8, 8, 3]
    .             1:  [7, 6, 0]         .
                      .

    [1,2,3]  s 1      [7 6 0]  s 2      +
</pre></div>

<p>Note that we can separate the vector elements with either commas or
spaces.  This is true whether we are using incomplete vectors or
algebraic entry.  The <kbd>s 1</kbd> and <kbd>s 2</kbd> commands save these
vectors so we can easily reuse them later.
</p>
<p>If you multiply two vectors, the result is the sum of the products
of the elements taken pairwise.  This is called the <em>dot product</em>
of the vectors.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 3]     1:  19
1:  [7, 6, 0]         .
    .

    r 1 r 2           *
</pre></div>

<a name="index-Dot-product"></a>
<p>The dot product of two vectors is equal to the product of their
lengths times the cosine of the angle between them.  (Here the vector
is interpreted as a line from the origin &lsquo;<samp>(0,0,0)</samp>&rsquo; to the
specified point in three-dimensional space.)  The <kbd>A</kbd>
(absolute value) command can be used to compute the length of a
vector.
</p>
<div class="smallexample">
<pre class="smallexample">3:  19            3:  19          1:  0.550782    1:  56.579
2:  [1, 2, 3]     2:  3.741657        .               .
1:  [7, 6, 0]     1:  9.219544
    .                 .

    M-<span class="key">RET</span>             M-2 A          * /             I C
</pre></div>

<p>First we recall the arguments to the dot product command, then
we compute the absolute values of the top two stack entries to
obtain the lengths of the vectors, then we divide the dot product
by the product of the lengths to get the cosine of the angle.
The inverse cosine finds that the angle between the vectors
is about 56 degrees.
</p>
<a name="index-Cross-product"></a>
<a name="index-Perpendicular-vectors"></a>
<p>The <em>cross product</em> of two vectors is a vector whose length
is the product of the lengths of the inputs times the sine of the
angle between them, and whose direction is perpendicular to both
input vectors.  Unlike the dot product, the cross product is
defined only for three-dimensional vectors.  Let&rsquo;s double-check
our computation of the angle using the cross product.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 3]  3:  [-18, 21, -8]  1:  [-0.52, 0.61, -0.23]  1:  56.579
1:  [7, 6, 0]  2:  [1, 2, 3]          .                         .
    .          1:  [7, 6, 0]
                   .

    r 1 r 2        V C  s 3  M-<span class="key">RET</span>    M-2 A * /                 A I S
</pre></div>

<p>First we recall the original vectors and compute their cross product,
which we also store for later reference.  Now we divide the vector
by the product of the lengths of the original vectors.  The length of
this vector should be the sine of the angle; sure enough, it is!
</p>
<p>Vector-related commands generally begin with the <kbd>v</kbd> prefix key.
Some are uppercase letters and some are lowercase.  To make it easier
to type these commands, the shift-<kbd>V</kbd> prefix key acts the same as
the <kbd>v</kbd> key.  (See <a href="#General-Mode-Commands">General Mode Commands</a>, for a way to make all
prefix keys have this property.)
</p>
<p>If we take the dot product of two perpendicular vectors we expect
to get zero, since the cosine of 90 degrees is zero.  Let&rsquo;s check
that the cross product is indeed perpendicular to both inputs:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 3]      1:  0          2:  [7, 6, 0]      1:  0
1:  [-18, 21, -8]      .          1:  [-18, 21, -8]      .
    .                                 .

    r 1 r 3            *          <span class="key">DEL</span> r 2 r 3            *
</pre></div>

<a name="index-Normalizing-a-vector"></a>
<a name="index-Unit-vectors"></a>
<p>(&bull;) <strong>Exercise 1.</strong>  Given a vector on the top of the
stack, what keystrokes would you use to <em>normalize</em> the
vector, i.e., to reduce its length to one without changing its
direction?  See <a href="#Vector-Answer-1">1</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Suppose a certain particle can be
at any of several positions along a ruler.  You have a list of
those positions in the form of a vector, and another list of the
probabilities for the particle to be at the corresponding positions.
Find the average position of the particle.
See <a href="#Vector-Answer-2">2</a>. (&bull;)
</p>
<hr>
<a name="Matrix-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#List-Tutorial" accesskey="n" rel="next">List Tutorial</a>, Previous: <a href="#Vector-Analysis-Tutorial" accesskey="p" rel="prev">Vector Analysis Tutorial</a>, Up: <a href="#Vector_002fMatrix-Tutorial" accesskey="u" rel="up">Vector/Matrix Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matrices"></a>
<h4 class="subsection">2.3.2 Matrices</h4>

<p>A <em>matrix</em> is just a vector of vectors, all the same length.
This means you can enter a matrix using nested brackets.  You can
also use the semicolon character to enter a matrix.  We&rsquo;ll show
both methods here:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1, 2, 3 ]             1:  [ [ 1, 2, 3 ]
      [ 4, 5, 6 ] ]                 [ 4, 5, 6 ] ]
    .                             .

  [[1 2 3] [4 5 6]]             ' [1 2 3; 4 5 6] <span class="key">RET</span>
</pre></div>

<p>We&rsquo;ll be using this matrix again, so type <kbd>s 4</kbd> to save it now.
</p>
<p>Note that semicolons work with incomplete vectors, but they work
better in algebraic entry.  That&rsquo;s why we use the apostrophe in
the second example.
</p>
<p>When two matrices are multiplied, the lefthand matrix must have
the same number of columns as the righthand matrix has rows.
Row &lsquo;<samp>i</samp>&rsquo;, column &lsquo;<samp>j</samp>&rsquo; of the result is effectively the
dot product of row &lsquo;<samp>i</samp>&rsquo; of the left matrix by column &lsquo;<samp>j</samp>&rsquo;
of the right matrix.
</p>
<p>If we try to duplicate this matrix and multiply it by itself,
the dimensions are wrong and the multiplication cannot take place:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1, 2, 3 ]   * [ [ 1, 2, 3 ]
      [ 4, 5, 6 ] ]     [ 4, 5, 6 ] ]
    .

    <span class="key">RET</span> *
</pre></div>

<p>Though rather hard to read, this is a formula which shows the product
of two matrices.  The &lsquo;<samp>*</samp>&rsquo; function, having invalid arguments, has
been left in symbolic form.
</p>
<p>We can multiply the matrices if we <em>transpose</em> one of them first.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ [ 1, 2, 3 ]       1:  [ [ 14, 32 ]      1:  [ [ 17, 22, 27 ]
      [ 4, 5, 6 ] ]           [ 32, 77 ] ]          [ 22, 29, 36 ]
1:  [ [ 1, 4 ]              .                       [ 27, 36, 45 ] ]
      [ 2, 5 ]                                    .
      [ 3, 6 ] ]
    .

    U v t                   *                     U <span class="key">TAB</span> *
</pre></div>

<p>Matrix multiplication is not commutative; indeed, switching the
order of the operands can even change the dimensions of the result
matrix, as happened here!
</p>
<p>If you multiply a plain vector by a matrix, it is treated as a
single row or column depending on which side of the matrix it is
on.  The result is a plain vector which should also be interpreted
as a row or column as appropriate.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ [ 1, 2, 3 ]      1:  [14, 32]
      [ 4, 5, 6 ] ]        .
1:  [1, 2, 3]
    .

    r 4 r 1                *
</pre></div>

<p>Multiplying in the other order wouldn&rsquo;t work because the number of
rows in the matrix is different from the number of elements in the
vector.
</p>
<p>(&bull;) <strong>Exercise 1.</strong>  Use &lsquo;<samp>*</samp>&rsquo; to sum along the rows
of the above
2x3
matrix to get &lsquo;<samp>[6, 15]</samp>&rsquo;.  Now use &lsquo;<samp>*</samp>&rsquo; to sum along the columns
to get &lsquo;<samp>[5, 7, 9]</samp>&rsquo;.
See <a href="#Matrix-Answer-1">1</a>. (&bull;)
</p>
<a name="index-Identity-matrix"></a>
<p>An <em>identity matrix</em> is a square matrix with ones along the
diagonal and zeros elsewhere.  It has the property that multiplication
by an identity matrix, on the left or on the right, always produces
the original matrix.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1, 2, 3 ]      2:  [ [ 1, 2, 3 ]      1:  [ [ 1, 2, 3 ]
      [ 4, 5, 6 ] ]          [ 4, 5, 6 ] ]          [ 4, 5, 6 ] ]
    .                  1:  [ [ 1, 0, 0 ]          .
                             [ 0, 1, 0 ]
                             [ 0, 0, 1 ] ]
                           .

    r 4                    v i 3 <span class="key">RET</span>              *
</pre></div>

<p>If a matrix is square, it is often possible to find its <em>inverse</em>,
that is, a matrix which, when multiplied by the original matrix, yields
an identity matrix.  The <kbd>&amp;</kbd> (reciprocal) key also computes the
inverse of a matrix.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1, 2, 3 ]      1:  [ [   -2.4,     1.2,   -0.2 ]
      [ 4, 5, 6 ]            [    2.8,    -1.4,    0.4 ]
      [ 7, 6, 0 ] ]          [ -0.73333, 0.53333, -0.2 ] ]
    .                      .

    r 4 r 2 |  s 5         &amp;
</pre></div>

<p>The vertical bar <kbd>|</kbd> <em>concatenates</em> numbers, vectors, and
matrices together.  Here we have used it to add a new row onto
our matrix to make it square.
</p>
<p>We can multiply these two matrices in either order to get an identity.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1., 0., 0. ]      1:  [ [ 1., 0., 0. ]
      [ 0., 1., 0. ]            [ 0., 1., 0. ]
      [ 0., 0., 1. ] ]          [ 0., 0., 1. ] ]
    .                         .

    M-<span class="key">RET</span>  *                  U <span class="key">TAB</span> *
</pre></div>

<a name="index-Systems-of-linear-equations"></a>
<a name="index-Linear-equations_002c-systems-of"></a>
<p>Matrix inverses are related to systems of linear equations in algebra.
Suppose we had the following set of equations:
</p>
<div class="example">
<pre class="example">    a + 2b + 3c = 6
   4a + 5b + 6c = 2
   7a + 6b      = 3
</pre></div>

<p>This can be cast into the matrix equation,
</p>
<div class="example">
<pre class="example">   [ [ 1, 2, 3 ]     [ [ a ]     [ [ 6 ]
     [ 4, 5, 6 ]   *   [ b ]   =   [ 2 ]
     [ 7, 6, 0 ] ]     [ c ] ]     [ 3 ] ]
</pre></div>

<p>We can solve this system of equations by multiplying both sides by the
inverse of the matrix.  Calc can do this all in one step:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [6, 2, 3]          1:  [-12.6, 15.2, -3.93333]
1:  [ [ 1, 2, 3 ]          .
      [ 4, 5, 6 ]
      [ 7, 6, 0 ] ]
    .

    [6,2,3] r 5            /
</pre></div>

<p>The result is the &lsquo;<samp>[a, b, c]</samp>&rsquo; vector that solves the equations.
(Dividing by a square matrix is equivalent to multiplying by its
inverse.)
</p>
<p>Let&rsquo;s verify this solution:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ [ 1, 2, 3 ]                1:  [6., 2., 3.]
      [ 4, 5, 6 ]                    .
      [ 7, 6, 0 ] ]
1:  [-12.6, 15.2, -3.93333]
    .

    r 5  <span class="key">TAB</span>                         *
</pre></div>

<p>Note that we had to be careful about the order in which we multiplied
the matrix and vector.  If we multiplied in the other order, Calc would
assume the vector was a row vector in order to make the dimensions
come out right, and the answer would be incorrect.  If you
don&rsquo;t feel safe letting Calc take either interpretation of your
vectors, use explicit
Nx1
or
1xN
matrices instead.  In this case, you would enter the original column
vector as &lsquo;<samp>[[6], [2], [3]]</samp>&rsquo; or &lsquo;<samp>[6; 2; 3]</samp>&rsquo;.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Algebraic entry allows you to make
vectors and matrices that include variables.  Solve the following
system of equations to get expressions for &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;
in terms of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;.
</p>
<div class="example">
<pre class="example">   x + a y = 6
   x + b y = 10
</pre></div>

<p>See <a href="#Matrix-Answer-2">2</a>. (&bull;)
</p>
<a name="index-Least_002dsquares-for-over_002ddetermined-systems"></a>
<a name="index-Over_002ddetermined-systems-of-equations"></a>
<p>(&bull;) <strong>Exercise 3.</strong>  A system of equations is &ldquo;over-determined&rdquo;
if it has more equations than variables.  It is often the case that
there are no values for the variables that will satisfy all the
equations at once, but it is still useful to find a set of values
which &ldquo;nearly&rdquo; satisfy all the equations.  In terms of matrix equations,
you can&rsquo;t solve &lsquo;<samp>A X = B</samp>&rsquo; directly because the matrix &lsquo;<samp>A</samp>&rsquo;
is not square for an over-determined system.  Matrix inversion works
only for square matrices.  One common trick is to multiply both sides
on the left by the transpose of &lsquo;<samp>A</samp>&rsquo;:
&lsquo;<samp>trn(A)*A*X = trn(A)*B</samp>&rsquo;.
Now
&lsquo;<samp>trn(A)*A</samp>&rsquo;
is a square matrix so a solution is possible.  It turns out that the
&lsquo;<samp>X</samp>&rsquo; vector you compute in this way will be a &ldquo;least-squares&rdquo;
solution, which can be regarded as the &ldquo;closest&rdquo; solution to the set
of equations.  Use Calc to solve the following over-determined
system:
</p>
<div class="example">
<pre class="example">    a + 2b + 3c = 6
   4a + 5b + 6c = 2
   7a + 6b      = 3
   2a + 4b + 6c = 11
</pre></div>

<p>See <a href="#Matrix-Answer-3">3</a>. (&bull;)
</p>
<hr>
<a name="List-Tutorial"></a>
<div class="header">
<p>
Previous: <a href="#Matrix-Tutorial" accesskey="p" rel="prev">Matrix Tutorial</a>, Up: <a href="#Vector_002fMatrix-Tutorial" accesskey="u" rel="up">Vector/Matrix Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vectors-as-Lists"></a>
<h4 class="subsection">2.3.3 Vectors as Lists</h4>

<p><a name="index-Lists"></a>
Although Calc has a number of features for manipulating vectors and
matrices as mathematical objects, you can also treat vectors as
simple lists of values.  For example, we saw that the <kbd>k f</kbd>
command returns a vector which is a list of the prime factors of a
number.
</p>
<p>You can pack and unpack stack entries into vectors:
</p>
<div class="smallexample">
<pre class="smallexample">3:  10         1:  [10, 20, 30]     3:  10
2:  20             .                2:  20
1:  30                              1:  30
    .                                   .

                   M-3 v p              v u
</pre></div>

<p>You can also build vectors out of consecutive integers, or out
of many copies of a given value:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, 4]    2:  [1, 2, 3, 4]    2:  [1, 2, 3, 4]
    .               1:  17              1:  [17, 17, 17, 17]
                        .                   .

    v x 4 <span class="key">RET</span>           17                  v b 4 <span class="key">RET</span>
</pre></div>

<p>You can apply an operator to every element of a vector using the
<em>map</em> command.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [17, 34, 51, 68]   1:  [289, 1156, 2601, 4624]  1:  [17, 34, 51, 68]
    .                      .                            .

    V M *                  2 V M ^                      V M Q
</pre></div>

<p>In the first step, we multiply the vector of integers by the vector
of 17&rsquo;s elementwise.  In the second step, we raise each element to
the power two.  (The general rule is that both operands must be
vectors of the same length, or else one must be a vector and the
other a plain number.)  In the final step, we take the square root
of each element.
</p>
<p>(&bull;) <strong>Exercise 1.</strong>  Compute a vector of powers of two
from
&lsquo;<samp>2^-4</samp>&rsquo;
to &lsquo;<samp>2^4</samp>&rsquo;.  See <a href="#List-Answer-1">1</a>. (&bull;)
</p>
<p>You can also <em>reduce</em> a binary operator across a vector.
For example, reducing &lsquo;<samp>*</samp>&rsquo; computes the product of all the
elements in the vector:
</p>
<div class="smallexample">
<pre class="smallexample">1:  123123     1:  [3, 7, 11, 13, 41]      1:  123123
    .              .                           .

    123123         k f                         V R *
</pre></div>

<p>In this example, we decompose 123123 into its prime factors, then
multiply those factors together again to yield the original number.
</p>
<p>We could compute a dot product &ldquo;by hand&rdquo; using mapping and
reduction:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 3]     1:  [7, 12, 0]     1:  19
1:  [7, 6, 0]         .                  .
    .

    r 1 r 2           V M *              V R +
</pre></div>

<p>Recalling two vectors from the previous section, we compute the
sum of pairwise products of the elements to get the same answer
for the dot product as before.
</p>
<p>A slight variant of vector reduction is the <em>accumulate</em> operation,
<kbd>V U</kbd>.  This produces a vector of the intermediate results from
a corresponding reduction.  Here we compute a table of factorials:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, 4, 5, 6]    1:  [1, 2, 6, 24, 120, 720]
    .                         .

    v x 6 <span class="key">RET</span>                 V U *
</pre></div>

<p>Calc allows vectors to grow as large as you like, although it gets
rather slow if vectors have more than about a hundred elements.
Actually, most of the time is spent formatting these large vectors
for display, not calculating on them.  Try the following experiment
(if your computer is very fast you may need to substitute a larger
vector size).
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, 4, ...      1:  [2, 3, 4, 5, ...
    .                         .

    v x 500 <span class="key">RET</span>               1 V M +
</pre></div>

<p>Now press <kbd>v .</kbd> (the letter <kbd>v</kbd>, then a period) and try the
experiment again.  In <kbd>v .</kbd> mode, long vectors are displayed
&ldquo;abbreviated&rdquo; like this:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, ..., 500]   1:  [2, 3, 4, ..., 501]
    .                         .

    v x 500 <span class="key">RET</span>               1 V M +
</pre></div>

<p>(where now the &lsquo;<samp>...</samp>&rsquo; is actually part of the Calc display).
You will find both operations are now much faster.  But notice that
even in <kbd>v&nbsp;.</kbd><!-- /@w --> mode, the full vectors are still shown in the Trail.
Type <kbd>t&nbsp;.</kbd><!-- /@w --> to cause the trail to abbreviate as well, and try the
experiment one more time.  Operations on long vectors are now quite
fast!  (But of course if you use <kbd>t .</kbd> you will lose the ability
to get old vectors back using the <kbd>t y</kbd> command.)
</p>
<p>An easy way to view a full vector when <kbd>v .</kbd> mode is active is
to press <kbd>`</kbd> (grave accent) to edit the vector; editing always works
with the full, unabbreviated value.
</p>
<a name="index-Least_002dsquares-for-fitting-a-straight-line"></a>
<a name="index-Fitting-data-to-a-line"></a>
<a name="index-Line_002c-fitting-data-to"></a>
<a name="index-Data_002c-extracting-from-buffers"></a>
<a name="index-Columns-of-data_002c-extracting"></a>
<p>As a larger example, let&rsquo;s try to fit a straight line to some data,
using the method of least squares.  (Calc has a built-in command for
least-squares curve fitting, but we&rsquo;ll do it by hand here just to
practice working with vectors.)  Suppose we have the following list
of values in a file we have loaded into Emacs:
</p>
<div class="smallexample">
<pre class="smallexample">  x        y
 ---      ---
 1.34    0.234
 1.41    0.298
 1.49    0.402
 1.56    0.412
 1.64    0.466
 1.73    0.473
 1.82    0.601
 1.91    0.519
 2.01    0.603
 2.11    0.637
 2.22    0.645
 2.33    0.705
 2.45    0.917
 2.58    1.009
 2.71    0.971
 2.85    1.062
 3.00    1.148
 3.15    1.157
 3.32    1.354
</pre></div>

<p>If you are reading this tutorial in printed form, you will find it
easiest to press <kbd>C-x * i</kbd> to enter the on-line Info version of
the manual and find this table there.  (Press <kbd>g</kbd>, then type
<kbd>List Tutorial</kbd>, to jump straight to this section.)
</p>
<p>Position the cursor at the upper-left corner of this table, just
to the left of the &lsquo;<samp>1.34</samp>&rsquo;.  Press <kbd>C-@</kbd> to set the mark.
(On your system this may be <kbd>C-2</kbd>, <kbd>C-<span class="key">SPC</span></kbd>, or <kbd>NUL</kbd>.)
Now position the cursor to the lower-right, just after the &lsquo;<samp>1.354</samp>&rsquo;.
You have now defined this region as an Emacs &ldquo;rectangle.&rdquo;  Still
in the Info buffer, type <kbd>C-x * r</kbd>.  This command
(<code>calc-grab-rectangle</code>) will pop you back into the Calculator, with
the contents of the rectangle you specified in the form of a matrix.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1.34, 0.234 ]
      [ 1.41, 0.298 ]
      &hellip;
</pre></div>

<p>(You may wish to use <kbd>v .</kbd> mode to abbreviate the display of this
large matrix.)
</p>
<p>We want to treat this as a pair of lists.  The first step is to
transpose this matrix into a pair of rows.  Remember, a matrix is
just a vector of vectors.  So we can unpack the matrix into a pair
of row vectors on the stack.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1.34,  1.41,  1.49,  ... ]     2:  [1.34, 1.41, 1.49, ... ]
      [ 0.234, 0.298, 0.402, ... ] ]   1:  [0.234, 0.298, 0.402, ... ]
    .                                      .

    v t                                    v u
</pre></div>

<p>Let&rsquo;s store these in quick variables 1 and 2, respectively.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1.34, 1.41, 1.49, ... ]        .
    .

    t 2                             t 1
</pre></div>

<p>(Recall that <kbd>t 2</kbd> is a variant of <kbd>s 2</kbd> that removes the
stored value from the stack.)
</p>
<p>In a least squares fit, the slope &lsquo;<samp>m</samp>&rsquo; is given by the formula
</p>
<div class="example">
<pre class="example">m = (N sum(x y) - sum(x) sum(y)) / (N sum(x^2) - sum(x)^2)
</pre></div>

<p>where
&lsquo;<samp>sum(x)</samp>&rsquo;
represents the sum of all the values of &lsquo;<samp>x</samp>&rsquo;.  While there is an
actual <code>sum</code> function in Calc, it&rsquo;s easier to sum a vector using a
simple reduction.  First, let&rsquo;s compute the four different sums that
this formula uses.
</p>
<div class="smallexample">
<pre class="smallexample">1:  41.63                 1:  98.0003
    .                         .

 r 1 V R +   t 3           r 1 2 V M ^ V R +   t 4

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  13.613                1:  33.36554
    .                         .

 r 2 V R +   t 5           r 1 r 2 V M * V R +   t 6
</pre></div>

<p>These are &lsquo;<samp>sum(x)</samp>&rsquo;, &lsquo;<samp>sum(x^2)</samp>&rsquo;, &lsquo;<samp>sum(y)</samp>&rsquo;, and &lsquo;<samp>sum(x y)</samp>&rsquo;,
respectively.  (We could have used <kbd>*</kbd> to compute &lsquo;<samp>sum(x^2)</samp>&rsquo; and
&lsquo;<samp>sum(x y)</samp>&rsquo;.)
</p>
<p>Finally, we also need &lsquo;<samp>N</samp>&rsquo;, the number of data points.  This is just
the length of either of our lists.
</p>
<div class="smallexample">
<pre class="smallexample">1:  19
    .

 r 1 v l   t 7
</pre></div>

<p>(That&rsquo;s <kbd>v</kbd> followed by a lower-case <kbd>l</kbd>.)
</p>
<p>Now we grind through the formula:
</p>
<div class="smallexample">
<pre class="smallexample">1:  633.94526  2:  633.94526  1:  67.23607
    .          1:  566.70919      .
                   .

 r 7 r 6 *      r 3 r 5 *         -

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  67.23607   3:  67.23607   2:  67.23607   1:  0.52141679
1:  1862.0057  2:  1862.0057  1:  128.9488       .
    .          1:  1733.0569      .
                   .

 r 7 r 4 *      r 3 2 ^           -              /   t 8
</pre></div>

<p>That gives us the slope &lsquo;<samp>m</samp>&rsquo;.  The y-intercept &lsquo;<samp>b</samp>&rsquo; can now
be found with the simple formula,
</p>
<div class="example">
<pre class="example">b = (sum(y) - m sum(x)) / N
</pre></div>

<div class="smallexample">
<pre class="smallexample">1:  13.613     2:  13.613     1:  -8.09358   1:  -0.425978
    .          1:  21.70658       .              .
                   .

   r 5            r 8 r 3 *       -              r 7 /   t 9
</pre></div>

<p>Let&rsquo;s &ldquo;plot&rdquo; this straight line approximation,
&lsquo;<samp>m x + b</samp>&rsquo;,
and compare it with the original data.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.699, 0.735, ... ]    1:  [0.273, 0.309, ... ]
    .                           .

    r 1 r 8 *                   r 9 +    s 0
</pre></div>

<p>Notice that multiplying a vector by a constant, and adding a constant
to a vector, can be done without mapping commands since these are
common operations from vector algebra.  As far as Calc is concerned,
we&rsquo;ve just been doing geometry in 19-dimensional space!
</p>
<p>We can subtract this vector from our original &lsquo;<samp>y</samp>&rsquo; vector to get
a feel for the error of our fit.  Let&rsquo;s find the maximum error:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.0387, 0.0112, ... ]   1:  [0.0387, 0.0112, ... ]   1:  0.0897
    .                            .                            .

    r 2 -                        V M A                        V R X
</pre></div>

<p>First we compute a vector of differences, then we take the absolute
values of these differences, then we reduce the <code>max</code> function
across the vector.  (The <code>max</code> function is on the two-key sequence
<kbd>f x</kbd>; because it is so common to use <code>max</code> in a vector
operation, the letters <kbd>X</kbd> and <kbd>N</kbd> are also accepted for
<code>max</code> and <code>min</code> in this context.  In general, you answer
the <kbd>V M</kbd> or <kbd>V R</kbd> prompt with the actual key sequence that
invokes the function you want.  You could have typed <kbd>V R f x</kbd> or
even <kbd>V R x max <span class="key">RET</span></kbd> if you had preferred.)
</p>
<p>If your system has the GNUPLOT program, you can see graphs of your
data and your straight line to see how well they match.  (If you have
GNUPLOT 3.0 or higher, the following instructions will work regardless
of the kind of display you have.  Some GNUPLOT 2.0, non-X-windows systems
may require additional steps to view the graphs.)
</p>
<p>Let&rsquo;s start by plotting the original data.  Recall the &ldquo;<var>x</var>&rdquo; and &ldquo;<var>y</var>&rdquo;
vectors onto the stack and press <kbd>g f</kbd>.  This &ldquo;fast&rdquo; graphing
command does everything you need to do for simple, straightforward
plotting of data.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1.34, 1.41, 1.49, ... ]
1:  [0.234, 0.298, 0.402, ... ]
    .

    r 1 r 2    g f
</pre></div>

<p>If all goes well, you will shortly get a new window containing a graph
of the data.  (If not, contact your GNUPLOT or Calc installer to find
out what went wrong.)  In the X window system, this will be a separate
graphics window.  For other kinds of displays, the default is to
display the graph in Emacs itself using rough character graphics.
Press <kbd>q</kbd> when you are done viewing the character graphics.
</p>
<p>Next, let&rsquo;s add the line we got from our least-squares fit.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1.34, 1.41, 1.49, ... ]
1:  [0.273, 0.309, 0.351, ... ]
    .

    <span class="key">DEL</span> r 0    g a  g p
</pre></div>

<p>It&rsquo;s not very useful to get symbols to mark the data points on this
second curve; you can type <kbd>g S g p</kbd> to remove them.  Type <kbd>g q</kbd>
when you are done to remove the X graphics window and terminate GNUPLOT.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  An earlier exercise showed how to do
least squares fitting to a general system of equations.  Our 19 data
points are really 19 equations of the form &lsquo;<samp>y_i = m x_i + b</samp>&rsquo; for
different pairs of &lsquo;<samp>(x_i,y_i)</samp>&rsquo;.  Use the matrix-transpose method
to solve for &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;, duplicating the above result.
See <a href="#List-Answer-2">2</a>. (&bull;)
</p>
<a name="index-Geometric-mean"></a>
<p>(&bull;) <strong>Exercise 3.</strong>  If the input data do not form a
rectangle, you can use <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;g</kbd><!-- /@w --> (<code>calc-grab-region</code>)
to grab the data the way Emacs normally works with regions&mdash;it reads
left-to-right, top-to-bottom, treating line breaks the same as spaces.
Use this command to find the geometric mean of the following numbers.
(The geometric mean is the <var>n</var>th root of the product of <var>n</var> numbers.)
</p>
<div class="example">
<pre class="example">2.3  6  22  15.1  7
  15  14  7.5
  2.5
</pre></div>

<p>The <kbd>C-x * g</kbd> command accepts numbers separated by spaces or commas,
with or without surrounding vector brackets.
See <a href="#List-Answer-3">3</a>. (&bull;)
</p>
<p>As another example, a theorem about binomial coefficients tells
us that the alternating sum of binomial coefficients
<var>n</var>-choose-0 minus <var>n</var>-choose-1 plus <var>n</var>-choose-2, and so
on up to <var>n</var>-choose-<var>n</var>,
always comes out to zero.  Let&rsquo;s verify this
for &lsquo;<samp>n=6</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, 4, 5, 6, 7]     1:  [0, 1, 2, 3, 4, 5, 6]
    .                             .

    v x 7 <span class="key">RET</span>                     1 -

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [1, -6, 15, -20, 15, -6, 1]          1:  0
    .                                        .

    V M ' (-1)^$ choose(6,$) <span class="key">RET</span>             V R +
</pre></div>

<p>The <kbd>V M '</kbd> command prompts you to enter any algebraic expression
to define the function to map over the vector.  The symbol &lsquo;<samp>$</samp>&rsquo;
inside this expression represents the argument to the function.
The Calculator applies this formula to each element of the vector,
substituting each element&rsquo;s value for the &lsquo;<samp>$</samp>&rsquo; sign(s) in turn.
</p>
<p>To define a two-argument function, use &lsquo;<samp>$$</samp>&rsquo; for the first
argument and &lsquo;<samp>$</samp>&rsquo; for the second:  <kbd>V M ' $$-$ <span class="key">RET</span></kbd> is
equivalent to <kbd>V M -</kbd>.  This is analogous to regular algebraic
entry, where &lsquo;<samp>$$</samp>&rsquo; would refer to the next-to-top stack entry
and &lsquo;<samp>$</samp>&rsquo; would refer to the top stack entry, and <kbd>' $$-$ <span class="key">RET</span></kbd>
would act exactly like <kbd>-</kbd>.
</p>
<p>Notice that the <kbd>V M '</kbd> command has recorded two things in the
trail:  The result, as usual, and also a funny-looking thing marked
&lsquo;<samp>oper</samp>&rsquo; that represents the operator function you typed in.
The function is enclosed in &lsquo;<samp>&lt; &gt;</samp>&rsquo; brackets, and the argument is
denoted by a &lsquo;<samp>#</samp>&rsquo; sign.  If there were several arguments, they
would be shown as &lsquo;<samp>#1</samp>&rsquo;, &lsquo;<samp>#2</samp>&rsquo;, and so on.  (For example,
<kbd>V M ' $$-$</kbd> will put the function &lsquo;<samp>&lt;#1 - #2&gt;</samp>&rsquo; on the
trail.)  This object is a &ldquo;nameless function&rdquo;; you can use nameless
&lsquo;<samp>&lt;&nbsp;&gt;</samp>&rsquo;<!-- /@w --> notation to answer the <kbd>V M '</kbd> prompt if you like.
Nameless function notation has the interesting, occasionally useful
property that a nameless function is not actually evaluated until
it is used.  For example, <kbd>V M ' $+random(2.0)</kbd> evaluates
&lsquo;<samp>random(2.0)</samp>&rsquo; once and adds that random number to all elements
of the vector, but <kbd>V M ' &lt;#+random(2.0)&gt;</kbd> evaluates the
&lsquo;<samp>random(2.0)</samp>&rsquo; separately for each vector element.
</p>
<p>Another group of operators that are often useful with <kbd>V M</kbd> are
the relational operators:  <kbd>a =</kbd>, for example, compares two numbers
and gives the result 1 if they are equal, or 0 if not.  Similarly,
<kbd>a&nbsp;&lt;</kbd><!-- /@w --> checks for one number being less than another.
</p>
<p>Other useful vector operations include <kbd>v v</kbd>, to reverse a
vector end-for-end; <kbd>V S</kbd>, to sort the elements of a vector
into increasing order; and <kbd>v r</kbd> and <kbd>v&nbsp;c</kbd><!-- /@w -->, to extract
one row or column of a matrix, or (in both cases) to extract one
element of a plain vector.  With a negative argument, <kbd>v r</kbd>
and <kbd>v c</kbd> instead delete one row, column, or vector element.
</p>
<a name="index-Divisor-functions"></a>
<p>(&bull;) <strong>Exercise 4.</strong>  The &lsquo;<samp>k</samp>&rsquo;th <em>divisor function</em>
is the sum of the &lsquo;<samp>k</samp>&rsquo;th powers of all the divisors of an
integer &lsquo;<samp>n</samp>&rsquo;.  Figure out a method for computing the divisor
function for reasonably small values of &lsquo;<samp>n</samp>&rsquo;.  As a test,
the 0th and 1st divisor functions of 30 are 8 and 72, respectively.
See <a href="#List-Answer-4">4</a>. (&bull;)
</p>
<a name="index-Square_002dfree-numbers"></a>
<a name="index-Duplicate-values-in-a-list"></a>
<p>(&bull;) <strong>Exercise 5.</strong>  The <kbd>k f</kbd> command produces a
list of prime factors for a number.  Sometimes it is important to
know that a number is <em>square-free</em>, i.e., that no prime occurs
more than once in its list of prime factors.  Find a sequence of
keystrokes to tell if a number is square-free; your method should
leave 1 on the stack if it is, or 0 if it isn&rsquo;t.
See <a href="#List-Answer-5">5</a>. (&bull;)
</p>
<a name="index-Triangular-lists"></a>
<p>(&bull;) <strong>Exercise 6.</strong>  Build a list of lists that looks
like the following diagram.  (You may wish to use the <kbd>v /</kbd>
command to enable multi-line display of vectors.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [1],
      [1, 2],
      [1, 2, 3],
      [1, 2, 3, 4],
      [1, 2, 3, 4, 5],
      [1, 2, 3, 4, 5, 6] ]
</pre></div>

<p>See <a href="#List-Answer-6">6</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 7.</strong>  Build the following list of lists.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [0],
      [1, 2],
      [3, 4, 5],
      [6, 7, 8, 9],
      [10, 11, 12, 13, 14],
      [15, 16, 17, 18, 19, 20] ]
</pre></div>

<p>See <a href="#List-Answer-7">7</a>. (&bull;)
</p>
<a name="index-Maximizing-a-function-over-a-list-of-values"></a>
<p>(&bull;) <strong>Exercise 8.</strong>  Compute a list of values of Bessel&rsquo;s
&lsquo;<samp>J1</samp>&rsquo;
function &lsquo;<samp>besJ(1,x)</samp>&rsquo; for &lsquo;<samp>x</samp>&rsquo; from 0 to 5 in steps of 0.25.
Find the value of &lsquo;<samp>x</samp>&rsquo; (from among the above set of values) for
which &lsquo;<samp>besJ(1,x)</samp>&rsquo; is a maximum.  Use an &ldquo;automatic&rdquo; method,
i.e., just reading along the list by hand to find the largest value
is not allowed!  (There is an <kbd>a X</kbd> command which does this kind
of thing automatically; see <a href="#Numerical-Solutions">Numerical Solutions</a>.)
See <a href="#List-Answer-8">8</a>. (&bull;)
</p>
<a name="index-Digits_002c-vectors-of"></a>
<p>(&bull;) <strong>Exercise 9.</strong>  You are given an integer in the range
&lsquo;<samp>0 &lt;= N &lt; 10^m</samp>&rsquo;
for &lsquo;<samp>m=12</samp>&rsquo; (i.e., an integer of less than
twelve digits).  Convert this integer into a vector of &lsquo;<samp>m</samp>&rsquo;
digits, each in the range from 0 to 9.  In vector-of-digits notation,
add one to this integer to produce a vector of &lsquo;<samp>m+1</samp>&rsquo; digits
(since there could be a carry out of the most significant digit).
Convert this vector back into a regular integer.  A good integer
to try is 25129925999.  See <a href="#List-Answer-9">9</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 10.</strong>  Your friend Joe tried to use
<kbd>V R a =</kbd> to test if all numbers in a list were equal.  What
happened?  How would you do this test?  See <a href="#List-Answer-10">10</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 11.</strong>  The area of a circle of radius one
is &lsquo;<samp>pi</samp>&rsquo;.  The area of the
2x2
square that encloses that circle is 4.  So if we throw <var>n</var> darts at
random points in the square, about &lsquo;<samp>pi/4</samp>&rsquo; of them will land inside
the circle.  This gives us an entertaining way to estimate the value of
&lsquo;<samp>pi</samp>&rsquo;.  The <kbd>k&nbsp;r</kbd><!-- /@w -->
command picks a random number between zero and the value on the stack.
We could get a random floating-point number between <i>-1</i> and 1 by typing
<kbd>2.0&nbsp;k&nbsp;r&nbsp;1&nbsp;<span class="nolinebreak">-</span></kbd><!-- /@w -->.  Build a vector of 100 random &lsquo;<samp>(x,y)</samp>&rsquo; points in
this square, then use vector mapping and reduction to count how many
points lie inside the unit circle.  Hint:  Use the <kbd>v b</kbd> command.
See <a href="#List-Answer-11">11</a>. (&bull;)
</p>
<a name="index-Matchstick-problem"></a>
<p>(&bull;) <strong>Exercise 12.</strong>  The <em>matchstick problem</em> provides
another way to calculate &lsquo;<samp>pi</samp>&rsquo;.  Say you have an infinite field
of vertical lines with a spacing of one inch.  Toss a one-inch matchstick
onto the field.  The probability that the matchstick will land crossing
a line turns out to be
&lsquo;<samp>2/pi</samp>&rsquo;.
Toss 100 matchsticks to estimate &lsquo;<samp>pi</samp>&rsquo;.  (If you want still more fun,
the probability that the GCD (<kbd>k&nbsp;g</kbd><!-- /@w -->) of two large integers is
one turns out to be
&lsquo;<samp>6/pi^2</samp>&rsquo;.
That provides yet another way to estimate &lsquo;<samp>pi</samp>&rsquo;.)
See <a href="#List-Answer-12">12</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 13.</strong>  An algebraic entry of a string in
double-quote marks, &lsquo;<samp>&quot;hello&quot;</samp>&rsquo;, creates a vector of the numerical
(ASCII) codes of the characters (here, &lsquo;<samp>[104, 101, 108, 108, 111]</samp>&rsquo;).
Sometimes it is convenient to compute a <em>hash code</em> of a string,
which is just an integer that represents the value of that string.
Two equal strings have the same hash code; two different strings
<em>probably</em> have different hash codes.  (For example, Calc has
over 400 function names, but Emacs can quickly find the definition for
any given name because it has sorted the functions into &ldquo;buckets&rdquo; by
their hash codes.  Sometimes a few names will hash into the same bucket,
but it is easier to search among a few names than among all the names.)
One popular hash function is computed as follows:  First set &lsquo;<samp>h = 0</samp>&rsquo;.
Then, for each character from the string in turn, set &lsquo;<samp>h = 3h + c_i</samp>&rsquo;
where &lsquo;<samp>c_i</samp>&rsquo; is the character&rsquo;s ASCII code.  If we have 511 buckets,
we then take the hash code modulo 511 to get the bucket number.  Develop a
simple command or commands for converting string vectors into hash codes.
The hash code for &lsquo;<samp>&quot;Testing, 1, 2, 3&quot;</samp>&rsquo; is 1960915098, which modulo
511 is 121.  See <a href="#List-Answer-13">13</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 14.</strong>  The <kbd>H V R</kbd> and <kbd>H V U</kbd>
commands do nested function evaluations.  <kbd>H V U</kbd> takes a starting
value and a number of steps <var>n</var> from the stack; it then applies the
function you give to the starting value 0, 1, 2, up to <var>n</var> times
and returns a vector of the results.  Use this command to create a
&ldquo;random walk&rdquo; of 50 steps.  Start with the two-dimensional point
&lsquo;<samp>(0,0)</samp>&rsquo;; then take one step a random distance between <i>-1</i> and 1
in both &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;; then take another step, and so on.  Use the
<kbd>g f</kbd> command to display this random walk.  Now modify your random
walk to walk a unit distance, but in a random direction, at each step.
(Hint:  The <code>sincos</code> function returns a vector of the cosine and
sine of an angle.)  See <a href="#List-Answer-14">14</a>. (&bull;)
</p>
<hr>
<a name="Types-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Algebra-Tutorial" accesskey="n" rel="next">Algebra Tutorial</a>, Previous: <a href="#Vector_002fMatrix-Tutorial" accesskey="p" rel="prev">Vector/Matrix Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-1"></a>
<h3 class="section">2.4 Types Tutorial</h3>

<p>Calc understands a variety of data types as well as simple numbers.
In this section, we&rsquo;ll experiment with each of these types in turn.
</p>
<p>The numbers we&rsquo;ve been using so far have mainly been either <em>integers</em>
or <em>floats</em>.  We saw that floats are usually a good approximation to
the mathematical concept of real numbers, but they are only approximations
and are susceptible to roundoff error.  Calc also supports <em>fractions</em>,
which can exactly represent any rational number.
</p>
<div class="smallexample">
<pre class="smallexample">1:  3628800    2:  3628800    1:  518400:7   1:  518414:7   1:  7:518414
    .          1:  49             .              .              .
                   .

    10 !           49 <span class="key">RET</span>         :              2 +            &amp;
</pre></div>

<p>The <kbd>:</kbd> command divides two integers to get a fraction; <kbd>/</kbd>
would normally divide integers to get a floating-point result.
Notice we had to type <tt class="key">RET</tt> between the <kbd>49</kbd> and the <kbd>:</kbd>
since the <kbd>:</kbd> would otherwise be interpreted as part of a
fraction beginning with 49.
</p>
<p>You can convert between floating-point and fractional format using
<kbd>c f</kbd> and <kbd>c F</kbd>:
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.35027217629e-5    1:  7:518414
    .                       .

    c f                     c F
</pre></div>

<p>The <kbd>c F</kbd> command replaces a floating-point number with the
&ldquo;simplest&rdquo; fraction whose floating-point representation is the
same, to within the current precision.
</p>
<div class="smallexample">
<pre class="smallexample">1:  3.14159265359   1:  1146408:364913   1:  3.1416   1:  355:113
    .                   .                    .            .

    P                   c F      <span class="key">DEL</span>       p 5 <span class="key">RET</span> P      c F
</pre></div>

<p>(&bull;) <strong>Exercise 1.</strong>  A calculation has produced the
result 1.26508260337.  You suspect it is the square root of the
product of &lsquo;<samp>pi</samp>&rsquo; and some rational number.  Is it?  (Be sure
to allow for roundoff error!)  See <a href="#Types-Answer-1">1</a>. (&bull;)
</p>
<p><em>Complex numbers</em> can be stored in both rectangular and polar form.
</p>
<div class="smallexample">
<pre class="smallexample">1:  -9     1:  (0, 3)    1:  (3; 90.)   1:  (6; 90.)   1:  (2.4495; 45.)
    .          .             .              .              .

    9 n        Q             c p            2 *            Q
</pre></div>

<p>The square root of <i>-9</i> is by default rendered in rectangular form
(&lsquo;<samp>0&nbsp;+&nbsp;3i</samp>&rsquo;<!-- /@w -->), but we can convert it to polar form (3 with a
phase angle of 90 degrees).  All the usual arithmetic and scientific
operations are defined on both types of complex numbers.
</p>
<p>Another generalized kind of number is <em>infinity</em>.  Infinity
isn&rsquo;t really a number, but it can sometimes be treated like one.
Calc uses the symbol <code>inf</code> to represent positive infinity,
i.e., a value greater than any real number.  Naturally, you can
also write &lsquo;<samp>-inf</samp>&rsquo; for minus infinity, a value less than any
real number.  The word <code>inf</code> can only be input using
algebraic entry.
</p>
<div class="smallexample">
<pre class="smallexample">2:  inf        2:  -inf       2:  -inf       2:  -inf       1:  nan
1:  -17        1:  -inf       1:  -inf       1:  inf            .
    .              .              .              .

' inf <span class="key">RET</span> 17 n     *  <span class="key">RET</span>         72 +           A              +
</pre></div>

<p>Since infinity is infinitely large, multiplying it by any finite
number (like <i>-17</i>) has no effect, except that since <i>-17</i>
is negative, it changes a plus infinity to a minus infinity.
(&ldquo;A huge positive number, multiplied by <i>-17</i>, yields a huge
negative number.&rdquo;)  Adding any finite number to infinity also
leaves it unchanged.  Taking an absolute value gives us plus
infinity again.  Finally, we add this plus infinity to the minus
infinity we had earlier.  If you work it out, you might expect
the answer to be <i>-72</i> for this.  But the 72 has been completely
lost next to the infinities; by the time we compute &lsquo;<samp>inf&nbsp;<span class="nolinebreak">-</span>&nbsp;inf</samp>&rsquo;<!-- /@w -->
the finite difference between them, if any, is undetectable.
So we say the result is <em>indeterminate</em>, which Calc writes
with the symbol <code>nan</code> (for Not A Number).
</p>
<p>Dividing by zero is normally treated as an error, but you can get
Calc to write an answer in terms of infinity by pressing <kbd>m i</kbd>
to turn on Infinite mode.
</p>
<div class="smallexample">
<pre class="smallexample">3:  nan        2:  nan        2:  nan        2:  nan        1:  nan
2:  1          1:  1 / 0      1:  uinf       1:  uinf           .
1:  0              .              .              .
    .

  1 <span class="key">RET</span> 0          /       m i    U /            17 n *         +
</pre></div>

<p>Dividing by zero normally is left unevaluated, but after <kbd>m i</kbd>
it instead gives an infinite result.  The answer is actually
<code>uinf</code>, &ldquo;undirected infinity.&rdquo;  If you look at a graph of
&lsquo;<samp>1 / x</samp>&rsquo; around &lsquo;<samp>x&nbsp;=&nbsp;0</samp>&rsquo;<!-- /@w -->, you&rsquo;ll see that it goes toward
plus infinity as you approach zero from above, but toward minus
infinity as you approach from below.  Since we said only &lsquo;<samp>1 / 0</samp>&rsquo;,
Calc knows that the answer is infinite but not in which direction.
That&rsquo;s what <code>uinf</code> means.  Notice that multiplying <code>uinf</code>
by a negative number still leaves plain <code>uinf</code>; there&rsquo;s no
point in saying &lsquo;<samp>-uinf</samp>&rsquo; because the sign of <code>uinf</code> is
unknown anyway.  Finally, we add <code>uinf</code> to our <code>nan</code>,
yielding <code>nan</code> again.  It&rsquo;s easy to see that, because
<code>nan</code> means &ldquo;totally unknown&rdquo; while <code>uinf</code> means
&ldquo;unknown sign but known to be infinite,&rdquo; the more mysterious
<code>nan</code> wins out when it is combined with <code>uinf</code>, or, for
that matter, with anything else.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Predict what Calc will answer
for each of these formulas:  &lsquo;<samp>inf / inf</samp>&rsquo;, &lsquo;<samp>exp(inf)</samp>&rsquo;,
&lsquo;<samp>exp(-inf)</samp>&rsquo;, &lsquo;<samp>sqrt(-inf)</samp>&rsquo;, &lsquo;<samp>sqrt(uinf)</samp>&rsquo;,
&lsquo;<samp>abs(uinf)</samp>&rsquo;, &lsquo;<samp>ln(0)</samp>&rsquo;.
See <a href="#Types-Answer-2">2</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 3.</strong>  We saw that &lsquo;<samp>inf - inf = nan</samp>&rsquo;,
which stands for an unknown value.  Can <code>nan</code> stand for
a complex number?  Can it stand for infinity?
See <a href="#Types-Answer-3">3</a>. (&bull;)
</p>
<p><em>HMS forms</em> represent a value in terms of hours, minutes, and
seconds.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2@ 30' 0&quot;     1:  3@ 30' 0&quot;     2:  3@ 30' 0&quot;     1:  2.
    .                 .             1:  1@ 45' 0.&quot;        .
                                        .

  2@ 30' <span class="key">RET</span>          1 +               <span class="key">RET</span> 2 /           /
</pre></div>

<p>HMS forms can also be used to hold angles in degrees, minutes, and
seconds.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.5        1:  26.56505   1:  26@ 33' 54.18&quot;    1:  0.44721
    .              .              .                     .

    0.5            I T            c h                   S
</pre></div>

<p>First we convert the inverse tangent of 0.5 to degrees-minutes-seconds
form, then we take the sine of that angle.  Note that the trigonometric
functions will accept HMS forms directly as input.
</p>
<a name="index-Beatles"></a>
<p>(&bull;) <strong>Exercise 4.</strong>  The Beatles&rsquo; <em>Abbey Road</em> is
47 minutes and 26 seconds long, and contains 17 songs.  What is the
average length of a song on <em>Abbey Road</em>?  If the Extended Disco
Version of <em>Abbey Road</em> added 20 seconds to the length of each
song, how long would the album be?  See <a href="#Types-Answer-4">4</a>. (&bull;)
</p>
<p>A <em>date form</em> represents a date, or a date and time.  Dates must
be entered using algebraic entry.  Date forms are surrounded by
&lsquo;<samp>&lt; &gt;</samp>&rsquo; symbols; most standard formats for dates are recognized.
</p>
<div class="smallexample">
<pre class="smallexample">2:  &lt;Sun Jan 13, 1991&gt;                    1:  2.25
1:  &lt;6:00pm Thu Jan 10, 1991&gt;                 .
    .

' &lt;13 Jan 1991&gt;, &lt;1/10/91, 6pm&gt; <span class="key">RET</span>           -
</pre></div>

<p>In this example, we enter two dates, then subtract to find the
number of days between them.  It is also possible to add an
HMS form or a number (of days) to a date form to get another
date form.
</p>
<div class="smallexample">
<pre class="smallexample">1:  &lt;4:45:59pm Mon Jan 14, 1991&gt;     1:  &lt;2:50:59am Thu Jan 17, 1991&gt;
    .                                    .

    t N                                  2 + 10@ 5' +
</pre></div>

<p>The <kbd>t N</kbd> (&ldquo;now&rdquo;) command pushes the current date and time on the
stack; then we add two days, ten hours and five minutes to the date and
time.  Other date-and-time related commands include <kbd>t J</kbd>, which
does Julian day conversions, <kbd>t W</kbd>, which finds the beginning of
the week in which a date form lies, and <kbd>t I</kbd>, which increments a
date by one or several months.  See <a href="#Date-Arithmetic">Date Arithmetic</a>, for more.
</p>
<p>(&bull;) <strong>Exercise 5.</strong>  How many days until the next
Friday the 13th?  See <a href="#Types-Answer-5">5</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 6.</strong>  How many leap years will there be
between now and the year 10001 AD?  See <a href="#Types-Answer-6">6</a>. (&bull;)
</p>
<a name="index-Slope-and-angle-of-a-line"></a>
<a name="index-Angle-and-slope-of-a-line"></a>
<p>An <em>error form</em> represents a mean value with an attached standard
deviation, or error estimate.  Suppose our measurements indicate that
a certain telephone pole is about 30 meters away, with an estimated
error of 1 meter, and 8 meters tall, with an estimated error of 0.2
meters.  What is the slope of a line from here to the top of the
pole, and what is the equivalent angle in degrees?
</p>
<div class="smallexample">
<pre class="smallexample">1:  8 +/- 0.2    2:  8 +/- 0.2   1:  0.266 +/- 0.011   1:  14.93 +/- 0.594
    .            1:  30 +/- 1        .                     .
                     .

    8 p .2 <span class="key">RET</span>       30 p 1          /                     I T
</pre></div>

<p>This means that the angle is about 15 degrees, and, assuming our
original error estimates were valid standard deviations, there is about
a 60% chance that the result is correct within 0.59 degrees.
</p>
<a name="index-Torus_002c-volume-of"></a>
<p>(&bull;) <strong>Exercise 7.</strong>  The volume of a torus (a donut shape) is
&lsquo;<samp>2&nbsp;pi^2&nbsp;R&nbsp;r^2</samp>&rsquo;<!-- /@w -->
where &lsquo;<samp>R</samp>&rsquo; is the radius of the circle that
defines the center of the tube and &lsquo;<samp>r</samp>&rsquo; is the radius of the tube
itself.  Suppose &lsquo;<samp>R</samp>&rsquo; is 20 cm and &lsquo;<samp>r</samp>&rsquo; is 4 cm, each known to
within 5 percent.  What is the volume and the relative uncertainty of
the volume?  See <a href="#Types-Answer-7">7</a>. (&bull;)
</p>
<p>An <em>interval form</em> represents a range of values.  While an
error form is best for making statistical estimates, intervals give
you exact bounds on an answer.  Suppose we additionally know that
our telephone pole is definitely between 28 and 31 meters away,
and that it is between 7.7 and 8.1 meters tall.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [7.7 .. 8.1]  2:  [7.7 .. 8.1]  1:  [0.24 .. 0.28]  1:  [13.9 .. 16.1]
    .             1:  [28 .. 31]        .                   .
                      .

  [ 7.7 .. 8.1 ]    [ 28 .. 31 ]        /                   I T
</pre></div>

<p>If our bounds were correct, then the angle to the top of the pole
is sure to lie in the range shown.
</p>
<p>The square brackets around these intervals indicate that the endpoints
themselves are allowable values.  In other words, the distance to the
telephone pole is between 28 and 31, <em>inclusive</em>.  You can also
make an interval that is exclusive of its endpoints by writing
parentheses instead of square brackets.  You can even make an interval
which is inclusive (&ldquo;closed&rdquo;) on one end and exclusive (&ldquo;open&rdquo;) on
the other.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1 .. 10)    1:  (0.1 .. 1]   2:  (0.1 .. 1]   1:  (0.2 .. 3)
    .                .            1:  [2 .. 3)         .
                                      .

  [ 1 .. 10 )        &amp;              [ 2 .. 3 )         *
</pre></div>

<p>The Calculator automatically keeps track of which end values should
be open and which should be closed.  You can also make infinite or
semi-infinite intervals by using &lsquo;<samp>-inf</samp>&rsquo; or &lsquo;<samp>inf</samp>&rsquo; for one
or both endpoints.
</p>
<p>(&bull;) <strong>Exercise 8.</strong>  What answer would you expect from
&lsquo;<samp>1&nbsp;/<!-- /@w --> (0&nbsp;..&nbsp;10)<!-- /@w --></samp>&rsquo;?  What about &lsquo;<samp>1&nbsp;/<!-- /@w --> <span class="nolinebreak">(-10</span>&nbsp;..&nbsp;0)<!-- /@w --></samp>&rsquo;?  What
about &lsquo;<samp>1&nbsp;/<!-- /@w --> [0&nbsp;..&nbsp;10]<!-- /@w --></samp>&rsquo; (where the interval actually includes
zero)?  What about &lsquo;<samp>1&nbsp;/<!-- /@w --> <span class="nolinebreak">(-10</span>&nbsp;..&nbsp;10)<!-- /@w --></samp>&rsquo;?
See <a href="#Types-Answer-8">8</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 9.</strong>  Two easy ways of squaring a number
are <kbd><span class="key">RET</span> *</kbd> and <kbd>2&nbsp;^</kbd><!-- /@w -->.  Normally these produce the same
answer.  Would you expect this still to hold true for interval forms?
If not, which of these will result in a larger interval?
See <a href="#Types-Answer-9">9</a>. (&bull;)
</p>
<p>A <em>modulo form</em> is used for performing arithmetic modulo <var>m</var>.
For example, arithmetic involving time is generally done modulo 12
or 24 hours.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17 mod 24    1:  3 mod 24     1:  21 mod 24    1:  9 mod 24
    .                .                .                .

    17 M 24 <span class="key">RET</span>      10 +             n                5 /
</pre></div>

<p>In this last step, Calc has divided by 5 modulo 24; i.e., it has found a
new number which, when multiplied by 5 modulo 24, produces the original
number, 21.  If <var>m</var> is prime and the divisor is not a multiple of
<var>m</var>, it is always possible to find such a number.  For non-prime
<var>m</var> like 24, it is only sometimes possible.
</p>
<div class="smallexample">
<pre class="smallexample">1:  10 mod 24    1:  16 mod 24    1:  1000000...   1:  16
    .                .                .                .

    10 M 24 <span class="key">RET</span>      100 ^            10 <span class="key">RET</span> 100 ^     24 %
</pre></div>

<p>These two calculations get the same answer, but the first one is
much more efficient because it avoids the huge intermediate value
that arises in the second one.
</p>
<a name="index-Fermat_002c-primality-test-of"></a>
<p>(&bull;) <strong>Exercise 10.</strong>  A theorem of Pierre de Fermat
says that
&lsquo;<samp>x^(n-1) mod n = 1</samp>&rsquo;
if &lsquo;<samp>n</samp>&rsquo; is a prime number and &lsquo;<samp>x</samp>&rsquo; is an integer less than
&lsquo;<samp>n</samp>&rsquo;.  If &lsquo;<samp>n</samp>&rsquo; is <em>not</em> a prime number, this will
<em>not</em> be true for most values of &lsquo;<samp>x</samp>&rsquo;.  Thus we can test
informally if a number is prime by trying this formula for several
values of &lsquo;<samp>x</samp>&rsquo;.  Use this test to tell whether the following numbers
are prime: 811749613, 15485863.  See <a href="#Types-Answer-10">10</a>. (&bull;)
</p>
<p>It is possible to use HMS forms as parts of error forms, intervals,
modulo forms, or as the phase part of a polar complex number.
For example, the <code>calc-time</code> command pushes the current time
of day on the stack as an HMS/modulo form.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17@ 34' 45&quot; mod 24@ 0' 0&quot;     1:  6@ 22' 15&quot; mod 24@ 0' 0&quot;
    .                                 .

    x time <span class="key">RET</span>                        n
</pre></div>

<p>This calculation tells me it is six hours and 22 minutes until midnight.
</p>
<p>(&bull;) <strong>Exercise 11.</strong>  A rule of thumb is that one year
is about
&lsquo;<samp>pi&nbsp;*&nbsp;10^7</samp>&rsquo;<!-- /@w -->
seconds.  What time will it be that many seconds from right now?
See <a href="#Types-Answer-11">11</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 12.</strong>  You are preparing to order packaging
for the CD release of the Extended Disco Version of <em>Abbey Road</em>.
You are told that the songs will actually be anywhere from 20 to 60
seconds longer than the originals.  One CD can hold about 75 minutes
of music.  Should you order single or double packages?
See <a href="#Types-Answer-12">12</a>. (&bull;)
</p>
<p>Another kind of data the Calculator can manipulate is numbers with
<em>units</em>.  This isn&rsquo;t strictly a new data type; it&rsquo;s simply an
application of algebraic expressions, where we use variables with
suggestive names like &lsquo;<samp>cm</samp>&rsquo; and &lsquo;<samp>in</samp>&rsquo; to represent units
like centimeters and inches.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2 in        1:  5.08 cm      1:  0.027778 fath   1:  0.0508 m
    .               .                .                   .

    ' 2in <span class="key">RET</span>       u c cm <span class="key">RET</span>       u c fath <span class="key">RET</span>        u b
</pre></div>

<p>We enter the quantity &ldquo;2 inches&rdquo; (actually an algebraic expression
which means two times the variable &lsquo;<samp>in</samp>&rsquo;), then we convert it
first to centimeters, then to fathoms, then finally to &ldquo;base&rdquo; units,
which in this case means meters.
</p>
<div class="smallexample">
<pre class="smallexample">1:  9 acre     1:  3 sqrt(acre)   1:  190.84 m   1:  190.84 m + 30 cm
    .              .                  .              .

 ' 9 acre <span class="key">RET</span>      Q                  u s            ' $+30 cm <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  191.14 m     1:  36536.3046 m^2    1:  365363046 cm^2
    .                .                     .

    u s              2 ^                   u c cgs
</pre></div>

<p>Since units expressions are really just formulas, taking the square
root of &lsquo;<samp>acre</samp>&rsquo; is undefined.  After all, <code>acre</code> might be an
algebraic variable that you will someday assign a value.  We use the
&ldquo;units-simplify&rdquo; command to simplify the expression with variables
being interpreted as unit names.
</p>
<p>In the final step, we have converted not to a particular unit, but to a
units system.  The &ldquo;cgs&rdquo; system uses centimeters instead of meters
as its standard unit of length.
</p>
<p>There is a wide variety of units defined in the Calculator.
</p>
<div class="smallexample">
<pre class="smallexample">1:  55 mph     1:  88.5139 kph   1:   88.5139 km / hr   1:  8.201407e-8 c
    .              .                  .                     .

 ' 55 mph <span class="key">RET</span>      u c kph <span class="key">RET</span>        u c km/hr <span class="key">RET</span>         u c c <span class="key">RET</span>
</pre></div>

<p>We express a speed first in miles per hour, then in kilometers per
hour, then again using a slightly more explicit notation, then
finally in terms of fractions of the speed of light.
</p>
<p>Temperature conversions are a bit more tricky.  There are two ways to
interpret &ldquo;20 degrees Fahrenheit&rdquo;&mdash;it could mean an actual
temperature, or it could mean a change in temperature.  For normal
units there is no difference, but temperature units have an offset
as well as a scale factor and so there must be two explicit commands
for them.
</p>
<div class="smallexample">
<pre class="smallexample">1:  20 degF       1:  11.1111 degC     1:  -6.666 degC
    .                 .                    .                 .

  ' 20 degF <span class="key">RET</span>       u c degC <span class="key">RET</span>         U u t degC <span class="key">RET</span>
</pre></div>

<p>First we convert a change of 20 degrees Fahrenheit into an equivalent
change in degrees Celsius (or Centigrade).  Then, we convert the
absolute temperature 20 degrees Fahrenheit into Celsius.
</p>
<p>For simple unit conversions, you can put a plain number on the stack.
Then <kbd>u c</kbd> and <kbd>u t</kbd> will prompt for both old and new units.
When you use this method, you&rsquo;re responsible for remembering which
numbers are in which units:
</p>
<div class="smallexample">
<pre class="smallexample">1:  55         1:  88.5139              1:  8.201407e-8
    .              .                        .

    55             u c mph <span class="key">RET</span> kph <span class="key">RET</span>      u c km/hr <span class="key">RET</span> c <span class="key">RET</span>
</pre></div>

<p>To see a complete list of built-in units, type <kbd>u v</kbd>.  Press
<kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;c</kbd><!-- /@w --> again to re-enter the Calculator when you&rsquo;re done looking
at the units table.
</p>
<p>(&bull;) <strong>Exercise 13.</strong>  How many seconds are there really
in a year?  See <a href="#Types-Answer-13">13</a>. (&bull;)
</p>
<a name="index-Speed-of-light"></a>
<p>(&bull;) <strong>Exercise 14.</strong>  Supercomputer designs are limited by
the speed of light (and of electricity, which is nearly as fast).
Suppose a computer has a 4.1 ns (nanosecond) clock cycle, and its
cabinet is one meter across.  Is speed of light going to be a
significant factor in its design?  See <a href="#Types-Answer-14">14</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 15.</strong>  Sam the Slug normally travels about
five yards in an hour.  He has obtained a supply of Power Pills; each
Power Pill he eats doubles his speed.  How many Power Pills can he
swallow and still travel legally on most US highways?
See <a href="#Types-Answer-15">15</a>. (&bull;)
</p>
<hr>
<a name="Algebra-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Programming-Tutorial" accesskey="n" rel="next">Programming Tutorial</a>, Previous: <a href="#Types-Tutorial" accesskey="p" rel="prev">Types Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-and-Calculus-Tutorial"></a>
<h3 class="section">2.5 Algebra and Calculus Tutorial</h3>

<p>This section shows how to use Calc&rsquo;s algebra facilities to solve
equations, do simple calculus problems, and manipulate algebraic
formulas.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Algebra-Tutorial" accesskey="1">Basic Algebra Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Tutorial" accesskey="2">Rewrites Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Algebra-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Tutorial" accesskey="n" rel="next">Rewrites Tutorial</a>, Previous: <a href="#Algebra-Tutorial" accesskey="p" rel="prev">Algebra Tutorial</a>, Up: <a href="#Algebra-Tutorial" accesskey="u" rel="up">Algebra Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Algebra"></a>
<h4 class="subsection">2.5.1 Basic Algebra</h4>

<p>If you enter a formula in Algebraic mode that refers to variables,
the formula itself is pushed onto the stack.  You can manipulate
formulas as regular data objects.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2 x^2 - 6       1:  6 - 2 x^2       1:  (3 x^2 + y) (6 - 2 x^2)
    .                   .                   .

    ' 2x^2-6 <span class="key">RET</span>        n                   ' 3x^2+y <span class="key">RET</span> *
</pre></div>

<p>(&bull;) <strong>Exercise 1.</strong>  Do <kbd>' x <span class="key">RET</span> Q 2 ^</kbd> and
<kbd>' x <span class="key">RET</span> 2 ^ Q</kbd> both wind up with the same result (&lsquo;<samp>x</samp>&rsquo;)?
Why or why not?  See <a href="#Algebra-Answer-1">1</a>. (&bull;)
</p>
<p>There are also commands for doing common algebraic operations on
formulas.  Continuing with the formula from the last example,
</p>
<div class="smallexample">
<pre class="smallexample">1:  18 x^2 - 6 x^4 + 6 y - 2 y x^2    1:  (18 - 2 y) x^2 - 6 x^4 + 6 y
    .                                     .

    a x                                   a c x <span class="key">RET</span>
</pre></div>

<p>First we &ldquo;expand&rdquo; using the distributive law, then we &ldquo;collect&rdquo;
terms involving like powers of &lsquo;<samp>x</samp>&rsquo;.
</p>
<p>Let&rsquo;s find the value of this expression when &lsquo;<samp>x</samp>&rsquo; is 2 and &lsquo;<samp>y</samp>&rsquo;
is one-half.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17 x^2 - 6 x^4 + 3      1:  -25
    .                           .

    1:2 s l y <span class="key">RET</span>               2 s l x <span class="key">RET</span>
</pre></div>

<p>The <kbd>s l</kbd> command means &ldquo;let&rdquo;; it takes a number from the top of
the stack and temporarily assigns it as the value of the variable
you specify.  It then evaluates (as if by the <kbd>=</kbd> key) the
next expression on the stack.  After this command, the variable goes
back to its original value, if any.
</p>
<p>(An earlier exercise in this tutorial involved storing a value in the
variable <code>x</code>; if this value is still there, you will have to
unstore it with <kbd>s u x <span class="key">RET</span></kbd> before the above example will work
properly.)
</p>
<a name="index-Maximum-of-a-function-using-Calculus"></a>
<p>Let&rsquo;s find the maximum value of our original expression when &lsquo;<samp>y</samp>&rsquo;
is one-half and &lsquo;<samp>x</samp>&rsquo; ranges over all possible values.  We can
do this by taking the derivative with respect to &lsquo;<samp>x</samp>&rsquo; and examining
values of &lsquo;<samp>x</samp>&rsquo; for which the derivative is zero.  If the second
derivative of the function at that value of &lsquo;<samp>x</samp>&rsquo; is negative,
the function has a local maximum there.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17 x^2 - 6 x^4 + 3      1:  34 x - 24 x^3
    .                           .

    U <span class="key">DEL</span>  s 1                  a d x <span class="key">RET</span>   s 2
</pre></div>

<p>Well, the derivative is clearly zero when &lsquo;<samp>x</samp>&rsquo; is zero.  To find
the other root(s), let&rsquo;s divide through by &lsquo;<samp>x</samp>&rsquo; and then solve:
</p>
<div class="smallexample">
<pre class="smallexample">1:  (34 x - 24 x^3) / x    1:  34 - 24 x^2
    .                          .

    ' x <span class="key">RET</span> /                  a x

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  0.70588 x^2 = 1        1:  x = 1.19023
    .                          .

    0 a =  s 3                 a S x <span class="key">RET</span>
</pre></div>

<p>Now we compute the second derivative and plug in our values of &lsquo;<samp>x</samp>&rsquo;:
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.19023        2:  1.19023         2:  1.19023
    .              1:  34 x - 24 x^3   1:  34 - 72 x^2
                       .                   .

    a .                r 2                 a d x <span class="key">RET</span> s 4
</pre></div>

<p>(The <kbd>a .</kbd> command extracts just the righthand side of an equation.
Another method would have been to use <kbd>v u</kbd> to unpack the equation
&lsquo;<samp>x&nbsp;=&nbsp;1.19</samp>&rsquo;<!-- /@w --> to &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>1.19</samp>&rsquo;, then use <kbd>M-- M-2 <span class="key">DEL</span></kbd>
to delete the &lsquo;<samp>x</samp>&rsquo;.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  34 - 72 x^2   1:  -68.         2:  34 - 72 x^2     1:  34
1:  1.19023           .            1:  0                   .
    .                                  .

    <span class="key">TAB</span>               s l x <span class="key">RET</span>        U <span class="key">DEL</span> 0             s l x <span class="key">RET</span>
</pre></div>

<p>The first of these second derivatives is negative, so we know the function
has a maximum value at &lsquo;<samp>x = 1.19023</samp>&rsquo;.  (The function also has a
local <em>minimum</em> at &lsquo;<samp>x = 0</samp>&rsquo;.)
</p>
<p>When we solved for &lsquo;<samp>x</samp>&rsquo;, we got only one value even though
&lsquo;<samp>0.70588 x^2 = 1</samp>&rsquo; is a quadratic equation that ought to have
two solutions.  The reason is that <kbd>a&nbsp;S</kbd><!-- /@w --> normally returns a
single &ldquo;principal&rdquo; solution.  If it needs to come up with an
arbitrary sign (as occurs in the quadratic formula) it picks &lsquo;<samp>+</samp>&rsquo;.
If it needs an arbitrary integer, it picks zero.  We can get a full
solution by pressing <kbd>H</kbd> (the Hyperbolic flag) before <kbd>a S</kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.70588 x^2 = 1    1:  x = 1.19023 s1      1:  x = -1.19023
    .                      .                       .

    r 3                    H a S x <span class="key">RET</span>  s 5        1 n  s l s1 <span class="key">RET</span>
</pre></div>

<p>Calc has invented the variable &lsquo;<samp>s1</samp>&rsquo; to represent an unknown sign;
it is supposed to be either <i>+1</i> or <i>-1</i>.  Here we have used
the &ldquo;let&rdquo; command to evaluate the expression when the sign is negative.
If we plugged this into our second derivative we would get the same,
negative, answer, so &lsquo;<samp>x = -1.19023</samp>&rsquo; is also a maximum.
</p>
<p>To find the actual maximum value, we must plug our two values of &lsquo;<samp>x</samp>&rsquo;
into the original formula.
</p>
<div class="smallexample">
<pre class="smallexample">2:  17 x^2 - 6 x^4 + 3    1:  24.08333 s1^2 - 12.04166 s1^4 + 3
1:  x = 1.19023 s1            .
    .

    r 1 r 5                   s l <span class="key">RET</span>
</pre></div>

<p>(Here we see another way to use <kbd>s l</kbd>; if its input is an equation
with a variable on the lefthand side, then <kbd>s l</kbd> treats the equation
like an assignment to that variable if you don&rsquo;t give a variable name.)
</p>
<p>It&rsquo;s clear that this will have the same value for either sign of
<code>s1</code>, but let&rsquo;s work it out anyway, just for the exercise:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [-1, 1]              1:  [15.04166, 15.04166]
1:  24.08333 s1^2 ...        .
    .

  [ 1 n , 1 ] <span class="key">TAB</span>            V M $ <span class="key">RET</span>
</pre></div>

<p>Here we have used a vector mapping operation to evaluate the function
at several values of &lsquo;<samp>s1</samp>&rsquo; at once.  <kbd>V M $</kbd> is like <kbd>V M '</kbd>
except that it takes the formula from the top of the stack.  The
formula is interpreted as a function to apply across the vector at the
next-to-top stack level.  Since a formula on the stack can&rsquo;t contain
&lsquo;<samp>$</samp>&rsquo; signs, Calc assumes the variables in the formula stand for
different arguments.  It prompts you for an <em>argument list</em>, giving
the list of all variables in the formula in alphabetical order as the
default list.  In this case the default is &lsquo;<samp>(s1)</samp>&rsquo;, which is just
what we want so we simply press <tt class="key">RET</tt> at the prompt.
</p>
<p>If there had been several different values, we could have used
<kbd>V&nbsp;R&nbsp;X</kbd><!-- /@w --> to find the global maximum.
</p>
<p>Calc has a built-in <kbd>a P</kbd> command that solves an equation using
<kbd>H&nbsp;a&nbsp;S</kbd><!-- /@w --> and returns a vector of all the solutions.  It simply
automates the job we just did by hand.  Applied to our original
cubic polynomial, it would produce the vector of solutions
&lsquo;<samp>[1.19023, -1.19023, 0]</samp>&rsquo;.  (There is also an <kbd>a X</kbd> command
which finds a local maximum of a function.  It uses a numerical search
method rather than examining the derivatives, and thus requires you
to provide some kind of initial guess to show it where to look.)
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Given a vector of the roots of a
polynomial (such as the output of an <kbd>a P</kbd> command), what
sequence of commands would you use to reconstruct the original
polynomial?  (The answer will be unique to within a constant
multiple; choose the solution where the leading coefficient is one.)
See <a href="#Algebra-Answer-2">2</a>. (&bull;)
</p>
<p>The <kbd>m s</kbd> command enables Symbolic mode, in which formulas
like &lsquo;<samp>sqrt(5)</samp>&rsquo; that can&rsquo;t be evaluated exactly are left in
symbolic form rather than giving a floating-point approximate answer.
Fraction mode (<kbd>m f</kbd>) is also useful when doing algebra.
</p>
<div class="smallexample">
<pre class="smallexample">2:  34 x - 24 x^3        2:  34 x - 24 x^3
1:  34 x - 24 x^3        1:  [sqrt(51) / 6, sqrt(51) / -6, 0]
    .                        .

    r 2  <span class="key">RET</span>     m s  m f    a P x <span class="key">RET</span>
</pre></div>

<p>One more mode that makes reading formulas easier is Big mode.
</p>
<div class="smallexample">
<pre class="smallexample">               3
2:  34 x - 24 x

      ____   ____
     V 51   V 51
1:  [-----, -----, 0]
       6     -6

    .

    d B
</pre></div>

<p>Here things like powers, square roots, and quotients and fractions
are displayed in a two-dimensional pictorial form.  Calc has other
language modes as well, such as C mode, FORTRAN mode, TeX mode
and LaTeX mode.
</p>
<div class="smallexample">
<pre class="smallexample">2:  34*x - 24*pow(x, 3)               2:  34*x - 24*x**3
1:  {sqrt(51) / 6, sqrt(51) / -6, 0}  1:  /sqrt(51) / 6, sqrt(51) / -6, 0/
    .                                     .

    d C                                   d F

</pre></div>
<div class="smallexample">
<pre class="smallexample">3:  34 x - 24 x^3
2:  [{\sqrt{51} \over 6}, {\sqrt{51} \over -6}, 0]
1:  {2 \over 3} \sqrt{5}
    .

    d T   ' 2 \sqrt{5} \over 3 <span class="key">RET</span>
</pre></div>

<p>As you can see, language modes affect both entry and display of
formulas.  They affect such things as the names used for built-in
functions, the set of arithmetic operators and their precedences,
and notations for vectors and matrices.
</p>
<p>Notice that &lsquo;<samp>sqrt(51)</samp>&rsquo; may cause problems with older
implementations of C and FORTRAN, which would require something more
like &lsquo;<samp>sqrt(51.0)</samp>&rsquo;.  It is always wise to check over the formulas
produced by the various language modes to make sure they are fully
correct.
</p>
<p>Type <kbd>m s</kbd>, <kbd>m f</kbd>, and <kbd>d N</kbd> to reset these modes.  (You
may prefer to remain in Big mode, but all the examples in the tutorial
are shown in normal mode.)
</p>
<a name="index-Area-under-a-curve"></a>
<p>What is the area under the portion of this curve from &lsquo;<samp>x = 1</samp>&rsquo; to &lsquo;<samp>2</samp>&rsquo;?
This is simply the integral of the function:
</p>
<div class="smallexample">
<pre class="smallexample">1:  17 x^2 - 6 x^4 + 3     1:  5.6666 x^3 - 1.2 x^5 + 3 x
    .                          .

    r 1                        a i x
</pre></div>

<p>We want to evaluate this at our two values for &lsquo;<samp>x</samp>&rsquo; and subtract.
One way to do it is again with vector mapping and reduction:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [2, 1]            1:  [12.93333, 7.46666]    1:  5.46666
1:  5.6666 x^3 ...        .                          .

   [ 2 , 1 ] <span class="key">TAB</span>          V M $ <span class="key">RET</span>                  V R -
</pre></div>

<p>(&bull;) <strong>Exercise 3.</strong>  Find the integral from 1 to &lsquo;<samp>y</samp>&rsquo;
of
&lsquo;<samp>x&nbsp;sin(pi&nbsp;x)</samp>&rsquo;<!-- /@w -->
(where the sine is calculated in radians).  Find the values of the
integral for integers &lsquo;<samp>y</samp>&rsquo; from 1 to 5.  See <a href="#Algebra-Answer-3">3</a>. (&bull;)
</p>
<p>Calc&rsquo;s integrator can do many simple integrals symbolically, but many
others are beyond its capabilities.  Suppose we wish to find the area
under the curve
&lsquo;<samp>sin(x) ln(x)</samp>&rsquo;
over the same range of &lsquo;<samp>x</samp>&rsquo;.  If you entered this formula and typed
<kbd>a i x <span class="key">RET</span></kbd> (don&rsquo;t bother to try this), Calc would work for a
long time but would be unable to find a solution.  In fact, there is no
closed-form solution to this integral.  Now what do we do?
</p>
<a name="index-Integration_002c-numerical"></a>
<a name="index-Numerical-integration"></a>
<p>One approach would be to do the integral numerically.  It is not hard
to do this by hand using vector mapping and reduction.  It is rather
slow, though, since the sine and logarithm functions take a long time.
We can save some time by reducing the working precision.
</p>
<div class="smallexample">
<pre class="smallexample">3:  10                  1:  [1, 1.1, 1.2,  ...  , 1.8, 1.9]
2:  1                       .
1:  0.1
    .

 10 <span class="key">RET</span> 1 <span class="key">RET</span> .1 <span class="key">RET</span>        C-u v x
</pre></div>

<p>(Note that we have used the extended version of <kbd>v x</kbd>; we could
also have used plain <kbd>v x</kbd> as follows:  <kbd>v x 10 <span class="key">RET</span> 9 + .1 *</kbd>.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 1.1, ... ]              1:  [0., 0.084941, 0.16993, ... ]
1:  ln(x) sin(x)                    .
    .

    ' sin(x) ln(x) <span class="key">RET</span>  s 1    m r  p 5 <span class="key">RET</span>   V M $ <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  3.4195     0.34195
    .          .

    V R +      0.1 *
</pre></div>

<p>(If you got wildly different results, did you remember to switch
to Radians mode?)
</p>
<p>Here we have divided the curve into ten segments of equal width;
approximating these segments as rectangular boxes (i.e., assuming
the curve is nearly flat at that resolution), we compute the areas
of the boxes (height times width), then sum the areas.  (It is
faster to sum first, then multiply by the width, since the width
is the same for every box.)
</p>
<p>The true value of this integral turns out to be about 0.374, so
we&rsquo;re not doing too well.  Let&rsquo;s try another approach.
</p>
<div class="smallexample">
<pre class="smallexample">1:  ln(x) sin(x)    1:  0.84147 x + 0.11957 (x - 1)^2 - ...
    .                   .

    r 1                 a t x=1 <span class="key">RET</span> 4 <span class="key">RET</span>
</pre></div>

<p>Here we have computed the Taylor series expansion of the function
about the point &lsquo;<samp>x=1</samp>&rsquo;.  We can now integrate this polynomial
approximation, since polynomials are easy to integrate.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.42074 x^2 + ...    1:  [-0.0446, -0.42073]      1:  0.3761
    .                        .                            .

    a i x <span class="key">RET</span>            [ 2 , 1 ] <span class="key">TAB</span>  V M $ <span class="key">RET</span>         V R -
</pre></div>

<p>Better!  By increasing the precision and/or asking for more terms
in the Taylor series, we can get a result as accurate as we like.
(Taylor series converge better away from singularities in the
function such as the one at <code>ln(0)</code>, so it would also help to
expand the series about the points &lsquo;<samp>x=2</samp>&rsquo; or &lsquo;<samp>x=1.5</samp>&rsquo; instead
of &lsquo;<samp>x=1</samp>&rsquo;.)
</p>
<a name="index-Simpson_0027s-rule"></a>
<a name="index-Integration-by-Simpson_0027s-rule"></a>
<p>(&bull;) <strong>Exercise 4.</strong>  Our first method approximated the
curve by stairsteps of width 0.1; the total area was then the sum
of the areas of the rectangles under these stairsteps.  Our second
method approximated the function by a polynomial, which turned out
to be a better approximation than stairsteps.  A third method is
<em>Simpson&rsquo;s rule</em>, which is like the stairstep method except
that the steps are not required to be flat.  Simpson&rsquo;s rule boils
down to the formula,
</p>
<div class="example">
<pre class="example">(h/3) * (f(a) + 4 f(a+h) + 2 f(a+2h) + 4 f(a+3h) + ...
              + 2 f(a+(n-2)*h) + 4 f(a+(n-1)*h) + f(a+n*h))
</pre></div>

<p>where &lsquo;<samp>n</samp>&rsquo; (which must be even) is the number of slices and &lsquo;<samp>h</samp>&rsquo;
is the width of each slice.  These are 10 and 0.1 in our example.
For reference, here is the corresponding formula for the stairstep
method:
</p>
<div class="example">
<pre class="example">h * (f(a) + f(a+h) + f(a+2h) + f(a+3h) + ...
          + f(a+(n-2)*h) + f(a+(n-1)*h))
</pre></div>

<p>Compute the integral from 1 to 2 of
&lsquo;<samp>sin(x) ln(x)</samp>&rsquo;
using Simpson&rsquo;s rule with 10 slices.
See <a href="#Algebra-Answer-4">4</a>. (&bull;)
</p>
<p>Calc has a built-in <kbd>a I</kbd> command for doing numerical integration.
It uses <em>Romberg&rsquo;s method</em>, which is a more sophisticated cousin
of Simpson&rsquo;s rule.  In particular, it knows how to keep refining the
result until the current precision is satisfied.
</p>
<p>Aside from the commands we&rsquo;ve seen so far, Calc also provides a
large set of commands for operating on parts of formulas.  You
indicate the desired sub-formula by placing the cursor on any part
of the formula before giving a <em>selection</em> command.  Selections won&rsquo;t
be covered in the tutorial; see <a href="#Selecting-Subformulas">Selecting Subformulas</a>, for
details and examples.
</p>

<hr>
<a name="Rewrites-Tutorial"></a>
<div class="header">
<p>
Previous: <a href="#Basic-Algebra-Tutorial" accesskey="p" rel="prev">Basic Algebra Tutorial</a>, Up: <a href="#Algebra-Tutorial" accesskey="u" rel="up">Algebra Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrite-Rules-1"></a>
<h4 class="subsection">2.5.2 Rewrite Rules</h4>

<p>No matter how many built-in commands Calc provided for doing algebra,
there would always be something you wanted to do that Calc didn&rsquo;t have
in its repertoire.  So Calc also provides a <em>rewrite rule</em> system
that you can use to define your own algebraic manipulations.
</p>
<p>Suppose we want to simplify this trigonometric formula:
</p>
<div class="smallexample">
<pre class="smallexample">1:  2 sec(x)^2 / tan(x)^2 - 2 / tan(x)^2
    .

    ' 2sec(x)^2/tan(x)^2 - 2/tan(x)^2 <span class="key">RET</span>   s 1
</pre></div>

<p>If we were simplifying this by hand, we&rsquo;d probably combine over the common
denominator.  The <kbd>a n</kbd> algebra command will do this, but we&rsquo;ll do
it with a rewrite rule just for practice.
</p>
<p>Rewrite rules are written with the &lsquo;<samp>:=</samp>&rsquo; symbol.
</p>
<div class="smallexample">
<pre class="smallexample">1:  (2 sec(x)^2 - 2) / tan(x)^2
    .

    a r a/x + b/x := (a+b)/x <span class="key">RET</span>
</pre></div>

<p>(The &ldquo;assignment operator&rdquo; &lsquo;<samp>:=</samp>&rsquo; has several uses in Calc.  All
by itself the formula &lsquo;<samp>a/x + b/x := (a+b)/x</samp>&rsquo; doesn&rsquo;t do anything,
but when it is given to the <kbd>a r</kbd> command, that command interprets
it as a rewrite rule.)
</p>
<p>The lefthand side, &lsquo;<samp>a/x + b/x</samp>&rsquo;, is called the <em>pattern</em> of the
rewrite rule.  Calc searches the formula on the stack for parts that
match the pattern.  Variables in a rewrite pattern are called
<em>meta-variables</em>, and when matching the pattern each meta-variable
can match any sub-formula.  Here, the meta-variable &lsquo;<samp>a</samp>&rsquo; matched
the expression &lsquo;<samp>2 sec(x)^2</samp>&rsquo;, the meta-variable &lsquo;<samp>b</samp>&rsquo; matched
the constant &lsquo;<samp>-2</samp>&rsquo; and the meta-variable &lsquo;<samp>x</samp>&rsquo; matched
the expression &lsquo;<samp>tan(x)^2</samp>&rsquo;.
</p>
<p>This rule points out several interesting features of rewrite patterns.
First, if a meta-variable appears several times in a pattern, it must
match the same thing everywhere.  This rule detects common denominators
because the same meta-variable &lsquo;<samp>x</samp>&rsquo; is used in both of the
denominators.
</p>
<p>Second, meta-variable names are independent from variables in the
target formula.  Notice that the meta-variable &lsquo;<samp>x</samp>&rsquo; here matches
the subformula &lsquo;<samp>tan(x)^2</samp>&rsquo;; Calc never confuses the two meanings of
&lsquo;<samp>x</samp>&rsquo;.
</p>
<p>And third, rewrite patterns know a little bit about the algebraic
properties of formulas.  The pattern called for a sum of two quotients;
Calc was able to match a difference of two quotients by matching
&lsquo;<samp>a = 2 sec(x)^2</samp>&rsquo;, &lsquo;<samp>b = -2</samp>&rsquo;, and &lsquo;<samp>x = tan(x)^2</samp>&rsquo;.
</p>
<p>When the pattern part of a rewrite rule matches a part of the formula,
that part is replaced by the righthand side with all the meta-variables
substituted with the things they matched.  So the result is
&lsquo;<samp>(2 sec(x)^2 - 2) / tan(x)^2</samp>&rsquo;.
</p>
<p>We could just as easily have written &lsquo;<samp>a/x - b/x := (a-b)/x</samp>&rsquo; for
the rule.  It would have worked just the same in all cases.  (If we
really wanted the rule to apply only to &lsquo;<samp>+</samp>&rsquo; or only to &lsquo;<samp>-</samp>&rsquo;,
we could have used the <code>plain</code> symbol.  See <a href="#Algebraic-Properties-of-Rewrite-Rules">Algebraic Properties of Rewrite Rules</a>, for some examples of this.)
</p>
<p>One more rewrite will complete the job.  We want to use the identity
&lsquo;<samp>tan(x)^2 + 1 = sec(x)^2</samp>&rsquo;, but of course we must first rearrange
the identity in a way that matches our formula.  The obvious rule
would be &lsquo;<samp>2&nbsp;sec(x)^2&nbsp;<span class="nolinebreak">-</span>&nbsp;2<!-- /@w --> := 2 tan(x)^2</samp>&rsquo;, but a little thought shows
that the rule &lsquo;<samp>sec(x)^2 := 1 + tan(x)^2</samp>&rsquo; will also work.  The
latter rule has a more general pattern so it will work in many other
situations, too.
</p>
<div class="smallexample">
<pre class="smallexample">1:  2
    .

    a r sec(x)^2 := 1 + tan(x)^2 <span class="key">RET</span>
</pre></div>

<p>You may ask, what&rsquo;s the point of using the most general rule if you
have to type it in every time anyway?  The answer is that Calc allows
you to store a rewrite rule in a variable, then give the variable
name in the <kbd>a r</kbd> command.  In fact, this is the preferred way to
use rewrites.  For one, if you need a rule once you&rsquo;ll most likely
need it again later.  Also, if the rule doesn&rsquo;t work quite right you
can simply Undo, edit the variable, and run the rule again without
having to retype it.
</p>
<div class="smallexample">
<pre class="smallexample">' a/x + b/x := (a+b)/x <span class="key">RET</span>          s t merge <span class="key">RET</span>
' sec(x)^2 := 1 + tan(x)^2 <span class="key">RET</span>      s t secsqr <span class="key">RET</span>

1:  2 sec(x)^2 / tan(x)^2 - 2 / tan(x)^2    1:  2
    .                                  .

    r 1                  a r merge <span class="key">RET</span>  a r secsqr <span class="key">RET</span>
</pre></div>

<p>To edit a variable, type <kbd>s e</kbd> and the variable name, use regular
Emacs editing commands as necessary, then type <kbd>C-c C-c</kbd> to store
the edited value back into the variable.
You can also use <kbd>s&nbsp;e</kbd><!-- /@w --> to create a new variable if you wish.
</p>
<p>Notice that the first time you use each rule, Calc puts up a &ldquo;compiling&rdquo;
message briefly.  The pattern matcher converts rules into a special
optimized pattern-matching language rather than using them directly.
This allows <kbd>a r</kbd> to apply even rather complicated rules very
efficiently.  If the rule is stored in a variable, Calc compiles it
only once and stores the compiled form along with the variable.  That&rsquo;s
another good reason to store your rules in variables rather than
entering them on the fly.
</p>
<p>(&bull;) <strong>Exercise 1.</strong>  Type <kbd>m s</kbd> to get Symbolic
mode, then enter the formula &lsquo;<samp>(2&nbsp;+&nbsp;sqrt(2))<!-- /@w --> / (1&nbsp;+&nbsp;sqrt(2))<!-- /@w --></samp>&rsquo;.
Using a rewrite rule, simplify this formula by multiplying the top and
bottom by the conjugate &lsquo;<samp>1&nbsp;<span class="nolinebreak">-</span>&nbsp;sqrt(2)</samp>&rsquo;<!-- /@w -->.  The result will have
to be expanded by the distributive law; do this with another
rewrite.  See <a href="#Rewrites-Answer-1">1</a>. (&bull;)
</p>
<p>The <kbd>a r</kbd> command can also accept a vector of rewrite rules, or
a variable containing a vector of rules.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [merge, secsqr]          1:  [a/x + b/x := (a + b)/x, ... ]
    .                                 .

    ' [merge,sinsqr] <span class="key">RET</span>          =

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  2 sec(x)^2 / tan(x)^2 - 2 / tan(x)^2     1:  2
    .                                 .

    s t trig <span class="key">RET</span>  r 1                  a r trig <span class="key">RET</span>
</pre></div>

<p>Calc tries all the rules you give against all parts of the formula,
repeating until no further change is possible.  (The exact order in
which things are tried is rather complex, but for simple rules like
the ones we&rsquo;ve used here the order doesn&rsquo;t really matter.
See <a href="#Nested-Formulas-with-Rewrite-Rules">Nested Formulas with Rewrite Rules</a>.)
</p>
<p>Calc actually repeats only up to 100 times, just in case your rule set
has gotten into an infinite loop.  You can give a numeric prefix argument
to <kbd>a r</kbd> to specify any limit.  In particular, <kbd>M-1 a r</kbd> does
only one rewrite at a time.
</p>
<div class="smallexample">
<pre class="smallexample">1:  (2 sec(x)^2 - 2) / tan(x)^2         1:  2
    .                                       .

    r 1  M-1 a r trig <span class="key">RET</span>                   M-1 a r trig <span class="key">RET</span>
</pre></div>

<p>You can type <kbd>M-0 a r</kbd> if you want no limit at all on the number
of rewrites that occur.
</p>
<p>Rewrite rules can also be <em>conditional</em>.  Simply follow the rule
with a &lsquo;<samp>::</samp>&rsquo; symbol and the desired condition.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">1:  sin(x + 2 pi) + sin(x + 3 pi) + sin(x + 4 pi)
    .

    ' sin(x+2pi) + sin(x+3pi) + sin(x+4pi) <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  sin(x + 3 pi) + 2 sin(x)
    .

    a r sin(a + k pi) := sin(a) :: k % 2 = 0 <span class="key">RET</span>
</pre></div>

<p>(Recall, &lsquo;<samp>k % 2</samp>&rsquo; is the remainder from dividing &lsquo;<samp>k</samp>&rsquo; by 2,
which will be zero only when &lsquo;<samp>k</samp>&rsquo; is an even integer.)
</p>
<p>An interesting point is that the variable &lsquo;<samp>pi</samp>&rsquo; was matched
literally rather than acting as a meta-variable.
This is because it is a special-constant variable.  The special
constants &lsquo;<samp>e</samp>&rsquo;, &lsquo;<samp>i</samp>&rsquo;, &lsquo;<samp>phi</samp>&rsquo;, and so on also match literally.
A common error with rewrite
rules is to write, say, &lsquo;<samp>f(a,b,c,d,e) := g(a+b+c+d+e)</samp>&rsquo;, expecting
to match any &lsquo;<samp>f</samp>&rsquo; with five arguments but in fact matching
only when the fifth argument is literally &lsquo;<samp>e</samp>&rsquo;!
</p>
<a name="index-Fibonacci-numbers"></a>
<a name="index-fib"></a>
<p>Rewrite rules provide an interesting way to define your own functions.
Suppose we want to define &lsquo;<samp>fib(n)</samp>&rsquo; to produce the <var>n</var>th
Fibonacci number.  The first two Fibonacci numbers are each 1;
later numbers are formed by summing the two preceding numbers in
the sequence.  This is easy to express in a set of three rules:
</p>
<div class="smallexample">
<pre class="smallexample">' [fib(1) := 1, fib(2) := 1, fib(n) := fib(n-1) + fib(n-2)] <span class="key">RET</span>  s t fib

1:  fib(7)               1:  13
    .                        .

    ' fib(7) <span class="key">RET</span>             a r fib <span class="key">RET</span>
</pre></div>

<p>One thing that is guaranteed about the order that rewrites are tried
is that, for any given subformula, earlier rules in the rule set will
be tried for that subformula before later ones.  So even though the
first and third rules both match &lsquo;<samp>fib(1)</samp>&rsquo;, we know the first will
be used preferentially.
</p>
<p>This rule set has one dangerous bug:  Suppose we apply it to the
formula &lsquo;<samp>fib(x)</samp>&rsquo;?  (Don&rsquo;t actually try this.)  The third rule
will match &lsquo;<samp>fib(x)</samp>&rsquo; and replace it with &lsquo;<samp><span class="nolinebreak">fib(x-1)</span>&nbsp;+&nbsp;<span class="nolinebreak">fib(x-2)</span></samp>&rsquo;<!-- /@w -->.
Each of these will then be replaced to get &lsquo;<samp>fib(x-2) + 2 fib(x-3) +
fib(x-4)</samp>&rsquo;, and so on, expanding forever.  What we really want is to apply
the third rule only when &lsquo;<samp>n</samp>&rsquo; is an integer greater than two.  Type
<kbd>s&nbsp;e&nbsp;fib&nbsp;<span class="key">RET</span></kbd><!-- /@w -->, then edit the third rule to:
</p>
<div class="smallexample">
<pre class="smallexample">fib(n) := fib(n-1) + fib(n-2) :: integer(n) :: n &gt; 2
</pre></div>

<p>Now:
</p>
<div class="smallexample">
<pre class="smallexample">1:  fib(6) + fib(x) + fib(0)      1:  fib(x) + fib(0) + 8
    .                                 .

    ' fib(6)+fib(x)+fib(0) <span class="key">RET</span>        a r fib <span class="key">RET</span>
</pre></div>

<p>We&rsquo;ve created a new function, <code>fib</code>, and a new command,
<kbd>a&nbsp;r&nbsp;fib&nbsp;<span class="key">RET</span></kbd><!-- /@w -->, which means &ldquo;evaluate all <code>fib</code> calls in
this formula.&rdquo;  To make things easier still, we can tell Calc to
apply these rules automatically by storing them in the special
variable <code>EvalRules</code>.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [fib(1) := ...]    .                1:  [8, 13]
    .                                       .

    s r fib <span class="key">RET</span>        s t EvalRules <span class="key">RET</span>    ' [fib(6), fib(7)] <span class="key">RET</span>
</pre></div>

<p>It turns out that this rule set has the problem that it does far
more work than it needs to when &lsquo;<samp>n</samp>&rsquo; is large.  Consider the
first few steps of the computation of &lsquo;<samp>fib(6)</samp>&rsquo;:
</p>
<div class="smallexample">
<pre class="smallexample">fib(6) =
fib(5)              +               fib(4) =
fib(4)     +      fib(3)     +      fib(3)     +      fib(2) =
fib(3) + fib(2) + fib(2) + fib(1) + fib(2) + fib(1) + 1 = ...
</pre></div>

<p>Note that &lsquo;<samp>fib(3)</samp>&rsquo; appears three times here.  Unless Calc&rsquo;s
algebraic simplifier notices the multiple &lsquo;<samp>fib(3)</samp>&rsquo;s and combines
them (and, as it happens, it doesn&rsquo;t), this rule set does lots of
needless recomputation.  To cure the problem, type <code>s e EvalRules</code>
to edit the rules (or just <kbd>s E</kbd>, a shorthand command for editing
<code>EvalRules</code>) and add another condition:
</p>
<div class="smallexample">
<pre class="smallexample">fib(n) := fib(n-1) + fib(n-2) :: integer(n) :: n &gt; 2 :: remember
</pre></div>

<p>If a &lsquo;<samp>:: remember</samp>&rsquo; condition appears anywhere in a rule, then if
that rule succeeds Calc will add another rule that describes that match
to the front of the rule set.  (Remembering works in any rule set, but
for technical reasons it is most effective in <code>EvalRules</code>.)  For
example, if the rule rewrites &lsquo;<samp>fib(7)</samp>&rsquo; to something that evaluates
to 13, then the rule &lsquo;<samp>fib(7) := 13</samp>&rsquo; will be added to the rule set.
</p>
<p>Type <kbd>' fib(8) <span class="key">RET</span></kbd> to compute the eighth Fibonacci number, then
type <kbd>s E</kbd> again to see what has happened to the rule set.
</p>
<p>With the <code>remember</code> feature, our rule set can now compute
&lsquo;<samp>fib(<var>n</var>)</samp>&rsquo; in just <var>n</var> steps.  In the process it builds
up a table of all Fibonacci numbers up to <var>n</var>.  After we have
computed the result for a particular <var>n</var>, we can get it back
(and the results for all smaller <var>n</var>) later in just one step.
</p>
<p>All Calc operations will run somewhat slower whenever <code>EvalRules</code>
contains any rules.  You should type <kbd>s u EvalRules <span class="key">RET</span></kbd> now to
un-store the variable.
</p>
<p>(&bull;) <strong>Exercise 2.</strong>  Sometimes it is possible to reformulate
a problem to reduce the amount of recursion necessary to solve it.
Create a rule that, in about <var>n</var> simple steps and without recourse
to the <code>remember</code> option, replaces &lsquo;<samp>fib(<var>n</var>, 1, 1)</samp>&rsquo; with
&lsquo;<samp>fib(1, <var>x</var>, <var>y</var>)</samp>&rsquo; where <var>x</var> and <var>y</var> are the
<var>n</var>th and <var>n+1</var>st Fibonacci numbers, respectively.  This rule is
rather clunky to use, so add a couple more rules to make the &ldquo;user
interface&rdquo; the same as for our first version: enter &lsquo;<samp>fib(<var>n</var>)</samp>&rsquo;,
get back a plain number.  See <a href="#Rewrites-Answer-2">2</a>. (&bull;)
</p>
<p>There are many more things that rewrites can do.  For example, there
are &lsquo;<samp>&amp;&amp;&amp;</samp>&rsquo; and &lsquo;<samp>|||</samp>&rsquo; pattern operators that create &ldquo;and&rdquo;
and &ldquo;or&rdquo; combinations of rules.  As one really simple example, we
could combine our first two Fibonacci rules thusly:
</p>
<div class="example">
<pre class="example">[fib(1 ||| 2) := 1, fib(n) := ... ]
</pre></div>

<p>That means &ldquo;<code>fib</code> of something matching either 1 or 2 rewrites
to 1.&rdquo;
</p>
<p>You can also make meta-variables optional by enclosing them in <code>opt</code>.
For example, the pattern &lsquo;<samp>a + b x</samp>&rsquo; matches &lsquo;<samp>2 + 3 x</samp>&rsquo; but not
&lsquo;<samp>2 + x</samp>&rsquo; or &lsquo;<samp>3 x</samp>&rsquo; or &lsquo;<samp>x</samp>&rsquo;.  The pattern &lsquo;<samp>opt(a) + opt(b) x</samp>&rsquo;
matches all of these forms, filling in a default of zero for &lsquo;<samp>a</samp>&rsquo;
and one for &lsquo;<samp>b</samp>&rsquo;.
</p>
<p>(&bull;) <strong>Exercise 3.</strong>  Your friend Joe had &lsquo;<samp>2 + 3 x</samp>&rsquo;
on the stack and tried to use the rule
&lsquo;<samp>opt(a) + opt(b) x := f(a, b, x)</samp>&rsquo;.  What happened?
See <a href="#Rewrites-Answer-3">3</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 4.</strong>  Starting with a positive integer &lsquo;<samp>a</samp>&rsquo;,
divide &lsquo;<samp>a</samp>&rsquo; by two if it is even, otherwise compute &lsquo;<samp>3 a + 1</samp>&rsquo;.
Now repeat this step over and over.  A famous unproved conjecture
is that for any starting &lsquo;<samp>a</samp>&rsquo;, the sequence always eventually
reaches 1.  Given the formula &lsquo;<samp>seq(<var>a</var>, 0)</samp>&rsquo;, write a set of
rules that convert this into &lsquo;<samp>seq(1, <var>n</var>)</samp>&rsquo; where <var>n</var>
is the number of steps it took the sequence to reach the value 1.
Now enhance the rules to accept &lsquo;<samp>seq(<var>a</var>)</samp>&rsquo; as a starting
configuration, and to stop with just the number <var>n</var> by itself.
Now make the result be a vector of values in the sequence, from <var>a</var>
to 1.  (The formula &lsquo;<samp><var>x</var>|<var>y</var></samp>&rsquo; appends the vectors <var>x</var>
and <var>y</var>.)  For example, rewriting &lsquo;<samp>seq(6)</samp>&rsquo; should yield the
vector &lsquo;<samp>[6, 3, 10, 5, 16, 8, 4, 2, 1]</samp>&rsquo;.
See <a href="#Rewrites-Answer-4">4</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 5.</strong>  Define, using rewrite rules, a function
&lsquo;<samp>nterms(<var>x</var>)</samp>&rsquo; that returns the number of terms in the sum
<var>x</var>, or 1 if <var>x</var> is not a sum.  (A <em>sum</em> for our purposes
is one or more non-sum terms separated by &lsquo;<samp>+</samp>&rsquo; or &lsquo;<samp>-</samp>&rsquo; signs,
so that &lsquo;<samp>2 - 3 (x + y) + x y</samp>&rsquo; is a sum of three terms.)
See <a href="#Rewrites-Answer-5">5</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 6.</strong>  A Taylor series for a function is an
infinite series that exactly equals the value of that function at
values of &lsquo;<samp>x</samp>&rsquo; near zero.
</p>
<div class="example">
<pre class="example">cos(x) = 1 - x^2 / 2! + x^4 / 4! - x^6 / 6! + ...
</pre></div>

<p>The <kbd>a t</kbd> command produces a <em>truncated Taylor series</em> which
is obtained by dropping all the terms higher than, say, &lsquo;<samp>x^2</samp>&rsquo;.
Calc represents the truncated Taylor series as a polynomial in &lsquo;<samp>x</samp>&rsquo;.
Mathematicians often write a truncated series using a &ldquo;big-O&rdquo; notation
that records what was the lowest term that was truncated.
</p>
<div class="example">
<pre class="example">cos(x) = 1 - x^2 / 2! + O(x^3)
</pre></div>

<p>The meaning of &lsquo;<samp>O(x^3)</samp>&rsquo; is &ldquo;a quantity which is negligibly small
if &lsquo;<samp>x^3</samp>&rsquo; is considered negligibly small as &lsquo;<samp>x</samp>&rsquo; goes to zero.&rdquo;
</p>
<p>The exercise is to create rewrite rules that simplify sums and products of
power series represented as &lsquo;<samp><var>polynomial</var> + O(<var>var</var>^<var>n</var>)</samp>&rsquo;.
For example, given &lsquo;<samp>1 - x^2 / 2 + O(x^3)</samp>&rsquo; and &lsquo;<samp>x - x^3 / 6 + O(x^4)</samp>&rsquo;
on the stack, we want to be able to type <kbd>*</kbd> and get the result
&lsquo;<samp>x - 2:3 x^3 + O(x^4)</samp>&rsquo;.  Don&rsquo;t worry if the terms of the sum are
rearranged.  (This one is rather tricky; the solution at the end of
this chapter uses 6 rewrite rules.  Hint:  The &lsquo;<samp>constant(x)</samp>&rsquo;
condition tests whether &lsquo;<samp>x</samp>&rsquo; is a number.)  See <a href="#Rewrites-Answer-6">6</a>. (&bull;)
</p>
<p>Just for kicks, try adding the rule <code>2+3 := 6</code> to <code>EvalRules</code>.
What happens?  (Be sure to remove this rule afterward, or you might get
a nasty surprise when you use Calc to balance your checkbook!)
</p>
<p>See <a href="#Rewrite-Rules">Rewrite Rules</a>, for the whole story on rewrite rules.
</p>
<hr>
<a name="Programming-Tutorial"></a>
<div class="header">
<p>
Next: <a href="#Answers-to-Exercises" accesskey="n" rel="next">Answers to Exercises</a>, Previous: <a href="#Algebra-Tutorial" accesskey="p" rel="prev">Algebra Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-1"></a>
<h3 class="section">2.6 Programming Tutorial</h3>

<p>The Calculator is written entirely in Emacs Lisp, a highly extensible
language.  If you know Lisp, you can program the Calculator to do
anything you like.  Rewrite rules also work as a powerful programming
system.  But Lisp and rewrite rules take a while to master, and often
all you want to do is define a new function or repeat a command a few
times.  Calc has features that allow you to do these things easily.
</p>
<p>One very limited form of programming is defining your own functions.
Calc&rsquo;s <kbd>Z F</kbd> command allows you to define a function name and
key sequence to correspond to any formula.  Programming commands use
the shift-<kbd>Z</kbd> prefix; the user commands they create use the lower
case <kbd>z</kbd> prefix.
</p>
<div class="smallexample">
<pre class="smallexample">1:  x + x^2 / 2 + x^3 / 6 + 1         1:  x + x^2 / 2 + x^3 / 6 + 1
    .                                     .

    ' 1 + x + x^2/2! + x^3/3! <span class="key">RET</span>         Z F e myexp <span class="key">RET</span> <span class="key">RET</span> <span class="key">RET</span> y
</pre></div>

<p>This polynomial is a Taylor series approximation to &lsquo;<samp>exp(x)</samp>&rsquo;.
The <kbd>Z F</kbd> command asks a number of questions.  The above answers
say that the key sequence for our function should be <kbd>z e</kbd>; the
<kbd>M-x</kbd> equivalent should be <code>calc-myexp</code>; the name of the
function in algebraic formulas should also be <code>myexp</code>; the
default argument list &lsquo;<samp>(x)</samp>&rsquo; is acceptable; and finally <kbd>y</kbd>
answers the question &ldquo;leave it in symbolic form for non-constant
arguments?&rdquo;
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.3495     2:  1.3495     3:  1.3495
    .          1:  1.34986    2:  1.34986
                   .          1:  myexp(a + 1)
                                  .

    .3 z e         .3 E           ' a+1 <span class="key">RET</span> z e
</pre></div>

<p>First we call our new <code>exp</code> approximation with 0.3 as an
argument, and compare it with the true <code>exp</code> function.  Then
we note that, as requested, if we try to give <kbd>z e</kbd> an
argument that isn&rsquo;t a plain number, it leaves the <code>myexp</code>
function call in symbolic form.  If we had answered <kbd>n</kbd> to the
final question, &lsquo;<samp>myexp(a + 1)</samp>&rsquo; would have evaluated by plugging
in &lsquo;<samp>a + 1</samp>&rsquo; for &lsquo;<samp>x</samp>&rsquo; in the defining formula.
</p>
<a name="index-Sine-integral-Si_0028x_0029"></a>
<a name="index-Si"></a>
<p>(&bull;) <strong>Exercise 1.</strong>  The &ldquo;sine integral&rdquo; function
&lsquo;<samp>Si(x)</samp>&rsquo;
is defined as the integral of &lsquo;<samp>sin(t)/t</samp>&rsquo; for
&lsquo;<samp>t = 0</samp>&rsquo; to &lsquo;<samp>x</samp>&rsquo; in radians.  (It was invented because this
integral has no solution in terms of basic functions; if you give it
to Calc&rsquo;s <kbd>a i</kbd> command, it will ponder it for a long time and then
give up.)  We can use the numerical integration command, however,
which in algebraic notation is written like &lsquo;<samp>ninteg(f(t), t, 0, x)</samp>&rsquo;
with any integrand &lsquo;<samp>f(t)</samp>&rsquo;.  Define a <kbd>z s</kbd> command and
<code>Si</code> function that implement this.  You will need to edit the
default argument list a bit.  As a test, &lsquo;<samp>Si(1)</samp>&rsquo; should return
0.946083. (If you don&rsquo;t get this answer, you might want to check that
Calc is in Radians mode.  Also, <code>ninteg</code> will run a lot faster if
you reduce the precision to, say, six digits beforehand.)
See <a href="#Programming-Answer-1">1</a>. (&bull;)
</p>
<p>The simplest way to do real &ldquo;programming&rdquo; of Emacs is to define a
<em>keyboard macro</em>.  A keyboard macro is simply a sequence of
keystrokes which Emacs has stored away and can play back on demand.
For example, if you find yourself typing <kbd>H a S x <span class="key">RET</span></kbd> often,
you may wish to program a keyboard macro to type this for you.
</p>
<div class="smallexample">
<pre class="smallexample">1:  y = sqrt(x)          1:  x = y^2
    .                        .

    ' y=sqrt(x) <span class="key">RET</span>       C-x ( H a S x <span class="key">RET</span> C-x )

1:  y = cos(x)           1:  x = s1 arccos(y) + 2 n1 pi
    .                        .

    ' y=cos(x) <span class="key">RET</span>           X
</pre></div>

<p>When you type <kbd>C-x (</kbd>, Emacs begins recording.  But it is also
still ready to execute your keystrokes, so you&rsquo;re really &ldquo;training&rdquo;
Emacs by walking it through the procedure once.  When you type
<kbd><span class="nolinebreak">C-x</span>&nbsp;)</kbd><!-- /@w -->, the macro is recorded.  You can now type <kbd>X</kbd> to
re-execute the same keystrokes.
</p>
<p>You can give a name to your macro by typing <kbd>Z K</kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">1:  .              1:  y = x^4         1:  x = s2 sqrt(s1 sqrt(y))
                       .                   .

  Z K x <span class="key">RET</span>            ' y=x^4 <span class="key">RET</span>         z x
</pre></div>

<p>Notice that we use shift-<kbd>Z</kbd> to define the command, and lower-case
<kbd>z</kbd> to call it up.
</p>
<p>Keyboard macros can call other macros.
</p>
<div class="smallexample">
<pre class="smallexample">1:  abs(x)        1:  x = s1 y                1:  2 / x    1:  x = 2 / y
    .                 .                           .            .

 ' abs(x) <span class="key">RET</span>   C-x ( ' y <span class="key">RET</span> a = z x C-x )    ' 2/x <span class="key">RET</span>       X
</pre></div>

<p>(&bull;) <strong>Exercise 2.</strong>  Define a keyboard macro to negate
the item in level 3 of the stack, without disturbing the rest of
the stack.  See <a href="#Programming-Answer-2">2</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 3.</strong>  Define keyboard macros to compute
the following functions:
</p>
<ol>
<li> Compute
&lsquo;<samp>sin(x) / x</samp>&rsquo;,
where &lsquo;<samp>x</samp>&rsquo; is the number on the top of the stack.

</li><li> Compute the base-&lsquo;<samp>b</samp>&rsquo; logarithm, just like the <kbd>B</kbd> key except
the arguments are taken in the opposite order.

</li><li> Produce a vector of integers from 1 to the integer on the top of
the stack.
</li></ol>
<p>See <a href="#Programming-Answer-3">3</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 4.</strong>  Define a keyboard macro to compute
the average (mean) value of a list of numbers.
See <a href="#Programming-Answer-4">4</a>. (&bull;)
</p>
<p>In many programs, some of the steps must execute several times.
Calc has <em>looping</em> commands that allow this.  Loops are useful
inside keyboard macros, but actually work at any time.
</p>
<div class="smallexample">
<pre class="smallexample">1:  x^6          2:  x^6        1: 360 x^2
    .            1:  4             .
                     .

  ' x^6 <span class="key">RET</span>          4         Z &lt; a d x <span class="key">RET</span> Z &gt;
</pre></div>

<p>Here we have computed the fourth derivative of &lsquo;<samp>x^6</samp>&rsquo; by
enclosing a derivative command in a &ldquo;repeat loop&rdquo; structure.
This structure pops a repeat count from the stack, then
executes the body of the loop that many times.
</p>
<p>If you make a mistake while entering the body of the loop,
type <kbd>Z&nbsp;<span class="nolinebreak">C-g</span></kbd><!-- /@w --> to cancel the loop command.
</p>
<a name="index-Fibonacci-numbers-1"></a>
<p>Here&rsquo;s another example:
</p>
<div class="smallexample">
<pre class="smallexample">3:  1               2:  10946
2:  1               1:  17711
1:  20                  .
    .

1 <span class="key">RET</span> <span class="key">RET</span> 20       Z &lt; <span class="key">TAB</span> C-j + Z &gt;
</pre></div>

<p>The numbers in levels 2 and 1 should be the 21st and 22nd Fibonacci
numbers, respectively.  (To see what&rsquo;s going on, try a few repetitions
of the loop body by hand; <kbd>C-j</kbd>, also on the Line-Feed or <tt class="key">LFD</tt>
key if you have one, makes a copy of the number in level 2.)
</p>
<a name="index-Golden-ratio"></a>
<a name="index-Phi_002c-golden-ratio"></a>
<p>A fascinating property of the Fibonacci numbers is that the &lsquo;<samp>n</samp>&rsquo;th
Fibonacci number can be found directly by computing
&lsquo;<samp>phi^n / sqrt(5)</samp>&rsquo;
and then rounding to the nearest integer, where
&lsquo;<samp>phi</samp>&rsquo;,
the &ldquo;golden ratio,&rdquo; is
&lsquo;<samp>(1 + sqrt(5)) / 2</samp>&rsquo;.
(For convenience, this constant is available from the <code>phi</code>
variable, or the <kbd>I H P</kbd> command.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.61803         1:  24476.0000409    1:  10945.9999817    1:  10946
    .                   .                    .                    .

    I H P               21 ^                 5 Q /                R
</pre></div>

<a name="index-Continued-fractions"></a>
<p>(&bull;) <strong>Exercise 5.</strong>  The <em>continued fraction</em>
representation of
&lsquo;<samp>phi</samp>&rsquo;
is
&lsquo;<samp>1 + 1/(1 + 1/(1 + 1/( ... )))</samp>&rsquo;.
We can compute an approximate value by carrying this however far
and then replacing the innermost
&lsquo;<samp>1/( ... )</samp>&rsquo;
by 1.  Approximate
&lsquo;<samp>phi</samp>&rsquo;
using a twenty-term continued fraction.
See <a href="#Programming-Answer-5">5</a>. (&bull;)
</p>
<p>(&bull;) <strong>Exercise 6.</strong>  Linear recurrences like the one for
Fibonacci numbers can be expressed in terms of matrices.  Given a
vector &lsquo;<samp>[a,&nbsp;b]</samp>&rsquo;<!-- /@w --> determine a matrix which, when multiplied by this
vector, produces the vector &lsquo;<samp>[b, c]</samp>&rsquo;, where &lsquo;<samp>a</samp>&rsquo;, &lsquo;<samp>b</samp>&rsquo; and
&lsquo;<samp>c</samp>&rsquo; are three successive Fibonacci numbers.  Now write a program
that, given an integer &lsquo;<samp>n</samp>&rsquo;, computes the &lsquo;<samp>n</samp>&rsquo;th Fibonacci number
using matrix arithmetic.  See <a href="#Programming-Answer-6">6</a>. (&bull;)
</p>
<a name="index-Harmonic-numbers"></a>
<p>A more sophisticated kind of loop is the <em>for</em> loop.  Suppose
we wish to compute the 20th &ldquo;harmonic&rdquo; number, which is equal to
the sum of the reciprocals of the integers from 1 to 20.
</p>
<div class="smallexample">
<pre class="smallexample">3:  0               1:  3.597739
2:  1                   .
1:  20
    .

0 <span class="key">RET</span> 1 <span class="key">RET</span> 20         Z ( &amp; + 1 Z )
</pre></div>

<p>The &ldquo;for&rdquo; loop pops two numbers, the lower and upper limits, then
repeats the body of the loop as an internal counter increases from
the lower limit to the upper one.  Just before executing the loop
body, it pushes the current loop counter.  When the loop body
finishes, it pops the &ldquo;step,&rdquo; i.e., the amount by which to
increment the loop counter.  As you can see, our loop always
uses a step of one.
</p>
<p>This harmonic number function uses the stack to hold the running
total as well as for the various loop housekeeping functions.  If
you find this disorienting, you can sum in a variable instead:
</p>
<div class="smallexample">
<pre class="smallexample">1:  0         2:  1                  .            1:  3.597739
    .         1:  20                                  .
                  .

    0 t 7       1 <span class="key">RET</span> 20      Z ( &amp; s + 7 1 Z )       r 7
</pre></div>

<p>The <kbd>s +</kbd> command adds the top-of-stack into the value in a
variable (and removes that value from the stack).
</p>
<p>It&rsquo;s worth noting that many jobs that call for a &ldquo;for&rdquo; loop can
also be done more easily by Calc&rsquo;s high-level operations.  Two
other ways to compute harmonic numbers are to use vector mapping
and reduction (<kbd>v x 20</kbd>, then <kbd>V&nbsp;M&nbsp;&amp;</kbd><!-- /@w -->, then <kbd>V R +</kbd>),
or to use the summation command <kbd>a +</kbd>.  Both of these are
probably easier than using loops.  However, there are some
situations where loops really are the way to go:
</p>
<p>(&bull;) <strong>Exercise 7.</strong>  Use a &ldquo;for&rdquo; loop to find the first
harmonic number which is greater than 4.0.
See <a href="#Programming-Answer-7">7</a>. (&bull;)
</p>
<p>Of course, if we&rsquo;re going to be using variables in our programs,
we have to worry about the programs clobbering values that the
caller was keeping in those same variables.  This is easy to
fix, though:
</p>
<div class="smallexample">
<pre class="smallexample">    .        1:  0.6667       1:  0.6667     3:  0.6667
                 .                .          2:  3.597739
                                             1:  0.6667
                                                 .

   Z `    p 4 <span class="key">RET</span> 2 <span class="key">RET</span> 3 /   s 7 s s a <span class="key">RET</span>    Z '  r 7 s r a <span class="key">RET</span>
</pre></div>

<p>When we type <kbd>Z `</kbd> (that&rsquo;s a grave accent), Calc saves
its mode settings and the contents of the ten &ldquo;quick variables&rdquo;
for later reference.  When we type <kbd>Z '</kbd> (that&rsquo;s an apostrophe
now), Calc restores those saved values.  Thus the <kbd>p 4</kbd> and
<kbd>s 7</kbd> commands have no effect outside this sequence.  Wrapping
this around the body of a keyboard macro ensures that it doesn&rsquo;t
interfere with what the user of the macro was doing.  Notice that
the contents of the stack, and the values of named variables,
survive past the <kbd>Z '</kbd> command.
</p>
<a name="index-Bernoulli-numbers_002c-approximate"></a>
<p>The <em>Bernoulli numbers</em> are a sequence with the interesting
property that all of the odd Bernoulli numbers are zero, and the
even ones, while difficult to compute, can be roughly approximated
by the formula
&lsquo;<samp>2 n! / (2 pi)^n</samp>&rsquo;.
Let&rsquo;s write a keyboard macro to compute (approximate) Bernoulli numbers.
(Calc has a command, <kbd>k b</kbd>, to compute exact Bernoulli numbers, but
this command is very slow for large &lsquo;<samp>n</samp>&rsquo; since the higher Bernoulli
numbers are very large fractions.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  10               1:  0.0756823
    .                    .

    10     C-x ( <span class="key">RET</span> 2 % Z [ <span class="key">DEL</span> 0 Z : ' 2 $! / (2 pi)^$ <span class="key">RET</span> = Z ] C-x )
</pre></div>

<p>You can read <kbd>Z [</kbd> as &ldquo;then,&rdquo; <kbd>Z :</kbd> as &ldquo;else,&rdquo; and
<kbd>Z ]</kbd> as &ldquo;end-if.&rdquo;  There is no need for an explicit &ldquo;if&rdquo;
command.  For the purposes of <kbd>Z&nbsp;[</kbd><!-- /@w -->, the condition is &ldquo;true&rdquo;
if the value it pops from the stack is a nonzero number, or &ldquo;false&rdquo;
if it pops zero or something that is not a number (like a formula).
Here we take our integer argument modulo 2; this will be nonzero
if we&rsquo;re asking for an odd Bernoulli number.
</p>
<p>The actual tenth Bernoulli number is &lsquo;<samp>5/66</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">3:  0.0756823    1:  0          1:  0.25305    1:  0          1:  1.16659
2:  5:66             .              .              .              .
1:  0.0757575
    .

10 k b <span class="key">RET</span> c f   M-0 <span class="key">DEL</span> 11 X   <span class="key">DEL</span> 12 X       <span class="key">DEL</span> 13 X       <span class="key">DEL</span> 14 X
</pre></div>

<p>Just to exercise loops a bit more, let&rsquo;s compute a table of even
Bernoulli numbers.
</p>
<div class="smallexample">
<pre class="smallexample">3:  []             1:  [0.10132, 0.03079, 0.02340, 0.033197, ...]
2:  2                  .
1:  30
    .

 [ ] 2 <span class="key">RET</span> 30          Z ( X | 2 Z )
</pre></div>

<p>The vertical-bar <kbd>|</kbd> is the vector-concatenation command.  When
we execute it, the list we are building will be in stack level 2
(initially this is an empty list), and the next Bernoulli number
will be in level 1.  The effect is to append the Bernoulli number
onto the end of the list.  (To create a table of exact fractional
Bernoulli numbers, just replace <kbd>X</kbd> with <kbd>k b</kbd> in the above
sequence of keystrokes.)
</p>
<p>With loops and conditionals, you can program essentially anything
in Calc.  One other command that makes looping easier is <kbd>Z /</kbd>,
which takes a condition from the stack and breaks out of the enclosing
loop if the condition is true (non-zero).  You can use this to make
&ldquo;while&rdquo; and &ldquo;until&rdquo; style loops.
</p>
<p>If you make a mistake when entering a keyboard macro, you can edit
it using <kbd>Z E</kbd>.  First, you must attach it to a key with <kbd>Z K</kbd>.
One technique is to enter a throwaway dummy definition for the macro,
then enter the real one in the edit command.
</p>
<div class="smallexample">
<pre class="smallexample">1:  3                   1:  3           Calc Macro Edit Mode.
    .                       .           Original keys: 1 &lt;return&gt; 2 +

                                        1                          ;; calc digits
                                        RET                        ;; calc-enter
                                        2                          ;; calc digits
                                        +                          ;; calc-plus

C-x ( 1 <span class="key">RET</span> 2 + C-x )    Z K h <span class="key">RET</span>      Z E h
</pre></div>

<p>A keyboard macro is stored as a pure keystroke sequence.  The
<samp>edmacro</samp> package (invoked by <kbd>Z E</kbd>) scans along the
macro and tries to decode it back into human-readable steps.
Descriptions of the keystrokes are given as comments, which begin with
&lsquo;<samp>;;</samp>&rsquo;, and which are ignored when the edited macro is saved.
Spaces and line breaks are also ignored when the edited macro is saved.
To enter a space into the macro, type <code>SPC</code>.  All the special
characters <code>RET</code>, <code>LFD</code>, <code>TAB</code>, <code>SPC</code>, <code>DEL</code>,
and <code>NUL</code> must be written in all uppercase, as must the prefixes
<code>C-</code> and <code>M-</code>.
</p>
<p>Let&rsquo;s edit in a new definition, for computing harmonic numbers.
First, erase the four lines of the old definition.  Then, type
in the new definition (or use Emacs <kbd>M-w</kbd> and <kbd>C-y</kbd> commands
to copy it from this page of the Info file; you can of course skip
typing the comments, which begin with &lsquo;<samp>;;</samp>&rsquo;).
</p>
<div class="smallexample">
<pre class="smallexample">Z`                      ;; calc-kbd-push     (Save local values)
0                       ;; calc digits       (Push a zero onto the stack)
st                      ;; calc-store-into   (Store it in the following variable)
1                       ;; calc quick variable  (Quick variable q1)
1                       ;; calc digits       (Initial value for the loop)
TAB                     ;; calc-roll-down    (Swap initial and final)
Z(                      ;; calc-kbd-for      (Begin the &quot;for&quot; loop)
&amp;                       ;; calc-inv          (Take the reciprocal)
s+                      ;; calc-store-plus   (Add to the following variable)
1                       ;; calc quick variable  (Quick variable q1)
1                       ;; calc digits       (The loop step is 1)
Z)                      ;; calc-kbd-end-for  (End the &quot;for&quot; loop)
sr                      ;; calc-recall       (Recall the final accumulated value)
1                       ;; calc quick variable (Quick variable q1)
Z'                      ;; calc-kbd-pop      (Restore values)
</pre></div>

<p>Press <kbd>C-c C-c</kbd> to finish editing and return to the Calculator.
</p>
<div class="smallexample">
<pre class="smallexample">1:  20         1:  3.597739
    .              .

    20             z h
</pre></div>

<p>The <samp>edmacro</samp> package defines a handy <code>read-kbd-macro</code> command
which reads the current region of the current buffer as a sequence of
keystroke names, and defines that sequence on the <kbd>X</kbd>
(and <kbd>C-x e</kbd>) key.  Because this is so useful, Calc puts this
command on the <kbd>C-x * m</kbd> key.  Try reading in this macro in the
following form:  Press <kbd>C-@</kbd> (or <kbd>C-<span class="key">SPC</span></kbd>) at
one end of the text below, then type <kbd>C-x * m</kbd> at the other.
</p>
<div class="example">
<pre class="example">Z ` 0 t 1
    1 TAB
    Z (  &amp; s + 1  1 Z )
    r 1
Z '
</pre></div>

<p>(&bull;) <strong>Exercise 8.</strong>  A general algorithm for solving
equations numerically is <em>Newton&rsquo;s Method</em>.  Given the equation
&lsquo;<samp>f(x) = 0</samp>&rsquo; for any function &lsquo;<samp>f</samp>&rsquo;, and an initial guess
&lsquo;<samp>x_0</samp>&rsquo; which is reasonably close to the desired solution, apply
this formula over and over:
</p>
<div class="example">
<pre class="example">new_x = x - f(x)/f'(x)
</pre></div>

<p>where &lsquo;<samp>f'(x)</samp>&rsquo; is the derivative of &lsquo;<samp>f</samp>&rsquo;.  The &lsquo;<samp>x</samp>&rsquo;
values will quickly converge to a solution, i.e., eventually
&lsquo;<samp>new_x</samp>&rsquo;
and &lsquo;<samp>x</samp>&rsquo; will be equal to within the limits
of the current precision.  Write a program which takes a formula
involving the variable &lsquo;<samp>x</samp>&rsquo;, and an initial guess &lsquo;<samp>x_0</samp>&rsquo;,
on the stack, and produces a value of &lsquo;<samp>x</samp>&rsquo; for which the formula
is zero.  Use it to find a solution of
&lsquo;<samp>sin(cos(x)) = 0.5</samp>&rsquo;
near &lsquo;<samp>x = 4.5</samp>&rsquo;.  (Use angles measured in radians.)  Note that
the built-in <kbd>a&nbsp;R</kbd><!-- /@w --> (<code>calc-find-root</code>) command uses Newton&rsquo;s
method when it is able.  See <a href="#Programming-Answer-8">8</a>. (&bull;)
</p>
<a name="index-Digamma-function"></a>
<a name="index-Gamma-constant_002c-Euler_0027s"></a>
<a name="index-Euler_0027s-gamma-constant"></a>
<p>(&bull;) <strong>Exercise 9.</strong>  The <em>digamma</em> function
&lsquo;<samp>psi(z)</samp>&rsquo;
is defined as the derivative of
&lsquo;<samp>ln(gamma(z))</samp>&rsquo;.
For large values of &lsquo;<samp>z</samp>&rsquo;, it can be approximated by the infinite sum
</p>
<div class="example">
<pre class="example">psi(z) ~= ln(z) - 1/2z - sum(bern(2 n) / 2 n z^(2 n), n, 1, inf)
</pre></div>

<p>where
&lsquo;<samp>sum</samp>&rsquo;
represents the sum over &lsquo;<samp>n</samp>&rsquo; from 1 to infinity
(or to some limit high enough to give the desired accuracy), and
the <code>bern</code> function produces (exact) Bernoulli numbers.
While this sum is not guaranteed to converge, in practice it is safe.
An interesting mathematical constant is Euler&rsquo;s gamma, which is equal
to about 0.5772.  One way to compute it is by the formula,
&lsquo;<samp>gamma = -psi(1)</samp>&rsquo;.
Unfortunately, 1 isn&rsquo;t a large enough argument
for the above formula to work (5 is a much safer value for &lsquo;<samp>z</samp>&rsquo;).
Fortunately, we can compute
&lsquo;<samp>psi(1)</samp>&rsquo;
from
&lsquo;<samp>psi(5)</samp>&rsquo;
using the recurrence
&lsquo;<samp>psi(z+1) = psi(z) + 1/z</samp>&rsquo;.
Your task:  Develop a program to compute
&lsquo;<samp>psi(z)</samp>&rsquo;;
it should &ldquo;pump up&rdquo; &lsquo;<samp>z</samp>&rsquo;
if necessary to be greater than 5, then use the above summation
formula.  Use looping commands to compute the sum.  Use your function
to compute
&lsquo;<samp>gamma</samp>&rsquo;
to twelve decimal places.  (Calc has a built-in command
for Euler&rsquo;s constant, <kbd>I P</kbd>, which you can use to check your answer.)
See <a href="#Programming-Answer-9">9</a>. (&bull;)
</p>
<a name="index-Polynomial_002c-list-of-coefficients"></a>
<p>(&bull;) <strong>Exercise 10.</strong>  Given a polynomial in &lsquo;<samp>x</samp>&rsquo; and
a number &lsquo;<samp>m</samp>&rsquo; on the stack, where the polynomial is of degree
&lsquo;<samp>m</samp>&rsquo; or less (i.e., does not have any terms higher than &lsquo;<samp>x^m</samp>&rsquo;),
write a program to convert the polynomial into a list-of-coefficients
notation.  For example, &lsquo;<samp>5 x^4 + (x + 1)^2</samp>&rsquo; with &lsquo;<samp>m = 6</samp>&rsquo;
should produce the list &lsquo;<samp>[1, 2, 1, 0, 5, 0, 0]</samp>&rsquo;.  Also develop
a way to convert from this form back to the standard algebraic form.
See <a href="#Programming-Answer-10">10</a>. (&bull;)
</p>
<a name="index-Recursion"></a>
<p>(&bull;) <strong>Exercise 11.</strong>  The <em>Stirling numbers of the
first kind</em> are defined by the recurrences,
</p>
<div class="example">
<pre class="example">s(n,n) = 1   for n &gt;= 0,
s(n,0) = 0   for n &gt; 0,
s(n+1,m) = s(n,m-1) - n s(n,m)   for n &gt;= m &gt;= 1.
</pre></div>

<p>This can be implemented using a <em>recursive</em> program in Calc; the
program must invoke itself in order to calculate the two righthand
terms in the general formula.  Since it always invokes itself with
&ldquo;simpler&rdquo; arguments, it&rsquo;s easy to see that it must eventually finish
the computation.  Recursion is a little difficult with Emacs keyboard
macros since the macro is executed before its definition is complete.
So here&rsquo;s the recommended strategy:  Create a &ldquo;dummy macro&rdquo; and assign
it to a key with, e.g., <kbd>Z K s</kbd>.  Now enter the true definition,
using the <kbd>z s</kbd> command to call itself recursively, then assign it
to the same key with <kbd>Z K s</kbd>.  Now the <kbd>z s</kbd> command will run
the complete recursive program.  (Another way is to use <kbd>Z&nbsp;E</kbd><!-- /@w -->
or <kbd>C-x * m</kbd> (<code>read-kbd-macro</code>) to read the whole macro at once,
thus avoiding the &ldquo;training&rdquo; phase.)  The task:  Write a program
that computes Stirling numbers of the first kind, given &lsquo;<samp>n</samp>&rsquo; and
&lsquo;<samp>m</samp>&rsquo; on the stack.  Test it with <em>small</em> inputs like
&lsquo;<samp>s(4,2)</samp>&rsquo;.  (There is a built-in command for Stirling numbers,
<kbd>k s</kbd>, which you can use to check your answers.)
See <a href="#Programming-Answer-11">11</a>. (&bull;)
</p>
<p>The programming commands we&rsquo;ve seen in this part of the tutorial
are low-level, general-purpose operations.  Often you will find
that a higher-level function, such as vector mapping or rewrite
rules, will do the job much more easily than a detailed, step-by-step
program can:
</p>
<p>(&bull;) <strong>Exercise 12.</strong>  Write another program for
computing Stirling numbers of the first kind, this time using
rewrite rules.  Once again, &lsquo;<samp>n</samp>&rsquo; and &lsquo;<samp>m</samp>&rsquo; should be taken
from the stack.  See <a href="#Programming-Answer-12">12</a>. (&bull;)
</p>
<div class="example">
<pre class="example">

</pre></div>
<p>This ends the tutorial section of the Calc manual.  Now you know enough
about Calc to use it effectively for many kinds of calculations.  But
Calc has many features that were not even touched upon in this tutorial.
The rest of this manual tells the whole story.
</p>
<hr>
<a name="Answers-to-Exercises"></a>
<div class="header">
<p>
Previous: <a href="#Programming-Tutorial" accesskey="p" rel="prev">Programming Tutorial</a>, Up: <a href="#Tutorial" accesskey="u" rel="up">Tutorial</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Answers-to-Exercises-1"></a>
<h3 class="section">2.7 Answers to Exercises</h3>

<p>This section includes answers to all the exercises in the Calc tutorial.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#RPN-Answer-1" accesskey="1">RPN Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">1 <tt class="key">RET</tt> 2 <tt class="key">RET</tt> 3 <tt class="key">RET</tt> 4 + * -
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#RPN-Answer-2" accesskey="2">RPN Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">2*4 + 7*9.5 + 5/4
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#RPN-Answer-3" accesskey="3">RPN Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating on levels 2 and 3
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#RPN-Answer-4" accesskey="4">RPN Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Joe&rsquo;s complex problems
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Answer-1" accesskey="5">Algebraic Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Simulating Q command
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Answer-2" accesskey="6">Algebraic Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Joe&rsquo;s algebraic woes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Answer-3" accesskey="7">Algebraic Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">1 / 0
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Answer-1" accesskey="8">Modes Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">3#0.1 = 3#0.0222222?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Answer-2" accesskey="9">Modes Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">16#f.e8fe15
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Answer-3">Modes Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Joe&rsquo;s rounding bug
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Answer-4">Modes Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why floating point?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Arithmetic-Answer-1">Arithmetic Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why the \ command?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Arithmetic-Answer-2">Arithmetic Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Tripping up the B command
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector-Answer-1">Vector Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Normalizing a vector
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector-Answer-2">Vector Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Average position
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Answer-1">Matrix Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Row and column sums
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Answer-2">Matrix Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Symbolic system of equations
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Answer-3">Matrix Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Over-determined system
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-1">List Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Powers of two
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-2">List Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Least-squares fit with matrices
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-3">List Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Geometric mean
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-4">List Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Divisor function
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-5">List Answer 5</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Duplicate factors
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-6">List Answer 6</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Triangular list
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-7">List Answer 7</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Another triangular list
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-8">List Answer 8</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Maximum of Bessel function
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-9">List Answer 9</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integers the hard way
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-10">List Answer 10</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">All elements equal
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-11">List Answer 11</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Estimating pi with darts
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-12">List Answer 12</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Estimating pi with matchsticks
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-13">List Answer 13</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Hash codes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-Answer-14">List Answer 14</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Random walk
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-1">Types Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Square root of pi times rational
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-2">Types Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Infinities
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-3">Types Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What can &quot;nan&quot; be?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-4">Types Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Abbey Road
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-5">Types Answer 5</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Friday the 13th
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-6">Types Answer 6</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Leap years
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-7">Types Answer 7</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Erroneous donut
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-8">Types Answer 8</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Dividing intervals
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-9">Types Answer 9</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Squaring intervals
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-10">Types Answer 10</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fermat&rsquo;s primality test
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-11">Types Answer 11</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">pi * 10^7 seconds
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-12">Types Answer 12</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Abbey Road on CD
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-13">Types Answer 13</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Not quite pi * 10^7 seconds
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-14">Types Answer 14</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Supercomputers and c
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Types-Answer-15">Types Answer 15</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Sam the Slug
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra-Answer-1">Algebra Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Squares and square roots
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra-Answer-2">Algebra Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building polynomial from roots
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra-Answer-3">Algebra Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integral of x sin(pi x)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebra-Answer-4">Algebra Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Simpson&rsquo;s rule
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-1">Rewrites Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Multiplying by conjugate
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-2">Rewrites Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Alternative fib rule
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-3">Rewrites Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Rewriting opt(a) + opt(b) x
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-4">Rewrites Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Sequence of integers
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-5">Rewrites Answer 5</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Number of terms in sum
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrites-Answer-6">Rewrites Answer 6</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Truncated Taylor series
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-1">Programming Answer 1</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fresnel&rsquo;s C(x)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-2">Programming Answer 2</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Negate third stack element
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-3">Programming Answer 3</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compute sin(x) / x, etc.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-4">Programming Answer 4</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Average value of a list
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-5">Programming Answer 5</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Continued fraction phi
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-6">Programming Answer 6</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Matrix Fibonacci numbers
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-7">Programming Answer 7</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Harmonic number greater than 4
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-8">Programming Answer 8</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Newton&rsquo;s method
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-9">Programming Answer 9</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Digamma function
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-10">Programming Answer 10</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Unpacking a polynomial
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-11">Programming Answer 11</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Recursive Stirling numbers
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programming-Answer-12">Programming Answer 12</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Stirling numbers with rewrites
</td></tr>
</table>


<hr>
<a name="RPN-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#RPN-Answer-2" accesskey="n" rel="next">RPN Answer 2</a>, Previous: <a href="#Answers-to-Exercises" accesskey="p" rel="prev">Answers to Exercises</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="RPN-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.1 RPN Tutorial Exercise 1</h4>

<p><kbd>1 <span class="key">RET</span> 2 <span class="key">RET</span> 3 <span class="key">RET</span> 4 + * -</kbd>
</p>
<p>The result is
&lsquo;<samp>1 - (2 * (3 + 4)) = -13</samp>&rsquo;.
</p>
<hr>
<a name="RPN-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#RPN-Answer-3" accesskey="n" rel="next">RPN Answer 3</a>, Previous: <a href="#RPN-Answer-1" accesskey="p" rel="prev">RPN Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="RPN-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.2 RPN Tutorial Exercise 2</h4>

<p>&lsquo;<samp>2*4 + 7*9.5 + 5/4 = 75.75</samp>&rsquo;
</p>
<p>After computing the intermediate term
&lsquo;<samp>2*4 = 8</samp>&rsquo;,
you can leave that result on the stack while you compute the second
term.  With both of these results waiting on the stack you can then
compute the final term, then press <kbd>+ +</kbd> to add everything up.
</p>
<div class="smallexample">
<pre class="smallexample">2:  2          1:  8          3:  8          2:  8
1:  4              .          2:  7          1:  66.5
    .                         1:  9.5            .
                                  .

  2 <span class="key">RET</span> 4          *          7 <span class="key">RET</span> 9.5          *

</pre></div>
<div class="smallexample">
<pre class="smallexample">4:  8          3:  8          2:  8          1:  75.75
3:  66.5       2:  66.5       1:  67.75          .
2:  5          1:  1.25           .
1:  4              .
    .

  5 <span class="key">RET</span> 4          /              +              +
</pre></div>

<p>Alternatively, you could add the first two terms before going on
with the third term.
</p>
<div class="smallexample">
<pre class="smallexample">2:  8          1:  74.5       3:  74.5       2:  74.5       1:  75.75
1:  66.5           .          2:  5          1:  1.25           .
    .                         1:  4              .
                                  .

   ...             +            5 <span class="key">RET</span> 4          /              +
</pre></div>

<p>On an old-style RPN calculator this second method would have the
advantage of using only three stack levels.  But since Calc&rsquo;s stack
can grow arbitrarily large this isn&rsquo;t really an issue.  Which method
you choose is purely a matter of taste.
</p>
<hr>
<a name="RPN-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#RPN-Answer-4" accesskey="n" rel="next">RPN Answer 4</a>, Previous: <a href="#RPN-Answer-2" accesskey="p" rel="prev">RPN Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="RPN-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.3 RPN Tutorial Exercise 3</h4>

<p>The <tt class="key">TAB</tt> key provides a way to operate on the number in level 2.
</p>
<div class="smallexample">
<pre class="smallexample">3:  10         3:  10         4:  10         3:  10         3:  10
2:  20         2:  30         3:  30         2:  30         2:  21
1:  30         1:  20         2:  20         1:  21         1:  30
    .              .          1:  1              .              .
                                  .

                  <span class="key">TAB</span>             1              +             <span class="key">TAB</span>
</pre></div>

<p>Similarly, <kbd>M-<span class="key">TAB</span></kbd> gives you access to the number in level 3.
</p>
<div class="smallexample">
<pre class="smallexample">3:  10         3:  21         3:  21         3:  30         3:  11
2:  21         2:  30         2:  30         2:  11         2:  21
1:  30         1:  10         1:  11         1:  21         1:  30
    .              .              .              .              .

                  M-<span class="key">TAB</span>           1 +           M-<span class="key">TAB</span>          M-<span class="key">TAB</span>
</pre></div>

<hr>
<a name="RPN-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Answer-1" accesskey="n" rel="next">Algebraic Answer 1</a>, Previous: <a href="#RPN-Answer-3" accesskey="p" rel="prev">RPN Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="RPN-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.4 RPN Tutorial Exercise 4</h4>

<p>Either <kbd>( 2 , 3 )</kbd> or <kbd>( 2 <span class="key">SPC</span> 3 )</kbd> would have worked,
but using both the comma and the space at once yields:
</p>
<div class="smallexample">
<pre class="smallexample">1:  ( ...      2:  ( ...      1:  (2, ...    2:  (2, ...    2:  (2, ...
    .          1:  2              .          1:  (2, ...    1:  (2, 3)
                   .                             .              .

    (              2              ,             <span class="key">SPC</span>            3 )
</pre></div>

<p>Joe probably tried to type <kbd><span class="key">TAB</span> <span class="key">DEL</span></kbd> to swap the
extra incomplete object to the top of the stack and delete it.
But a feature of Calc is that <tt class="key">DEL</tt> on an incomplete object
deletes just one component out of that object, so he had to press
<tt class="key">DEL</tt> twice to finish the job.
</p>
<div class="smallexample">
<pre class="smallexample">2:  (2, ...    2:  (2, 3)     2:  (2, 3)     1:  (2, 3)
1:  (2, 3)     1:  (2, ...    1:  ( ...          .
    .              .              .

                  <span class="key">TAB</span>            <span class="key">DEL</span>            <span class="key">DEL</span>
</pre></div>

<p>(As it turns out, deleting the second-to-top stack entry happens often
enough that Calc provides a special key, <kbd>M-<span class="key">DEL</span></kbd>, to do just that.
<kbd>M-<span class="key">DEL</span></kbd> is just like <kbd><span class="key">TAB</span> <span class="key">DEL</span></kbd>, except that it doesn&rsquo;t exhibit
the &ldquo;feature&rdquo; that tripped poor Joe.)
</p>
<hr>
<a name="Algebraic-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Answer-2" accesskey="n" rel="next">Algebraic Answer 2</a>, Previous: <a href="#RPN-Answer-4" accesskey="p" rel="prev">RPN Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Entry-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.5 Algebraic Entry Tutorial Exercise 1</h4>

<p>Type <kbd>' sqrt($) <span class="key">RET</span></kbd>.
</p>
<p>If the <kbd>Q</kbd> key is broken, you could use <kbd>' $^0.5 <span class="key">RET</span></kbd>.
Or, RPN style, <kbd>0.5 ^</kbd>.
</p>
<p>(Actually, &lsquo;<samp>$^1:2</samp>&rsquo;, using the fraction one-half as the power, is
a closer equivalent, since &lsquo;<samp>9^0.5</samp>&rsquo; yields &lsquo;<samp>3.0</samp>&rsquo; whereas
&lsquo;<samp>sqrt(9)</samp>&rsquo; and &lsquo;<samp>9^1:2</samp>&rsquo; yield the exact integer &lsquo;<samp>3</samp>&rsquo;.)
</p>
<hr>
<a name="Algebraic-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Answer-3" accesskey="n" rel="next">Algebraic Answer 3</a>, Previous: <a href="#Algebraic-Answer-1" accesskey="p" rel="prev">Algebraic Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Entry-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.6 Algebraic Entry Tutorial Exercise 2</h4>

<p>In the formula &lsquo;<samp>2 x (1+y)</samp>&rsquo;, &lsquo;<samp>x</samp>&rsquo; was interpreted as a function
name with &lsquo;<samp>1+y</samp>&rsquo; as its argument.  Assigning a value to a variable
has no relation to a function by the same name.  Joe needed to use an
explicit &lsquo;<samp>*</samp>&rsquo; symbol here:  &lsquo;<samp>2 x*(1+y)</samp>&rsquo;.
</p>
<hr>
<a name="Algebraic-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Modes-Answer-1" accesskey="n" rel="next">Modes Answer 1</a>, Previous: <a href="#Algebraic-Answer-2" accesskey="p" rel="prev">Algebraic Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Entry-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.7 Algebraic Entry Tutorial Exercise 3</h4>

<p>The result from <kbd>1 <span class="key">RET</span> 0 /</kbd> will be the formula &lsquo;<samp>1 / 0</samp>&rsquo;.
The &ldquo;function&rdquo; &lsquo;<samp>/</samp>&rsquo; cannot be evaluated when its second argument
is zero, so it is left in symbolic form.  When you now type <kbd>0 *</kbd>,
the result will be zero because Calc uses the general rule that &ldquo;zero
times anything is zero.&rdquo;
</p>
<p>The <kbd>m i</kbd> command enables an <em>Infinite mode</em> in which &lsquo;<samp>1 / 0</samp>&rsquo;
results in a special symbol that represents &ldquo;infinity.&rdquo;  If you
multiply infinity by zero, Calc uses another special new symbol to
show that the answer is &ldquo;indeterminate.&rdquo;  See <a href="#Infinities">Infinities</a>, for
further discussion of infinite and indeterminate values.
</p>
<hr>
<a name="Modes-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Modes-Answer-2" accesskey="n" rel="next">Modes Answer 2</a>, Previous: <a href="#Algebraic-Answer-3" accesskey="p" rel="prev">Algebraic Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modes-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.8 Modes Tutorial Exercise 1</h4>

<p>Calc always stores its numbers in decimal, so even though one-third has
an exact base-3 representation (&lsquo;<samp>3#0.1</samp>&rsquo;), it is still stored as
0.3333333 (chopped off after 12 or however many decimal digits) inside
the calculator&rsquo;s memory.  When this inexact number is converted back
to base 3 for display, it may still be slightly inexact.  When we
multiply this number by 3, we get 0.999999, also an inexact value.
</p>
<p>When Calc displays a number in base 3, it has to decide how many digits
to show.  If the current precision is 12 (decimal) digits, that corresponds
to &lsquo;<samp>12 / log10(3) = 25.15</samp>&rsquo; base-3 digits.  Because 25.15 is not an
exact integer, Calc shows only 25 digits, with the result that stored
numbers carry a little bit of extra information that may not show up on
the screen.  When Joe entered &lsquo;<samp>3#0.2</samp>&rsquo;, the stored number 0.666666
happened to round to a pleasing value when it lost that last 0.15 of a
digit, but it was still inexact in Calc&rsquo;s memory.  When he divided by 2,
he still got the dreaded inexact value 0.333333.  (Actually, he divided
0.666667 by 2 to get 0.333334, which is why he got something a little
higher than <code>3#0.1</code> instead of a little lower.)
</p>
<p>If Joe didn&rsquo;t want to be bothered with all this, he could have typed
<kbd>M-24 d n</kbd> to display with one less digit than the default.  (If
you give <kbd>d n</kbd> a negative argument, it uses default-minus-that,
so <kbd>M-- d n</kbd> would be an easier way to get the same effect.)  Those
inexact results would still be lurking there, but they would now be
rounded to nice, natural-looking values for display purposes.  (Remember,
&lsquo;<samp>0.022222</samp>&rsquo; in base 3 is like &lsquo;<samp>0.099999</samp>&rsquo; in base 10; rounding
off one digit will round the number up to &lsquo;<samp>0.1</samp>&rsquo;.)  Depending on the
nature of your work, this hiding of the inexactness may be a benefit or
a danger.  With the <kbd>d n</kbd> command, Calc gives you the choice.
</p>
<p>Incidentally, another consequence of all this is that if you type
<kbd>M-30 d n</kbd> to display more digits than are &ldquo;really there,&rdquo;
you&rsquo;ll see garbage digits at the end of the number.  (In decimal
display mode, with decimally-stored numbers, these garbage digits are
always zero so they vanish and you don&rsquo;t notice them.)  Because Calc
rounds off that 0.15 digit, there is the danger that two numbers could
be slightly different internally but still look the same.  If you feel
uneasy about this, set the <kbd>d n</kbd> precision to be a little higher
than normal; you&rsquo;ll get ugly garbage digits, but you&rsquo;ll always be able
to tell two distinct numbers apart.
</p>
<p>An interesting side note is that most computers store their
floating-point numbers in binary, and convert to decimal for display.
Thus everyday programs have the same problem:  Decimal 0.1 cannot be
represented exactly in binary (try it: <kbd>0.1 d 2</kbd>), so &lsquo;<samp>0.1 * 10</samp>&rsquo;
comes out as an inexact approximation to 1 on some machines (though
they generally arrange to hide it from you by rounding off one digit as
we did above).  Because Calc works in decimal instead of binary, you can
be sure that numbers that look exact <em>are</em> exact as long as you stay
in decimal display mode.
</p>
<p>It&rsquo;s not hard to show that any number that can be represented exactly
in binary, octal, or hexadecimal is also exact in decimal, so the kinds
of problems we saw in this exercise are likely to be severe only when
you use a relatively unusual radix like 3.
</p>
<hr>
<a name="Modes-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Modes-Answer-3" accesskey="n" rel="next">Modes Answer 3</a>, Previous: <a href="#Modes-Answer-1" accesskey="p" rel="prev">Modes Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modes-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.9 Modes Tutorial Exercise 2</h4>

<p>If the radix is 15 or higher, we can&rsquo;t use the letter &lsquo;<samp>e</samp>&rsquo; to mark
the exponent because &lsquo;<samp>e</samp>&rsquo; is interpreted as a digit.  When Calc
needs to display scientific notation in a high radix, it writes
&lsquo;<samp>16#F.E8F*16.^15</samp>&rsquo;.  You can enter a number like this as an
algebraic entry.  Also, pressing <kbd>e</kbd> without any digits before it
normally types <kbd>1e</kbd>, but in a high radix it types <kbd>16.^</kbd> and
puts you in algebraic entry:  <kbd>16#f.e8f <span class="key">RET</span> e 15 <span class="key">RET</span> *</kbd> is another
way to enter this number.
</p>
<p>The reason Calc puts a decimal point in the &lsquo;<samp>16.^</samp>&rsquo; is to prevent
huge integers from being generated if the exponent is large (consider
&lsquo;<samp>16#1.23*16^1000</samp>&rsquo;, where we compute &lsquo;<samp>16^1000</samp>&rsquo; as a giant
exact integer and then throw away most of the digits when we multiply
it by the floating-point &lsquo;<samp>16#1.23</samp>&rsquo;).  While this wouldn&rsquo;t normally
matter for display purposes, it could give you a nasty surprise if you
copied that number into a file and later moved it back into Calc.
</p>
<hr>
<a name="Modes-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Modes-Answer-4" accesskey="n" rel="next">Modes Answer 4</a>, Previous: <a href="#Modes-Answer-2" accesskey="p" rel="prev">Modes Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modes-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.10 Modes Tutorial Exercise 3</h4>

<p>The answer he got was &lsquo;<samp>0.5000000000006399</samp>&rsquo;.
</p>
<p>The problem is not that the square operation is inexact, but that the
sine of 45 that was already on the stack was accurate to only 12 places.
Arbitrary-precision calculations still only give answers as good as
their inputs.
</p>
<p>The real problem is that there is no 12-digit number which, when
squared, comes out to 0.5 exactly.  The <kbd>f [</kbd> and <kbd>f ]</kbd>
commands decrease or increase a number by one unit in the last
place (according to the current precision).  They are useful for
determining facts like this.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.707106781187      1:  0.500000000001
    .                       .

    45 S                    2 ^

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  0.707106781187      1:  0.707106781186      1:  0.499999999999
    .                       .                       .

    U  <span class="key">DEL</span>                  f [                     2 ^
</pre></div>

<p>A high-precision calculation must be carried out in high precision
all the way.  The only number in the original problem which was known
exactly was the quantity 45 degrees, so the precision must be raised
before anything is done after the number 45 has been entered in order
for the higher precision to be meaningful.
</p>
<hr>
<a name="Modes-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Arithmetic-Answer-1" accesskey="n" rel="next">Arithmetic Answer 1</a>, Previous: <a href="#Modes-Answer-3" accesskey="p" rel="prev">Modes Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modes-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.11 Modes Tutorial Exercise 4</h4>

<p>Many calculations involve real-world quantities, like the width and
height of a piece of wood or the volume of a jar.  Such quantities
can&rsquo;t be measured exactly anyway, and if the data that is input to
a calculation is inexact, doing exact arithmetic on it is a waste
of time.
</p>
<p>Fractions become unwieldy after too many calculations have been
done with them.  For example, the sum of the reciprocals of the
integers from 1 to 10 is 7381:2520.  The sum from 1 to 30 is
9304682830147:2329089562800.  After a point it will take a long
time to add even one more term to this sum, but a floating-point
calculation of the sum will not have this problem.
</p>
<p>Also, rational numbers cannot express the results of all calculations.
There is no fractional form for the square root of two, so if you type
<kbd>2&nbsp;Q</kbd><!-- /@w -->, Calc has no choice but to give you a floating-point answer.
</p>
<hr>
<a name="Arithmetic-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Arithmetic-Answer-2" accesskey="n" rel="next">Arithmetic Answer 2</a>, Previous: <a href="#Modes-Answer-4" accesskey="p" rel="prev">Modes Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Arithmetic-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.12 Arithmetic Tutorial Exercise 1</h4>

<p>Dividing two integers that are larger than the current precision may
give a floating-point result that is inaccurate even when rounded
down to an integer.  Consider &lsquo;<samp>123456789 / 2</samp>&rsquo; when the current
precision is 6 digits.  The true answer is &lsquo;<samp>61728394.5</samp>&rsquo;, but
with a precision of 6 this will be rounded to
&lsquo;<samp>12345700. / 2. = 61728500.</samp>&rsquo;.
The result, when converted to an integer, will be off by 106.
</p>
<p>Here are two solutions:  Raise the precision enough that the
floating-point round-off error is strictly to the right of the
decimal point.  Or, convert to Fraction mode so that &lsquo;<samp>123456789 / 2</samp>&rsquo;
produces the exact fraction &lsquo;<samp>123456789:2</samp>&rsquo;, which can be rounded
down by the <kbd>F</kbd> command without ever switching to floating-point
format.
</p>
<hr>
<a name="Arithmetic-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Vector-Answer-1" accesskey="n" rel="next">Vector Answer 1</a>, Previous: <a href="#Arithmetic-Answer-1" accesskey="p" rel="prev">Arithmetic Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Arithmetic-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.13 Arithmetic Tutorial Exercise 2</h4>

<p><kbd>27 <span class="key">RET</span> 9 B</kbd> could give the exact result &lsquo;<samp>3:2</samp>&rsquo;, but it
does a floating-point calculation instead and produces &lsquo;<samp>1.5</samp>&rsquo;.
</p>
<p>Calc will find an exact result for a logarithm if the result is an integer
or (when in Fraction mode) the reciprocal of an integer.  But there is
no efficient way to search the space of all possible rational numbers
for an exact answer, so Calc doesn&rsquo;t try.
</p>
<hr>
<a name="Vector-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Vector-Answer-2" accesskey="n" rel="next">Vector Answer 2</a>, Previous: <a href="#Arithmetic-Answer-2" accesskey="p" rel="prev">Arithmetic Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.14 Vector Tutorial Exercise 1</h4>

<p>Duplicate the vector, compute its length, then divide the vector
by its length:  <kbd><span class="key">RET</span> A /</kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3]  2:  [1, 2, 3]      1:  [0.27, 0.53, 0.80]  1:  1.
    .          1:  3.74165738677      .                       .
                   .

    r 1            <span class="key">RET</span> A              /                       A
</pre></div>

<p>The final <kbd>A</kbd> command shows that the normalized vector does
indeed have unit length.
</p>
<hr>
<a name="Vector-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Answer-1" accesskey="n" rel="next">Matrix Answer 1</a>, Previous: <a href="#Vector-Answer-1" accesskey="p" rel="prev">Vector Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.15 Vector Tutorial Exercise 2</h4>

<p>The average position is equal to the sum of the products of the
positions times their corresponding probabilities.  This is the
definition of the dot product operation.  So all you need to do
is to put the two vectors on the stack and press <kbd>*</kbd>.
</p>
<hr>
<a name="Matrix-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Answer-2" accesskey="n" rel="next">Matrix Answer 2</a>, Previous: <a href="#Vector-Answer-2" accesskey="p" rel="prev">Vector Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matrix-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.16 Matrix Tutorial Exercise 1</h4>

<p>The trick is to multiply by a vector of ones.  Use <kbd>r 4 [1 1 1] *</kbd> to
get the row sum.  Similarly, use <kbd>[1 1] r 4 *</kbd> to get the column sum.
</p>
<hr>
<a name="Matrix-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Answer-3" accesskey="n" rel="next">Matrix Answer 3</a>, Previous: <a href="#Matrix-Answer-1" accesskey="p" rel="prev">Matrix Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matrix-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.17 Matrix Tutorial Exercise 2</h4>

<div class="example">
<pre class="example">   x + a y = 6
   x + b y = 10
</pre></div>

<p>Just enter the righthand side vector, then divide by the lefthand side
matrix as usual.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [6, 10]    2:  [6, 10]         1:  [4 a / (a - b) + 6, 4 / (b - a) ]
    .          1:  [ [ 1, a ]          .
                     [ 1, b ] ]
                   .

' [6 10] <span class="key">RET</span>     ' [1 a; 1 b] <span class="key">RET</span>      /
</pre></div>

<p>This can be made more readable using <kbd>d B</kbd> to enable Big display
mode:
</p>
<div class="smallexample">
<pre class="smallexample">      4 a         4
1:  [----- + 6, -----]
     a - b      b - a
</pre></div>

<p>Type <kbd>d N</kbd> to return to Normal display mode afterwards.
</p>
<hr>
<a name="Matrix-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-1" accesskey="n" rel="next">List Answer 1</a>, Previous: <a href="#Matrix-Answer-2" accesskey="p" rel="prev">Matrix Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matrix-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.18 Matrix Tutorial Exercise 3</h4>

<p>To solve
&lsquo;<samp>trn(A) * A * X = trn(A) * B</samp>&rsquo;,
first we compute
&lsquo;<samp>A2 = trn(A) * A</samp>&rsquo;
and
&lsquo;<samp>B2 = trn(A) * B</samp>&rsquo;;
now, we have a system
&lsquo;<samp>A2 * X = B2</samp>&rsquo;
which we can solve using Calc&rsquo;s &lsquo;<samp>/</samp>&rsquo; command.
</p>
<div class="example">
<pre class="example">    a + 2b + 3c = 6
   4a + 5b + 6c = 2
   7a + 6b      = 3
   2a + 4b + 6c = 11
</pre></div>

<p>The first step is to enter the coefficient matrix.  We&rsquo;ll store it in
quick variable number 7 for later reference.  Next, we compute the
&lsquo;<samp>B2</samp>&rsquo;
vector.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [ 1, 2, 3 ]             2:  [ [ 1, 4, 7, 2 ]     1:  [57, 84, 96]
      [ 4, 5, 6 ]                   [ 2, 5, 6, 4 ]         .
      [ 7, 6, 0 ]                   [ 3, 6, 0, 6 ] ]
      [ 2, 4, 6 ] ]           1:  [6, 2, 3, 11]
    .                             .

' [1 2 3; 4 5 6; 7 6 0; 2 4 6] <span class="key">RET</span>  s 7  v t  [6 2 3 11]   *
</pre></div>

<p>Now we compute the matrix
&lsquo;<samp>A2</samp>&rsquo;
and divide.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [57, 84, 96]          1:  [-11.64, 14.08, -3.64]
1:  [ [ 70, 72, 39 ]          .
      [ 72, 81, 60 ]
      [ 39, 60, 81 ] ]
    .

    r 7 v t r 7 *             /
</pre></div>

<p>(The actual computed answer will be slightly inexact due to
round-off error.)
</p>
<p>Notice that the answers are similar to those for the
3x3
system solved in the text.  That&rsquo;s because the fourth equation that was
added to the system is almost identical to the first one multiplied
by two.  (If it were identical, we would have gotten the exact same
answer since the
4x3
system would be equivalent to the original
3x3
system.)
</p>
<p>Since the first and fourth equations aren&rsquo;t quite equivalent, they
can&rsquo;t both be satisfied at once.  Let&rsquo;s plug our answers back into
the original system of equations to see how well they match.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [-11.64, 14.08, -3.64]     1:  [5.6, 2., 3., 11.2]
1:  [ [ 1, 2, 3 ]                  .
      [ 4, 5, 6 ]
      [ 7, 6, 0 ]
      [ 2, 4, 6 ] ]
    .

    r 7                            <span class="key">TAB</span> *
</pre></div>

<p>This is reasonably close to our original &lsquo;<samp>B</samp>&rsquo; vector,
&lsquo;<samp>[6, 2, 3, 11]</samp>&rsquo;.
</p>
<hr>
<a name="List-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-2" accesskey="n" rel="next">List Answer 2</a>, Previous: <a href="#Matrix-Answer-3" accesskey="p" rel="prev">Matrix Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.19 List Tutorial Exercise 1</h4>

<p>We can use <kbd>v x</kbd> to build a vector of integers.  This needs to be
adjusted to get the range of integers we desire.  Mapping &lsquo;<samp>-</samp>&rsquo;
across the vector will accomplish this, although it turns out the
plain &lsquo;<samp>-</samp>&rsquo; key will work just as well.
</p>
<div class="smallexample">
<pre class="smallexample">2:  2                              2:  2
1:  [1, 2, 3, 4, 5, 6, 7, 8, 9]    1:  [-4, -3, -2, -1, 0, 1, 2, 3, 4]
    .                                  .

    2  v x 9 <span class="key">RET</span>                       5 V M -   or   5 -
</pre></div>

<p>Now we use <kbd>V M ^</kbd> to map the exponentiation operator across the
vector.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16]
    .

    V M ^
</pre></div>

<hr>
<a name="List-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-3" accesskey="n" rel="next">List Answer 3</a>, Previous: <a href="#List-Answer-1" accesskey="p" rel="prev">List Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.20 List Tutorial Exercise 2</h4>

<p>Given &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; vectors in quick variables 1 and 2 as before,
the first job is to form the matrix that describes the problem.
</p>
<div class="example">
<pre class="example">   m*x + b*1 = y
</pre></div>

<p>Thus we want a
19x2
matrix with our &lsquo;<samp>x</samp>&rsquo; vector as one column and
ones as the other column.  So, first we build the column of ones, then
we combine the two columns to form our &lsquo;<samp>A</samp>&rsquo; matrix.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1.34, 1.41, 1.49, ... ]    1:  [ [ 1.34, 1 ]
1:  [1, 1, 1, ...]                    [ 1.41, 1 ]
    .                                 [ 1.49, 1 ]
                                      &hellip;

    r 1 1 v b 19 <span class="key">RET</span>                M-2 v p v t   s 3
</pre></div>

<p>Now we compute
&lsquo;<samp>trn(A) * y</samp>&rsquo;
and
&lsquo;<samp>trn(A) * A</samp>&rsquo;
and divide.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [33.36554, 13.613]    2:  [33.36554, 13.613]
    .                     1:  [ [ 98.0003, 41.63 ]
                                [  41.63,   19   ] ]
                              .

 v t r 2 *                    r 3 v t r 3 *
</pre></div>

<p>(Hey, those numbers look familiar!)
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.52141679, -0.425978]
    .

    /
</pre></div>

<p>Since we were solving equations of the form
&lsquo;<samp>m*x + b*1 = y</samp>&rsquo;,
these numbers should be &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;, respectively.  Sure
enough, they agree exactly with the result computed using <kbd>V M</kbd> and
<kbd>V R</kbd>!
</p>
<p>The moral of this story:  <kbd>V M</kbd> and <kbd>V R</kbd> will probably solve
your problem, but there is often an easier way using the higher-level
arithmetic functions!
</p>
<p>In fact, there is a built-in <kbd>a F</kbd> command that does least-squares
fits.  See <a href="#Curve-Fitting">Curve Fitting</a>.
</p>
<hr>
<a name="List-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-4" accesskey="n" rel="next">List Answer 4</a>, Previous: <a href="#List-Answer-2" accesskey="p" rel="prev">List Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.21 List Tutorial Exercise 3</h4>

<p>Move to one end of the list and press <kbd>C-@</kbd> (or <kbd>C-<span class="key">SPC</span></kbd> or
whatever) to set the mark, then move to the other end of the list
and type <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;g</kbd><!-- /@w -->.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [2.3, 6, 22, 15.1, 7, 15, 14, 7.5, 2.5]
    .
</pre></div>

<p>To make things interesting, let&rsquo;s assume we don&rsquo;t know at a glance
how many numbers are in this list.  Then we could type:
</p>
<div class="smallexample">
<pre class="smallexample">2:  [2.3, 6, 22, ... ]     2:  [2.3, 6, 22, ... ]
1:  [2.3, 6, 22, ... ]     1:  126356422.5
    .                          .

    <span class="key">RET</span>                        V R *

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  126356422.5            2:  126356422.5     1:  7.94652913734
1:  [2.3, 6, 22, ... ]     1:  9                   .
    .                          .

    <span class="key">TAB</span>                        v l                 I ^
</pre></div>

<p>(The <kbd>I ^</kbd> command computes the <var>n</var>th root of a number.
You could also type <kbd>&amp; ^</kbd> to take the reciprocal of 9 and
then raise the number to that power.)
</p>
<hr>
<a name="List-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-5" accesskey="n" rel="next">List Answer 5</a>, Previous: <a href="#List-Answer-3" accesskey="p" rel="prev">List Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.22 List Tutorial Exercise 4</h4>

<p>A number &lsquo;<samp>j</samp>&rsquo; is a divisor of &lsquo;<samp>n</samp>&rsquo; if
&lsquo;<samp>n % j = 0</samp>&rsquo;.
The first step is to get a vector that identifies the divisors.
</p>
<div class="smallexample">
<pre class="smallexample">2:  30                  2:  [0, 0, 0, 2, ...]    1:  [1, 1, 1, 0, ...]
1:  [1, 2, 3, 4, ...]   1:  0                        .
    .                       .

 30 <span class="key">RET</span> v x 30 <span class="key">RET</span>   s 1    V M %  0                 V M a =  s 2
</pre></div>

<p>This vector has 1&rsquo;s marking divisors of 30 and 0&rsquo;s marking non-divisors.
</p>
<p>The zeroth divisor function is just the total number of divisors.
The first divisor function is the sum of the divisors.
</p>
<div class="smallexample">
<pre class="smallexample">1:  8      3:  8                    2:  8                    2:  8
           2:  [1, 2, 3, 4, ...]    1:  [1, 2, 3, 0, ...]    1:  72
           1:  [1, 1, 1, 0, ...]        .                        .
               .

   V R +       r 1 r 2                  V M *                  V R +
</pre></div>

<p>Once again, the last two steps just compute a dot product for which
a simple <kbd>*</kbd> would have worked equally well.
</p>
<hr>
<a name="List-Answer-5"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-6" accesskey="n" rel="next">List Answer 6</a>, Previous: <a href="#List-Answer-4" accesskey="p" rel="prev">List Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-5"></a>
<h4 class="subsection">2.7.23 List Tutorial Exercise 5</h4>

<p>The obvious first step is to obtain the list of factors with <kbd>k f</kbd>.
This list will always be in sorted order, so if there are duplicates
they will be right next to each other.  A suitable method is to compare
the list with a copy of itself shifted over by one.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [3, 7, 7, 7, 19]   2:  [3, 7, 7, 7, 19]     2:  [3, 7, 7, 7, 19, 0]
    .                  1:  [3, 7, 7, 7, 19, 0]  1:  [0, 3, 7, 7, 7, 19]
                           .                        .

    19551 k f              <span class="key">RET</span> 0 |                  <span class="key">TAB</span> 0 <span class="key">TAB</span> |

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [0, 0, 1, 1, 0, 0]   1:  2          1:  0
    .                        .              .

    V M a =                  V R +          0 a =
</pre></div>

<p>Note that we have to arrange for both vectors to have the same length
so that the mapping operation works; no prime factor will ever be
zero, so adding zeros on the left and right is safe.  From then on
the job is pretty straightforward.
</p>
<p>Incidentally, Calc provides the <em>Möbius μ</em>
function which is zero if and only if its argument is square-free.  It
would be a much more convenient way to do the above test in practice.
</p>
<hr>
<a name="List-Answer-6"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-7" accesskey="n" rel="next">List Answer 7</a>, Previous: <a href="#List-Answer-5" accesskey="p" rel="prev">List Answer 5</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-6"></a>
<h4 class="subsection">2.7.24 List Tutorial Exercise 6</h4>

<p>First use <kbd>v x 6 <span class="key">RET</span></kbd> to get a list of integers, then <kbd>V M v x</kbd>
to get a list of lists of integers!
</p>
<hr>
<a name="List-Answer-7"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-8" accesskey="n" rel="next">List Answer 8</a>, Previous: <a href="#List-Answer-6" accesskey="p" rel="prev">List Answer 6</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-7"></a>
<h4 class="subsection">2.7.25 List Tutorial Exercise 7</h4>

<p>Here&rsquo;s one solution.  First, compute the triangular list from the previous
exercise and type <kbd>1 -</kbd> to subtract one from all the elements.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [0],
      [0, 1],
      [0, 1, 2],
      &hellip;

    1 -
</pre></div>

<p>The numbers down the lefthand edge of the list we desire are called
the &ldquo;triangular numbers&rdquo; (now you know why!).  The &lsquo;<samp>n</samp>&rsquo;th
triangular number is the sum of the integers from 1 to &lsquo;<samp>n</samp>&rsquo;, and
can be computed directly by the formula
&lsquo;<samp>n * (n+1) / 2</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ [0], [0, 1], ... ]    2:  [ [0], [0, 1], ... ]
1:  [0, 1, 2, 3, 4, 5]      1:  [0, 1, 3, 6, 10, 15]
    .                           .

    v x 6 <span class="key">RET</span> 1 -               V M ' $ ($+1)/2 <span class="key">RET</span>
</pre></div>

<p>Adding this list to the above list of lists produces the desired
result:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [ [0],
      [1, 2],
      [3, 4, 5],
      [6, 7, 8, 9],
      [10, 11, 12, 13, 14],
      [15, 16, 17, 18, 19, 20] ]
      .

      V M +
</pre></div>

<p>If we did not know the formula for triangular numbers, we could have
computed them using a <kbd>V U +</kbd> command.  We could also have
gotten them the hard way by mapping a reduction across the original
triangular list.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ [0], [0, 1], ... ]    2:  [ [0], [0, 1], ... ]
1:  [ [0], [0, 1], ... ]    1:  [0, 1, 3, 6, 10, 15]
    .                           .

    <span class="key">RET</span>                         V M V R +
</pre></div>

<p>(This means &ldquo;map a <kbd>V R +</kbd> command across the vector,&rdquo; and
since each element of the main vector is itself a small vector,
<kbd>V R +</kbd> computes the sum of its elements.)
</p>
<hr>
<a name="List-Answer-8"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-9" accesskey="n" rel="next">List Answer 9</a>, Previous: <a href="#List-Answer-7" accesskey="p" rel="prev">List Answer 7</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-8"></a>
<h4 class="subsection">2.7.26 List Tutorial Exercise 8</h4>

<p>The first step is to build a list of values of &lsquo;<samp>x</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [1, 2, 3, ..., 21]  1:  [0, 1, 2, ..., 20]  1:  [0, 0.25, 0.5, ..., 5]
    .                       .                       .

    v x 21 <span class="key">RET</span>              1 -                     4 /  s 1
</pre></div>

<p>Next, we compute the Bessel function values.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0., 0.124, 0.242, ..., -0.328]
    .

    V M ' besJ(1,$) <span class="key">RET</span>
</pre></div>

<p>(Another way to do this would be <kbd>1 <span class="key">TAB</span> V M f j</kbd>.)
</p>
<p>A way to isolate the maximum value is to compute the maximum using
<kbd>V R X</kbd>, then compare all the Bessel values with that maximum.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0., 0.124, 0.242, ... ]   1:  [0, 0, 0, ... ]    2:  [0, 0, 0, ... ]
1:  0.5801562                      .                  1:  1
    .                                                     .

    <span class="key">RET</span> V R X                      V M a =                <span class="key">RET</span> V R +    <span class="key">DEL</span>
</pre></div>

<p>It&rsquo;s a good idea to verify, as in the last step above, that only
one value is equal to the maximum.  (After all, a plot of
&lsquo;<samp>sin(x)</samp>&rsquo;
might have many points all equal to the maximum value, 1.)
</p>
<p>The vector we have now has a single 1 in the position that indicates
the maximum value of &lsquo;<samp>x</samp>&rsquo;.  Now it is a simple matter to convert
this back into the corresponding value itself.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0, 0, 0, ... ]         1:  [0, 0., 0., ... ]    1:  1.75
1:  [0, 0.25, 0.5, ... ]        .                        .
    .

    r 1                         V M *                    V R +
</pre></div>

<p>If <kbd>a =</kbd> had produced more than one &lsquo;<samp>1</samp>&rsquo; value, this method
would have given the sum of all maximum &lsquo;<samp>x</samp>&rsquo; values; not very
useful!  In this case we could have used <kbd>v m</kbd> (<code>calc-mask-vector</code>)
instead.  This command deletes all elements of a &ldquo;data&rdquo; vector that
correspond to zeros in a &ldquo;mask&rdquo; vector, leaving us with, in this
example, a vector of maximum &lsquo;<samp>x</samp>&rsquo; values.
</p>
<p>The built-in <kbd>a X</kbd> command maximizes a function using more
efficient methods.  Just for illustration, let&rsquo;s use <kbd>a X</kbd>
to maximize &lsquo;<samp>besJ(1,x)</samp>&rsquo; over this same interval.
</p>
<div class="smallexample">
<pre class="smallexample">2:  besJ(1, x)                 1:  [1.84115, 0.581865]
1:  [0 .. 5]                       .
    .

' besJ(1,x), [0..5] <span class="key">RET</span>            a X x <span class="key">RET</span>
</pre></div>

<p>The output from <kbd>a X</kbd> is a vector containing the value of &lsquo;<samp>x</samp>&rsquo;
that maximizes the function, and the function&rsquo;s value at that maximum.
As you can see, our simple search got quite close to the right answer.
</p>
<hr>
<a name="List-Answer-9"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-10" accesskey="n" rel="next">List Answer 10</a>, Previous: <a href="#List-Answer-8" accesskey="p" rel="prev">List Answer 8</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-9"></a>
<h4 class="subsection">2.7.27 List Tutorial Exercise 9</h4>

<p>Step one is to convert our integer into vector notation.
</p>
<div class="smallexample">
<pre class="smallexample">1:  25129925999           3:  25129925999
    .                     2:  10
                          1:  [11, 10, 9, ..., 1, 0]
                              .

    25129925999 <span class="key">RET</span>           10 <span class="key">RET</span> 12 <span class="key">RET</span> v x 12 <span class="key">RET</span> -

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  25129925999              1:  [0, 2, 25, 251, 2512, ... ]
2:  [100000000000, ... ]         .
    .

    V M ^   s 1                  V M \
</pre></div>

<p>(Recall, the <kbd>\</kbd> command computes an integer quotient.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0, 2, 5, 1, 2, 9, 9, 2, 5, 9, 9, 9]
    .

    10 V M %   s 2
</pre></div>

<p>Next we must increment this number.  This involves adding one to
the last digit, plus handling carries.  There is a carry to the
left out of a digit if that digit is a nine and all the digits to
the right of it are nines.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1]   1:  [1, 1, 1, 0, 0, 1, ... ]
    .                                          .

    9 V M a =                                  v v

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [1, 1, 1, 0, 0, 0, ... ]   1:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
    .                              .

    V U *                          v v 1 |
</pre></div>

<p>Accumulating <kbd>*</kbd> across a vector of ones and zeros will preserve
only the initial run of ones.  These are the carries into all digits
except the rightmost digit.  Concatenating a one on the right takes
care of aligning the carries properly, and also adding one to the
rightmost digit.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0, 0, 0, 0, ... ]     1:  [0, 0, 2, 5, 1, 2, 9, 9, 2, 6, 0, 0, 0]
1:  [0, 0, 2, 5, ... ]         .
    .

    0 r 2 |                    V M +  10 V M %
</pre></div>

<p>Here we have concatenated 0 to the <em>left</em> of the original number;
this takes care of shifting the carries by one with respect to the
digits that generated them.
</p>
<p>Finally, we must convert this list back into an integer.
</p>
<div class="smallexample">
<pre class="smallexample">3:  [0, 0, 2, 5, ... ]        2:  [0, 0, 2, 5, ... ]
2:  1000000000000             1:  [1000000000000, 100000000000, ... ]
1:  [100000000000, ... ]          .
    .

    10 <span class="key">RET</span> 12 ^  r 1              |

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [0, 0, 20000000000, 5000000000, ... ]    1:  25129926000
    .                                            .

    V M *                                        V R +
</pre></div>

<p>Another way to do this final step would be to reduce the formula
&lsquo;<samp>10&nbsp;$$&nbsp;+&nbsp;$</samp>&rsquo;<!-- /@w --> across the vector of digits.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0, 0, 2, 5, ... ]        1:  25129926000
    .                             .

                                  V R ' 10 $$ + $ <span class="key">RET</span>
</pre></div>

<hr>
<a name="List-Answer-10"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-11" accesskey="n" rel="next">List Answer 11</a>, Previous: <a href="#List-Answer-9" accesskey="p" rel="prev">List Answer 9</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-10"></a>
<h4 class="subsection">2.7.28 List Tutorial Exercise 10</h4>

<p>For the list &lsquo;<samp>[a, b, c, d]</samp>&rsquo;, the result is &lsquo;<samp>((a = b) = c) = d</samp>&rsquo;,
which will compare &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; to produce a 1 or 0, which is
then compared with &lsquo;<samp>c</samp>&rsquo; to produce another 1 or 0, which is then
compared with &lsquo;<samp>d</samp>&rsquo;.  This is not at all what Joe wanted.
</p>
<p>Here&rsquo;s a more correct method:
</p>
<div class="smallexample">
<pre class="smallexample">1:  [7, 7, 7, 8, 7]      2:  [7, 7, 7, 8, 7]
    .                    1:  7
                             .

  ' [7,7,7,8,7] <span class="key">RET</span>          <span class="key">RET</span> v r 1 <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [1, 1, 1, 0, 1]      1:  0
    .                        .

    V M a =                  V R *
</pre></div>

<hr>
<a name="List-Answer-11"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-12" accesskey="n" rel="next">List Answer 12</a>, Previous: <a href="#List-Answer-10" accesskey="p" rel="prev">List Answer 10</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-11"></a>
<h4 class="subsection">2.7.29 List Tutorial Exercise 11</h4>

<p>The circle of unit radius consists of those points &lsquo;<samp>(x,y)</samp>&rsquo; for which
&lsquo;<samp>x^2 + y^2 &lt; 1</samp>&rsquo;.  We start by generating a vector of &lsquo;<samp>x^2</samp>&rsquo;
and a vector of &lsquo;<samp>y^2</samp>&rsquo;.
</p>
<p>We can make this go a bit faster by using the <kbd>v .</kbd> and <kbd>t .</kbd>
commands.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [2., 2., ..., 2.]          2:  [2., 2., ..., 2.]
1:  [2., 2., ..., 2.]          1:  [1.16, 1.98, ..., 0.81]
    .                              .

 v . t .  2. v b 100 <span class="key">RET</span> <span class="key">RET</span>       V M k r

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  [2., 2., ..., 2.]          1:  [0.026, 0.96, ..., 0.036]
1:  [0.026, 0.96, ..., 0.036]  2:  [0.53, 0.81, ..., 0.094]
    .                              .

    1 -  2 V M ^                   <span class="key">TAB</span>  V M k r  1 -  2 V M ^
</pre></div>

<p>Now we sum the &lsquo;<samp>x^2</samp>&rsquo; and &lsquo;<samp>y^2</samp>&rsquo; values, compare with 1 to
get a vector of 1/0 truth values, then sum the truth values.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.56, 1.78, ..., 0.13]    1:  [1, 0, ..., 1]    1:  84
    .                              .                     .

    +                              1 V M a &lt;             V R +
</pre></div>

<p>The ratio &lsquo;<samp>84/100</samp>&rsquo; should approximate the ratio &lsquo;<samp>pi/4</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.84       1:  3.36       2:  3.36       1:  1.0695
    .              .          1:  3.14159        .

    100 /          4 *            P              /
</pre></div>

<p>Our estimate, 3.36, is off by about 7%.  We could get a better estimate
by taking more points (say, 1000), but it&rsquo;s clear that this method is
not very efficient!
</p>
<p>(Naturally, since this example uses random numbers your own answer
will be slightly different from the one shown here!)
</p>
<p>If you typed <kbd>v .</kbd> and <kbd>t .</kbd> before, type them again to
return to full-sized display of vectors.
</p>
<hr>
<a name="List-Answer-12"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-13" accesskey="n" rel="next">List Answer 13</a>, Previous: <a href="#List-Answer-11" accesskey="p" rel="prev">List Answer 11</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-12"></a>
<h4 class="subsection">2.7.30 List Tutorial Exercise 12</h4>

<p>This problem can be made a lot easier by taking advantage of some
symmetries.  First of all, after some thought it&rsquo;s clear that the
&lsquo;<samp>y</samp>&rsquo; axis can be ignored altogether.  Just pick a random &lsquo;<samp>x</samp>&rsquo;
component for one end of the match, pick a random direction
&lsquo;<samp>theta</samp>&rsquo;,
and see if &lsquo;<samp>x</samp>&rsquo; and
&lsquo;<samp>x + cos(theta)</samp>&rsquo;
(which is the &lsquo;<samp>x</samp>&rsquo; coordinate of the other endpoint) cross a line.
The lines are at integer coordinates, so this happens when the two
numbers surround an integer.
</p>
<p>Since the two endpoints are equivalent, we may as well choose the leftmost
of the two endpoints as &lsquo;<samp>x</samp>&rsquo;.  Then &lsquo;<samp>theta</samp>&rsquo; is an angle pointing
to the right, in the range -90 to 90 degrees.  (We could use radians, but
it would feel like cheating to refer to &lsquo;<samp>pi/2</samp>&rsquo; radians while trying
to estimate &lsquo;<samp>pi</samp>&rsquo;!)
</p>
<p>In fact, since the field of lines is infinite we can choose the
coordinates 0 and 1 for the lines on either side of the leftmost
endpoint.  The rightmost endpoint will be between 0 and 1 if the
match does not cross a line, or between 1 and 2 if it does.  So:
Pick random &lsquo;<samp>x</samp>&rsquo; and
&lsquo;<samp>theta</samp>&rsquo;,
compute
&lsquo;<samp>x + cos(theta)</samp>&rsquo;,
and count how many of the results are greater than one.  Simple!
</p>
<p>We can make this go a bit faster by using the <kbd>v .</kbd> and <kbd>t .</kbd>
commands.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [0.52, 0.71, ..., 0.72]    2:  [0.52, 0.71, ..., 0.72]
    .                          1:  [78.4, 64.5, ..., -42.9]
                                   .

v . t . 1. v b 100 <span class="key">RET</span>  V M k r    180. v b 100 <span class="key">RET</span>  V M k r  90 -
</pre></div>

<p>(The next step may be slow, depending on the speed of your computer.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0.52, 0.71, ..., 0.72]    1:  [0.72, 1.14, ..., 1.45]
1:  [0.20, 0.43, ..., 0.73]        .
    .

    m d  V M C                     +

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [0, 1, ..., 1]       1:  0.64            1:  3.125
    .                        .                   .

    1 V M a &gt;                V R + 100 /         2 <span class="key">TAB</span> /
</pre></div>

<p>Let&rsquo;s try the third method, too.  We&rsquo;ll use random integers up to
one million.  The <kbd>k r</kbd> command with an integer argument picks
a random integer.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1000000, 1000000, ..., 1000000]   2:  [78489, 527587, ..., 814975]
1:  [1000000, 1000000, ..., 1000000]   1:  [324014, 358783, ..., 955450]
    .                                      .

    1000000 v b 100 <span class="key">RET</span> <span class="key">RET</span>                V M k r  <span class="key">TAB</span>  V M k r

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [1, 1, ..., 25]      1:  [1, 1, ..., 0]     1:  0.56
    .                        .                      .

    V M k g                  1 V M a =              V R + 100 /

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  10.714        1:  3.273
    .                 .

    6 <span class="key">TAB</span> /           Q
</pre></div>

<p>For a proof of this property of the GCD function, see section 4.5.2,
exercise 10, of Knuth&rsquo;s <em>Art of Computer Programming</em>, volume II.
</p>
<p>If you typed <kbd>v .</kbd> and <kbd>t .</kbd> before, type them again to
return to full-sized display of vectors.
</p>
<hr>
<a name="List-Answer-13"></a>
<div class="header">
<p>
Next: <a href="#List-Answer-14" accesskey="n" rel="next">List Answer 14</a>, Previous: <a href="#List-Answer-12" accesskey="p" rel="prev">List Answer 12</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-13"></a>
<h4 class="subsection">2.7.31 List Tutorial Exercise 13</h4>

<p>First, we put the string on the stack as a vector of ASCII codes.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [84, 101, 115, ..., 51]
    .

    &quot;Testing, 1, 2, 3 <span class="key">RET</span>
</pre></div>

<p>Note that the <kbd>&quot;</kbd> key, like <kbd>$</kbd>, initiates algebraic entry so
there was no need to type an apostrophe.  Also, Calc didn&rsquo;t mind that
we omitted the closing <kbd>&quot;</kbd>.  (The same goes for all closing delimiters
like <kbd>)</kbd> and <kbd>]</kbd> at the end of a formula.
</p>
<p>We&rsquo;ll show two different approaches here.  In the first, we note that
if the input vector is &lsquo;<samp>[a, b, c, d]</samp>&rsquo;, then the hash code is
&lsquo;<samp>3 (3 (3a + b) + c) + d = 27a + 9b + 3c + d</samp>&rsquo;.  In other words,
it&rsquo;s a sum of descending powers of three times the ASCII codes.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [84, 101, 115, ..., 51]    2:  [84, 101, 115, ..., 51]
1:  16                         1:  [15, 14, 13, ..., 0]
    .                              .

    <span class="key">RET</span> v l                        v x 16 <span class="key">RET</span> -

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  [84, 101, 115, ..., 51]    1:  1960915098    1:  121
1:  [14348907, ..., 1]             .                 .
    .

    3 <span class="key">TAB</span> V M ^                    *                 511 %
</pre></div>

<p>Once again, <kbd>*</kbd> elegantly summarizes most of the computation.
But there&rsquo;s an even more elegant approach:  Reduce the formula
<kbd>3 $$ + $</kbd> across the vector.  Recall that this represents a
function of two arguments that computes its first argument times three
plus its second argument.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [84, 101, 115, ..., 51]    1:  1960915098
    .                              .

    &quot;Testing, 1, 2, 3 <span class="key">RET</span>          V R ' 3$$+$ <span class="key">RET</span>
</pre></div>

<p>If you did the decimal arithmetic exercise, this will be familiar.
Basically, we&rsquo;re turning a base-3 vector of digits into an integer,
except that our &ldquo;digits&rdquo; are much larger than real digits.
</p>
<p>Instead of typing <kbd>511 %</kbd> again to reduce the result, we can be
cleverer still and notice that rather than computing a huge integer
and taking the modulo at the end, we can take the modulo at each step
without affecting the result.  While this means there are more
arithmetic operations, the numbers we operate on remain small so
the operations are faster.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [84, 101, 115, ..., 51]    1:  121
    .                              .

    &quot;Testing, 1, 2, 3 <span class="key">RET</span>          V R ' (3$$+$)%511 <span class="key">RET</span>
</pre></div>

<p>Why does this work?  Think about a two-step computation:
&lsquo;<samp>3&nbsp;(3a&nbsp;+&nbsp;b)&nbsp;+&nbsp;c</samp>&rsquo;<!-- /@w -->.  Taking a result modulo 511 basically means
subtracting off enough 511&rsquo;s to put the result in the desired range.
So the result when we take the modulo after every step is,
</p>
<div class="example">
<pre class="example">3 (3 a + b - 511 m) + c - 511 n
</pre></div>

<p>for some suitable integers &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>n</samp>&rsquo;.  Expanding out by
the distributive law yields
</p>
<div class="example">
<pre class="example">9 a + 3 b + c - 511*3 m - 511 n
</pre></div>

<p>The &lsquo;<samp>m</samp>&rsquo; term in the latter formula is redundant because any
contribution it makes could just as easily be made by the &lsquo;<samp>n</samp>&rsquo;
term.  So we can take it out to get an equivalent formula with
&lsquo;<samp>n' = 3m + n</samp>&rsquo;,
</p>
<div class="example">
<pre class="example">9 a + 3 b + c - 511 n'
</pre></div>

<p>which is just the formula for taking the modulo only at the end of
the calculation.  Therefore the two methods are essentially the same.
</p>
<p>Later in the tutorial we will encounter <em>modulo forms</em>, which
basically automate the idea of reducing every intermediate result
modulo some value <var>m</var>.
</p>
<hr>
<a name="List-Answer-14"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-1" accesskey="n" rel="next">Types Answer 1</a>, Previous: <a href="#List-Answer-13" accesskey="p" rel="prev">List Answer 13</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-Tutorial-Exercise-14"></a>
<h4 class="subsection">2.7.32 List Tutorial Exercise 14</h4>

<p>We want to use <kbd>H V U</kbd> to nest a function which adds a random
step to an &lsquo;<samp>(x,y)</samp>&rsquo; coordinate.  The function is a bit long, but
otherwise the problem is quite straightforward.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0, 0]     1:  [ [    0,       0    ]
1:  50               [  0.4288, -0.1695 ]
    .                [ -0.4787, -0.9027 ]
                     ...

    [0,0] 50       H V U ' &lt;# + [random(2.0)-1, random(2.0)-1]&gt; <span class="key">RET</span>
</pre></div>

<p>Just as the text recommended, we used &lsquo;<samp>&lt; &gt;</samp>&rsquo; nameless function
notation to keep the two <code>random</code> calls from being evaluated
before nesting even begins.
</p>
<p>We now have a vector of &lsquo;<samp>[x, y]</samp>&rsquo; sub-vectors, which by Calc&rsquo;s
rules acts like a matrix.  We can transpose this matrix and unpack
to get a pair of vectors, &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;, suitable for graphing.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [ 0, 0.4288, -0.4787, ... ]
1:  [ 0, -0.1696, -0.9027, ... ]
    .

    v t  v u  g f
</pre></div>

<p>Incidentally, because the &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; are completely
independent in this case, we could have done two separate commands
to create our &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; vectors of numbers directly.
</p>
<p>To make a random walk of unit steps, we note that <code>sincos</code> of
a random direction exactly gives us an &lsquo;<samp>[x, y]</samp>&rsquo; step of unit
length; in fact, the new nesting function is even briefer, though
we might want to lower the precision a bit for it.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [0, 0]     1:  [ [    0,      0    ]
1:  50               [  0.1318, 0.9912 ]
    .                [ -0.5965, 0.3061 ]
                     ...

    [0,0] 50   m d  p 6 <span class="key">RET</span>   H V U ' &lt;# + sincos(random(360.0))&gt; <span class="key">RET</span>
</pre></div>

<p>Another <kbd>v t v u g f</kbd> sequence will graph this new random walk.
</p>
<p>An interesting twist on these random walk functions would be to use
complex numbers instead of 2-vectors to represent points on the plane.
In the first example, we&rsquo;d use something like &lsquo;<samp>random + random*(0,1)</samp>&rsquo;,
and in the second we could use polar complex numbers with random phase
angles.  (This exercise was first suggested in this form by Randal
Schwartz.)
</p>
<hr>
<a name="Types-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-2" accesskey="n" rel="next">Types Answer 2</a>, Previous: <a href="#List-Answer-14" accesskey="p" rel="prev">List Answer 14</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.33 Types Tutorial Exercise 1</h4>

<p>If the number is the square root of &lsquo;<samp>pi</samp>&rsquo; times a rational number,
then its square, divided by &lsquo;<samp>pi</samp>&rsquo;, should be a rational number.
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.26508260337    1:  0.509433962268   1:  2486645810:4881193627
    .                    .                    .

                         2 ^ P /              c F
</pre></div>

<p>Technically speaking this is a rational number, but not one that is
likely to have arisen in the original problem.  More likely, it just
happens to be the fraction which most closely represents some
irrational number to within 12 digits.
</p>
<p>But perhaps our result was not quite exact.  Let&rsquo;s reduce the
precision slightly and try again:
</p>
<div class="smallexample">
<pre class="smallexample">1:  0.509433962268     1:  27:53
    .                      .

    U p 10 <span class="key">RET</span>             c F
</pre></div>

<p>Aha!  It&rsquo;s unlikely that an irrational number would equal a fraction
this simple to within ten digits, so our original number was probably
&lsquo;<samp>sqrt(27 pi / 53)</samp>&rsquo;.
</p>
<p>Notice that we didn&rsquo;t need to re-round the number when we reduced the
precision.  Remember, arithmetic operations always round their inputs
to the current precision before they begin.
</p>
<hr>
<a name="Types-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-3" accesskey="n" rel="next">Types Answer 3</a>, Previous: <a href="#Types-Answer-1" accesskey="p" rel="prev">Types Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.34 Types Tutorial Exercise 2</h4>

<p>&lsquo;<samp>inf / inf = nan</samp>&rsquo;.  Perhaps &lsquo;<samp>1</samp>&rsquo; is the &ldquo;obvious&rdquo; answer.
But if &lsquo;<samp>17&nbsp;inf&nbsp;=&nbsp;inf</samp>&rsquo;<!-- /@w -->, then &lsquo;<samp>17 inf / inf = inf / inf = 17</samp>&rsquo;, too.
</p>
<p>&lsquo;<samp>exp(inf) = inf</samp>&rsquo;.  It&rsquo;s tempting to say that the exponential
of infinity must be &ldquo;bigger&rdquo; than &ldquo;regular&rdquo; infinity, but as
far as Calc is concerned all infinities are the same size.
In other words, as &lsquo;<samp>x</samp>&rsquo; goes to infinity, &lsquo;<samp>e^x</samp>&rsquo; also goes
to infinity, but the fact the &lsquo;<samp>e^x</samp>&rsquo; grows much faster than
&lsquo;<samp>x</samp>&rsquo; is not relevant here.
</p>
<p>&lsquo;<samp>exp(-inf) = 0</samp>&rsquo;.  Here we have a finite answer even though
the input is infinite.
</p>
<p>&lsquo;<samp>sqrt(-inf) = (0, 1) inf</samp>&rsquo;.  Remember that &lsquo;<samp>(0, 1)</samp>&rsquo;
represents the imaginary number &lsquo;<samp>i</samp>&rsquo;.  Here&rsquo;s a derivation:
&lsquo;<samp>sqrt(-inf) = <span class="nolinebreak">sqrt((-1)</span>&nbsp;*&nbsp;inf)<!-- /@w --> = sqrt(-1) * sqrt(inf)</samp>&rsquo;.
The first part is, by definition, &lsquo;<samp>i</samp>&rsquo;; the second is <code>inf</code>
because, once again, all infinities are the same size.
</p>
<p>&lsquo;<samp>sqrt(uinf) = uinf</samp>&rsquo;.  In fact, we do know something about the
direction because <code>sqrt</code> is defined to return a value in the
right half of the complex plane.  But Calc has no notation for this,
so it settles for the conservative answer <code>uinf</code>.
</p>
<p>&lsquo;<samp>abs(uinf) = inf</samp>&rsquo;.  No matter which direction &lsquo;<samp>x</samp>&rsquo; points,
&lsquo;<samp>abs(x)</samp>&rsquo; always points along the positive real axis.
</p>
<p>&lsquo;<samp>ln(0) = -inf</samp>&rsquo;.  Here we have an infinite answer to a finite
input.  As in the &lsquo;<samp>1 / 0</samp>&rsquo; case, Calc will only use infinities
here if you have turned on Infinite mode.  Otherwise, it will
treat &lsquo;<samp>ln(0)</samp>&rsquo; as an error.
</p>
<hr>
<a name="Types-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-4" accesskey="n" rel="next">Types Answer 4</a>, Previous: <a href="#Types-Answer-2" accesskey="p" rel="prev">Types Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.35 Types Tutorial Exercise 3</h4>

<p>We can make &lsquo;<samp>inf - inf</samp>&rsquo; be any real number we like, say,
&lsquo;<samp>a</samp>&rsquo;, just by claiming that we added &lsquo;<samp>a</samp>&rsquo; to the first
infinity but not to the second.  This is just as true for complex
values of &lsquo;<samp>a</samp>&rsquo;, so <code>nan</code> can stand for a complex number.
(And, similarly, <code>uinf</code> can stand for an infinity that points
in any direction in the complex plane, such as &lsquo;<samp>(0, 1) inf</samp>&rsquo;).
</p>
<p>In fact, we can multiply the first <code>inf</code> by two.  Surely
&lsquo;<samp>2&nbsp;inf&nbsp;<span class="nolinebreak">-</span>&nbsp;inf&nbsp;=&nbsp;inf</samp>&rsquo;<!-- /@w -->, but also &lsquo;<samp>2 inf - inf = inf - inf = nan</samp>&rsquo;.
So <code>nan</code> can even stand for infinity.  Obviously it&rsquo;s just
as easy to make it stand for minus infinity as for plus infinity.
</p>
<p>The moral of this story is that &ldquo;infinity&rdquo; is a slippery fish
indeed, and Calc tries to handle it by having a very simple model
for infinities (only the direction counts, not the &ldquo;size&rdquo;); but
Calc is careful to write <code>nan</code> any time this simple model is
unable to tell what the true answer is.
</p>
<hr>
<a name="Types-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-5" accesskey="n" rel="next">Types Answer 5</a>, Previous: <a href="#Types-Answer-3" accesskey="p" rel="prev">Types Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.36 Types Tutorial Exercise 4</h4>

<div class="smallexample">
<pre class="smallexample">2:  0@ 47' 26&quot;              1:  0@ 2' 47.411765&quot;
1:  17                          .
    .

    0@ 47' 26&quot; <span class="key">RET</span> 17           /
</pre></div>

<p>The average song length is two minutes and 47.4 seconds.
</p>
<div class="smallexample">
<pre class="smallexample">2:  0@ 2' 47.411765&quot;     1:  0@ 3' 7.411765&quot;    1:  0@ 53' 6.000005&quot;
1:  0@ 0' 20&quot;                .                      .
    .

    20&quot;                      +                      17 *
</pre></div>

<p>The album would be 53 minutes and 6 seconds long.
</p>
<hr>
<a name="Types-Answer-5"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-6" accesskey="n" rel="next">Types Answer 6</a>, Previous: <a href="#Types-Answer-4" accesskey="p" rel="prev">Types Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-5"></a>
<h4 class="subsection">2.7.37 Types Tutorial Exercise 5</h4>

<p>Let&rsquo;s suppose it&rsquo;s January 14, 1991.  The easiest thing to do is
to keep trying 13ths of months until Calc reports a Friday.
We can do this by manually entering dates, or by using <kbd>t I</kbd>:
</p>
<div class="smallexample">
<pre class="smallexample">1:  &lt;Wed Feb 13, 1991&gt;    1:  &lt;Wed Mar 13, 1991&gt;   1:  &lt;Sat Apr 13, 1991&gt;
    .                         .                        .

    ' &lt;2/13&gt; <span class="key">RET</span>       <span class="key">DEL</span>    ' &lt;3/13&gt; <span class="key">RET</span>             t I
</pre></div>

<p>(Calc assumes the current year if you don&rsquo;t say otherwise.)
</p>
<p>This is getting tedious&mdash;we can keep advancing the date by typing
<kbd>t I</kbd> over and over again, but let&rsquo;s automate the job by using
vector mapping.  The <kbd>t I</kbd> command actually takes a second
&ldquo;how-many-months&rdquo; argument, which defaults to one.  This
argument is exactly what we want to map over:
</p>
<div class="smallexample">
<pre class="smallexample">2:  &lt;Sat Apr 13, 1991&gt;     1:  [&lt;Mon May 13, 1991&gt;, &lt;Thu Jun 13, 1991&gt;,
1:  [1, 2, 3, 4, 5, 6]          &lt;Sat Jul 13, 1991&gt;, &lt;Tue Aug 13, 1991&gt;,
    .                           &lt;Fri Sep 13, 1991&gt;, &lt;Sun Oct 13, 1991&gt;]
                               .

    v x 6 <span class="key">RET</span>                  V M t I
</pre></div>

<p>Et voilà, September 13, 1991 is a Friday.
</p>
<div class="smallexample">
<pre class="smallexample">1:  242
    .

' &lt;sep 13&gt; - &lt;jan 14&gt; <span class="key">RET</span>
</pre></div>

<p>And the answer to our original question:  242 days to go.
</p>
<hr>
<a name="Types-Answer-6"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-7" accesskey="n" rel="next">Types Answer 7</a>, Previous: <a href="#Types-Answer-5" accesskey="p" rel="prev">Types Answer 5</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-6"></a>
<h4 class="subsection">2.7.38 Types Tutorial Exercise 6</h4>

<p>The full rule for leap years is that they occur in every year divisible
by four, except that they don&rsquo;t occur in years divisible by 100, except
that they <em>do</em> in years divisible by 400.  We could work out the
answer by carefully counting the years divisible by four and the
exceptions, but there is a much simpler way that works even if we
don&rsquo;t know the leap year rule.
</p>
<p>Let&rsquo;s assume the present year is 1991.  Years have 365 days, except
that leap years (whenever they occur) have 366 days.  So let&rsquo;s count
the number of days between now and then, and compare that to the
number of years times 365.  The number of extra days we find must be
equal to the number of leap years there were.
</p>
<div class="smallexample">
<pre class="smallexample">1:  &lt;Mon Jan 1, 10001&gt;     2:  &lt;Mon Jan 1, 10001&gt;     1:  2925593
    .                      1:  &lt;Tue Jan 1, 1991&gt;          .
                               .

  ' &lt;jan 1 10001&gt; <span class="key">RET</span>         ' &lt;jan 1 1991&gt; <span class="key">RET</span>          -

</pre></div>
<div class="smallexample">
<pre class="smallexample">3:  2925593       2:  2925593     2:  2925593     1:  1943
2:  10001         1:  8010        1:  2923650         .
1:  1991              .               .
    .

  10001 <span class="key">RET</span> 1991      -               365 *           -
</pre></div>

<p>There will be 1943 leap years before the year 10001.  (Assuming,
of course, that the algorithm for computing leap years remains
unchanged for that long.  See <a href="#Date-Forms">Date Forms</a>, for some interesting
background information in that regard.)
</p>
<hr>
<a name="Types-Answer-7"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-8" accesskey="n" rel="next">Types Answer 8</a>, Previous: <a href="#Types-Answer-6" accesskey="p" rel="prev">Types Answer 6</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-7"></a>
<h4 class="subsection">2.7.39 Types Tutorial Exercise 7</h4>

<p>The relative errors must be converted to absolute errors so that
&lsquo;<samp>+/-</samp>&rsquo; notation may be used.
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.              2:  1.
    .               1:  0.2
                        .

    20 <span class="key">RET</span> .05 *        4 <span class="key">RET</span> .05 *
</pre></div>

<p>Now we simply chug through the formula.
</p>
<div class="smallexample">
<pre class="smallexample">1:  19.7392088022    1:  394.78 +/- 19.739    1:  6316.5 +/- 706.21
    .                    .                        .

    2 P 2 ^ *            20 p 1 *                 4 p .2 <span class="key">RET</span> 2 ^ *
</pre></div>

<p>It turns out the <kbd>v u</kbd> command will unpack an error form as
well as a vector.  This saves us some retyping of numbers.
</p>
<div class="smallexample">
<pre class="smallexample">3:  6316.5 +/- 706.21     2:  6316.5 +/- 706.21
2:  6316.5                1:  0.1118
1:  706.21                    .
    .

    <span class="key">RET</span> v u                   <span class="key">TAB</span> /
</pre></div>

<p>Thus the volume is 6316 cubic centimeters, within about 11 percent.
</p>
<hr>
<a name="Types-Answer-8"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-9" accesskey="n" rel="next">Types Answer 9</a>, Previous: <a href="#Types-Answer-7" accesskey="p" rel="prev">Types Answer 7</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-8"></a>
<h4 class="subsection">2.7.40 Types Tutorial Exercise 8</h4>

<p>The first answer is pretty simple:  &lsquo;<samp>1 / (0 .. 10) = (0.1 .. inf)</samp>&rsquo;.
Since a number in the interval &lsquo;<samp>(0 .. 10)</samp>&rsquo; can get arbitrarily
close to zero, its reciprocal can get arbitrarily large, so the answer
is an interval that effectively means, &ldquo;any number greater than 0.1&rdquo;
but with no upper bound.
</p>
<p>The second answer, similarly, is &lsquo;<samp>1 / (-10 .. 0) = (-inf .. -0.1)</samp>&rsquo;.
</p>
<p>Calc normally treats division by zero as an error, so that the formula
&lsquo;<samp>1&nbsp;/&nbsp;0</samp>&rsquo;<!-- /@w --> is left unsimplified.  Our third problem,
&lsquo;<samp>1&nbsp;/&nbsp;[0&nbsp;..&nbsp;10]</samp>&rsquo;<!-- /@w -->, also (potentially) divides by zero because zero
is now a member of the interval.  So Calc leaves this one unevaluated, too.
</p>
<p>If you turn on Infinite mode by pressing <kbd>m i</kbd>, you will
instead get the answer &lsquo;<samp>[0.1 .. inf]</samp>&rsquo;, which includes infinity
as a possible value.
</p>
<p>The fourth calculation, &lsquo;<samp>1 / (-10 .. 10)</samp>&rsquo;, has the same problem.
Zero is buried inside the interval, but it&rsquo;s still a possible value.
It&rsquo;s not hard to see that the actual result of &lsquo;<samp>1 / (-10 .. 10)</samp>&rsquo;
will be either greater than <i>0.1</i>, or less than <i>-0.1</i>.  Thus
the interval goes from minus infinity to plus infinity, with a &ldquo;hole&rdquo;
in it from <i>-0.1</i> to <i>0.1</i>.  Calc doesn&rsquo;t have any way to
represent this, so it just reports &lsquo;<samp>[-inf .. inf]</samp>&rsquo; as the answer.
It may be disappointing to hear &ldquo;the answer lies somewhere between
minus infinity and plus infinity, inclusive,&rdquo; but that&rsquo;s the best
that interval arithmetic can do in this case.
</p>
<hr>
<a name="Types-Answer-9"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-10" accesskey="n" rel="next">Types Answer 10</a>, Previous: <a href="#Types-Answer-8" accesskey="p" rel="prev">Types Answer 8</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-9"></a>
<h4 class="subsection">2.7.41 Types Tutorial Exercise 9</h4>

<div class="smallexample">
<pre class="smallexample">1:  [-3 .. 3]       2:  [-3 .. 3]     2:  [0 .. 9]
    .               1:  [0 .. 9]      1:  [-9 .. 9]
                        .                 .

    [ 3 n .. 3 ]        <span class="key">RET</span> 2 ^           <span class="key">TAB</span> <span class="key">RET</span> *
</pre></div>

<p>In the first case the result says, &ldquo;if a number is between <i>-3</i> and
3, its square is between 0 and 9.&rdquo;  The second case says, &ldquo;the product
of two numbers each between <i>-3</i> and 3 is between <i>-9</i> and 9.&rdquo;
</p>
<p>An interval form is not a number; it is a symbol that can stand for
many different numbers.  Two identical-looking interval forms can stand
for different numbers.
</p>
<p>The same issue arises when you try to square an error form.
</p>
<hr>
<a name="Types-Answer-10"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-11" accesskey="n" rel="next">Types Answer 11</a>, Previous: <a href="#Types-Answer-9" accesskey="p" rel="prev">Types Answer 9</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-10"></a>
<h4 class="subsection">2.7.42 Types Tutorial Exercise 10</h4>

<p>Testing the first number, we might arbitrarily choose 17 for &lsquo;<samp>x</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">1:  17 mod 811749613   2:  17 mod 811749613   1:  533694123 mod 811749613
    .                      811749612              .
                           .

    17 M 811749613 <span class="key">RET</span>     811749612              ^
</pre></div>

<p>Since 533694123 is (considerably) different from 1, the number 811749613
must not be prime.
</p>
<p>It&rsquo;s awkward to type the number in twice as we did above.  There are
various ways to avoid this, and algebraic entry is one.  In fact, using
a vector mapping operation we can perform several tests at once.  Let&rsquo;s
use this method to test the second number.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [17, 42, 100000]               1:  [1 mod 15485863, 1 mod ... ]
1:  15485863                           .
    .

 [17 42 100000] 15485863 <span class="key">RET</span>           V M ' ($$ mod $)^($-1) <span class="key">RET</span>
</pre></div>

<p>The result is three ones (modulo &lsquo;<samp>n</samp>&rsquo;), so it&rsquo;s very probable that
15485863 is prime.  (In fact, this number is the millionth prime.)
</p>
<p>Note that the functions &lsquo;<samp>($$^($-1)) mod $</samp>&rsquo; or &lsquo;<samp>$$^($-1) % $</samp>&rsquo;
would have been hopelessly inefficient, since they would have calculated
the power using full integer arithmetic.
</p>
<p>Calc has a <kbd>k p</kbd> command that does primality testing.  For small
numbers it does an exact test; for large numbers it uses a variant
of the Fermat test we used here.  You can use <kbd>k p</kbd> repeatedly
to prove that a large integer is prime with any desired probability.
</p>
<hr>
<a name="Types-Answer-11"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-12" accesskey="n" rel="next">Types Answer 12</a>, Previous: <a href="#Types-Answer-10" accesskey="p" rel="prev">Types Answer 10</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-11"></a>
<h4 class="subsection">2.7.43 Types Tutorial Exercise 11</h4>

<p>There are several ways to insert a calculated number into an HMS form.
One way to convert a number of seconds to an HMS form is simply to
multiply the number by an HMS form representing one second:
</p>
<div class="smallexample">
<pre class="smallexample">1:  31415926.5359     2:  31415926.5359     1:  8726@ 38' 46.5359&quot;
    .                 1:  0@ 0' 1&quot;              .
                          .

    P 1e7 *               0@ 0' 1&quot;              *

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  8726@ 38' 46.5359&quot;             1:  6@ 6' 2.5359&quot; mod 24@ 0' 0&quot;
1:  15@ 27' 16&quot; mod 24@ 0' 0&quot;          .
    .

    x time <span class="key">RET</span>                         +
</pre></div>

<p>It will be just after six in the morning.
</p>
<p>The algebraic <code>hms</code> function can also be used to build an
HMS form:
</p>
<div class="smallexample">
<pre class="smallexample">1:  hms(0, 0, 10000000. pi)       1:  8726@ 38' 46.5359&quot;
    .                                 .

  ' hms(0, 0, 1e7 pi) <span class="key">RET</span>             =
</pre></div>

<p>The <kbd>=</kbd> key is necessary to evaluate the symbol &lsquo;<samp>pi</samp>&rsquo; to
the actual number 3.14159...
</p>
<hr>
<a name="Types-Answer-12"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-13" accesskey="n" rel="next">Types Answer 13</a>, Previous: <a href="#Types-Answer-11" accesskey="p" rel="prev">Types Answer 11</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-12"></a>
<h4 class="subsection">2.7.44 Types Tutorial Exercise 12</h4>

<p>As we recall, there are 17 songs of about 2 minutes and 47 seconds
each.
</p>
<div class="smallexample">
<pre class="smallexample">2:  0@ 2' 47&quot;                    1:  [0@ 3' 7&quot; .. 0@ 3' 47&quot;]
1:  [0@ 0' 20&quot; .. 0@ 1' 0&quot;]          .
    .

    [ 0@ 20&quot; .. 0@ 1' ]              +

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [0@ 52' 59.&quot; .. 1@ 4' 19.&quot;]
    .

    17 *
</pre></div>

<p>No matter how long it is, the album will fit nicely on one CD.
</p>
<hr>
<a name="Types-Answer-13"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-14" accesskey="n" rel="next">Types Answer 14</a>, Previous: <a href="#Types-Answer-12" accesskey="p" rel="prev">Types Answer 12</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-13"></a>
<h4 class="subsection">2.7.45 Types Tutorial Exercise 13</h4>

<p>Type <kbd>' 1 yr <span class="key">RET</span> u c s <span class="key">RET</span></kbd>.  The answer is 31557600 seconds.
</p>
<hr>
<a name="Types-Answer-14"></a>
<div class="header">
<p>
Next: <a href="#Types-Answer-15" accesskey="n" rel="next">Types Answer 15</a>, Previous: <a href="#Types-Answer-13" accesskey="p" rel="prev">Types Answer 13</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-14"></a>
<h4 class="subsection">2.7.46 Types Tutorial Exercise 14</h4>

<p>How long will it take for a signal to get from one end of the computer
to the other?
</p>
<div class="smallexample">
<pre class="smallexample">1:  m / c         1:  3.3356 ns
    .                 .

 ' 1 m / c <span class="key">RET</span>        u c ns <span class="key">RET</span>
</pre></div>

<p>(Recall, &lsquo;<samp>c</samp>&rsquo; is a &ldquo;unit&rdquo; corresponding to the speed of light.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  3.3356 ns     1:  0.81356
2:  4.1 ns            .
    .

  ' 4.1 ns <span class="key">RET</span>        /
</pre></div>

<p>Thus a signal could take up to 81 percent of a clock cycle just to
go from one place to another inside the computer, assuming the signal
could actually attain the full speed of light.  Pretty tight!
</p>
<hr>
<a name="Types-Answer-15"></a>
<div class="header">
<p>
Next: <a href="#Algebra-Answer-1" accesskey="n" rel="next">Algebra Answer 1</a>, Previous: <a href="#Types-Answer-14" accesskey="p" rel="prev">Types Answer 14</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Types-Tutorial-Exercise-15"></a>
<h4 class="subsection">2.7.47 Types Tutorial Exercise 15</h4>

<p>The speed limit is 55 miles per hour on most highways.  We want to
find the ratio of Sam&rsquo;s speed to the US speed limit.
</p>
<div class="smallexample">
<pre class="smallexample">1:  55 mph         2:  55 mph           3:  11 hr mph / yd
    .              1:  5 yd / hr            .
                       .

  ' 55 mph <span class="key">RET</span>       ' 5 yd/hr <span class="key">RET</span>          /
</pre></div>

<p>The <kbd>u s</kbd> command cancels out these units to get a plain
number.  Now we take the logarithm base two to find the final
answer, assuming that each successive pill doubles his speed.
</p>
<div class="smallexample">
<pre class="smallexample">1:  19360.       2:  19360.       1:  14.24
    .            1:  2                .
                     .

    u s              2                B
</pre></div>

<p>Thus Sam can take up to 14 pills without a worry.
</p>
<hr>
<a name="Algebra-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Algebra-Answer-2" accesskey="n" rel="next">Algebra Answer 2</a>, Previous: <a href="#Types-Answer-15" accesskey="p" rel="prev">Types Answer 15</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.48 Algebra Tutorial Exercise 1</h4>

<p>The result &lsquo;<samp>sqrt(x)^2</samp>&rsquo; is simplified back to &lsquo;<samp>x</samp>&rsquo; by the
Calculator, but &lsquo;<samp>sqrt(x^2)</samp>&rsquo; is not.  (Consider what happens
if &lsquo;<samp>x&nbsp;=&nbsp;<span class="nolinebreak">-4</span></samp>&rsquo;<!-- /@w -->.)  If &lsquo;<samp>x</samp>&rsquo; is real, this formula could be
simplified to &lsquo;<samp>abs(x)</samp>&rsquo;, but for general complex arguments even
that is not safe.  (See <a href="#Declarations">Declarations</a>, for a way to tell Calc
that &lsquo;<samp>x</samp>&rsquo; is known to be real.)
</p>
<hr>
<a name="Algebra-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Algebra-Answer-3" accesskey="n" rel="next">Algebra Answer 3</a>, Previous: <a href="#Algebra-Answer-1" accesskey="p" rel="prev">Algebra Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.49 Algebra Tutorial Exercise 2</h4>

<p>Suppose our roots are &lsquo;<samp>[a, b, c]</samp>&rsquo;.  We want a polynomial which
is zero when &lsquo;<samp>x</samp>&rsquo; is any of these values.  The trivial polynomial
&lsquo;<samp>x-a</samp>&rsquo; is zero when &lsquo;<samp>x=a</samp>&rsquo;, so the product &lsquo;<samp>(x-a)(x-b)(x-c)</samp>&rsquo;
will do the job.  We can use <kbd>a c x</kbd> to write this in a more
familiar form.
</p>
<div class="smallexample">
<pre class="smallexample">1:  34 x - 24 x^3          1:  [1.19023, -1.19023, 0]
    .                          .

    r 2                        a P x <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [x - 1.19023, x + 1.19023, x]     1:  x*(x + 1.19023) (x - 1.19023)
    .                                     .

    V M ' x-$ <span class="key">RET</span>                         V R *

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  x^3 - 1.41666 x        1:  34 x - 24 x^3
    .                          .

    a c x <span class="key">RET</span>                  24 n *  a x
</pre></div>

<p>Sure enough, our answer (multiplied by a suitable constant) is the
same as the original polynomial.
</p>
<hr>
<a name="Algebra-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Algebra-Answer-4" accesskey="n" rel="next">Algebra Answer 4</a>, Previous: <a href="#Algebra-Answer-2" accesskey="p" rel="prev">Algebra Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.50 Algebra Tutorial Exercise 3</h4>

<div class="smallexample">
<pre class="smallexample">1:  x sin(pi x)         1:  sin(pi x) / pi^2 - x cos(pi x) / pi
    .                       .

  ' x sin(pi x) <span class="key">RET</span>   m r   a i x <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [y, 1]
2:  sin(pi x) / pi^2 - x cos(pi x) / pi
    .

  ' [y,1] <span class="key">RET</span> <span class="key">TAB</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [sin(pi y) / pi^2 - y cos(pi y) / pi, 1 / pi]
    .

    V M $ <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  sin(pi y) / pi^2 - y cos(pi y) / pi - 1 / pi
    .

    V R -

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  sin(3.14159 y) / 9.8696 - y cos(3.14159 y) / 3.14159 - 0.3183
    .

    =

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [0., -0.95493, 0.63662, -1.5915, 1.2732]
    .

    v x 5 <span class="key">RET</span>  <span class="key">TAB</span>  V M $ <span class="key">RET</span>
</pre></div>

<hr>
<a name="Algebra-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-1" accesskey="n" rel="next">Rewrites Answer 1</a>, Previous: <a href="#Algebra-Answer-3" accesskey="p" rel="prev">Algebra Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.51 Algebra Tutorial Exercise 4</h4>

<p>The hard part is that <kbd>V R +</kbd> is no longer sufficient to add up all
the contributions from the slices, since the slices have varying
coefficients.  So first we must come up with a vector of these
coefficients.  Here&rsquo;s one way:
</p>
<div class="smallexample">
<pre class="smallexample">2:  -1                 2:  3                    1:  [4, 2, ..., 4]
1:  [1, 2, ..., 9]     1:  [-1, 1, ..., -1]         .
    .                      .

    1 n v x 9 <span class="key">RET</span>          V M ^  3 <span class="key">TAB</span>             -

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  [4, 2, ..., 4, 1]      1:  [1, 4, 2, ..., 4, 1]
    .                          .

    1 |                        1 <span class="key">TAB</span> |
</pre></div>

<p>Now we compute the function values.  Note that for this method we need
eleven values, including both endpoints of the desired interval.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 4, 2, ..., 4, 1]
1:  [1, 1.1, 1.2,  ...  , 1.8, 1.9, 2.]
    .

 11 <span class="key">RET</span> 1 <span class="key">RET</span> .1 <span class="key">RET</span>  C-u v x

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  [1, 4, 2, ..., 4, 1]
1:  [0., 0.084941, 0.16993, ... ]
    .

    ' sin(x) ln(x) <span class="key">RET</span>   m r  p 5 <span class="key">RET</span>   V M $ <span class="key">RET</span>
</pre></div>

<p>Once again this calls for <kbd>V M * V R +</kbd>; a simple <kbd>*</kbd> does the
same thing.
</p>
<div class="smallexample">
<pre class="smallexample">1:  11.22      1:  1.122      1:  0.374
    .              .              .

    *              .1 *           3 /
</pre></div>

<p>Wow!  That&rsquo;s even better than the result from the Taylor series method.
</p>
<hr>
<a name="Rewrites-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-2" accesskey="n" rel="next">Rewrites Answer 2</a>, Previous: <a href="#Algebra-Answer-4" accesskey="p" rel="prev">Algebra Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.52 Rewrites Tutorial Exercise 1</h4>

<p>We&rsquo;ll use Big mode to make the formulas more readable.
</p>
<div class="smallexample">
<pre class="smallexample">                                           ___
                                          V 2  + 2
1:  (2 + sqrt(2)) / (1 + sqrt(2))     1:  ---------
    .                                      ___
                                          V 2  + 1

                                          .

  ' (2+sqrt(2)) / (1+sqrt(2)) <span class="key">RET</span>         d B
</pre></div>

<p>Multiplying by the conjugate helps because &lsquo;<samp>(a+b) (a-b) = a^2 - b^2</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">          ___    ___
1:  (2 + V 2 ) (V 2  - 1)
    .

  a r a/(b+c) := a*(b-c) / (b^2-c^2) <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">     ___
1:  V 2
    .

  a r a*(b+c) := a*b + a*c
</pre></div>

<p>(We could have used <kbd>a x</kbd> instead of a rewrite rule for the
second step.)
</p>
<p>The multiply-by-conjugate rule turns out to be useful in many
different circumstances, such as when the denominator involves
sines and cosines or the imaginary constant <code>i</code>.
</p>
<hr>
<a name="Rewrites-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-3" accesskey="n" rel="next">Rewrites Answer 3</a>, Previous: <a href="#Rewrites-Answer-1" accesskey="p" rel="prev">Rewrites Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.53 Rewrites Tutorial Exercise 2</h4>

<p>Here is the rule set:
</p>
<div class="smallexample">
<pre class="smallexample">[ fib(n) := fib(n, 1, 1) :: integer(n) :: n &gt;= 1,
  fib(1, x, y) := x,
  fib(n, x, y) := fib(n-1, y, x+y) ]
</pre></div>

<p>The first rule turns a one-argument <code>fib</code> that people like to write
into a three-argument <code>fib</code> that makes computation easier.  The
second rule converts back from three-argument form once the computation
is done.  The third rule does the computation itself.  It basically
says that if &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; are two consecutive Fibonacci numbers,
then &lsquo;<samp>y</samp>&rsquo; and &lsquo;<samp>x+y</samp>&rsquo; are the next (overlapping) pair of Fibonacci
numbers.
</p>
<p>Notice that because the number &lsquo;<samp>n</samp>&rsquo; was &ldquo;validated&rdquo; by the
conditions on the first rule, there is no need to put conditions on
the other rules because the rule set would never get that far unless
the input were valid.  That further speeds computation, since no
extra conditions need to be checked at every step.
</p>
<p>Actually, a user with a nasty sense of humor could enter a bad
three-argument <code>fib</code> call directly, say, &lsquo;<samp>fib(0, 1, 1)</samp>&rsquo;,
which would get the rules into an infinite loop.  One thing that would
help keep this from happening by accident would be to use something like
&lsquo;<samp>ZzFib</samp>&rsquo; instead of <code>fib</code> as the name of the three-argument
function.
</p>
<hr>
<a name="Rewrites-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-4" accesskey="n" rel="next">Rewrites Answer 4</a>, Previous: <a href="#Rewrites-Answer-2" accesskey="p" rel="prev">Rewrites Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.54 Rewrites Tutorial Exercise 3</h4>

<p>He got an infinite loop.  First, Calc did as expected and rewrote
&lsquo;<samp>2&nbsp;+&nbsp;3&nbsp;x</samp>&rsquo;<!-- /@w --> to &lsquo;<samp>f(2, 3, x)</samp>&rsquo;.  Then it looked for ways to
apply the rule again, and found that &lsquo;<samp>f(2, 3, x)</samp>&rsquo; looks like
&lsquo;<samp>a + b x</samp>&rsquo; with &lsquo;<samp>a&nbsp;=&nbsp;0</samp>&rsquo;<!-- /@w --> and &lsquo;<samp>b = 1</samp>&rsquo;, so it rewrote to
&lsquo;<samp>f(0, 1, f(2, 3, x))</samp>&rsquo;.  It then wrapped another &lsquo;<samp>f(0, 1, ...)</samp>&rsquo;
around that, and so on, ad infinitum.  Joe should have used <kbd>M-1 a r</kbd>
to make sure the rule applied only once.
</p>
<p>(Actually, even the first step didn&rsquo;t work as he expected.  What Calc
really gives for <kbd>M-1 a r</kbd> in this situation is &lsquo;<samp>f(3 x, 1, 2)</samp>&rsquo;,
treating 2 as the &ldquo;variable,&rdquo; and &lsquo;<samp>3 x</samp>&rsquo; as a constant being added
to it.  While this may seem odd, it&rsquo;s just as valid a solution as the
&ldquo;obvious&rdquo; one.  One way to fix this would be to add the condition
&lsquo;<samp>:: variable(x)</samp>&rsquo; to the rule, to make sure the thing that matches
&lsquo;<samp>x</samp>&rsquo; is indeed a variable, or to change &lsquo;<samp>x</samp>&rsquo; to &lsquo;<samp>quote(x)</samp>&rsquo;
on the lefthand side, so that the rule matches the actual variable
&lsquo;<samp>x</samp>&rsquo; rather than letting &lsquo;<samp>x</samp>&rsquo; stand for something else.)
</p>
<hr>
<a name="Rewrites-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-5" accesskey="n" rel="next">Rewrites Answer 5</a>, Previous: <a href="#Rewrites-Answer-3" accesskey="p" rel="prev">Rewrites Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.55 Rewrites Tutorial Exercise 4</h4>

<p><a name="index-seq"></a>
Here is a suitable set of rules to solve the first part of the problem:
</p>
<div class="smallexample">
<pre class="smallexample">[ seq(n, c) := seq(n/2,  c+1) :: n%2 = 0,
  seq(n, c) := seq(3n+1, c+1) :: n%2 = 1 :: n &gt; 1 ]
</pre></div>

<p>Given the initial formula &lsquo;<samp>seq(6, 0)</samp>&rsquo;, application of these
rules produces the following sequence of formulas:
</p>
<div class="example">
<pre class="example">seq( 3, 1)
seq(10, 2)
seq( 5, 3)
seq(16, 4)
seq( 8, 5)
seq( 4, 6)
seq( 2, 7)
seq( 1, 8)
</pre></div>

<p>whereupon neither of the rules match, and rewriting stops.
</p>
<p>We can pretty this up a bit with a couple more rules:
</p>
<div class="smallexample">
<pre class="smallexample">[ seq(n) := seq(n, 0),
  seq(1, c) := c,
  ... ]
</pre></div>

<p>Now, given &lsquo;<samp>seq(6)</samp>&rsquo; as the starting configuration, we get 8
as the result.
</p>
<p>The change to return a vector is quite simple:
</p>
<div class="smallexample">
<pre class="smallexample">[ seq(n) := seq(n, []) :: integer(n) :: n &gt; 0,
  seq(1, v) := v | 1,
  seq(n, v) := seq(n/2,  v | n) :: n%2 = 0,
  seq(n, v) := seq(3n+1, v | n) :: n%2 = 1 ]
</pre></div>

<p>Given &lsquo;<samp>seq(6)</samp>&rsquo;, the result is &lsquo;<samp>[6, 3, 10, 5, 16, 8, 4, 2, 1]</samp>&rsquo;.
</p>
<p>Notice that the &lsquo;<samp>n &gt; 1</samp>&rsquo; guard is no longer necessary on the last
rule since the &lsquo;<samp>n = 1</samp>&rsquo; case is now detected by another rule.
But a guard has been added to the initial rule to make sure the
initial value is suitable before the computation begins.
</p>
<p>While still a good idea, this guard is not as vitally important as it
was for the <code>fib</code> function, since calling, say, &lsquo;<samp>seq(x, [])</samp>&rsquo;
will not get into an infinite loop.  Calc will not be able to prove
the symbol &lsquo;<samp>x</samp>&rsquo; is either even or odd, so none of the rules will
apply and the rewrites will stop right away.
</p>
<hr>
<a name="Rewrites-Answer-5"></a>
<div class="header">
<p>
Next: <a href="#Rewrites-Answer-6" accesskey="n" rel="next">Rewrites Answer 6</a>, Previous: <a href="#Rewrites-Answer-4" accesskey="p" rel="prev">Rewrites Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-5"></a>
<h4 class="subsection">2.7.56 Rewrites Tutorial Exercise 5</h4>

<p><a name="index-nterms"></a>
If &lsquo;<samp>x</samp>&rsquo; is the sum &lsquo;<samp>a + b</samp>&rsquo;, then &lsquo;<tt>nterms(</tt><var>x</var><tt>)</tt>&rsquo; must
be &lsquo;<tt>nterms(</tt><var>a</var><tt>)</tt>&rsquo; plus &lsquo;<tt>nterms(</tt><var>b</var><tt>)</tt>&rsquo;.  If &lsquo;<samp>x</samp>&rsquo;
is not a sum, then &lsquo;<tt>nterms(</tt><var>x</var><tt>)</tt>&rsquo; = 1.
</p>
<div class="smallexample">
<pre class="smallexample">[ nterms(a + b) := nterms(a) + nterms(b),
  nterms(x)     := 1 ]
</pre></div>

<p>Here we have taken advantage of the fact that earlier rules always
match before later rules; &lsquo;<samp>nterms(x)</samp>&rsquo; will only be tried if we
already know that &lsquo;<samp>x</samp>&rsquo; is not a sum.
</p>
<hr>
<a name="Rewrites-Answer-6"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-1" accesskey="n" rel="next">Programming Answer 1</a>, Previous: <a href="#Rewrites-Answer-5" accesskey="p" rel="prev">Rewrites Answer 5</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrites-Tutorial-Exercise-6"></a>
<h4 class="subsection">2.7.57 Rewrites Tutorial Exercise 6</h4>

<p>Here is a rule set that will do the job:
</p>
<div class="smallexample">
<pre class="smallexample">[ a*(b + c) := a*b + a*c,
  opt(a) O(x^n) + opt(b) O(x^m) := O(x^n) :: n &lt;= m
     :: constant(a) :: constant(b),
  opt(a) O(x^n) + opt(b) x^m := O(x^n) :: n &lt;= m
     :: constant(a) :: constant(b),
  a O(x^n) := O(x^n) :: constant(a),
  x^opt(m) O(x^n) := O(x^(n+m)),
  O(x^n) O(x^m) := O(x^(n+m)) ]
</pre></div>

<p>If we really want the <kbd>+</kbd> and <kbd>*</kbd> keys to operate naturally
on power series, we should put these rules in <code>EvalRules</code>.  For
testing purposes, it is better to put them in a different variable,
say, <code>O</code>, first.
</p>
<p>The first rule just expands products of sums so that the rest of the
rules can assume they have an expanded-out polynomial to work with.
Note that this rule does not mention &lsquo;<samp>O</samp>&rsquo; at all, so it will
apply to any product-of-sum it encounters&mdash;this rule may surprise
you if you put it into <code>EvalRules</code>!
</p>
<p>In the second rule, the sum of two O&rsquo;s is changed to the smaller O.
The optional constant coefficients are there mostly so that
&lsquo;<samp>O(x^2) - O(x^3)</samp>&rsquo; and &lsquo;<samp>O(x^3) - O(x^2)</samp>&rsquo; are handled
as well as &lsquo;<samp>O(x^2) + O(x^3)</samp>&rsquo;.
</p>
<p>The third rule absorbs higher powers of &lsquo;<samp>x</samp>&rsquo; into O&rsquo;s.
</p>
<p>The fourth rule says that a constant times a negligible quantity
is still negligible.  (This rule will also match &lsquo;<samp>O(x^3) / 4</samp>&rsquo;,
with &lsquo;<samp>a = 1/4</samp>&rsquo;.)
</p>
<p>The fifth rule rewrites, for example, &lsquo;<samp>x^2 O(x^3)</samp>&rsquo; to &lsquo;<samp>O(x^5)</samp>&rsquo;.
(It is easy to see that if one of these forms is negligible, the other
is, too.)  Notice the &lsquo;<samp>x^opt(m)</samp>&rsquo; to pick up terms like
&lsquo;<samp>x&nbsp;O(x^3)</samp>&rsquo;<!-- /@w -->.  Optional powers will match &lsquo;<samp>x</samp>&rsquo; as &lsquo;<samp>x^1</samp>&rsquo;
but not 1 as &lsquo;<samp>x^0</samp>&rsquo;.  This turns out to be exactly what we want here.
</p>
<p>The sixth rule is the corresponding rule for products of two O&rsquo;s.
</p>
<p>Another way to solve this problem would be to create a new &ldquo;data type&rdquo;
that represents truncated power series.  We might represent these as
function calls &lsquo;<samp>series(<var>coefs</var>, <var>x</var>)</samp>&rsquo; where <var>coefs</var> is
a vector of coefficients for &lsquo;<samp>x^0</samp>&rsquo;, &lsquo;<samp>x^1</samp>&rsquo;, &lsquo;<samp>x^2</samp>&rsquo;, and so
on.  Rules would exist for sums and products of such <code>series</code>
objects, and as an optional convenience could also know how to combine a
<code>series</code> object with a normal polynomial.  (With this, and with a
rule that rewrites &lsquo;<samp>O(x^n)</samp>&rsquo; to the equivalent <code>series</code> form,
you could still enter power series in exactly the same notation as
before.)  Operations on such objects would probably be more efficient,
although the objects would be a bit harder to read.
</p>
<p>Some other symbolic math programs provide a power series data type
similar to this.  Mathematica, for example, has an object that looks
like &lsquo;<samp>PowerSeries[<var>x</var>, <var>x0</var>, <var>coefs</var>, <var>nmin</var>,
<var>nmax</var>, <var>den</var>]</samp>&rsquo;, where <var>x0</var> is the point about which the
power series is taken (we&rsquo;ve been assuming this was always zero),
and <var>nmin</var>, <var>nmax</var>, and <var>den</var> allow pseudo-power-series
with fractional or negative powers.  Also, the <code>PowerSeries</code>
objects have a special display format that makes them look like
&lsquo;<samp>2 x^2 + O(x^4)</samp>&rsquo; when they are printed out.  (See <a href="#Compositions">Compositions</a>,
for a way to do this in Calc, although for something as involved as
this it would probably be better to write the formatting routine
in Lisp.)
</p>
<hr>
<a name="Programming-Answer-1"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-2" accesskey="n" rel="next">Programming Answer 2</a>, Previous: <a href="#Rewrites-Answer-6" accesskey="p" rel="prev">Rewrites Answer 6</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-1"></a>
<h4 class="subsection">2.7.58 Programming Tutorial Exercise 1</h4>

<p>Just enter the formula &lsquo;<samp>ninteg(sin(t)/t, t, 0, x)</samp>&rsquo;, type
<kbd>Z F</kbd>, and answer the questions.  Since this formula contains two
variables, the default argument list will be &lsquo;<samp>(t x)</samp>&rsquo;.  We want to
change this to &lsquo;<samp>(x)</samp>&rsquo; since &lsquo;<samp>t</samp>&rsquo; is really a dummy variable
to be used within <code>ninteg</code>.
</p>
<p>The exact keystrokes are <kbd>Z F s Si <span class="key">RET</span> <span class="key">RET</span> C-b C-b <span class="key">DEL</span> <span class="key">DEL</span> <span class="key">RET</span> y</kbd>.
(The <kbd>C-b C-b <span class="key">DEL</span> <span class="key">DEL</span></kbd> are what fix the argument list.)
</p>
<hr>
<a name="Programming-Answer-2"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-3" accesskey="n" rel="next">Programming Answer 3</a>, Previous: <a href="#Programming-Answer-1" accesskey="p" rel="prev">Programming Answer 1</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-2"></a>
<h4 class="subsection">2.7.59 Programming Tutorial Exercise 2</h4>

<p>One way is to move the number to the top of the stack, operate on
it, then move it back:  <kbd>C-x ( M-<span class="key">TAB</span> n M-<span class="key">TAB</span> M-<span class="key">TAB</span> C-x )</kbd>.
</p>
<p>Another way is to negate the top three stack entries, then negate
again the top two stack entries:  <kbd>C-x ( M-3 n M-2 n C-x )</kbd>.
</p>
<p>Finally, it turns out that a negative prefix argument causes a
command like <kbd>n</kbd> to operate on the specified stack entry only,
which is just what we want:  <kbd>C-x ( M-- 3 n C-x )</kbd>.
</p>
<p>Just for kicks, let&rsquo;s also do it algebraically:
<kbd><span class="nolinebreak">C-x</span>&nbsp;(&nbsp;'&nbsp;<span class="nolinebreak">-$$$,</span>&nbsp;$$,&nbsp;$&nbsp;<span class="key">RET</span>&nbsp;<span class="nolinebreak">C-x</span>&nbsp;)</kbd><!-- /@w -->.
</p>
<hr>
<a name="Programming-Answer-3"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-4" accesskey="n" rel="next">Programming Answer 4</a>, Previous: <a href="#Programming-Answer-2" accesskey="p" rel="prev">Programming Answer 2</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-3"></a>
<h4 class="subsection">2.7.60 Programming Tutorial Exercise 3</h4>

<p>Each of these functions can be computed using the stack, or using
algebraic entry, whichever way you prefer:
</p>
<p>Computing
&lsquo;<samp>sin(x) / x</samp>&rsquo;:
</p>
<p>Using the stack:  <kbd>C-x (  <span class="key">RET</span> S <span class="key">TAB</span> /  C-x )</kbd>.
</p>
<p>Using algebraic entry:  <kbd>C-x (  ' sin($)/$ <span class="key">RET</span>  C-x )</kbd>.
</p>
<p>Computing the logarithm:
</p>
<p>Using the stack:  <kbd>C-x (  <span class="key">TAB</span> B  C-x )</kbd>
</p>
<p>Using algebraic entry:  <kbd>C-x (  ' log($,$$) <span class="key">RET</span>  C-x )</kbd>.
</p>
<p>Computing the vector of integers:
</p>
<p>Using the stack:  <kbd>C-x (  1 <span class="key">RET</span> 1  C-u v x  C-x )</kbd>.  (Recall that
<kbd>C-u v x</kbd> takes the vector size, starting value, and increment
from the stack.)
</p>
<p>Alternatively:  <kbd>C-x (  ~ v x  C-x )</kbd>.  (The <kbd>~</kbd> key pops a
number from the stack and uses it as the prefix argument for the
next command.)
</p>
<p>Using algebraic entry:  <kbd>C-x (  ' index($) <span class="key">RET</span>  C-x )</kbd>.
</p>
<hr>
<a name="Programming-Answer-4"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-5" accesskey="n" rel="next">Programming Answer 5</a>, Previous: <a href="#Programming-Answer-3" accesskey="p" rel="prev">Programming Answer 3</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-4"></a>
<h4 class="subsection">2.7.61 Programming Tutorial Exercise 4</h4>

<p>Here&rsquo;s one way:  <kbd>C-x ( <span class="key">RET</span> V R + <span class="key">TAB</span> v l / C-x )</kbd>.
</p>
<hr>
<a name="Programming-Answer-5"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-6" accesskey="n" rel="next">Programming Answer 6</a>, Previous: <a href="#Programming-Answer-4" accesskey="p" rel="prev">Programming Answer 4</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-5"></a>
<h4 class="subsection">2.7.62 Programming Tutorial Exercise 5</h4>

<div class="smallexample">
<pre class="smallexample">2:  1              1:  1.61803398502         2:  1.61803398502
1:  20                 .                     1:  1.61803398875
    .                                            .

   1 <span class="key">RET</span> 20         Z &lt; &amp; 1 + Z &gt;                I H P
</pre></div>

<p>This answer is quite accurate.
</p>
<hr>
<a name="Programming-Answer-6"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-7" accesskey="n" rel="next">Programming Answer 7</a>, Previous: <a href="#Programming-Answer-5" accesskey="p" rel="prev">Programming Answer 5</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-6"></a>
<h4 class="subsection">2.7.63 Programming Tutorial Exercise 6</h4>

<p>Here is the matrix:
</p>
<div class="example">
<pre class="example">[ [ 0, 1 ]   * [a, b] = [b, a + b]
  [ 1, 1 ] ]
</pre></div>

<p>Thus &lsquo;<samp>[0, 1; 1, 1]^n * [1, 1]</samp>&rsquo; computes Fibonacci numbers &lsquo;<samp>n+1</samp>&rsquo;
and &lsquo;<samp>n+2</samp>&rsquo;.  Here&rsquo;s one program that does the job:
</p>
<div class="example">
<pre class="example">C-x ( ' [0, 1; 1, 1] ^ ($-1) * [1, 1] <span class="key">RET</span> v u <span class="key">DEL</span> C-x )
</pre></div>

<p>This program is quite efficient because Calc knows how to raise a
matrix (or other value) to the power &lsquo;<samp>n</samp>&rsquo; in only
&lsquo;<samp>log(n,2)</samp>&rsquo;
steps.  For example, this program can compute the 1000th Fibonacci
number (a 209-digit integer!) in about 10 steps; even though the
<kbd>Z &lt; ... Z &gt;</kbd> solution had much simpler steps, it would have
required so many steps that it would not have been practical.
</p>
<hr>
<a name="Programming-Answer-7"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-8" accesskey="n" rel="next">Programming Answer 8</a>, Previous: <a href="#Programming-Answer-6" accesskey="p" rel="prev">Programming Answer 6</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-7"></a>
<h4 class="subsection">2.7.64 Programming Tutorial Exercise 7</h4>

<p>The trick here is to compute the harmonic numbers differently, so that
the loop counter itself accumulates the sum of reciprocals.  We use
a separate variable to hold the integer counter.
</p>
<div class="smallexample">
<pre class="smallexample">1:  1          2:  1       1:  .
    .          1:  4
                   .

    1 t 1       1 <span class="key">RET</span> 4      Z ( t 2 r 1 1 + s 1 &amp; Z )
</pre></div>

<p>The body of the loop goes as follows:  First save the harmonic sum
so far in variable 2.  Then delete it from the stack; the for loop
itself will take care of remembering it for us.  Next, recall the
count from variable 1, add one to it, and feed its reciprocal to
the for loop to use as the step value.  The for loop will increase
the &ldquo;loop counter&rdquo; by that amount and keep going until the
loop counter exceeds 4.
</p>
<div class="smallexample">
<pre class="smallexample">2:  31                  3:  31
1:  3.99498713092       2:  3.99498713092
    .                   1:  4.02724519544
                            .

    r 1 r 2                 <span class="key">RET</span> 31 &amp; +
</pre></div>

<p>Thus we find that the 30th harmonic number is 3.99, and the 31st
harmonic number is 4.02.
</p>
<hr>
<a name="Programming-Answer-8"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-9" accesskey="n" rel="next">Programming Answer 9</a>, Previous: <a href="#Programming-Answer-7" accesskey="p" rel="prev">Programming Answer 7</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-8"></a>
<h4 class="subsection">2.7.65 Programming Tutorial Exercise 8</h4>

<p>The first step is to compute the derivative &lsquo;<samp>f'(x)</samp>&rsquo; and thus
the formula
&lsquo;<samp>x - f(x)/f'(x)</samp>&rsquo;.
</p>
<p>(Because this definition is long, it will be repeated in concise form
below.  You can use <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;m</kbd><!-- /@w --> to load it from there.  While you are
entering a <kbd>Z ` Z '</kbd> body in a macro, Calc simply collects
keystrokes without executing them.  In the following diagrams we&rsquo;ll
pretend Calc actually executed the keystrokes as you typed them,
just for purposes of illustration.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  sin(cos(x)) - 0.5            3:  4.5
1:  4.5                          2:  sin(cos(x)) - 0.5
    .                            1:  -(sin(x) cos(cos(x)))
                                     .

' sin(cos(x))-0.5 <span class="key">RET</span> 4.5  m r  C-x ( Z `  <span class="key">TAB</span> <span class="key">RET</span> a d x <span class="key">RET</span>

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  4.5
1:  x + (sin(cos(x)) - 0.5) / sin(x) cos(cos(x))
    .

    /  ' x <span class="key">RET</span> <span class="key">TAB</span> -   t 1
</pre></div>

<p>Now, we enter the loop.  We&rsquo;ll use a repeat loop with a 20-repetition
limit just in case the method fails to converge for some reason.
(Normally, the <kbd>Z&nbsp;/</kbd><!-- /@w --> command will stop the loop before all 20
repetitions are done.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  4.5         3:  4.5                     2:  4.5
    .           2:  x + (sin(cos(x)) ...    1:  5.24196456928
                1:  4.5                         .
                    .

  20 Z &lt;          <span class="key">RET</span> r 1 <span class="key">TAB</span>                 s l x <span class="key">RET</span>
</pre></div>

<p>This is the new guess for &lsquo;<samp>x</samp>&rsquo;.  Now we compare it with the
old one to see if we&rsquo;ve converged.
</p>
<div class="smallexample">
<pre class="smallexample">3:  5.24196     2:  5.24196     1:  5.24196     1:  5.26345856348
2:  5.24196     1:  0               .               .
1:  4.5             .
    .

  <span class="key">RET</span> M-<span class="key">TAB</span>         a =             Z /             Z &gt; Z ' C-x )
</pre></div>

<p>The loop converges in just a few steps to this value.  To check
the result, we can simply substitute it back into the equation.
</p>
<div class="smallexample">
<pre class="smallexample">2:  5.26345856348
1:  0.499999999997
    .

 <span class="key">RET</span> ' sin(cos($)) <span class="key">RET</span>
</pre></div>

<p>Let&rsquo;s test the new definition again:
</p>
<div class="smallexample">
<pre class="smallexample">2:  x^2 - 9           1:  3.
1:  1                     .
    .

  ' x^2-9 <span class="key">RET</span> 1           X
</pre></div>

<p>Once again, here&rsquo;s the full Newton&rsquo;s Method definition:
</p>
<div class="example">
<pre class="example">C-x ( Z `  <span class="key">TAB</span> <span class="key">RET</span> a d x <span class="key">RET</span>  /  ' x <span class="key">RET</span> <span class="key">TAB</span> -  t 1
           20 Z &lt;  <span class="key">RET</span> r 1 <span class="key">TAB</span>  s l x <span class="key">RET</span>
                   <span class="key">RET</span> M-<span class="key">TAB</span>  a =  Z /
              Z &gt;
      Z '
C-x )
</pre></div>

<p>It turns out that Calc has a built-in command for applying a formula
repeatedly until it converges to a number.  See <a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a>,
to see how to use it.
</p>
<p>Also, of course, <kbd>a R</kbd> is a built-in command that uses Newton&rsquo;s
method (among others) to look for numerical solutions to any equation.
See <a href="#Root-Finding">Root Finding</a>.
</p>
<hr>
<a name="Programming-Answer-9"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-10" accesskey="n" rel="next">Programming Answer 10</a>, Previous: <a href="#Programming-Answer-8" accesskey="p" rel="prev">Programming Answer 8</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-9"></a>
<h4 class="subsection">2.7.66 Programming Tutorial Exercise 9</h4>

<p>The first step is to adjust &lsquo;<samp>z</samp>&rsquo; to be greater than 5.  A simple
&ldquo;for&rdquo; loop will do the job here.  If &lsquo;<samp>z</samp>&rsquo; is less than 5, we
reduce the problem using
&lsquo;<samp>psi(z) = psi(z+1) - 1/z</samp>&rsquo;.  We go
on to compute
&lsquo;<samp>psi(z+1)</samp>&rsquo;,
and remember to add back a factor of &lsquo;<samp>-1/z</samp>&rsquo; when we&rsquo;re done.  This
step is repeated until &lsquo;<samp>z &gt; 5</samp>&rsquo;.
</p>
<p>(Because this definition is long, it will be repeated in concise form
below.  You can use <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;m</kbd><!-- /@w --> to load it from there.  While you are
entering a <kbd>Z ` Z '</kbd> body in a macro, Calc simply collects
keystrokes without executing them.  In the following diagrams we&rsquo;ll
pretend Calc actually executed the keystrokes as you typed them,
just for purposes of illustration.)
</p>
<div class="smallexample">
<pre class="smallexample">1:  1.             1:  1.
    .                  .

 1.0 <span class="key">RET</span>       C-x ( Z `  s 1  0 t 2
</pre></div>

<p>Here, variable 1 holds &lsquo;<samp>z</samp>&rsquo; and variable 2 holds the adjustment
factor.  If &lsquo;<samp>z &lt; 5</samp>&rsquo;, we use a loop to increase it.
</p>
<p>(By the way, we started with &lsquo;<samp>1.0</samp>&rsquo; instead of the integer 1 because
otherwise the calculation below will try to do exact fractional arithmetic,
and will never converge because fractions compare equal only if they
are exactly equal, not just equal to within the current precision.)
</p>
<div class="smallexample">
<pre class="smallexample">3:  1.      2:  1.       1:  6.
2:  1.      1:  1            .
1:  5           .
    .

  <span class="key">RET</span> 5        a &lt;    Z [  5 Z (  &amp; s + 2  1 s + 1  1 Z ) r 1  Z ]
</pre></div>

<p>Now we compute the initial part of the sum:
&lsquo;<samp>ln(z) - 1/2z</samp>&rsquo;
minus the adjustment factor.
</p>
<div class="smallexample">
<pre class="smallexample">2:  1.79175946923      2:  1.7084261359      1:  -0.57490719743
1:  0.0833333333333    1:  2.28333333333         .
    .                      .

    L  r 1 2 * &amp;           -  r 2                -
</pre></div>

<p>Now we evaluate the series.  We&rsquo;ll use another &ldquo;for&rdquo; loop counting
up the value of &lsquo;<samp>2 n</samp>&rsquo;.  (Calc does have a summation command,
<kbd>a +</kbd>, but we&rsquo;ll use loops just to get more practice with them.)
</p>
<div class="smallexample">
<pre class="smallexample">3:  -0.5749       3:  -0.5749        4:  -0.5749      2:  -0.5749
2:  2             2:  1:6            3:  1:6          1:  2.3148e-3
1:  40            1:  2              2:  2                .
    .                 .              1:  36.
                                         .

   2 <span class="key">RET</span> 40        Z ( <span class="key">RET</span> k b <span class="key">TAB</span>     <span class="key">RET</span> r 1 <span class="key">TAB</span> ^      * /

</pre></div>
<div class="smallexample">
<pre class="smallexample">3:  -0.5749       3:  -0.5772      2:  -0.5772     1:  -0.577215664892
2:  -0.5749       2:  -0.5772      1:  0               .
1:  2.3148e-3     1:  -0.5749          .
    .                 .

  <span class="key">TAB</span> <span class="key">RET</span> M-<span class="key">TAB</span>       - <span class="key">RET</span> M-<span class="key">TAB</span>      a =     Z /    2  Z )  Z ' C-x )
</pre></div>

<p>This is the value of
&lsquo;<samp>- gamma</samp>&rsquo;,
with a slight bit of roundoff error.  To get a full 12 digits, let&rsquo;s use
a higher precision:
</p>
<div class="smallexample">
<pre class="smallexample">2:  -0.577215664892      2:  -0.577215664892
1:  1.                   1:  -0.577215664901532

    1. <span class="key">RET</span>                   p 16 <span class="key">RET</span> X
</pre></div>

<p>Here&rsquo;s the complete sequence of keystrokes:
</p>
<div class="example">
<pre class="example">C-x ( Z `  s 1  0 t 2
           <span class="key">RET</span> 5 a &lt;  Z [  5 Z (  &amp; s + 2  1 s + 1  1 Z ) r 1  Z ]
           L r 1 2 * &amp; - r 2 -
           2 <span class="key">RET</span> 40  Z (  <span class="key">RET</span> k b <span class="key">TAB</span> <span class="key">RET</span> r 1 <span class="key">TAB</span> ^ * /
                          <span class="key">TAB</span> <span class="key">RET</span> M-<span class="key">TAB</span> - <span class="key">RET</span> M-<span class="key">TAB</span> a = Z /
                  2  Z )
      Z '
C-x )
</pre></div>

<hr>
<a name="Programming-Answer-10"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-11" accesskey="n" rel="next">Programming Answer 11</a>, Previous: <a href="#Programming-Answer-9" accesskey="p" rel="prev">Programming Answer 9</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-10"></a>
<h4 class="subsection">2.7.67 Programming Tutorial Exercise 10</h4>

<p>Taking the derivative of a term of the form &lsquo;<samp>x^n</samp>&rsquo; will produce
a term like
&lsquo;<samp>n x^(n-1)</samp>&rsquo;.
Taking the derivative of a constant
produces zero.  From this it is easy to see that the &lsquo;<samp>n</samp>&rsquo;th
derivative of a polynomial, evaluated at &lsquo;<samp>x = 0</samp>&rsquo;, will equal the
coefficient on the &lsquo;<samp>x^n</samp>&rsquo; term times &lsquo;<samp>n!</samp>&rsquo;.
</p>
<p>(Because this definition is long, it will be repeated in concise form
below.  You can use <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;m</kbd><!-- /@w --> to load it from there.  While you are
entering a <kbd>Z ` Z '</kbd> body in a macro, Calc simply collects
keystrokes without executing them.  In the following diagrams we&rsquo;ll
pretend Calc actually executed the keystrokes as you typed them,
just for purposes of illustration.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  5 x^4 + (x + 1)^2          3:  5 x^4 + (x + 1)^2
1:  6                          2:  0
    .                          1:  6
                                   .

  ' 5 x^4 + (x+1)^2 <span class="key">RET</span> 6        C-x ( Z `  [ ] t 1  0 <span class="key">TAB</span>
</pre></div>

<p>Variable 1 will accumulate the vector of coefficients.
</p>
<div class="smallexample">
<pre class="smallexample">2:  0              3:  0                  2:  5 x^4 + ...
1:  5 x^4 + ...    2:  5 x^4 + ...        1:  1
    .              1:  1                      .
                       .

   Z ( <span class="key">TAB</span>         <span class="key">RET</span> 0 s l x <span class="key">RET</span>            M-<span class="key">TAB</span> ! /  s | 1
</pre></div>

<p>Note that <kbd>s | 1</kbd> appends the top-of-stack value to the vector
in a variable; it is completely analogous to <kbd>s + 1</kbd>.  We could
have written instead, <kbd>r 1 <span class="key">TAB</span> | t 1</kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">1:  20 x^3 + 2 x + 2      1:  0         1:  [1, 2, 1, 0, 5, 0, 0]
    .                         .             .

    a d x <span class="key">RET</span>                 1 Z )         <span class="key">DEL</span> r 1  Z ' C-x )
</pre></div>

<p>To convert back, a simple method is just to map the coefficients
against a table of powers of &lsquo;<samp>x</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 1, 0, 5, 0, 0]    2:  [1, 2, 1, 0, 5, 0, 0]
1:  6                        1:  [0, 1, 2, 3, 4, 5, 6]
    .                            .

    6 <span class="key">RET</span>                        1 + 0 <span class="key">RET</span> 1 C-u v x

</pre></div>
<div class="smallexample">
<pre class="smallexample">2:  [1, 2, 1, 0, 5, 0, 0]    2:  1 + 2 x + x^2 + 5 x^4
1:  [1, x, x^2, x^3, ... ]       .
    .

    ' x <span class="key">RET</span> <span class="key">TAB</span> V M ^            *
</pre></div>

<p>Once again, here are the whole polynomial to/from vector programs:
</p>
<div class="example">
<pre class="example">C-x ( Z `  [ ] t 1  0 <span class="key">TAB</span>
           Z (  <span class="key">TAB</span> <span class="key">RET</span> 0 s l x <span class="key">RET</span> M-<span class="key">TAB</span> ! /  s | 1
                a d x <span class="key">RET</span>
         1 Z ) r 1
      Z '
C-x )

C-x (  1 + 0 <span class="key">RET</span> 1 C-u v x ' x <span class="key">RET</span> <span class="key">TAB</span> V M ^ *  C-x )
</pre></div>

<hr>
<a name="Programming-Answer-11"></a>
<div class="header">
<p>
Next: <a href="#Programming-Answer-12" accesskey="n" rel="next">Programming Answer 12</a>, Previous: <a href="#Programming-Answer-10" accesskey="p" rel="prev">Programming Answer 10</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-11"></a>
<h4 class="subsection">2.7.68 Programming Tutorial Exercise 11</h4>

<p>First we define a dummy program to go on the <kbd>z s</kbd> key.  The true
<kbd>z&nbsp;s</kbd><!-- /@w --> key is supposed to take two numbers from the stack and
return one number, so <tt class="key">DEL</tt> as a dummy definition will make
sure the stack comes out right.
</p>
<div class="smallexample">
<pre class="smallexample">2:  4          1:  4                         2:  4
1:  2              .                         1:  2
    .                                            .

  4 <span class="key">RET</span> 2       C-x ( <span class="key">DEL</span> C-x )  Z K s <span class="key">RET</span>       2
</pre></div>

<p>The last step replaces the 2 that was eaten during the creation
of the dummy <kbd>z s</kbd> command.  Now we move on to the real
definition.  The recurrence needs to be rewritten slightly,
to the form &lsquo;<samp>s(n,m) = s(n-1,m-1) - (n-1) s(n-1,m)</samp>&rsquo;.
</p>
<p>(Because this definition is long, it will be repeated in concise form
below.  You can use <kbd>C-x * m</kbd> to load it from there.)
</p>
<div class="smallexample">
<pre class="smallexample">2:  4        4:  4       3:  4       2:  4
1:  2        3:  2       2:  2       1:  2
    .        2:  4       1:  0           .
             1:  2           .
                 .

  C-x (       M-2 <span class="key">RET</span>        a =         Z [  <span class="key">DEL</span> <span class="key">DEL</span> 1  Z :

</pre></div>
<div class="smallexample">
<pre class="smallexample">4:  4       2:  4                     2:  3      4:  3    4:  3    3:  3
3:  2       1:  2                     1:  2      3:  2    3:  2    2:  2
2:  2           .                         .      2:  3    2:  3    1:  3
1:  0                                            1:  2    1:  1        .
    .                                                .        .

  <span class="key">RET</span> 0   a = Z [  <span class="key">DEL</span> <span class="key">DEL</span> 0  Z :  <span class="key">TAB</span> 1 - <span class="key">TAB</span>   M-2 <span class="key">RET</span>     1 -      z s
</pre></div>

<p>(Note that the value 3 that our dummy <kbd>z s</kbd> produces is not correct;
it is merely a placeholder that will do just as well for now.)
</p>
<div class="smallexample">
<pre class="smallexample">3:  3               4:  3           3:  3       2:  3      1:  -6
2:  3               3:  3           2:  3       1:  9          .
1:  2               2:  3           1:  3           .
    .               1:  2               .
                        .

 M-<span class="key">TAB</span> M-<span class="key">TAB</span>     <span class="key">TAB</span> <span class="key">RET</span> M-<span class="key">TAB</span>         z s          *          -

</pre></div>
<div class="smallexample">
<pre class="smallexample">1:  -6                          2:  4          1:  11      2:  11
    .                           1:  2              .       1:  11
                                    .                          .

  Z ] Z ] C-x )   Z K s <span class="key">RET</span>      <span class="key">DEL</span> 4 <span class="key">RET</span> 2       z s      M-<span class="key">RET</span> k s
</pre></div>

<p>Even though the result that we got during the definition was highly
bogus, once the definition is complete the <kbd>z s</kbd> command gets
the right answers.
</p>
<p>Here&rsquo;s the full program once again:
</p>
<div class="example">
<pre class="example">C-x (  M-2 <span class="key">RET</span> a =
       Z [  <span class="key">DEL</span> <span class="key">DEL</span> 1
       Z :  <span class="key">RET</span> 0 a =
            Z [  <span class="key">DEL</span> <span class="key">DEL</span> 0
            Z :  <span class="key">TAB</span> 1 - <span class="key">TAB</span> M-2 <span class="key">RET</span> 1 - z s
                 M-<span class="key">TAB</span> M-<span class="key">TAB</span> <span class="key">TAB</span> <span class="key">RET</span> M-<span class="key">TAB</span> z s * -
            Z ]
       Z ]
C-x )
</pre></div>

<p>You can read this definition using <kbd>C-x * m</kbd> (<code>read-kbd-macro</code>)
followed by <kbd>Z K s</kbd>, without having to make a dummy definition
first, because <code>read-kbd-macro</code> doesn&rsquo;t need to execute the
definition as it reads it in.  For this reason, <code>C-x * m</code> is often
the easiest way to create recursive programs in Calc.
</p>
<hr>
<a name="Programming-Answer-12"></a>
<div class="header">
<p>
Previous: <a href="#Programming-Answer-11" accesskey="p" rel="prev">Programming Answer 11</a>, Up: <a href="#Answers-to-Exercises" accesskey="u" rel="up">Answers to Exercises</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-Tutorial-Exercise-12"></a>
<h4 class="subsection">2.7.69 Programming Tutorial Exercise 12</h4>

<p>This turns out to be a much easier way to solve the problem.  Let&rsquo;s
denote Stirling numbers as calls of the function &lsquo;<samp>s</samp>&rsquo;.
</p>
<p>First, we store the rewrite rules corresponding to the definition of
Stirling numbers in a convenient variable:
</p>
<div class="smallexample">
<pre class="smallexample">s e StirlingRules <span class="key">RET</span>
[ s(n,n) := 1  :: n &gt;= 0,
  s(n,0) := 0  :: n &gt; 0,
  s(n,m) := s(n-1,m-1) - (n-1) s(n-1,m) :: n &gt;= m :: m &gt;= 1 ]
C-c C-c
</pre></div>

<p>Now, it&rsquo;s just a matter of applying the rules:
</p>
<div class="smallexample">
<pre class="smallexample">2:  4          1:  s(4, 2)              1:  11
1:  2              .                        .
    .

  4 <span class="key">RET</span> 2       C-x (  ' s($$,$) <span class="key">RET</span>     a r StirlingRules <span class="key">RET</span>  C-x )
</pre></div>

<p>As in the case of the <code>fib</code> rules, it would be useful to put these
rules in <code>EvalRules</code> and to add a &lsquo;<samp>:: remember</samp>&rsquo; condition to
the last rule.
</p>


<hr>
<a name="Introduction"></a>
<div class="header">
<p>
Next: <a href="#Data-Types" accesskey="n" rel="next">Data Types</a>, Previous: <a href="#Tutorial" accesskey="p" rel="prev">Tutorial</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introduction-1"></a>
<h2 class="chapter">3 Introduction</h2>

<p>This chapter is the beginning of the Calc reference manual.
It covers basic concepts such as the stack, algebraic and
numeric entry, undo, numeric prefix arguments, etc.
</p>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Commands" accesskey="1">Basic Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Help-Commands" accesskey="2">Help Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Stack-Basics" accesskey="3">Stack Basics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Numeric-Entry" accesskey="4">Numeric Entry</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Entry" accesskey="5">Algebraic Entry</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Quick-Calculator" accesskey="6">Quick Calculator</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Prefix-Arguments" accesskey="7">Prefix Arguments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Undo" accesskey="8">Undo</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Error-Messages" accesskey="9">Error Messages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Multiple-Calculators">Multiple Calculators</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Troubleshooting-Commands">Troubleshooting Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Commands"></a>
<div class="header">
<p>
Next: <a href="#Help-Commands" accesskey="n" rel="next">Help Commands</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Commands-1"></a>
<h3 class="section">3.1 Basic Commands</h3>

<p><a name="index-calc"></a>
<a name="index-calc_002dmode"></a>
<a name="index-Starting-the-Calculator"></a>
<a name="index-Running-the-Calculator"></a>
To start the Calculator in its standard interface, type <kbd>M-x calc</kbd>.
By default this creates a pair of small windows, <samp>*Calculator*</samp>
and <samp>*Calc Trail*</samp>.  The former displays the contents of the
Calculator stack and is manipulated exclusively through Calc commands.
It is possible (though not usually necessary) to create several Calc
mode buffers each of which has an independent stack, undo list, and
mode settings.  There is exactly one Calc Trail buffer; it records a
list of the results of all calculations that have been done.  The
Calc Trail buffer uses a variant of Calc mode, so Calculator commands
still work when the trail buffer&rsquo;s window is selected.  It is possible
to turn the trail window off, but the <samp>*Calc Trail*</samp> buffer itself
still exists and is updated silently.  See <a href="#Trail-Commands">Trail Commands</a>.
</p>
<a name="index-C_002dx-_002a-c"></a>
<a name="index-C_002dx-_002a-_002a"></a>
<p>In most installations, the <kbd>C-x * c</kbd> key sequence is a more
convenient way to start the Calculator.  Also, <kbd>C-x * *</kbd>
is a synonym for <kbd>C-x * c</kbd> unless you last used Calc
in its Keypad mode.
</p>
<a name="index-x"></a>
<a name="index-M_002dx"></a>
<a name="index-calc_002dexecute_002dextended_002dcommand"></a>
<p>Most Calc commands use one or two keystrokes.  Lower- and upper-case
letters are distinct.  Commands may also be entered in full <kbd>M-x</kbd> form;
for some commands this is the only form.  As a convenience, the <kbd>x</kbd>
key (<code>calc-execute-extended-command</code>)
is like <kbd>M-x</kbd> except that it enters the initial string &lsquo;<samp>calc-</samp>&rsquo;
for you.  For example, the following key sequences are equivalent:
<kbd>S</kbd>, <kbd>M-x calc-sin <span class="key">RET</span></kbd>, <kbd>x sin <span class="key">RET</span></kbd>.
</p>
<p>Although Calc is designed to be used from the keyboard, some of
Calc&rsquo;s more common commands are available from a menu.  In the menu, the
arguments to the functions are given by referring to their stack level
numbers.
</p>
<a name="index-Extensions-module"></a>
<a name="index-calc_002dext-module"></a>
<p>The Calculator exists in many parts.  When you type <kbd>C-x * c</kbd>, the
Emacs &ldquo;auto-load&rdquo; mechanism will bring in only the first part, which
contains the basic arithmetic functions.  The other parts will be
auto-loaded the first time you use the more advanced commands like trig
functions or matrix operations.  This is done to improve the response time
of the Calculator in the common case when all you need to do is a
little arithmetic.  If for some reason the Calculator fails to load an
extension module automatically, you can force it to load all the
extensions by using the <kbd>C-x * L</kbd> (<code>calc-load-everything</code>)
command.  See <a href="#Mode-Settings">Mode Settings</a>.
</p>
<p>If you type <kbd>M-x calc</kbd> or <kbd>C-x * c</kbd> with any numeric prefix argument,
the Calculator is loaded if necessary, but it is not actually started.
If the argument is positive, the <samp>calc-ext</samp> extensions are also
loaded if necessary.  User-written Lisp code that wishes to make use
of Calc&rsquo;s arithmetic routines can use &lsquo;<samp>(calc 0)</samp>&rsquo; or &lsquo;<samp>(calc 1)</samp>&rsquo;
to auto-load the Calculator.
</p>
<a name="index-C_002dx-_002a-b"></a>
<a name="index-full_002dcalc"></a>
<p>If you type <kbd>C-x * b</kbd>, then next time you use <kbd>C-x * c</kbd> you
will get a Calculator that uses the full height of the Emacs screen.
When full-screen mode is on, <kbd>C-x * c</kbd> runs the <code>full-calc</code>
command instead of <code>calc</code>.  From the Unix shell you can type
&lsquo;<samp>emacs -f full-calc</samp>&rsquo; to start a new Emacs specifically for use
as a calculator.  When Calc is started from the Emacs command line
like this, Calc&rsquo;s normal &ldquo;quit&rdquo; commands actually quit Emacs itself.
</p>
<a name="index-C_002dx-_002a-o"></a>
<a name="index-calc_002dother_002dwindow"></a>
<p>The <kbd>C-x * o</kbd> command is like <kbd>C-x * c</kbd> except that the Calc
window is not actually selected.  If you are already in the Calc
window, <kbd>C-x * o</kbd> switches you out of it.  (The regular Emacs
<kbd>C-x o</kbd> command would also work for this, but it has a
tendency to drop you into the Calc Trail window instead, which
<kbd>C-x * o</kbd> takes care not to do.)
</p>
<p>For one quick calculation, you can type <kbd>C-x * q</kbd> (<code>quick-calc</code>)
which prompts you for a formula (like &lsquo;<samp>2+3/4</samp>&rsquo;).  The result is
displayed at the bottom of the Emacs screen without ever creating
any special Calculator windows.  See <a href="#Quick-Calculator">Quick Calculator</a>.
</p>
<p>Finally, if you are using the X window system you may want to try
<kbd>C-x * k</kbd> (<code>calc-keypad</code>) which runs Calc with a
&ldquo;calculator keypad&rdquo; picture as well as a stack display.  Click on
the keys with the mouse to operate the calculator.  See <a href="#Keypad-Mode">Keypad Mode</a>.
</p>
<a name="index-q"></a>
<a name="index-calc_002dquit"></a>
<a name="index-Quitting-the-Calculator"></a>
<a name="index-Exiting-the-Calculator"></a>
<p>The <kbd>q</kbd> key (<code>calc-quit</code>) exits Calc mode and closes the
Calculator&rsquo;s window(s).  It does not delete the Calculator buffers.
If you type <kbd>M-x calc</kbd> again, the Calculator will reappear with the
contents of the stack intact.  Typing <kbd>C-x * c</kbd> or <kbd>C-x * *</kbd>
again from inside the Calculator buffer is equivalent to executing
<code>calc-quit</code>; you can think of <kbd>C-x * *</kbd> as toggling the
Calculator on and off.
</p>
<a name="index-C_002dx-_002a-x"></a>
<p>The <kbd>C-x * x</kbd> command also turns the Calculator off, no matter which
user interface (standard, Keypad, or Embedded) is currently active.
It also cancels <code>calc-edit</code> mode if used from there.
</p>
<a name="index-d-SPC"></a>
<a name="index-calc_002drefresh-1"></a>
<a name="index-Refreshing-a-garbled-display"></a>
<a name="index-Garbled-displays_002c-refreshing"></a>
<p>The <kbd>d <span class="key">SPC</span></kbd> key sequence (<code>calc-refresh</code>) redraws the contents
of the Calculator buffer from memory.  Use this if the contents of the
buffer have been damaged somehow.
</p>
<p>The <kbd>o</kbd> key (<code>calc-realign</code>) moves the cursor back to its
&ldquo;home&rdquo; position at the bottom of the Calculator buffer.
</p>
<a name="index-_003c"></a>
<a name="index-_003e"></a>
<a name="index-calc_002dscroll_002dleft"></a>
<a name="index-calc_002dscroll_002dright"></a>
<a name="index-Horizontal-scrolling"></a>
<a name="index-Scrolling"></a>
<a name="index-Wide-text_002c-scrolling"></a>
<p>The <kbd>&lt;</kbd> and <kbd>&gt;</kbd> keys are bound to <code>calc-scroll-left</code> and
<code>calc-scroll-right</code>.  These are just like the normal horizontal
scrolling commands except that they scroll one half-screen at a time by
default.  (Calc formats its output to fit within the bounds of the
window whenever it can.)
</p>
<a name="index-_007b"></a>
<a name="index-_007d"></a>
<a name="index-calc_002dscroll_002ddown"></a>
<a name="index-calc_002dscroll_002dup"></a>
<a name="index-Vertical-scrolling"></a>
<p>The <kbd>{</kbd> and <kbd>}</kbd> keys are bound to <code>calc-scroll-down</code>
and <code>calc-scroll-up</code>.  They scroll up or down by one-half the
height of the Calc window.
</p>
<a name="index-C_002dx-_002a-0"></a>
<a name="index-calc_002dreset"></a>
<p>The <kbd>C-x * 0</kbd> command (<code>calc-reset</code>; that&rsquo;s <kbd>C-x *</kbd> followed
by a zero) resets the Calculator to its initial state.  This clears
the stack, resets all the modes to their initial values (the values
that were saved with <kbd>m m</kbd> (<code>calc-save-modes</code>)), clears the
caches (see <a href="#Caches">Caches</a>), and so on.  (It does <em>not</em> erase the
values of any variables.) With an argument of 0, Calc will be reset to
its default state; namely, the modes will be given their default values.
With a positive prefix argument, <kbd>C-x * 0</kbd> preserves the contents of
the stack but resets everything else to its initial state; with a
negative prefix argument, <kbd>C-x * 0</kbd> preserves the contents of the
stack but resets everything else to its default state.
</p>
<hr>
<a name="Help-Commands"></a>
<div class="header">
<p>
Next: <a href="#Stack-Basics" accesskey="n" rel="next">Stack Basics</a>, Previous: <a href="#Basic-Commands" accesskey="p" rel="prev">Basic Commands</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Help-Commands-1"></a>
<h3 class="section">3.2 Help Commands</h3>

<p><a name="index-Help-commands"></a>
<a name="index-_003f"></a>
<a name="index-a-_003f"></a>
<a name="index-b-_003f"></a>
<a name="index-c-_003f"></a>
<a name="index-d-_003f"></a>
<a name="index-f-_003f"></a>
<a name="index-g-_003f"></a>
<a name="index-j-_003f"></a>
<a name="index-k-_003f"></a>
<a name="index-m-_003f"></a>
<a name="index-r-_003f"></a>
<a name="index-s-_003f"></a>
<a name="index-t-_003f"></a>
<a name="index-u-_003f"></a>
<a name="index-v-_003f"></a>
<a name="index-V-_003f"></a>
<a name="index-z-_003f"></a>
<a name="index-Z-_003f"></a>
<a name="index-calc_002dhelp"></a>
The <kbd>?</kbd> key (<code>calc-help</code>) displays a series of brief help messages.
Some keys (such as <kbd>b</kbd> and <kbd>d</kbd>) are prefix keys, like Emacs&rsquo;s
<tt class="key">ESC</tt> and <kbd>C-x</kbd> prefixes.  You can type
<kbd>?</kbd> after a prefix to see a list of commands beginning with that
prefix.  (If the message includes &lsquo;<samp>[MORE]</samp>&rsquo;, press <kbd>?</kbd> again
to see additional commands for that prefix.)
</p>
<a name="index-h-h"></a>
<a name="index-calc_002dfull_002dhelp"></a>
<p>The <kbd>h h</kbd> (<code>calc-full-help</code>) command displays all the <kbd>?</kbd>
responses at once.  When printed, this makes a nice, compact (three pages)
summary of Calc keystrokes.
</p>
<p>In general, the <kbd>h</kbd> key prefix introduces various commands that
provide help within Calc.  Many of the <kbd>h</kbd> key functions are
Calc-specific analogues to the <kbd>C-h</kbd> functions for Emacs help.
</p>
<a name="index-h-i"></a>
<a name="index-C_002dx-_002a-i"></a>
<a name="index-i"></a>
<a name="index-calc_002dinfo"></a>
<p>The <kbd>h i</kbd> (<code>calc-info</code>) command runs the Emacs Info system
to read this manual on-line.  This is basically the same as typing
<kbd>C-h i</kbd> (the regular way to run the Info system), then, if Info
is not already in the Calc manual, selecting the beginning of the
manual.  The <kbd>C-x * i</kbd> command is another way to read the Calc
manual; it is different from <kbd>h i</kbd> in that it works any time,
not just inside Calc.  The plain <kbd>i</kbd> key is also equivalent to
<kbd>h i</kbd>, though this key is obsolete and may be replaced with a
different command in a future version of Calc.
</p>
<a name="index-h-t"></a>
<a name="index-C_002dx-_002a-t"></a>
<a name="index-calc_002dtutorial"></a>
<p>The <kbd>h t</kbd> (<code>calc-tutorial</code>) command runs the Info system on
the Tutorial section of the Calc manual.  It is like <kbd>h i</kbd>,
except that it selects the starting node of the tutorial rather
than the beginning of the whole manual.  (It actually selects the
node &ldquo;Interactive Tutorial&rdquo; which tells a few things about
using the Info system before going on to the actual tutorial.)
The <kbd>C-x * t</kbd> key is equivalent to <kbd>h t</kbd> (but it works at
all times).
</p>
<a name="index-h-s"></a>
<a name="index-C_002dx-_002a-s"></a>
<a name="index-calc_002dinfo_002dsummary"></a>
<p>The <kbd>h s</kbd> (<code>calc-info-summary</code>) command runs the Info system
on the Summary node of the Calc manual.  See <a href="#Summary">Summary</a>.  The <kbd>C-x * s</kbd>
key is equivalent to <kbd>h s</kbd>.
</p>
<a name="index-h-k"></a>
<a name="index-calc_002ddescribe_002dkey"></a>
<p>The <kbd>h k</kbd> (<code>calc-describe-key</code>) command looks up a key
sequence in the Calc manual.  For example, <kbd>h k H a S</kbd> looks
up the documentation on the <kbd>H a S</kbd> (<code>calc-solve-for</code>)
command.  This works by looking up the textual description of
the key(s) in the Key Index of the manual, then jumping to the
node indicated by the index.
</p>
<p>Most Calc commands do not have traditional Emacs documentation
strings, since the <kbd>h k</kbd> command is both more convenient and
more instructive.  This means the regular Emacs <kbd>C-h k</kbd>
(<code>describe-key</code>) command will not be useful for Calc keystrokes.
</p>
<a name="index-h-c"></a>
<a name="index-calc_002ddescribe_002dkey_002dbriefly"></a>
<p>The <kbd>h c</kbd> (<code>calc-describe-key-briefly</code>) command reads a
key sequence and displays a brief one-line description of it at
the bottom of the screen.  It looks for the key sequence in the
Summary node of the Calc manual; if it doesn&rsquo;t find the sequence
there, it acts just like its regular Emacs counterpart <kbd>C-h c</kbd>
(<code>describe-key-briefly</code>).  For example, <kbd>h c H a S</kbd>
gives the description:
</p>
<div class="smallexample">
<pre class="smallexample">H a S runs calc-solve-for:  a `H a S' v  =&gt; fsolve(a,v)  (?=notes)
</pre></div>

<p>which means the command <kbd>H a S</kbd> or <kbd>H M-x calc-solve-for</kbd>
takes a value &lsquo;<samp>a</samp>&rsquo; from the stack, prompts for a value &lsquo;<samp>v</samp>&rsquo;,
then applies the algebraic function <code>fsolve</code> to these values.
The &lsquo;<samp>?=notes</samp>&rsquo; message means you can now type <kbd>?</kbd> to see
additional notes from the summary that apply to this command.
</p>
<a name="index-h-f"></a>
<a name="index-calc_002ddescribe_002dfunction"></a>
<p>The <kbd>h f</kbd> (<code>calc-describe-function</code>) command looks up an
algebraic function or a command name in the Calc manual.  Enter an
algebraic function name to look up that function in the Function
Index or enter a command name beginning with &lsquo;<samp>calc-</samp>&rsquo; to look it
up in the Command Index.  This command will also look up operator
symbols that can appear in algebraic formulas, like &lsquo;<samp>%</samp>&rsquo; and
&lsquo;<samp>=&gt;</samp>&rsquo;.
</p>
<a name="index-h-v"></a>
<a name="index-calc_002ddescribe_002dvariable"></a>
<p>The <kbd>h v</kbd> (<code>calc-describe-variable</code>) command looks up a
variable in the Calc manual.  Enter a variable name like <code>pi</code> or
<code>PlotRejects</code>.
</p>
<a name="index-h-b"></a>
<a name="index-describe_002dbindings"></a>
<p>The <kbd>h b</kbd> (<code>calc-describe-bindings</code>) command is just like
<kbd>C-h b</kbd>, except that only local (Calc-related) key bindings are
listed.
</p>
<a name="index-h-n"></a>
<p>The <kbd>h n</kbd> or <kbd>h C-n</kbd> (<code>calc-view-news</code>) command displays
the &ldquo;news&rdquo; or change history of Emacs, and jumps to the most recent
portion concerning Calc (if present).  For older history, see the file
<samp>etc/CALC-NEWS</samp> in the Emacs distribution.
</p>
<a name="index-h-C_002dc"></a>
<a name="index-h-C_002dd"></a>
<a name="index-h-C_002dw"></a>
<p>The <kbd>h C-c</kbd>, <kbd>h C-d</kbd>, and <kbd>h C-w</kbd> keys display copying,
distribution, and warranty information about Calc.  These work by
pulling up the appropriate parts of the &ldquo;Copying&rdquo; or &ldquo;Reporting
Bugs&rdquo; sections of the manual.
</p>
<hr>
<a name="Stack-Basics"></a>
<div class="header">
<p>
Next: <a href="#Numeric-Entry" accesskey="n" rel="next">Numeric Entry</a>, Previous: <a href="#Help-Commands" accesskey="p" rel="prev">Help Commands</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Stack-Basics-1"></a>
<h3 class="section">3.3 Stack Basics</h3>

<p><a name="index-Stack-basics"></a>
Calc uses RPN notation.  If you are not familiar with RPN, see <a href="#RPN-Tutorial">RPN Tutorial</a>.
</p>
<p>To add the numbers 1 and 2 in Calc you would type the keys:
<kbd>1 <span class="key">RET</span> 2 +</kbd>.
(<tt class="key">RET</tt> corresponds to the <tt class="key">ENTER</tt> key on most calculators.)
The first three keystrokes &ldquo;push&rdquo; the numbers 1 and 2 onto the stack.  The
<kbd>+</kbd> key always &ldquo;pops&rdquo; the top two numbers from the stack, adds them,
and pushes the result (3) back onto the stack.  This number is ready for
further calculations:  <kbd>5 -</kbd> pushes 5 onto the stack, then pops the
3 and 5, subtracts them, and pushes the result (<i>-2</i>).
</p>
<p>Note that the &ldquo;top&rdquo; of the stack actually appears at the <em>bottom</em>
of the buffer.  A line containing a single &lsquo;<samp>.</samp>&rsquo; character signifies
the end of the buffer; Calculator commands operate on the number(s)
directly above this line.  The <kbd>d t</kbd> (<code>calc-truncate-stack</code>)
command allows you to move the &lsquo;<samp>.</samp>&rsquo; marker up and down in the stack;
see <a href="#Truncating-the-Stack">Truncating the Stack</a>.
</p>
<a name="index-d-l"></a>
<a name="index-calc_002dline_002dnumbering"></a>
<p>Stack elements are numbered consecutively, with number 1 being the top of
the stack.  These line numbers are ordinarily displayed on the lefthand side
of the window.  The <kbd>d l</kbd> (<code>calc-line-numbering</code>) command controls
whether these numbers appear.  (Line numbers may be turned off since they
slow the Calculator down a bit and also clutter the display.)
</p>
<a name="index-o"></a>
<a name="index-calc_002drealign"></a>
<p>The unshifted letter <kbd>o</kbd> (<code>calc-realign</code>) command repositions
the cursor to its top-of-stack &ldquo;home&rdquo; position.  It also undoes any
horizontal scrolling in the window.  If you give it a numeric prefix
argument, it instead moves the cursor to the specified stack element.
</p>
<p>The <tt class="key">RET</tt> (or equivalent <tt class="key">SPC</tt>) key is only required to separate
two consecutive numbers.
(After all, if you typed <kbd>1 2</kbd> by themselves the Calculator
would enter the number 12.)  If you press <tt class="key">RET</tt> or <tt class="key">SPC</tt> <em>not</em>
right after typing a number, the key duplicates the number on the top of
the stack.  <kbd><span class="key">RET</span> *</kbd> is thus a handy way to square a number.
</p>
<p>The <tt class="key">DEL</tt> key pops and throws away the top number on the stack.
The <tt class="key">TAB</tt> key swaps the top two objects on the stack.
See <a href="#Stack-and-Trail">Stack and Trail</a>, for descriptions of these and other stack-related
commands.
</p>
<hr>
<a name="Numeric-Entry"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Entry" accesskey="n" rel="next">Algebraic Entry</a>, Previous: <a href="#Stack-Basics" accesskey="p" rel="prev">Stack Basics</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Numeric-Entry-1"></a>
<h3 class="section">3.4 Numeric Entry</h3>

<p><a name="index-0_002d9"></a>
<a name="index-_002e"></a>
<a name="index-e-1"></a>
<a name="index-Numeric-entry"></a>
<a name="index-Entering-numbers"></a>
Pressing a digit or other numeric key begins numeric entry using the
minibuffer.  The number is pushed on the stack when you press the <tt class="key">RET</tt>
or <tt class="key">SPC</tt> keys.  If you press any other non-numeric key, the number is
pushed onto the stack and the appropriate operation is performed.  If
you press a numeric key which is not valid, the key is ignored.
</p>
<a name="index-Minus-signs"></a>
<a name="index-Negative-numbers_002c-entering"></a>
<a name="index-_005f"></a>
<p>There are three different concepts corresponding to the word &ldquo;minus,&rdquo;
typified by &lsquo;<samp>a-b</samp>&rsquo; (subtraction), &lsquo;<samp>-x</samp>&rsquo;
(change-sign), and &lsquo;<samp>-5</samp>&rsquo; (negative number).  Calc uses three
different keys for these operations, respectively:
<kbd>-</kbd>, <kbd>n</kbd>, and <kbd>_</kbd> (the underscore).  The <kbd>-</kbd> key subtracts
the two numbers on the top of the stack.  The <kbd>n</kbd> key changes the sign
of the number on the top of the stack or the number currently being entered.
The <kbd>_</kbd> key begins entry of a negative number or changes the sign of
the number currently being entered.  The following sequences all enter the
number <i>-5</i> onto the stack:  <kbd>0 <span class="key">RET</span> 5 -</kbd>, <kbd>5 n <span class="key">RET</span></kbd>,
<kbd>5 <span class="key">RET</span> n</kbd>, <kbd>_ 5 <span class="key">RET</span></kbd>, <kbd>5 _ <span class="key">RET</span></kbd>.
</p>
<p>Some other keys are active during numeric entry, such as <kbd>#</kbd> for
non-decimal numbers, <kbd>:</kbd> for fractions, and <kbd>@</kbd> for HMS forms.
These notations are described later in this manual with the corresponding
data types.  See <a href="#Data-Types">Data Types</a>.
</p>
<p>During numeric entry, the only editing key available is <tt class="key">DEL</tt>.
</p>
<hr>
<a name="Algebraic-Entry"></a>
<div class="header">
<p>
Next: <a href="#Quick-Calculator" accesskey="n" rel="next">Quick Calculator</a>, Previous: <a href="#Numeric-Entry" accesskey="p" rel="prev">Numeric Entry</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Entry-1"></a>
<h3 class="section">3.5 Algebraic Entry</h3>

<p><a name="index-_0027"></a>
<a name="index-calc_002dalgebraic_002dentry"></a>
<a name="index-Algebraic-notation"></a>
<a name="index-Formulas_002c-entering"></a>
The <kbd>'</kbd> (<code>calc-algebraic-entry</code>) command can be used to enter
calculations in algebraic form.  This is accomplished by typing the
apostrophe key, &rsquo;, followed by the expression in standard format:
</p>
<div class="example">
<pre class="example">' 2+3*4 <span class="key">RET</span>.
</pre></div>

<p>This will compute
&lsquo;<samp>2+(3*4) = 14</samp>&rsquo;
and push it on the stack.  If you wish you can
ignore the RPN aspect of Calc altogether and simply enter algebraic
expressions in this way.  You may want to use <tt class="key">DEL</tt> every so often to
clear previous results off the stack.
</p>
<p>You can press the apostrophe key during normal numeric entry to switch
the half-entered number into Algebraic entry mode.  One reason to do
this would be to fix a typo, as the full Emacs cursor motion and editing
keys are available during algebraic entry but not during numeric entry.
</p>
<p>In the same vein, during either numeric or algebraic entry you can
press <kbd>`</kbd> (grave accent) to switch to <code>calc-edit</code> mode, where
you complete your half-finished entry in a separate buffer.
See <a href="#Editing-Stack-Entries">Editing Stack Entries</a>.
</p>
<a name="index-m-a"></a>
<a name="index-calc_002dalgebraic_002dmode"></a>
<a name="index-Algebraic-Mode"></a>
<p>If you prefer algebraic entry, you can use the command <kbd>m a</kbd>
(<code>calc-algebraic-mode</code>) to set Algebraic mode.  In this mode,
digits and other keys that would normally start numeric entry instead
start full algebraic entry; as long as your formula begins with a digit
you can omit the apostrophe.  Open parentheses and square brackets also
begin algebraic entry.  You can still do RPN calculations in this mode,
but you will have to press <tt class="key">RET</tt> to terminate every number:
<kbd>2 <span class="key">RET</span> 3 <span class="key">RET</span> * 4 <span class="key">RET</span> +</kbd> would accomplish the same
thing as <kbd>2*3+4 <span class="key">RET</span></kbd>.
</p>
<a name="index-Incomplete-Algebraic-Mode"></a>
<p>If you give a numeric prefix argument like <kbd>C-u</kbd> to the <kbd>m a</kbd>
command, it enables Incomplete Algebraic mode; this is like regular
Algebraic mode except that it applies to the <kbd>(</kbd> and <kbd>[</kbd> keys
only.  Numeric keys still begin a numeric entry in this mode.
</p>
<a name="index-m-t"></a>
<a name="index-calc_002dtotal_002dalgebraic_002dmode"></a>
<a name="index-Total-Algebraic-Mode"></a>
<p>The <kbd>m t</kbd> (<code>calc-total-algebraic-mode</code>) gives you an even
stronger algebraic-entry mode, in which <em>all</em> regular letter and
punctuation keys begin algebraic entry.  Use this if you prefer typing
<kbd>sqrt(&nbsp;)</kbd><!-- /@w --> instead of <kbd>Q</kbd>, <kbd>factor(&nbsp;)</kbd><!-- /@w --> instead of
<kbd>a f</kbd>, and so on.  To type regular Calc commands when you are in
Total Algebraic mode, hold down the <tt class="key">META</tt> key.  Thus <kbd>M-q</kbd>
is the command to quit Calc, <kbd>M-p</kbd> sets the precision, and
<kbd>M-m t</kbd> (or <kbd>M-m M-t</kbd>, if you prefer) turns Total Algebraic
mode back off again.  Meta keys also terminate algebraic entry, so
that <kbd>2+3 M-S</kbd> is equivalent to <kbd>2+3 <span class="key">RET</span> M-S</kbd>.  The symbol
&lsquo;<samp>Alg*</samp>&rsquo; will appear in the mode line whenever you are in this mode.
</p>
<p>Pressing <kbd>'</kbd> (the apostrophe) a second time re-enters the previous
algebraic formula.  You can then use the normal Emacs editing keys to
modify this formula to your liking before pressing <tt class="key">RET</tt>.
</p>
<a name="index-_0024"></a>
<a name="index-Formulas_002c-referring-to-stack"></a>
<p>Within a formula entered from the keyboard, the symbol <kbd>$</kbd>
represents the number on the top of the stack.  If an entered formula
contains any <kbd>$</kbd> characters, the Calculator replaces the top of
stack with that formula rather than simply pushing the formula onto the
stack.  Thus, <kbd>' 1+2 <span class="key">RET</span></kbd> pushes 3 on the stack, and <kbd>$*2
<span class="key">RET</span></kbd> replaces it with 6.  Note that the <kbd>$</kbd> key always
initiates algebraic entry; the <kbd>'</kbd> is unnecessary if <kbd>$</kbd> is the
first character in the new formula.
</p>
<p>Higher stack elements can be accessed from an entered formula with the
symbols <kbd>$$</kbd>, <kbd>$$$</kbd>, and so on.  The number of stack elements
removed (to be replaced by the entered values) equals the number of dollar
signs in the longest such symbol in the formula.  For example, &lsquo;<samp>$$+$$$</samp>&rsquo;
adds the second and third stack elements, replacing the top three elements
with the answer.  (All information about the top stack element is thus lost
since no single &lsquo;<samp>$</samp>&rsquo; appears in this formula.)
</p>
<p>A slightly different way to refer to stack elements is with a dollar
sign followed by a number:  &lsquo;<samp>$1</samp>&rsquo;, &lsquo;<samp>$2</samp>&rsquo;, and so on are much
like &lsquo;<samp>$</samp>&rsquo;, &lsquo;<samp>$$</samp>&rsquo;, etc., except that stack entries referred
to numerically are not replaced by the algebraic entry.  That is, while
&lsquo;<samp>$+1</samp>&rsquo; replaces 5 on the stack with 6, &lsquo;<samp>$1+1</samp>&rsquo; leaves the 5
on the stack and pushes an additional 6.
</p>
<p>If a sequence of formulas are entered separated by commas, each formula
is pushed onto the stack in turn.  For example, &lsquo;<samp>1,2,3</samp>&rsquo; pushes
those three numbers onto the stack (leaving the 3 at the top), and
&lsquo;<samp>$+1,$-1</samp>&rsquo; replaces a 5 on the stack with 4 followed by 6.  Also,
&lsquo;<samp>$,$$</samp>&rsquo; exchanges the top two elements of the stack, just like the
<tt class="key">TAB</tt> key.
</p>
<p>You can finish an algebraic entry with <kbd>M-=</kbd> or <kbd>M-<span class="key">RET</span></kbd> instead
of <tt class="key">RET</tt>.  This uses <kbd>=</kbd> to evaluate the variables in each
formula that goes onto the stack.  (Thus <kbd>' pi <span class="key">RET</span></kbd> pushes
the variable &lsquo;<samp>pi</samp>&rsquo;, but <kbd>' pi M-<span class="key">RET</span></kbd> pushes 3.1415.)
</p>
<p>If you finish your algebraic entry by pressing <tt class="key">LFD</tt> (or <kbd>C-j</kbd>)
instead of <tt class="key">RET</tt>, Calc disables simplification
(as if by <kbd>m O</kbd>; see <a href="#Simplification-Modes">Simplification Modes</a>) while the entry
is being pushed on the stack.  Thus <kbd>' 1+2 <span class="key">RET</span></kbd> pushes 3
on the stack, but <kbd>' 1+2 <span class="key">LFD</span></kbd> pushes the formula &lsquo;<samp>1+2</samp>&rsquo;;
you might then press <kbd>=</kbd> when it is time to evaluate this formula.
</p>
<hr>
<a name="Quick-Calculator"></a>
<div class="header">
<p>
Next: <a href="#Prefix-Arguments" accesskey="n" rel="next">Prefix Arguments</a>, Previous: <a href="#Algebraic-Entry" accesskey="p" rel="prev">Algebraic Entry</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="g_t_0060_0060Quick-Calculator_0027_0027-Mode"></a>
<h3 class="section">3.6 &ldquo;Quick Calculator&rdquo; Mode</h3>

<p><a name="index-C_002dx-_002a-q"></a>
<a name="index-quick_002dcalc"></a>
<a name="index-Quick-Calculator"></a>
There is another way to invoke the Calculator if all you need to do
is make one or two quick calculations.  Type <kbd>C-x * q</kbd> (or
<kbd>M-x quick-calc</kbd>), then type any formula as an algebraic entry.
The Calculator will compute the result and display it in the echo
area, without ever actually putting up a Calc window.
</p>
<p>You can use the <kbd>$</kbd> character in a Quick Calculator formula to
refer to the previous Quick Calculator result.  Older results are
not retained; the Quick Calculator has no effect on the full
Calculator&rsquo;s stack or trail.  If you compute a result and then
forget what it was, just run <code>C-x * q</code> again and enter
&lsquo;<samp>$</samp>&rsquo; as the formula.
</p>
<p>If this is the first time you have used the Calculator in this Emacs
session, the <kbd>C-x * q</kbd> command will create the <samp>*Calculator*</samp>
buffer and perform all the usual initializations; it simply will
refrain from putting that buffer up in a new window.  The Quick
Calculator refers to the <samp>*Calculator*</samp> buffer for all mode
settings.  Thus, for example, to set the precision that the Quick
Calculator uses, simply run the full Calculator momentarily and use
the regular <kbd>p</kbd> command.
</p>
<p>If you use <code>C-x * q</code> from inside the Calculator buffer, the
effect is the same as pressing the apostrophe key (algebraic entry).
</p>
<p>The result of a Quick calculation is placed in the Emacs &ldquo;kill ring&rdquo;
as well as being displayed.  A subsequent <kbd>C-y</kbd> command will
yank the result into the editing buffer.  You can also use this
to yank the result into the next <kbd>C-x * q</kbd> input line as a more
explicit alternative to <kbd>$</kbd> notation, or to yank the result
into the Calculator stack after typing <kbd>C-x * c</kbd>.
</p>
<p>If you give a prefix argument to <kbd>C-x * q</kbd> or finish your formula
by typing <tt class="key">LFD</tt> (or <kbd>C-j</kbd>) instead of <tt class="key">RET</tt>, the result is
inserted immediately into the current buffer rather than going into
the kill ring.
</p>
<p>Quick Calculator results are actually evaluated as if by the <kbd>=</kbd>
key (which replaces variable names by their stored values, if any).
If the formula you enter is an assignment to a variable using the
&lsquo;<samp>:=</samp>&rsquo; operator, say, &lsquo;<samp>foo := 2 + 3</samp>&rsquo; or &lsquo;<samp>foo := foo + 1</samp>&rsquo;,
then the result of the evaluation is stored in that Calc variable.
See <a href="#Store-and-Recall">Store and Recall</a>.
</p>
<p>If the result is an integer and the current display radix is decimal,
the number will also be displayed in hex, octal and binary formats.  If
the integer is in the range from 1 to 126, it will also be displayed as
an ASCII character.
</p>
<p>For example, the quoted character &lsquo;<samp>&quot;x&quot;</samp>&rsquo; produces the vector
result &lsquo;<samp>[120]</samp>&rsquo; (because 120 is the ASCII code of the lower-case
&ldquo;x&rdquo;; see <a href="#Strings">Strings</a>).  Since this is a vector, not an integer, it
is displayed only according to the current mode settings.  But
running Quick Calc again and entering &lsquo;<samp>120</samp>&rsquo; will produce the
result &lsquo;<samp>120 (16#78, 8#170, x)</samp>&rsquo; which shows the number in its
decimal, hexadecimal, octal, and ASCII forms.
</p>
<p>Please note that the Quick Calculator is not any faster at loading
or computing the answer than the full Calculator; the name &ldquo;quick&rdquo;
merely refers to the fact that it&rsquo;s much less hassle to use for
small calculations.
</p>
<hr>
<a name="Prefix-Arguments"></a>
<div class="header">
<p>
Next: <a href="#Undo" accesskey="n" rel="next">Undo</a>, Previous: <a href="#Quick-Calculator" accesskey="p" rel="prev">Quick Calculator</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Numeric-Prefix-Arguments"></a>
<h3 class="section">3.7 Numeric Prefix Arguments</h3>

<p>Many Calculator commands use numeric prefix arguments.  Some, such as
<kbd>d s</kbd> (<code>calc-sci-notation</code>), set a parameter to the value of
the prefix argument or use a default if you don&rsquo;t use a prefix.
Others (like <kbd>d f</kbd> (<code>calc-fix-notation</code>)) require an argument
and prompt for a number if you don&rsquo;t give one as a prefix.
</p>
<p>As a rule, stack-manipulation commands accept a numeric prefix argument
which is interpreted as an index into the stack.  A positive argument
operates on the top <var>n</var> stack entries; a negative argument operates
on the <var>n</var>th stack entry in isolation; and a zero argument operates
on the entire stack.
</p>
<p>Most commands that perform computations (such as the arithmetic and
scientific functions) accept a numeric prefix argument that allows the
operation to be applied across many stack elements.  For unary operations
(that is, functions of one argument like absolute value or complex
conjugate), a positive prefix argument applies that function to the top
<var>n</var> stack entries simultaneously, and a negative argument applies it
to the <var>n</var>th stack entry only.  For binary operations (functions of
two arguments like addition, GCD, and vector concatenation), a positive
prefix argument &ldquo;reduces&rdquo; the function across the top <var>n</var>
stack elements (for example, <kbd>C-u 5 +</kbd> sums the top 5 stack entries;
see <a href="#Reducing-and-Mapping">Reducing and Mapping</a>), and a negative argument maps the next-to-top
<var>n</var> stack elements with the top stack element as a second argument
(for example, <kbd>7 c-u -5 +</kbd> adds 7 to the top 5 stack elements).
This feature is not available for operations which use the numeric prefix
argument for some other purpose.
</p>
<p>Numeric prefixes are specified the same way as always in Emacs:  Press
a sequence of <tt class="key">META</tt>-digits, or press <tt class="key">ESC</tt> followed by digits,
or press <kbd>C-u</kbd> followed by digits.  Some commands treat plain
<kbd>C-u</kbd> (without any actual digits) specially.
</p>
<a name="index-_007e"></a>
<a name="index-calc_002dnum_002dprefix"></a>
<p>You can type <kbd>~</kbd> (<code>calc-num-prefix</code>) to pop an integer from the
top of the stack and enter it as the numeric prefix for the next command.
For example, <kbd>C-u 16 p</kbd> sets the precision to 16 digits; an alternate
(silly) way to do this would be <kbd>2 <span class="key">RET</span> 4 ^ ~ p</kbd>, i.e., compute 2
to the fourth power and set the precision to that value.
</p>
<p>Conversely, if you have typed a numeric prefix argument the <kbd>~</kbd> key
pushes it onto the stack in the form of an integer.
</p>
<hr>
<a name="Undo"></a>
<div class="header">
<p>
Next: <a href="#Error-Messages" accesskey="n" rel="next">Error Messages</a>, Previous: <a href="#Prefix-Arguments" accesskey="p" rel="prev">Prefix Arguments</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Undoing-Mistakes"></a>
<h3 class="section">3.8 Undoing Mistakes</h3>

<p><a name="index-U"></a>
<a name="index-C_002d_005f"></a>
<a name="index-calc_002dundo"></a>
<a name="index-Mistakes_002c-undoing"></a>
<a name="index-Undoing-mistakes"></a>
<a name="index-Errors_002c-undoing"></a>
The shift-<kbd>U</kbd> key (<code>calc-undo</code>) undoes the most recent operation.
If that operation added or dropped objects from the stack, those objects
are removed or restored.  If it was a &ldquo;store&rdquo; operation, you are
queried whether or not to restore the variable to its original value.
The <kbd>U</kbd> key may be pressed any number of times to undo successively
farther back in time; with a numeric prefix argument it undoes a
specified number of operations.  When the Calculator is quit, as with
the <kbd>q</kbd> (<code>calc-quit</code>) command, the undo history will be
truncated to the length of the customizable variable
<code>calc-undo-length</code> (see <a href="#Customizing-Calc">Customizing Calc</a>), which by default
is &lsquo;<samp>100</samp>&rsquo;. (Recall that <kbd>C-x * c</kbd> is synonymous with
<code>calc-quit</code> while inside the Calculator; this also truncates the
undo history.)
</p>
<p>Currently the mode-setting commands (like <code>calc-precision</code>) are not
undoable.  You can undo past a point where you changed a mode, but you
will need to reset the mode yourself.
</p>
<a name="index-D"></a>
<a name="index-calc_002dredo"></a>
<a name="index-Redoing-after-an-Undo"></a>
<p>The shift-<kbd>D</kbd> key (<code>calc-redo</code>) redoes an operation that was
mistakenly undone.  Pressing <kbd>U</kbd> with a negative prefix argument is
equivalent to executing <code>calc-redo</code>.  You can redo any number of
times, up to the number of recent consecutive undo commands.  Redo
information is cleared whenever you give any command that adds new undo
information, i.e., if you undo, then enter a number on the stack or make
any other change, then it will be too late to redo.
</p>
<a name="index-M_002dRET"></a>
<a name="index-calc_002dlast_002dargs"></a>
<a name="index-Last_002darguments-feature"></a>
<a name="index-Arguments_002c-restoring"></a>
<p>The <kbd>M-<span class="key">RET</span></kbd> key (<code>calc-last-args</code>) is like undo in that
it restores the arguments of the most recent command onto the stack;
however, it does not remove the result of that command.  Given a numeric
prefix argument, this command applies to the &lsquo;<samp>n</samp>&rsquo;th most recent
command which removed items from the stack; it pushes those items back
onto the stack.
</p>
<p>The <kbd>K</kbd> (<code>calc-keep-args</code>) command provides a related function
to <kbd>M-<span class="key">RET</span></kbd>.  See <a href="#Stack-and-Trail">Stack and Trail</a>.
</p>
<p>It is also possible to recall previous results or inputs using the trail.
See <a href="#Trail-Commands">Trail Commands</a>.
</p>
<p>The standard Emacs <kbd>C-_</kbd> undo key is recognized as a synonym for <kbd>U</kbd>.
</p>
<hr>
<a name="Error-Messages"></a>
<div class="header">
<p>
Next: <a href="#Multiple-Calculators" accesskey="n" rel="next">Multiple Calculators</a>, Previous: <a href="#Undo" accesskey="p" rel="prev">Undo</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Error-Messages-1"></a>
<h3 class="section">3.9 Error Messages</h3>

<p><a name="index-w"></a>
<a name="index-calc_002dwhy"></a>
<a name="index-Errors_002c-messages"></a>
<a name="index-Why-did-an-error-occur_003f"></a>
Many situations that would produce an error message in other calculators
simply create unsimplified formulas in the Emacs Calculator.  For example,
<kbd>1 <span class="key">RET</span> 0 /</kbd> pushes the formula &lsquo;<samp>1 / 0</samp>&rsquo;; <kbd>0&nbsp;L</kbd><!-- /@w --> pushes
the formula &lsquo;<samp>ln(0)</samp>&rsquo;.  Floating-point overflow and underflow are also
reasons for this to happen.
</p>
<p>When a function call must be left in symbolic form, Calc usually
produces a message explaining why.  Messages that are probably
surprising or indicative of user errors are displayed automatically.
Other messages are simply kept in Calc&rsquo;s memory and are displayed only
if you type <kbd>w</kbd> (<code>calc-why</code>).  You can also press <kbd>w</kbd> if
the same computation results in several messages.  (The first message
will end with &lsquo;<samp>[w=more]</samp>&rsquo; in this case.)
</p>
<a name="index-d-w"></a>
<a name="index-calc_002dauto_002dwhy"></a>
<p>The <kbd>d w</kbd> (<code>calc-auto-why</code>) command controls when error messages
are displayed automatically.  (Calc effectively presses <kbd>w</kbd> for you
after your computation finishes.)  By default, this occurs only for
&ldquo;important&rdquo; messages.  The other possible modes are to report
<em>all</em> messages automatically, or to report none automatically (so
that you must always press <kbd>w</kbd> yourself to see the messages).
</p>
<hr>
<a name="Multiple-Calculators"></a>
<div class="header">
<p>
Next: <a href="#Troubleshooting-Commands" accesskey="n" rel="next">Troubleshooting Commands</a>, Previous: <a href="#Error-Messages" accesskey="p" rel="prev">Error Messages</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Multiple-Calculators-1"></a>
<h3 class="section">3.10 Multiple Calculators</h3>

<p><a name="index-another_002dcalc"></a>
It is possible to have any number of Calc mode buffers at once.
Usually this is done by executing <kbd>M-x another-calc</kbd>, which
is similar to <kbd>C-x * c</kbd> except that if a <samp>*Calculator*</samp>
buffer already exists, a new, independent one with a name of the
form <samp>*Calculator*&lt;<var>n</var>&gt;</samp> is created.  You can also use the
command <code>calc-mode</code> to put any buffer into Calculator mode, but
this would ordinarily never be done.
</p>
<p>The <kbd>q</kbd> (<code>calc-quit</code>) command does not destroy a Calculator buffer;
it only closes its window.  Use <kbd>M-x kill-buffer</kbd> to destroy a
Calculator buffer.
</p>
<p>Each Calculator buffer keeps its own stack, undo list, and mode settings
such as precision, angular mode, and display formats.  In Emacs terms,
variables such as <code>calc-stack</code> are buffer-local variables.  The
global default values of these variables are used only when a new
Calculator buffer is created.  The <code>calc-quit</code> command saves
the stack and mode settings of the buffer being quit as the new defaults.
</p>
<p>There is only one trail buffer, <samp>*Calc Trail*</samp>, used by all
Calculator buffers.
</p>
<hr>
<a name="Troubleshooting-Commands"></a>
<div class="header">
<p>
Previous: <a href="#Multiple-Calculators" accesskey="p" rel="prev">Multiple Calculators</a>, Up: <a href="#Introduction" accesskey="u" rel="up">Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Troubleshooting-Commands-1"></a>
<h3 class="section">3.11 Troubleshooting Commands</h3>

<p>This section describes commands you can use in case a computation
incorrectly fails or gives the wrong answer.
</p>
<p>See <a href="#Reporting-Bugs">Reporting Bugs</a>, if you find a problem that appears to be due
to a bug or deficiency in Calc.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Autoloading-Problems" accesskey="1">Autoloading Problems</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Recursion-Depth" accesskey="2">Recursion Depth</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Caches" accesskey="3">Caches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-Calc" accesskey="4">Debugging Calc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Autoloading-Problems"></a>
<div class="header">
<p>
Next: <a href="#Recursion-Depth" accesskey="n" rel="next">Recursion Depth</a>, Previous: <a href="#Troubleshooting-Commands" accesskey="p" rel="prev">Troubleshooting Commands</a>, Up: <a href="#Troubleshooting-Commands" accesskey="u" rel="up">Troubleshooting Commands</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Autoloading-Problems-1"></a>
<h4 class="subsection">3.11.1 Autoloading Problems</h4>

<p>The Calc program is split into many component files; components are
loaded automatically as you use various commands that require them.
Occasionally Calc may lose track of when a certain component is
necessary; typically this means you will type a command and it won&rsquo;t
work because some function you&rsquo;ve never heard of was undefined.
</p>
<a name="index-C_002dx-_002a-L"></a>
<a name="index-calc_002dload_002deverything"></a>
<p>If this happens, the easiest workaround is to type <kbd>C-x * L</kbd>
(<code>calc-load-everything</code>) to force all the parts of Calc to be
loaded right away.  This will cause Emacs to take up a lot more
memory than it would otherwise, but it&rsquo;s guaranteed to fix the problem.
</p>
<hr>
<a name="Recursion-Depth"></a>
<div class="header">
<p>
Next: <a href="#Caches" accesskey="n" rel="next">Caches</a>, Previous: <a href="#Autoloading-Problems" accesskey="p" rel="prev">Autoloading Problems</a>, Up: <a href="#Troubleshooting-Commands" accesskey="u" rel="up">Troubleshooting Commands</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Recursion-Depth-1"></a>
<h4 class="subsection">3.11.2 Recursion Depth</h4>

<p><a name="index-M"></a>
<a name="index-I-M"></a>
<a name="index-calc_002dmore_002drecursion_002ddepth"></a>
<a name="index-calc_002dless_002drecursion_002ddepth"></a>
<a name="index-Recursion-depth"></a>
<a name="index-_0060_0060Computation-got-stuck_0027_0027-message"></a>
<a name="index-max_002dlisp_002deval_002ddepth"></a>
<a name="index-max_002dspecpdl_002dsize"></a>
Calc uses recursion in many of its calculations.  Emacs Lisp keeps a
variable <code>max-lisp-eval-depth</code> which limits the amount of recursion
possible in an attempt to recover from program bugs.  If a calculation
ever halts incorrectly with the message &ldquo;Computation got stuck or
ran too long,&rdquo; use the <kbd>M</kbd> command (<code>calc-more-recursion-depth</code>)
to increase this limit.  (Of course, this will not help if the
calculation really did get stuck due to some problem inside Calc.)
</p>
<p>The limit is always increased (multiplied) by a factor of two.  There
is also an <kbd>I M</kbd> (<code>calc-less-recursion-depth</code>) command which
decreases this limit by a factor of two, down to a minimum value of 200.
The default value is 1000.
</p>
<p>These commands also double or halve <code>max-specpdl-size</code>, another
internal Lisp recursion limit.  The minimum value for this limit is 600.
</p>
<hr>
<a name="Caches"></a>
<div class="header">
<p>
Next: <a href="#Debugging-Calc" accesskey="n" rel="next">Debugging Calc</a>, Previous: <a href="#Recursion-Depth" accesskey="p" rel="prev">Recursion Depth</a>, Up: <a href="#Troubleshooting-Commands" accesskey="u" rel="up">Troubleshooting Commands</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Caches-1"></a>
<h4 class="subsection">3.11.3 Caches</h4>

<p><a name="index-Caches"></a>
<a name="index-Flushing-caches"></a>
Calc saves certain values after they have been computed once.  For
example, the <kbd>P</kbd> (<code>calc-pi</code>) command initially &ldquo;knows&rdquo; the
constant &lsquo;<samp>pi</samp>&rsquo; to about 20 decimal places; if the current precision
is greater than this, it will recompute &lsquo;<samp>pi</samp>&rsquo; using a series
approximation.  This value will not need to be recomputed ever again
unless you raise the precision still further.  Many operations such as
logarithms and sines make use of similarly cached values such as
&lsquo;<samp>pi/4</samp>&rsquo; and
&lsquo;<samp>ln(2)</samp>&rsquo;.
The visible effect of caching is that
high-precision computations may seem to do extra work the first time.
Other things cached include powers of two (for the binary arithmetic
functions), matrix inverses and determinants, symbolic integrals, and
data points computed by the graphing commands.
</p>
<a name="index-calc_002dflush_002dcaches"></a>
<p>If you suspect a Calculator cache has become corrupt, you can use the
<code>calc-flush-caches</code> command to reset all caches to the empty state.
(This should only be necessary in the event of bugs in the Calculator.)
The <kbd>C-x * 0</kbd> (with the zero key) command also resets caches along
with all other aspects of the Calculator&rsquo;s state.
</p>
<hr>
<a name="Debugging-Calc"></a>
<div class="header">
<p>
Previous: <a href="#Caches" accesskey="p" rel="prev">Caches</a>, Up: <a href="#Troubleshooting-Commands" accesskey="u" rel="up">Troubleshooting Commands</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Debugging-Calc-1"></a>
<h4 class="subsection">3.11.4 Debugging Calc</h4>

<p>A few commands exist to help in the debugging of Calc commands.
See <a href="#Programming">Programming</a>, to see the various ways that you can write
your own Calc commands.
</p>
<a name="index-Z-T"></a>
<a name="index-calc_002dtiming"></a>
<p>The <kbd>Z T</kbd> (<code>calc-timing</code>) command turns on and off a mode
in which the timing of slow commands is reported in the Trail.
Any Calc command that takes two seconds or longer writes a line
to the Trail showing how many seconds it took.  This value is
accurate only to within one second.
</p>
<p>All steps of executing a command are included; in particular, time
taken to format the result for display in the stack and trail is
counted.  Some prompts also count time taken waiting for them to
be answered, while others do not; this depends on the exact
implementation of the command.  For best results, if you are timing
a sequence that includes prompts or multiple commands, define a
keyboard macro to run the whole sequence at once.  Calc&rsquo;s <kbd>X</kbd>
command (see <a href="#Keyboard-Macros">Keyboard Macros</a>) will then report the time taken
to execute the whole macro.
</p>
<p>Another advantage of the <kbd>X</kbd> command is that while it is
executing, the stack and trail are not updated from step to step.
So if you expect the output of your test sequence to leave a result
that may take a long time to format and you don&rsquo;t wish to count
this formatting time, end your sequence with a <tt class="key">DEL</tt> keystroke
to clear the result from the stack.  When you run the sequence with
<kbd>X</kbd>, Calc will never bother to format the large result.
</p>
<p>Another thing <kbd>Z T</kbd> does is to increase the Emacs variable
<code>gc-cons-threshold</code> to a much higher value (two million; the
usual default in Calc is 250,000) for the duration of each command.
This generally prevents garbage collection during the timing of
the command, though it may cause your Emacs process to grow
abnormally large.  (Garbage collection time is a major unpredictable
factor in the timing of Emacs operations.)
</p>
<p>Another command that is useful when debugging your own Lisp
extensions to Calc is <kbd>M-x calc-pass-errors</kbd>, which disables
the error handler that changes the &ldquo;<code>max-lisp-eval-depth</code>
exceeded&rdquo; message to the much more friendly &ldquo;Computation got
stuck or ran too long.&rdquo;  This handler interferes with the Emacs
Lisp debugger&rsquo;s <code>debug-on-error</code> mode.  Errors are reported
in the handler itself rather than at the true location of the
error.  After you have executed <code>calc-pass-errors</code>, Lisp
errors will be reported correctly but the user-friendly message
will be lost.
</p>
<hr>
<a name="Data-Types"></a>
<div class="header">
<p>
Next: <a href="#Stack-and-Trail" accesskey="n" rel="next">Stack and Trail</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Data-Types-1"></a>
<h2 class="chapter">4 Data Types</h2>

<p>This chapter discusses the various types of objects that can be placed
on the Calculator stack, how they are displayed, and how they are
entered.  (See <a href="#Data-Type-Formats">Data Type Formats</a>, for information on how these data
types are represented as underlying Lisp objects.)
</p>
<p>Integers, fractions, and floats are various ways of describing real
numbers.  HMS forms also for many purposes act as real numbers.  These
types can be combined to form complex numbers, modulo forms, error forms,
or interval forms.  (But these last four types cannot be combined
arbitrarily: error forms may not contain modulo forms, for example.)
Finally, all these types of numbers may be combined into vectors,
matrices, or algebraic formulas.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Integers" accesskey="1">Integers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The most basic data type.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fractions" accesskey="2">Fractions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">This and above are called <em>rationals</em>.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Floats" accesskey="3">Floats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">This and above are called <em>reals</em>.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Complex-Numbers" accesskey="4">Complex Numbers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">This and above are called <em>numbers</em>.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Infinities" accesskey="5">Infinities</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vectors-and-Matrices" accesskey="6">Vectors and Matrices</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Strings" accesskey="7">Strings</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#HMS-Forms" accesskey="8">HMS Forms</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Date-Forms" accesskey="9">Date Forms</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modulo-Forms">Modulo Forms</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Error-Forms">Error Forms</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Interval-Forms">Interval Forms</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Incomplete-Objects">Incomplete Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Variables">Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Formulas">Formulas</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Integers"></a>
<div class="header">
<p>
Next: <a href="#Fractions" accesskey="n" rel="next">Fractions</a>, Previous: <a href="#Data-Types" accesskey="p" rel="prev">Data Types</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Integers-1"></a>
<h3 class="section">4.1 Integers</h3>

<p><a name="index-Integers"></a>
The Calculator stores integers to arbitrary precision.  Addition,
subtraction, and multiplication of integers always yields an exact
integer result.  (If the result of a division or exponentiation of
integers is not an integer, it is expressed in fractional or
floating-point form according to the current Fraction mode.
See <a href="#Fraction-Mode">Fraction Mode</a>.)
</p>
<p>A decimal integer is represented as an optional sign followed by a
sequence of digits.  Grouping (see <a href="#Grouping-Digits">Grouping Digits</a>) can be used to
insert a comma at every third digit for display purposes, but you
must not type commas during the entry of numbers.
</p>
<a name="index-_0023"></a>
<p>A non-decimal integer is represented as an optional sign, a radix
between 2 and 36, a &lsquo;<samp>#</samp>&rsquo; symbol, and one or more digits.  For radix 11
and above, the letters A through Z (upper- or lower-case) count as
digits and do not terminate numeric entry mode.  See <a href="#Radix-Modes">Radix Modes</a>, for how
to set the default radix for display of integers.  Numbers of any radix
may be entered at any time.  If you press <kbd>#</kbd> at the beginning of a
number, the current display radix is used.
</p>
<hr>
<a name="Fractions"></a>
<div class="header">
<p>
Next: <a href="#Floats" accesskey="n" rel="next">Floats</a>, Previous: <a href="#Integers" accesskey="p" rel="prev">Integers</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fractions-1"></a>
<h3 class="section">4.2 Fractions</h3>

<p><a name="index-Fractions"></a>
A <em>fraction</em> is a ratio of two integers.  Fractions are traditionally
written &ldquo;2/3&rdquo; but Calc uses the notation &lsquo;<samp>2:3</samp>&rsquo;.  (The <kbd>/</kbd> key
performs RPN division; the following two sequences push the number
&lsquo;<samp>2:3</samp>&rsquo; on the stack:  <kbd>2 : 3 <span class="key">RET</span></kbd>, or <kbd>2 <span class="key">RET</span> 3 /</kbd>
assuming Fraction mode has been enabled.)
When the Calculator produces a fractional result it always reduces it to
simplest form, which may in fact be an integer.
</p>
<p>Fractions may also be entered in a three-part form, where &lsquo;<samp>2:3:4</samp>&rsquo;
represents two-and-three-quarters.  See <a href="#Fraction-Formats">Fraction Formats</a>, for fraction
display formats.
</p>
<p>Non-decimal fractions are entered and displayed as
&lsquo;<samp><var>radix</var>#<var>num</var>:<var>denom</var></samp>&rsquo; (or in the analogous three-part
form).  The numerator and denominator always use the same radix.
</p>
<hr>
<a name="Floats"></a>
<div class="header">
<p>
Next: <a href="#Complex-Numbers" accesskey="n" rel="next">Complex Numbers</a>, Previous: <a href="#Fractions" accesskey="p" rel="prev">Fractions</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Floats-1"></a>
<h3 class="section">4.3 Floats</h3>

<p><a name="index-Floating_002dpoint-numbers"></a>
A floating-point number or <em>float</em> is a number stored in scientific
notation.  The number of significant digits in the fractional part is
governed by the current floating precision (see <a href="#Precision">Precision</a>).  The
range of acceptable values is from
&lsquo;<samp>10^-3999999</samp>&rsquo;
(inclusive) to
&lsquo;<samp>10^4000000</samp>&rsquo;
(exclusive), plus the corresponding negative values and zero.
</p>
<p>Calculations that would exceed the allowable range of values (such
as &lsquo;<samp>exp(exp(20))</samp>&rsquo;) are left in symbolic form by Calc.  The
messages &ldquo;floating-point overflow&rdquo; or &ldquo;floating-point underflow&rdquo;
indicate that during the calculation a number would have been produced
that was too large or too close to zero, respectively, to be represented
by Calc.  This does not necessarily mean the final result would have
overflowed, just that an overflow occurred while computing the result.
(In fact, it could report an underflow even though the final result
would have overflowed!)
</p>
<p>If a rational number and a float are mixed in a calculation, the result
will in general be expressed as a float.  Commands that require an integer
value (such as <kbd>k g</kbd> [<code>gcd</code>]) will also accept integer-valued
floats, i.e., floating-point numbers with nothing after the decimal point.
</p>
<p>Floats are identified by the presence of a decimal point and/or an
exponent.  In general a float consists of an optional sign, digits
including an optional decimal point, and an optional exponent consisting
of an &lsquo;<samp>e</samp>&rsquo;, an optional sign, and up to seven exponent digits.
For example, &lsquo;<samp>23.5e-2</samp>&rsquo; is 23.5 times ten to the minus-second power,
or 0.235.
</p>
<p>Floating-point numbers are normally displayed in decimal notation with
all significant figures shown.  Exceedingly large or small numbers are
displayed in scientific notation.  Various other display options are
available.  See <a href="#Float-Formats">Float Formats</a>.
</p>
<a name="index-Accuracy-of-calculations"></a>
<p>Floating-point numbers are stored in decimal, not binary.  The result
of each operation is rounded to the nearest value representable in the
number of significant digits specified by the current precision,
rounding away from zero in the case of a tie.  Thus (in the default
display mode) what you see is exactly what you get.  Some operations such
as square roots and transcendental functions are performed with several
digits of extra precision and then rounded down, in an effort to make the
final result accurate to the full requested precision.  However,
accuracy is not rigorously guaranteed.  If you suspect the validity of a
result, try doing the same calculation in a higher precision.  The
Calculator&rsquo;s arithmetic is not intended to be IEEE-conformant in any
way.
</p>
<p>While floats are always <em>stored</em> in decimal, they can be entered
and displayed in any radix just like integers and fractions.  Since a
float that is entered in a radix other that 10 will be converted to
decimal, the number that Calc stores may not be exactly the number that
was entered, it will be the closest decimal approximation given the
current precision.  The notation &lsquo;<samp><var>radix</var>#<var>ddd</var>.<var>ddd</var></samp>&rsquo;
is a floating-point number whose digits are in the specified radix.
Note that the &lsquo;<samp>.</samp>&rsquo;  is more aptly referred to as a &ldquo;radix point&rdquo;
than as a decimal point in this case.  The number &lsquo;<samp>8#123.4567</samp>&rsquo; is
defined as &lsquo;<samp>8#1234567 * 8^-4</samp>&rsquo;.  If the radix is 14 or less, you can
use &lsquo;<samp>e</samp>&rsquo; notation to write a non-decimal number in scientific
notation.  The exponent is written in decimal, and is considered to be a
power of the radix: &lsquo;<samp>8#1234567e-4</samp>&rsquo;.  If the radix is 15 or above,
the letter &lsquo;<samp>e</samp>&rsquo; is a digit, so scientific notation must be written
out, e.g., &lsquo;<samp>16#123.4567*16^2</samp>&rsquo;.  The first two exercises of the
Modes Tutorial explore some of the properties of non-decimal floats.
</p>
<hr>
<a name="Complex-Numbers"></a>
<div class="header">
<p>
Next: <a href="#Infinities" accesskey="n" rel="next">Infinities</a>, Previous: <a href="#Floats" accesskey="p" rel="prev">Floats</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Complex-Numbers-1"></a>
<h3 class="section">4.4 Complex Numbers</h3>

<p><a name="index-Complex-numbers"></a>
There are two supported formats for complex numbers: rectangular and
polar.  The default format is rectangular, displayed in the form
&lsquo;<samp>(<var>real</var>,<var>imag</var>)</samp>&rsquo; where <var>real</var> is the real part and
<var>imag</var> is the imaginary part, each of which may be any real number.
Rectangular complex numbers can also be displayed in &lsquo;<samp><var>a</var>+<var>b</var>i</samp>&rsquo;
notation; see <a href="#Complex-Formats">Complex Formats</a>.
</p>
<p>Polar complex numbers are displayed in the form
&lsquo;<tt>(</tt><var>r</var><tt>;</tt><var>theta</var><tt>)</tt>&rsquo;
where <var>r</var> is the nonnegative magnitude and
<var>theta</var>
is the argument or phase angle.  The range of
<var>theta</var>
depends on the current angular mode (see <a href="#Angular-Modes">Angular Modes</a>); it is
generally between <i>-180</i> and <i>+180</i> degrees or the equivalent range
in radians.
</p>
<p>Complex numbers are entered in stages using incomplete objects.
See <a href="#Incomplete-Objects">Incomplete Objects</a>.
</p>
<p>Operations on rectangular complex numbers yield rectangular complex
results, and similarly for polar complex numbers.  Where the two types
are mixed, or where new complex numbers arise (as for the square root of
a negative real), the current <em>Polar mode</em> is used to determine the
type.  See <a href="#Polar-Mode">Polar Mode</a>.
</p>
<p>A complex result in which the imaginary part is zero (or the phase angle
is 0 or 180 degrees or &lsquo;<samp>pi</samp>&rsquo; radians) is automatically converted to a real
number.
</p>
<hr>
<a name="Infinities"></a>
<div class="header">
<p>
Next: <a href="#Vectors-and-Matrices" accesskey="n" rel="next">Vectors and Matrices</a>, Previous: <a href="#Complex-Numbers" accesskey="p" rel="prev">Complex Numbers</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Infinities-1"></a>
<h3 class="section">4.5 Infinities</h3>

<p><a name="index-Infinity"></a>
<a name="index-inf-variable"></a>
<a name="index-uinf-variable"></a>
<a name="index-nan-variable"></a>
<a name="index-inf"></a>
<a name="index-uinf"></a>
<a name="index-nan"></a>
The word <code>inf</code> represents the mathematical concept of <em>infinity</em>.
Calc actually has three slightly different infinity-like values:
<code>inf</code>, <code>uinf</code>, and <code>nan</code>.  These are just regular
variable names (see <a href="#Variables">Variables</a>); you should avoid using these
names for your own variables because Calc gives them special
treatment.  Infinities, like all variable names, are normally
entered using algebraic entry.
</p>
<p>Mathematically speaking, it is not rigorously correct to treat
&ldquo;infinity&rdquo; as if it were a number, but mathematicians often do
so informally.  When they say that &lsquo;<samp>1 / inf = 0</samp>&rsquo;, what they
really mean is that &lsquo;<samp>1 / x</samp>&rsquo;, as &lsquo;<samp>x</samp>&rsquo; becomes larger and
larger, becomes arbitrarily close to zero.  So you can imagine
that if &lsquo;<samp>x</samp>&rsquo; got &ldquo;all the way to infinity,&rdquo; then &lsquo;<samp>1 / x</samp>&rsquo;
would go all the way to zero.  Similarly, when they say that
&lsquo;<samp>exp(inf) = inf</samp>&rsquo;, they mean that
&lsquo;<samp>exp(x)</samp>&rsquo;
grows without bound as &lsquo;<samp>x</samp>&rsquo; grows.  The symbol &lsquo;<samp>-inf</samp>&rsquo; likewise
stands for an infinitely negative real value; for example, we say that
&lsquo;<samp>exp(-inf) = 0</samp>&rsquo;.  You can have an infinity pointing in any
direction on the complex plane:  &lsquo;<samp>sqrt(-inf) = i inf</samp>&rsquo;.
</p>
<p>The same concept of limits can be used to define &lsquo;<samp>1 / 0</samp>&rsquo;.  We
really want the value that &lsquo;<samp>1 / x</samp>&rsquo; approaches as &lsquo;<samp>x</samp>&rsquo;
approaches zero.  But if all we have is &lsquo;<samp>1 / 0</samp>&rsquo;, we can&rsquo;t
tell which direction &lsquo;<samp>x</samp>&rsquo; was coming from.  If &lsquo;<samp>x</samp>&rsquo; was
positive and decreasing toward zero, then we should say that
&lsquo;<samp>1 / 0 = inf</samp>&rsquo;.  But if &lsquo;<samp>x</samp>&rsquo; was negative and increasing
toward zero, the answer is &lsquo;<samp>1 / 0 = -inf</samp>&rsquo;.  In fact, &lsquo;<samp>x</samp>&rsquo;
could be an imaginary number, giving the answer &lsquo;<samp>i inf</samp>&rsquo; or
&lsquo;<samp>-i inf</samp>&rsquo;.  Calc uses the special symbol &lsquo;<samp>uinf</samp>&rsquo; to mean
<em>undirected infinity</em>, i.e., a value which is infinitely
large but with an unknown sign (or direction on the complex plane).
</p>
<p>Calc actually has three modes that say how infinities are handled.
Normally, infinities never arise from calculations that didn&rsquo;t
already have them.  Thus, &lsquo;<samp>1 / 0</samp>&rsquo; is treated simply as an
error and left unevaluated.  The <kbd>m i</kbd> (<code>calc-infinite-mode</code>)
command (see <a href="#Infinite-Mode">Infinite Mode</a>) enables a mode in which
&lsquo;<samp>1 / 0</samp>&rsquo; evaluates to <code>uinf</code> instead.  There is also
an alternative type of infinite mode which says to treat zeros
as if they were positive, so that &lsquo;<samp>1 / 0 = inf</samp>&rsquo;.  While this
is less mathematically correct, it may be the answer you want in
some cases.
</p>
<p>Since all infinities are &ldquo;as large&rdquo; as all others, Calc simplifies,
e.g., &lsquo;<samp>5 inf</samp>&rsquo; to &lsquo;<samp>inf</samp>&rsquo;.  Another example is
&lsquo;<samp>5 - inf = -inf</samp>&rsquo;, where the &lsquo;<samp>-inf</samp>&rsquo; is so large that
adding a finite number like five to it does not affect it.
Note that &lsquo;<samp>a - inf</samp>&rsquo; also results in &lsquo;<samp>-inf</samp>&rsquo;; Calc assumes
that variables like <code>a</code> always stand for finite quantities.
Just to show that infinities really are all the same size,
note that &lsquo;<samp>sqrt(inf) = inf^2 = exp(inf) = inf</samp>&rsquo; in Calc&rsquo;s
notation.
</p>
<p>It&rsquo;s not so easy to define certain formulas like &lsquo;<samp>0 * inf</samp>&rsquo; and
&lsquo;<samp>inf / inf</samp>&rsquo;.  Depending on where these zeros and infinities
came from, the answer could be literally anything.  The latter
formula could be the limit of &lsquo;<samp>x / x</samp>&rsquo; (giving a result of one),
or &lsquo;<samp>2 x / x</samp>&rsquo; (giving two), or &lsquo;<samp>x^2 / x</samp>&rsquo; (giving <code>inf</code>),
or &lsquo;<samp>x / x^2</samp>&rsquo; (giving zero).  Calc uses the symbol <code>nan</code>
to represent such an <em>indeterminate</em> value.  (The name &ldquo;nan&rdquo;
comes from analogy with the &ldquo;NAN&rdquo; concept of IEEE standard
arithmetic; it stands for &ldquo;Not A Number.&rdquo;  This is somewhat of a
misnomer, since <code>nan</code> <em>does</em> stand for some number or
infinity, it&rsquo;s just that <em>which</em> number it stands for
cannot be determined.)  In Calc&rsquo;s notation, &lsquo;<samp>0 * inf = nan</samp>&rsquo;
and &lsquo;<samp>inf / inf = nan</samp>&rsquo;.  A few other common indeterminate
expressions are &lsquo;<samp>inf - inf</samp>&rsquo; and &lsquo;<samp>inf ^ 0</samp>&rsquo;.  Also,
&lsquo;<samp>0 / 0 = nan</samp>&rsquo; if you have turned on Infinite mode
(as described above).
</p>
<p>Infinities are especially useful as parts of <em>intervals</em>.
See <a href="#Interval-Forms">Interval Forms</a>.
</p>
<hr>
<a name="Vectors-and-Matrices"></a>
<div class="header">
<p>
Next: <a href="#Strings" accesskey="n" rel="next">Strings</a>, Previous: <a href="#Infinities" accesskey="p" rel="prev">Infinities</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vectors-and-Matrices-1"></a>
<h3 class="section">4.6 Vectors and Matrices</h3>

<p><a name="index-Vectors"></a>
<a name="index-Plain-vectors"></a>
<a name="index-Matrices"></a>
The <em>vector</em> data type is flexible and general.  A vector is simply a
list of zero or more data objects.  When these objects are numbers, the
whole is a vector in the mathematical sense.  When these objects are
themselves vectors of equal (nonzero) length, the whole is a <em>matrix</em>.
A vector which is not a matrix is referred to here as a <em>plain vector</em>.
</p>
<p>A vector is displayed as a list of values separated by commas and enclosed
in square brackets:  &lsquo;<samp>[1, 2, 3]</samp>&rsquo;.  Thus the following is a 2 row by
3 column matrix:  &lsquo;<samp>[[1, 2, 3], [4, 5, 6]]</samp>&rsquo;.  Vectors, like complex
numbers, are entered as incomplete objects.  See <a href="#Incomplete-Objects">Incomplete Objects</a>.
During algebraic entry, vectors are entered all at once in the usual
brackets-and-commas form.  Matrices may be entered algebraically as nested
vectors, or using the shortcut notation &lsquo;<samp>[1,&nbsp;2,&nbsp;3;&nbsp;4,&nbsp;5,&nbsp;6]</samp>&rsquo;<!-- /@w -->,
with rows separated by semicolons.  The commas may usually be omitted
when entering vectors:  &lsquo;<samp>[1 2 3]</samp>&rsquo;.  Curly braces may be used in
place of brackets: &lsquo;<samp>{1, 2, 3}</samp>&rsquo;, but the commas are required in
this case.
</p>
<p>Traditional vector and matrix arithmetic is also supported;
see <a href="#Basic-Arithmetic">Basic Arithmetic</a> and see <a href="#Matrix-Functions">Matrix Functions</a>.
Many other operations are applied to vectors element-wise.  For example,
the complex conjugate of a vector is a vector of the complex conjugates
of its elements.
</p>
<a name="index-vec"></a>
<p>Algebraic functions for building vectors include &lsquo;<samp>vec(a, b, c)</samp>&rsquo;
to build &lsquo;<samp>[a, b, c]</samp>&rsquo;, &lsquo;<samp>cvec(a, n, m)</samp>&rsquo; to build an
<var>n</var>x<var>m</var>
matrix of &lsquo;<samp>a</samp>&rsquo;s, and &lsquo;<samp>index(n)</samp>&rsquo; to build a vector of integers
from 1 to &lsquo;<samp>n</samp>&rsquo;.
</p>
<hr>
<a name="Strings"></a>
<div class="header">
<p>
Next: <a href="#HMS-Forms" accesskey="n" rel="next">HMS Forms</a>, Previous: <a href="#Vectors-and-Matrices" accesskey="p" rel="prev">Vectors and Matrices</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Strings-1"></a>
<h3 class="section">4.7 Strings</h3>

<p><a name="index-_0022"></a>
<a name="index-Strings"></a>
<a name="index-Character-strings"></a>
Character strings are not a special data type in the Calculator.
Rather, a string is represented simply as a vector all of whose
elements are integers in the range 0 to 255 (ASCII codes).  You can
enter a string at any time by pressing the <kbd>&quot;</kbd> key.  Quotation
marks and backslashes are written &lsquo;<samp>\&quot;</samp>&rsquo; and &lsquo;<samp>\\</samp>&rsquo;, respectively,
inside strings.  Other notations introduced by backslashes are:
</p>
<div class="example">
<pre class="example">\a     7          \^@    0
\b     8          \^a-z  1-26
\e     27         \^[    27
\f     12         \^\\   28
\n     10         \^]    29
\r     13         \^^    30
\t     9          \^_    31
                  \^?    127
</pre></div>

<p>Finally, a backslash followed by three octal digits produces any
character from its ASCII code.
</p>
<a name="index-d-_0022"></a>
<a name="index-calc_002ddisplay_002dstrings"></a>
<p>Strings are normally displayed in vector-of-integers form.  The
<kbd>d&nbsp;&quot;</kbd><!-- /@w --> (<code>calc-display-strings</code>) command toggles a mode in
which any vectors of small integers are displayed as quoted strings
instead.
</p>
<p>The backslash notations shown above are also used for displaying
strings.  Characters 128 and above are not translated by Calc; unless
you have an Emacs modified for 8-bit fonts, these will show up in
backslash-octal-digits notation.  For characters below 32, and
for character 127, Calc uses the backslash-letter combination if
there is one, or otherwise uses a &lsquo;<samp>\^</samp>&rsquo; sequence.
</p>
<p>The only Calc feature that uses strings is <em>compositions</em>;
see <a href="#Compositions">Compositions</a>.  Strings also provide a convenient
way to do conversions between ASCII characters and integers.
</p>
<a name="index-string"></a>
<p>There is a <code>string</code> function which provides a different display
format for strings.  Basically, &lsquo;<samp>string(<var>s</var>)</samp>&rsquo;, where <var>s</var>
is a vector of integers in the proper range, is displayed as the
corresponding string of characters with no surrounding quotation
marks or other modifications.  Thus &lsquo;<samp>string(&quot;ABC&quot;)</samp>&rsquo; (or
&lsquo;<samp>string([65 66 67])</samp>&rsquo;) will look like &lsquo;<samp>ABC</samp>&rsquo; on the stack.
This happens regardless of whether <kbd>d&nbsp;&quot;</kbd><!-- /@w --> has been used.  The
only way to turn it off is to use <kbd>d U</kbd> (unformatted language
mode) which will display &lsquo;<samp>string(&quot;ABC&quot;)</samp>&rsquo; instead.
</p>
<p>Control characters are displayed somewhat differently by <code>string</code>.
Characters below 32, and character 127, are shown using &lsquo;<samp>^</samp>&rsquo; notation
(same as shown above, but without the backslash).  The quote and
backslash characters are left alone, as are characters 128 and above.
</p>
<a name="index-bstring"></a>
<p>The <code>bstring</code> function is just like <code>string</code> except that
the resulting string is breakable across multiple lines if it doesn&rsquo;t
fit all on one line.  Potential break points occur at every space
character in the string.
</p>
<hr>
<a name="HMS-Forms"></a>
<div class="header">
<p>
Next: <a href="#Date-Forms" accesskey="n" rel="next">Date Forms</a>, Previous: <a href="#Strings" accesskey="p" rel="prev">Strings</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="HMS-Forms-1"></a>
<h3 class="section">4.8 HMS Forms</h3>

<p><a name="index-Hours_002dminutes_002dseconds-forms"></a>
<a name="index-Degrees_002dminutes_002dseconds-forms"></a>
<em>HMS</em> stands for Hours-Minutes-Seconds; when used as an angular
argument, the interpretation is Degrees-Minutes-Seconds.  All functions
that operate on angles accept HMS forms.  These are interpreted as
degrees regardless of the current angular mode.  It is also possible to
use HMS as the angular mode so that calculated angles are expressed in
degrees, minutes, and seconds.
</p>
<a name="index-_0040"></a>
<a name="index-_0027-_0028HMS-forms_0029"></a>
<a name="index-_0022-_0028HMS-forms_0029"></a>
<a name="index-h-_0028HMS-forms_0029"></a>
<a name="index-o-_0028HMS-forms_0029"></a>
<a name="index-m-_0028HMS-forms_0029"></a>
<a name="index-s-_0028HMS-forms_0029"></a>
<p>The default format for HMS values is
&lsquo;<samp><var>hours</var>@ <var>mins</var>' <var>secs</var>&quot;</samp>&rsquo;.  During entry, the letters
&lsquo;<samp>h</samp>&rsquo; (for &ldquo;hours&rdquo;) or
&lsquo;<samp>o</samp>&rsquo; (approximating the &ldquo;degrees&rdquo; symbol) are accepted as well as
&lsquo;<samp>@</samp>&rsquo;, &lsquo;<samp>m</samp>&rsquo; is accepted in place of &lsquo;<samp>'</samp>&rsquo;, and &lsquo;<samp>s</samp>&rsquo; is
accepted in place of &lsquo;<samp>&quot;</samp>&rsquo;.
The <var>hours</var> value is an integer (or integer-valued float).
The <var>mins</var> value is an integer or integer-valued float between 0 and 59.
The <var>secs</var> value is a real number between 0 (inclusive) and 60
(exclusive).  A positive HMS form is interpreted as <var>hours</var> +
<var>mins</var>/60 + <var>secs</var>/3600.  A negative HMS form is interpreted
as <i>- <var>hours</var></i> <i>-</i> <var>mins</var>/60 <i>-</i> <var>secs</var>/3600.
Display format for HMS forms is quite flexible.  See <a href="#HMS-Formats">HMS Formats</a>.
</p>
<p>HMS forms can be added and subtracted.  When they are added to numbers,
the numbers are interpreted according to the current angular mode.  HMS
forms can also be multiplied and divided by real numbers.  Dividing
two HMS forms produces a real-valued ratio of the two angles.
</p>
<a name="index-calc_002dtime"></a>
<a name="index-Time-of-day"></a>
<p>Just for kicks, <kbd>M-x calc-time</kbd> pushes the current time of day on
the stack as an HMS form.
</p>
<hr>
<a name="Date-Forms"></a>
<div class="header">
<p>
Next: <a href="#Modulo-Forms" accesskey="n" rel="next">Modulo Forms</a>, Previous: <a href="#HMS-Forms" accesskey="p" rel="prev">HMS Forms</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Forms-1"></a>
<h3 class="section">4.9 Date Forms</h3>

<p><a name="index-Date-forms"></a>
A <em>date form</em> represents a date and possibly an associated time.
Simple date arithmetic is supported:  Adding a number to a date
produces a new date shifted by that many days; adding an HMS form to
a date shifts it by that many hours.  Subtracting two date forms
computes the number of days between them (represented as a simple
number).  Many other operations, such as multiplying two date forms,
are nonsensical and are not allowed by Calc.
</p>
<p>Date forms are entered and displayed enclosed in &lsquo;<samp>&lt; &gt;</samp>&rsquo; brackets.
The default format is, e.g., &lsquo;<samp>&lt;Wed Jan 9, 1991&gt;</samp>&rsquo; for dates,
or &lsquo;<samp>&lt;3:32:20pm Wed Jan 9, 1991&gt;</samp>&rsquo; for dates with times.
Input is flexible; date forms can be entered in any of the usual
notations for dates and times.  See <a href="#Date-Formats">Date Formats</a>.
</p>
<p>Date forms are stored internally as numbers, specifically the number
of days since midnight on the morning of December 31 of the year 1 BC.
If the internal number is an integer, the form represents a date only;
if the internal number is a fraction or float, the form represents
a date and time.  For example, &lsquo;<samp>&lt;6:00am Thu Jan 10, 1991&gt;</samp>&rsquo;
is represented by the number 726842.25.  The standard precision of
12 decimal digits is enough to ensure that a (reasonable) date and
time can be stored without roundoff error.
</p>
<p>If the current precision is greater than 12, date forms will keep
additional digits in the seconds position.  For example, if the
precision is 15, the seconds will keep three digits after the
decimal point.  Decreasing the precision below 12 may cause the
time part of a date form to become inaccurate.  This can also happen
if astronomically high years are used, though this will not be an
issue in everyday (or even everymillennium) use.  Note that date
forms without times are stored as exact integers, so roundoff is
never an issue for them.
</p>
<p>You can use the <kbd>v p</kbd> (<code>calc-pack</code>) and <kbd>v u</kbd>
(<code>calc-unpack</code>) commands to get at the numerical representation
of a date form.  See <a href="#Packing-and-Unpacking">Packing and Unpacking</a>.
</p>
<p>Date forms can go arbitrarily far into the future or past.  Negative
year numbers represent years BC.  There is no &ldquo;year 0&rdquo;; the day
before &lsquo;<samp>&lt;Mon Jan 1, +1&gt;</samp>&rsquo; is &lsquo;<samp>&lt;Sun Dec 31, -1&gt;</samp>&rsquo;.  These are
days 1 and 0 respectively in Calc&rsquo;s internal numbering scheme.  The
Gregorian calendar is used for all dates, including dates before the
Gregorian calendar was invented (although that can be configured; see
below).  Thus Calc&rsquo;s use of the day number <i>-10000</i> to
represent August 15, 28 BC should be taken with a grain of salt.
</p>
<a name="index-Julian-calendar"></a>
<a name="index-Gregorian-calendar"></a>
<p>Some historical background:  The Julian calendar was created by
Julius Caesar in the year 46 BC as an attempt to fix the confusion
caused by the irregular Roman calendar that was used before that time.
The Julian calendar introduced an extra day in all years divisible by
four.  After some initial confusion, the calendar was adopted around
the year we call 8 AD.  Some centuries later it became
apparent that the Julian year of 365.25 days was itself not quite
right.  In 1582 Pope Gregory XIII introduced the Gregorian calendar,
which added the new rule that years divisible by 100, but not by 400,
were not to be considered leap years despite being divisible by four.
Many countries delayed adoption of the Gregorian calendar
because of religious differences.  For example, Great Britain and the
British colonies switched to the Gregorian calendar in September
1752, when the Julian calendar was eleven days behind the
Gregorian calendar.  That year in Britain, the day after September 2
was September 14.  To take another example, Russia did not adopt the
Gregorian calendar until 1918, and that year in Russia the day after
January 31 was February 14.  Calc&rsquo;s reckoning therefore matches English
practice starting in 1752 and Russian practice starting in 1918, but
disagrees with earlier dates in both countries.
</p>
<p>When the Julian calendar was introduced, it had January 1 as the first
day of the year.  By the Middle Ages, many European countries
had changed the beginning of a new year to a different date, often to
a religious festival.  Almost all countries reverted to using January 1
as the beginning of the year by the time they adopted the Gregorian
calendar.
</p>
<p>Some calendars attempt to mimic the historical situation by using the
Gregorian calendar for recent dates and the Julian calendar for older
dates. The <code>cal</code> program in most Unix implementations does this,
for example. While January 1 wasn&rsquo;t always the beginning of a calendar
year, these hybrid calendars still use January 1 as the beginning of
the year even for older dates.   The customizable variable
<code>calc-gregorian-switch</code> (see <a href="#Customizing-Calc">Customizing Calc</a>) can be set to
have Calc&rsquo;s date forms switch from the Julian to Gregorian calendar at
any specified date.
</p>
<p>Today&rsquo;s timekeepers introduce an occasional &ldquo;leap second&rdquo;.
These do not occur regularly and Calc does not take these minor
effects into account.  (If it did, it would have to report a
non-integer number of days between, say,
&lsquo;<samp>&lt;12:00am Mon Jan 1, 1900&gt;</samp>&rsquo; and
&lsquo;<samp>&lt;12:00am Sat Jan 1, 2000&gt;</samp>&rsquo;.)
</p>
<a name="index-Julian-day-counting"></a>
<p>Another day counting system in common use is, confusingly, also called
&ldquo;Julian.&rdquo;  Julian days go from noon to noon.  The Julian day number
is the numbers of days since 12:00 noon (GMT) on November 24, 4714 BC
in the Gregorian calendar (i.e., January 1, 4713 BC in the Julian
calendar).  In Calc&rsquo;s scheme (in GMT) the Julian day origin is
<i>-1721422.5</i>, because Calc starts at midnight instead of noon.
Thus to convert a Calc date code obtained by unpacking a
date form into a Julian day number, simply add 1721422.5 after
compensating for the time zone difference.  The built-in <kbd>t J</kbd>
command performs this conversion for you.
</p>
<p>The Julian day number is based on the Julian cycle, which was invented
in 1583 by Joseph Justus Scaliger.  Scaliger named it the Julian cycle
since it involves the Julian calendar, but some have suggested that
Scaliger named it in honor of his father, Julius Caesar Scaliger.  The
Julian cycle is based on three other cycles: the indiction cycle, the
Metonic cycle, and the solar cycle.  The indiction cycle is a 15 year
cycle originally used by the Romans for tax purposes but later used to
date medieval documents.  The Metonic cycle is a 19 year cycle; 19
years is close to being a common multiple of a solar year and a lunar
month, and so every 19 years the phases of the moon will occur on the
same days of the year.  The solar cycle is a 28 year cycle; the Julian
calendar repeats itself every 28 years.  The smallest time period
which contains multiples of all three cycles is the least common
multiple of 15 years, 19 years and 28 years, which (since they&rsquo;re
pairwise relatively prime) is
15*19*28 = 7980 years.
This is the length of a Julian cycle.  Working backwards, the previous
year in which all three cycles began was 4713 BC, and so Scaliger
chose that year as the beginning of a Julian cycle.  Since at the time
there were no historical records from before 4713 BC, using this year
as a starting point had the advantage of avoiding negative year
numbers.  In 1849, the astronomer John Herschel (son of William
Herschel) suggested using the number of days since the beginning of
the Julian cycle as an astronomical dating system; this idea was taken
up by other astronomers.  (At the time, noon was the start of the
astronomical day.  Herschel originally suggested counting the days
since Jan 1, 4713 BC at noon Alexandria time; this was later amended to
noon GMT.)  Julian day numbering is largely used in astronomy.
</p>
<a name="index-Unix-time-format"></a>
<p>The Unix operating system measures time as an integer number of
seconds since midnight, Jan 1, 1970.  To convert a Calc date
value into a Unix time stamp, first subtract 719163 (the code
for &lsquo;<samp>&lt;Jan 1, 1970&gt;</samp>&rsquo;), then multiply by 86400 (the number of
seconds in a day) and press <kbd>R</kbd> to round to the nearest
integer.  If you have a date form, you can simply subtract the
day &lsquo;<samp>&lt;Jan 1, 1970&gt;</samp>&rsquo; instead of unpacking and subtracting
719163.  Likewise, divide by 86400 and add &lsquo;<samp>&lt;Jan 1, 1970&gt;</samp>&rsquo;
to convert from Unix time to a Calc date form.  (Note that
Unix normally maintains the time in the GMT time zone; you may
need to subtract five hours to get New York time, or eight hours
for California time.  The same is usually true of Julian day
counts.)  The built-in <kbd>t U</kbd> command performs these
conversions.
</p>
<hr>
<a name="Modulo-Forms"></a>
<div class="header">
<p>
Next: <a href="#Error-Forms" accesskey="n" rel="next">Error Forms</a>, Previous: <a href="#Date-Forms" accesskey="p" rel="prev">Date Forms</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modulo-Forms-1"></a>
<h3 class="section">4.10 Modulo Forms</h3>

<p><a name="index-Modulo-forms"></a>
A <em>modulo form</em> is a real number which is taken modulo (i.e., within
an integer multiple of) some value <var>M</var>.  Arithmetic modulo <var>M</var>
often arises in number theory.  Modulo forms are written
&lsquo;<var>a</var> <tt>mod</tt> <var>M</var>&rsquo;,
where <var>a</var> and <var>M</var> are real numbers or HMS forms, and
&lsquo;<samp>0 &lt;= a &lt; <var>M</var></samp>&rsquo;.
In many applications &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>M</samp>&rsquo; will be
integers but this is not required.
</p>
<a name="index-M-_0028modulo-forms_0029"></a>
<a name="index-mod-_0028operator_0029"></a>
<p>To create a modulo form during numeric entry, press the shift-<kbd>M</kbd>
key to enter the word &lsquo;<samp>mod</samp>&rsquo;.  As a special convenience, pressing
shift-<kbd>M</kbd> a second time automatically enters the value of &lsquo;<samp>M</samp>&rsquo;
that was most recently used before.  During algebraic entry, either
type &lsquo;<samp>mod</samp>&rsquo; by hand or press <kbd>M-m</kbd> (that&rsquo;s <kbd><span class="key">META</span>-m</kbd>).
Once again, pressing this a second time enters the current modulo.
</p>
<p>Modulo forms are not to be confused with the modulo operator &lsquo;<samp>%</samp>&rsquo;.
The expression &lsquo;<samp>27 % 10</samp>&rsquo; means to compute 27 modulo 10 to produce
the result 7.  Further computations treat this 7 as just a regular integer.
The expression &lsquo;<samp>27 mod 10</samp>&rsquo; produces the result &lsquo;<samp>7 mod 10</samp>&rsquo;;
further computations with this value are again reduced modulo 10 so that
the result always lies in the desired range.
</p>
<p>When two modulo forms with identical &lsquo;<samp>M</samp>&rsquo;&rsquo;s are added or multiplied,
the Calculator simply adds or multiplies the values, then reduces modulo
&lsquo;<samp>M</samp>&rsquo;.  If one argument is a modulo form and the other a plain number,
the plain number is treated like a compatible modulo form.  It is also
possible to raise modulo forms to powers; the result is the value raised
to the power, then reduced modulo &lsquo;<samp>M</samp>&rsquo;.  (When all values involved
are integers, this calculation is done much more efficiently than
actually computing the power and then reducing.)
</p>
<a name="index-Modulo-division"></a>
<p>Two modulo forms &lsquo;<var>a</var> <tt>mod</tt> <var>M</var>&rsquo; and &lsquo;<var>b</var> <tt>mod</tt> <var>M</var>&rsquo;
can be divided if &lsquo;<samp>a</samp>&rsquo;, &lsquo;<samp>b</samp>&rsquo;, and &lsquo;<samp>M</samp>&rsquo; are all
integers.  The result is the modulo form which, when multiplied by
&lsquo;<var>b</var> <tt>mod</tt> <var>M</var>&rsquo;, produces &lsquo;<var>a</var> <tt>mod</tt> <var>M</var>&rsquo;.  If
there is no solution to this equation (which can happen only when
&lsquo;<samp>M</samp>&rsquo; is non-prime), or if any of the arguments are non-integers, the
division is left in symbolic form.  Other operations, such as square
roots, are not yet supported for modulo forms.  (Note that, although
&lsquo;<tt>(</tt><var>a</var>&nbsp;<tt>mod</tt>&nbsp;<var>M</var><tt>)^.5</tt>&rsquo;<!-- /@w --> will compute a &ldquo;modulo square root&rdquo;
in the sense of reducing
&lsquo;<samp>sqrt(a)</samp>&rsquo;
modulo &lsquo;<samp>M</samp>&rsquo;, this is not a useful definition from the
number-theoretical point of view.)
</p>
<p>It is possible to mix HMS forms and modulo forms.  For example, an
HMS form modulo 24 could be used to manipulate clock times; an HMS
form modulo 360 would be suitable for angles.  Making the modulo &lsquo;<samp>M</samp>&rsquo;
also be an HMS form eliminates troubles that would arise if the angular
mode were inadvertently set to Radians, in which case
&lsquo;<samp>2@&nbsp;0'&nbsp;0&quot;&nbsp;mod&nbsp;24</samp>&rsquo;<!-- /@w --> would be interpreted as two degrees modulo
24 radians!
</p>
<p>Modulo forms cannot have variables or formulas for components.  If you
enter the formula &lsquo;<samp>(x + 2) mod 5</samp>&rsquo;, Calc propagates the modulus
to each of the coefficients:  &lsquo;<samp>(1 mod 5) x + (2 mod 5)</samp>&rsquo;.
</p>
<p>You can use <kbd>v p</kbd> and <kbd>%</kbd> to modify modulo forms.
See <a href="#Packing-and-Unpacking">Packing and Unpacking</a>.  See <a href="#Basic-Arithmetic">Basic Arithmetic</a>.
</p>
<a name="index-makemod"></a>
<p>The algebraic function &lsquo;<samp>makemod(a, m)</samp>&rsquo; builds the modulo form
&lsquo;<samp>a&nbsp;mod&nbsp;m</samp>&rsquo;<!-- /@w -->.
</p>
<hr>
<a name="Error-Forms"></a>
<div class="header">
<p>
Next: <a href="#Interval-Forms" accesskey="n" rel="next">Interval Forms</a>, Previous: <a href="#Modulo-Forms" accesskey="p" rel="prev">Modulo Forms</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Error-Forms-1"></a>
<h3 class="section">4.11 Error Forms</h3>

<p><a name="index-Error-forms"></a>
<a name="index-Standard-deviations"></a>
An <em>error form</em> is a number with an associated standard
deviation, as in &lsquo;<samp>2.3 +/- 0.12</samp>&rsquo;.  The notation
&lsquo;<var>x</var> <tt>+/-</tt> sigma&rsquo;
stands for an uncertain value which follows
a normal or Gaussian distribution of mean &lsquo;<samp>x</samp>&rsquo; and standard
deviation or &ldquo;error&rdquo;
&lsquo;<samp>sigma</samp>&rsquo;.
Both the mean and the error can be either numbers or
formulas.  Generally these are real numbers but the mean may also be
complex.  If the error is negative or complex, it is changed to its
absolute value.  An error form with zero error is converted to a
regular number by the Calculator.
</p>
<p>All arithmetic and transcendental functions accept error forms as input.
Operations on the mean-value part work just like operations on regular
numbers.  The error part for any function &lsquo;<samp>f(x)</samp>&rsquo; (such as
&lsquo;<samp>sin(x)</samp>&rsquo;)
is defined by the error of &lsquo;<samp>x</samp>&rsquo; times the derivative of &lsquo;<samp>f</samp>&rsquo;
evaluated at the mean value of &lsquo;<samp>x</samp>&rsquo;.  For a two-argument function
&lsquo;<samp>f(x,y)</samp>&rsquo; (such as addition) the error is the square root of the sum
of the squares of the errors due to &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;.
Note that this
definition assumes the errors in &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; are uncorrelated.
A side effect of this definition is that &lsquo;<samp>(2 +/- 1) * (2 +/- 1)</samp>&rsquo;
is not the same as &lsquo;<samp>(2 +/- 1)^2</samp>&rsquo;; the former represents the product
of two independent values which happen to have the same probability
distributions, and the latter is the product of one random value with itself.
The former will produce an answer with less error, since on the average
the two independent errors can be expected to cancel out.
</p>
<p>Consult a good text on error analysis for a discussion of the proper use
of standard deviations.  Actual errors often are neither Gaussian-distributed
nor uncorrelated, and the above formulas are valid only when errors
are small.  As an example, the error arising from
&lsquo;<tt>sin(</tt><var>x</var> <tt>+/-</tt> <var>sigma</var><tt>)</tt>&rsquo;
is
&lsquo;<var>sigma</var> <tt>abs(cos(</tt><var>x</var><tt>))</tt>&rsquo;.
When &lsquo;<samp>x</samp>&rsquo; is close to zero,
&lsquo;<samp>cos(x)</samp>&rsquo;
is close to one so the error in the sine is close to
&lsquo;<samp>sigma</samp>&rsquo;;
this makes sense, since
&lsquo;<samp>sin(x)</samp>&rsquo;
is approximately &lsquo;<samp>x</samp>&rsquo; near zero, so a given error in &lsquo;<samp>x</samp>&rsquo; will
produce about the same error in the sine.  Likewise, near 90 degrees
&lsquo;<samp>cos(x)</samp>&rsquo;
is nearly zero and so the computed error is
small:  The sine curve is nearly flat in that region, so an error in &lsquo;<samp>x</samp>&rsquo;
has relatively little effect on the value of
&lsquo;<samp>sin(x)</samp>&rsquo;.
However, consider &lsquo;<samp>sin(90 +/- 1000)</samp>&rsquo;.  The cosine of 90 is zero, so
Calc will report zero error!  We get an obviously wrong result because
we have violated the small-error approximation underlying the error
analysis.  If the error in &lsquo;<samp>x</samp>&rsquo; had been small, the error in
&lsquo;<samp>sin(x)</samp>&rsquo;
would indeed have been negligible.
</p>
<a name="index-p-_0028error-forms_0029"></a>
<a name="index-_002b_002f_002d"></a>
<p>To enter an error form during regular numeric entry, use the <kbd>p</kbd>
(&ldquo;plus-or-minus&rdquo;) key to type the &lsquo;<samp>+/-</samp>&rsquo; symbol.  (If you try actually
typing &lsquo;<samp>+/-</samp>&rsquo; the <kbd>+</kbd> key will be interpreted as the Calculator&rsquo;s
<kbd>+</kbd> command!)  Within an algebraic formula, you can press <kbd>M-+</kbd> to
type the &lsquo;<samp>+/-</samp>&rsquo; symbol, or type it out by hand.
</p>
<p>Error forms and complex numbers can be mixed; the formulas shown above
are used for complex numbers, too; note that if the error part evaluates
to a complex number its absolute value (or the square root of the sum of
the squares of the absolute values of the two error contributions) is
used.  Mathematically, this corresponds to a radially symmetric Gaussian
distribution of numbers on the complex plane.  However, note that Calc
considers an error form with real components to represent a real number,
not a complex distribution around a real mean.
</p>
<p>Error forms may also be composed of HMS forms.  For best results, both
the mean and the error should be HMS forms if either one is.
</p>
<a name="index-sdev"></a>
<p>The algebraic function &lsquo;<samp>sdev(a, b)</samp>&rsquo; builds the error form &lsquo;<samp>a +/- b</samp>&rsquo;.
</p>
<hr>
<a name="Interval-Forms"></a>
<div class="header">
<p>
Next: <a href="#Incomplete-Objects" accesskey="n" rel="next">Incomplete Objects</a>, Previous: <a href="#Error-Forms" accesskey="p" rel="prev">Error Forms</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Interval-Forms-1"></a>
<h3 class="section">4.12 Interval Forms</h3>

<p><a name="index-Interval-forms"></a>
An <em>interval</em> is a subset of consecutive real numbers.  For example,
the interval &lsquo;<samp>[2 .. 4]</samp>&rsquo; represents all the numbers from 2 to 4,
inclusive.  If you multiply it by the interval &lsquo;<samp>[0.5 .. 2]</samp>&rsquo; you
obtain &lsquo;<samp>[1 .. 8]</samp>&rsquo;.  This calculation represents the fact that if
you multiply some number in the range &lsquo;<samp>[2 .. 4]</samp>&rsquo; by some other
number in the range &lsquo;<samp>[0.5 .. 2]</samp>&rsquo;, your result will lie in the range
from 1 to 8.  Interval arithmetic is used to get a worst-case estimate
of the possible range of values a computation will produce, given the
set of possible values of the input.
</p>
<p>Calc supports several varieties of intervals, including <em>closed</em>
intervals of the type shown above, <em>open</em> intervals such as
&lsquo;<samp>(2 .. 4)</samp>&rsquo;, which represents the range of numbers from 2 to 4
<em>exclusive</em>, and <em>semi-open</em> intervals in which one end
uses a round parenthesis and the other a square bracket.  In mathematical
terms,
&lsquo;<samp>[2 .. 4]</samp>&rsquo; means &lsquo;<samp>2 &lt;= x &lt;= 4</samp>&rsquo;, whereas
&lsquo;<samp>[2 .. 4)</samp>&rsquo; represents &lsquo;<samp>2 &lt;= x &lt; 4</samp>&rsquo;,
&lsquo;<samp>(2 .. 4]</samp>&rsquo; represents &lsquo;<samp>2 &lt; x &lt;= 4</samp>&rsquo;, and
&lsquo;<samp>(2 .. 4)</samp>&rsquo; represents &lsquo;<samp>2 &lt; x &lt; 4</samp>&rsquo;.
</p>
<p>The lower and upper limits of an interval must be either real numbers
(or HMS or date forms), or symbolic expressions which are assumed to be
real-valued, or &lsquo;<samp>-inf</samp>&rsquo; and &lsquo;<samp>inf</samp>&rsquo;.  In general the lower limit
must be less than the upper limit.  A closed interval containing only
one value, &lsquo;<samp>[3 .. 3]</samp>&rsquo;, is converted to a plain number (3)
automatically.  An interval containing no values at all (such as
&lsquo;<samp>[3 .. 2]</samp>&rsquo; or &lsquo;<samp>[2 .. 2)</samp>&rsquo;) can be represented but is not
guaranteed to behave well when used in arithmetic.  Note that the
interval &lsquo;<samp>[3 .. inf)</samp>&rsquo; represents all real numbers greater than
or equal to 3, and &lsquo;<samp>(-inf .. inf)</samp>&rsquo; represents all real numbers.
In fact, &lsquo;<samp>[-inf .. inf]</samp>&rsquo; represents all real numbers including
the real infinities.
</p>
<p>Intervals are entered in the notation shown here, either as algebraic
formulas, or using incomplete forms.  (See <a href="#Incomplete-Objects">Incomplete Objects</a>.)
In algebraic formulas, multiple periods in a row are collected from
left to right, so that &lsquo;<samp>1...1e2</samp>&rsquo; is interpreted as &lsquo;<samp>1.0 .. 1e2</samp>&rsquo;
rather than &lsquo;<samp>1 .. 0.1e2</samp>&rsquo;.  Add spaces or zeros if you want to
get the other interpretation.  If you omit the lower or upper limit,
a default of &lsquo;<samp>-inf</samp>&rsquo; or &lsquo;<samp>inf</samp>&rsquo; (respectively) is furnished.
</p>
<p>Infinite mode also affects operations on intervals
(see <a href="#Infinities">Infinities</a>).  Calc will always introduce an open infinity,
as in &lsquo;<samp>1 / (0 .. 2] = [0.5 .. inf)</samp>&rsquo;.  But closed infinities,
&lsquo;<samp>1&nbsp;/&nbsp;[0&nbsp;..&nbsp;2]&nbsp;=&nbsp;[0.5&nbsp;..&nbsp;inf]</samp>&rsquo;<!-- /@w -->, arise only in Infinite mode;
otherwise they are left unevaluated.  Note that the &ldquo;direction&rdquo; of
a zero is not an issue in this case since the zero is always assumed
to be continuous with the rest of the interval.  For intervals that
contain zero inside them Calc is forced to give the result,
&lsquo;<samp>1 / (-2 .. 2) = [-inf .. inf]</samp>&rsquo;.
</p>
<p>While it may seem that intervals and error forms are similar, they are
based on entirely different concepts of inexact quantities.  An error
form
&lsquo;<var>x</var> <tt>+/-</tt> <var>sigma</var>&rsquo;
means a variable is random, and its value could
be anything but is &ldquo;probably&rdquo; within one
<var>sigma</var>
of the mean value &lsquo;<samp>x</samp>&rsquo;. An interval
&lsquo;<tt>[</tt><var>a</var> <tt>..</tt> <var>b</var><tt>]</tt>&rsquo; means a
variable&rsquo;s value is unknown, but guaranteed to lie in the specified
range.  Error forms are statistical or &ldquo;average case&rdquo; approximations;
interval arithmetic tends to produce &ldquo;worst case&rdquo; bounds on an
answer.
</p>
<p>Intervals may not contain complex numbers, but they may contain
HMS forms or date forms.
</p>
<p>See <a href="#Set-Operations">Set Operations</a>, for commands that interpret interval forms
as subsets of the set of real numbers.
</p>
<a name="index-intv"></a>
<p>The algebraic function &lsquo;<samp>intv(n, a, b)</samp>&rsquo; builds an interval form
from &lsquo;<samp>a</samp>&rsquo; to &lsquo;<samp>b</samp>&rsquo;; &lsquo;<samp>n</samp>&rsquo; is an integer code which must
be 0 for &lsquo;<samp>(..)</samp>&rsquo;, 1 for &lsquo;<samp>(..]</samp>&rsquo;, 2 for &lsquo;<samp>[..)</samp>&rsquo;, or
3 for &lsquo;<samp>[..]</samp>&rsquo;.
</p>
<p>Please note that in fully rigorous interval arithmetic, care would be
taken to make sure that the computation of the lower bound rounds toward
minus infinity, while upper bound computations round toward plus
infinity.  Calc&rsquo;s arithmetic always uses a round-to-nearest mode,
which means that roundoff errors could creep into an interval
calculation to produce intervals slightly smaller than they ought to
be.  For example, entering &lsquo;<samp>[1..2]</samp>&rsquo; and pressing <kbd>Q 2 ^</kbd>
should yield the interval &lsquo;<samp>[1..2]</samp>&rsquo; again, but in fact it yields the
(slightly too small) interval &lsquo;<samp>[1..1.9999999]</samp>&rsquo; due to roundoff
error.
</p>
<hr>
<a name="Incomplete-Objects"></a>
<div class="header">
<p>
Next: <a href="#Variables" accesskey="n" rel="next">Variables</a>, Previous: <a href="#Interval-Forms" accesskey="p" rel="prev">Interval Forms</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Incomplete-Objects-1"></a>
<h3 class="section">4.13 Incomplete Objects</h3>

<p><a name="index-_005b"></a>
<a name="index-_0028"></a>
<a name="index-_002c"></a>
<a name="index-_005d"></a>
<a name="index-_0029"></a>
<a name="index-Incomplete-vectors"></a>
<a name="index-Incomplete-complex-numbers"></a>
<a name="index-Incomplete-interval-forms"></a>
When <kbd>(</kbd> or <kbd>[</kbd> is typed to begin entering a complex number or
vector, respectively, the effect is to push an <em>incomplete</em> complex
number or vector onto the stack.  The <kbd>,</kbd> key adds the value(s) at
the top of the stack onto the current incomplete object.  The <kbd>)</kbd>
and <kbd>]</kbd> keys &ldquo;close&rdquo; the incomplete object after adding any values
on the top of the stack in front of the incomplete object.
</p>
<p>As a result, the sequence of keystrokes <kbd>[ 2 , 3 <span class="key">RET</span> 2 * , 9 ]</kbd>
pushes the vector &lsquo;<samp>[2, 6, 9]</samp>&rsquo; onto the stack.  Likewise, <kbd>( 1 , 2 Q )</kbd>
pushes the complex number &lsquo;<samp>(1, 1.414)</samp>&rsquo; (approximately).
</p>
<p>If several values lie on the stack in front of the incomplete object,
all are collected and appended to the object.  Thus the <kbd>,</kbd> key
is redundant:  <kbd>[ 2 <span class="key">RET</span> 3 <span class="key">RET</span> 2 * 9 ]</kbd>.  Some people
prefer the equivalent <tt class="key">SPC</tt> key to <tt class="key">RET</tt>.
</p>
<p>As a special case, typing <kbd>,</kbd> immediately after <kbd>(</kbd>, <kbd>[</kbd>, or
<kbd>,</kbd> adds a zero or duplicates the preceding value in the list being
formed.  Typing <tt class="key">DEL</tt> during incomplete entry removes the last item
from the list.
</p>
<a name="index-_003b"></a>
<p>The <kbd>;</kbd> key is used in the same way as <kbd>,</kbd> to create polar complex
numbers:  <kbd>( 1 ; 2 )</kbd>.  When entering a vector, <kbd>;</kbd> is useful for
creating a matrix.  In particular, <kbd>[ [ 1 , 2 ; 3 , 4 ; 5 , 6 ] ]</kbd> is
equivalent to <kbd>[ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]</kbd>.
</p>
<a name="index-_002e_002e"></a>
<a name="index-calc_002ddots"></a>
<p>Incomplete entry is also used to enter intervals.  For example,
<kbd>[ 2 .. 4 )</kbd> enters a semi-open interval.  Note that when you type
the first period, it will be interpreted as a decimal point, but when
you type a second period immediately afterward, it is re-interpreted as
part of the interval symbol.  Typing <kbd>..</kbd> corresponds to executing
the <code>calc-dots</code> command.
</p>
<p>If you find incomplete entry distracting, you may wish to enter vectors
and complex numbers as algebraic formulas by pressing the apostrophe key.
</p>
<hr>
<a name="Variables"></a>
<div class="header">
<p>
Next: <a href="#Formulas" accesskey="n" rel="next">Formulas</a>, Previous: <a href="#Incomplete-Objects" accesskey="p" rel="prev">Incomplete Objects</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Variables-1"></a>
<h3 class="section">4.14 Variables</h3>

<p><a name="index-Variables_002c-in-formulas"></a>
A <em>variable</em> is somewhere between a storage register on a conventional
calculator, and a variable in a programming language.  (In fact, a Calc
variable is really just an Emacs Lisp variable that contains a Calc number
or formula.)  A variable&rsquo;s name is normally composed of letters and digits.
Calc also allows apostrophes and <code>#</code> signs in variable names.
(The Calc variable <code>foo</code> corresponds to the Emacs Lisp variable
<code>var-foo</code>, but unless you access the variable from within Emacs
Lisp, you don&rsquo;t need to worry about it.  Variable names in algebraic
formulas implicitly have &lsquo;<samp>var-</samp>&rsquo; prefixed to their names.  The
&lsquo;<samp>#</samp>&rsquo; character in variable names used in algebraic formulas
corresponds to a dash &lsquo;<samp>-</samp>&rsquo; in the Lisp variable name.  If the name
contains any dashes, the prefix &lsquo;<samp>var-</samp>&rsquo; is <em>not</em> automatically
added.  Thus the two formulas &lsquo;<samp>foo + 1</samp>&rsquo; and &lsquo;<samp>var#foo + 1</samp>&rsquo; both
refer to the same variable.)
</p>
<p>In a command that takes a variable name, you can either type the full
name of a variable, or type a single digit to use one of the special
convenience variables <code>q0</code> through <code>q9</code>.  For example,
<kbd>3 s s 2</kbd> stores the number 3 in variable <code>q2</code>, and
<kbd>3&nbsp;s&nbsp;s&nbsp;foo&nbsp;<span class="key">RET</span></kbd><!-- /@w --> stores that number in variable
<code>foo</code>.
</p>
<p>To push a variable itself (as opposed to the variable&rsquo;s value) on the
stack, enter its name as an algebraic expression using the apostrophe
(<tt class="key">'</tt>) key.
</p>
<a name="index-_003d"></a>
<a name="index-calc_002devaluate"></a>
<a name="index-Evaluation-of-variables-in-a-formula"></a>
<a name="index-Variables_002c-evaluation"></a>
<a name="index-Formulas_002c-evaluation"></a>
<p>The <kbd>=</kbd> (<code>calc-evaluate</code>) key &ldquo;evaluates&rdquo; a formula by
replacing all variables in the formula which have been given values by a
<code>calc-store</code> or <code>calc-let</code> command by their stored values.
Other variables are left alone.  Thus a variable that has not been
stored acts like an abstract variable in algebra; a variable that has
been stored acts more like a register in a traditional calculator.
With a positive numeric prefix argument, <kbd>=</kbd> evaluates the top
<var>n</var> stack entries; with a negative argument, <kbd>=</kbd> evaluates
the <var>n</var>th stack entry.
</p>
<a name="index-e-variable"></a>
<a name="index-pi-variable"></a>
<a name="index-i-variable"></a>
<a name="index-phi-variable"></a>
<a name="index-gamma-variable"></a>
<a name="index-e-2"></a>
<a name="index-pi-1"></a>
<a name="index-i-1"></a>
<a name="index-phi-1"></a>
<a name="index-gamma-1"></a>
<p>A few variables are called <em>special constants</em>.  Their names are
&lsquo;<samp>e</samp>&rsquo;, &lsquo;<samp>pi</samp>&rsquo;, &lsquo;<samp>i</samp>&rsquo;, &lsquo;<samp>phi</samp>&rsquo;, and &lsquo;<samp>gamma</samp>&rsquo;.
(See <a href="#Scientific-Functions">Scientific Functions</a>.)  When they are evaluated with <kbd>=</kbd>,
their values are calculated if necessary according to the current precision
or complex polar mode.  If you wish to use these symbols for other purposes,
simply undefine or redefine them using <code>calc-store</code>.
</p>
<p>The variables &lsquo;<samp>inf</samp>&rsquo;, &lsquo;<samp>uinf</samp>&rsquo;, and &lsquo;<samp>nan</samp>&rsquo; stand for
infinite or indeterminate values.  It&rsquo;s best not to use them as
regular variables, since Calc uses special algebraic rules when
it manipulates them.  Calc displays a warning message if you store
a value into any of these special variables.
</p>
<p>See <a href="#Store-and-Recall">Store and Recall</a>, for a discussion of commands dealing with variables.
</p>
<hr>
<a name="Formulas"></a>
<div class="header">
<p>
Previous: <a href="#Variables" accesskey="p" rel="prev">Variables</a>, Up: <a href="#Data-Types" accesskey="u" rel="up">Data Types</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Formulas-1"></a>
<h3 class="section">4.15 Formulas</h3>

<p><a name="index-Formulas"></a>
<a name="index-Expressions"></a>
<a name="index-Operators-in-formulas"></a>
<a name="index-Precedence-of-operators"></a>
When you press the apostrophe key you may enter any expression or formula
in algebraic form.  (Calc uses the terms &ldquo;expression&rdquo; and &ldquo;formula&rdquo;
interchangeably.)  An expression is built up of numbers, variable names,
and function calls, combined with various arithmetic operators.
Parentheses may
be used to indicate grouping.  Spaces are ignored within formulas, except
that spaces are not permitted within variable names or numbers.
Arithmetic operators, in order from highest to lowest precedence, and
with their equivalent function names, are:
</p>
<p>&lsquo;<samp>_</samp>&rsquo; [<code>subscr</code>] (subscripts);
</p>
<p>postfix &lsquo;<samp>%</samp>&rsquo; [<code>percent</code>] (as in &lsquo;<samp>25% = 0.25</samp>&rsquo;);
</p>
<p>prefix &lsquo;<samp>!</samp>&rsquo; [<code>lnot</code>] (logical &ldquo;not,&rdquo; as in &lsquo;<samp>!x</samp>&rsquo;);
</p>
<p>&lsquo;<samp>+/-</samp>&rsquo; [<code>sdev</code>] (the standard deviation symbol) and
&lsquo;<samp>mod</samp>&rsquo; [<code>makemod</code>] (the symbol for modulo forms);
</p>
<p>postfix &lsquo;<samp>!</samp>&rsquo; [<code>fact</code>] (factorial, as in &lsquo;<samp>n!</samp>&rsquo;)
and postfix &lsquo;<samp>!!</samp>&rsquo; [<code>dfact</code>] (double factorial);
</p>
<p>&lsquo;<samp>^</samp>&rsquo; [<code>pow</code>] (raised-to-the-power-of);
</p>
<p>prefix &lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>-</samp>&rsquo; [<code>neg</code>] (as in &lsquo;<samp>-x</samp>&rsquo;);
</p>
<p>&lsquo;<samp>*</samp>&rsquo; [<code>mul</code>];
</p>
<p>&lsquo;<samp>/</samp>&rsquo; [<code>div</code>], &lsquo;<samp>%</samp>&rsquo; [<code>mod</code>] (modulo), and
&lsquo;<samp>\</samp>&rsquo; [<code>idiv</code>] (integer division);
</p>
<p>infix &lsquo;<samp>+</samp>&rsquo; [<code>add</code>] and &lsquo;<samp>-</samp>&rsquo; [<code>sub</code>] (as in &lsquo;<samp>x-y</samp>&rsquo;);
</p>
<p>&lsquo;<samp>|</samp>&rsquo; [<code>vconcat</code>] (vector concatenation);
</p>
<p>relations &lsquo;<samp>=</samp>&rsquo; [<code>eq</code>], &lsquo;<samp>!=</samp>&rsquo; [<code>neq</code>], &lsquo;<samp>&lt;</samp>&rsquo; [<code>lt</code>],
&lsquo;<samp>&gt;</samp>&rsquo; [<code>gt</code>], &lsquo;<samp>&lt;=</samp>&rsquo; [<code>leq</code>], and &lsquo;<samp>&gt;=</samp>&rsquo; [<code>geq</code>];
</p>
<p>&lsquo;<samp>&amp;&amp;</samp>&rsquo; [<code>land</code>] (logical &ldquo;and&rdquo;);
</p>
<p>&lsquo;<samp>||</samp>&rsquo; [<code>lor</code>] (logical &ldquo;or&rdquo;);
</p>
<p>the C-style &ldquo;if&rdquo; operator &lsquo;<samp>a?b:c</samp>&rsquo; [<code>if</code>];
</p>
<p>&lsquo;<samp>!!!</samp>&rsquo; [<code>pnot</code>] (rewrite pattern &ldquo;not&rdquo;);
</p>
<p>&lsquo;<samp>&amp;&amp;&amp;</samp>&rsquo; [<code>pand</code>] (rewrite pattern &ldquo;and&rdquo;);
</p>
<p>&lsquo;<samp>|||</samp>&rsquo; [<code>por</code>] (rewrite pattern &ldquo;or&rdquo;);
</p>
<p>&lsquo;<samp>:=</samp>&rsquo; [<code>assign</code>] (for assignments and rewrite rules);
</p>
<p>&lsquo;<samp>::</samp>&rsquo; [<code>condition</code>] (rewrite pattern condition);
</p>
<p>&lsquo;<samp>=&gt;</samp>&rsquo; [<code>evalto</code>].
</p>
<p>Note that, unlike in usual computer notation, multiplication binds more
strongly than division:  &lsquo;<samp>a*b/c*d</samp>&rsquo; is equivalent to
&lsquo;<samp>(a*b)/(c*d)</samp>&rsquo;.
</p>
<a name="index-Multiplication_002c-implicit"></a>
<a name="index-Implicit-multiplication"></a>
<p>The multiplication sign &lsquo;<samp>*</samp>&rsquo; may be omitted in many cases.  In particular,
if the righthand side is a number, variable name, or parenthesized
expression, the &lsquo;<samp>*</samp>&rsquo; may be omitted.  Implicit multiplication has the
same precedence as the explicit &lsquo;<samp>*</samp>&rsquo; operator.  The one exception to
the rule is that a variable name followed by a parenthesized expression,
as in &lsquo;<samp>f(x)</samp>&rsquo;,
is interpreted as a function call, not an implicit &lsquo;<samp>*</samp>&rsquo;.  In many
cases you must use a space if you omit the &lsquo;<samp>*</samp>&rsquo;:  &lsquo;<samp>2a</samp>&rsquo; is the
same as &lsquo;<samp>2*a</samp>&rsquo;, and &lsquo;<samp>a b</samp>&rsquo; is the same as &lsquo;<samp>a*b</samp>&rsquo;, but &lsquo;<samp>ab</samp>&rsquo;
is a variable called <code>ab</code>, <em>not</em> the product of &lsquo;<samp>a</samp>&rsquo; and
&lsquo;<samp>b</samp>&rsquo;!  Also note that &lsquo;<samp>f (x)</samp>&rsquo; is still a function call.
</p>
<a name="index-Implicit-comma-in-vectors"></a>
<p>The rules are slightly different for vectors written with square brackets.
In vectors, the space character is interpreted (like the comma) as a
separator of elements of the vector.  Thus &lsquo;<samp>[&nbsp;2a&nbsp;b+c&nbsp;d&nbsp;]</samp>&rsquo;<!-- /@w --> is
equivalent to &lsquo;<samp>[2*a, b+c, d]</samp>&rsquo;, whereas &lsquo;<samp>2a b+c d</samp>&rsquo; is equivalent
to &lsquo;<samp>2*a*b + c*d</samp>&rsquo;.
Note that spaces around the brackets, and around explicit commas, are
ignored.  To force spaces to be interpreted as multiplication you can
enclose a formula in parentheses as in &lsquo;<samp>[(a b) 2(c d)]</samp>&rsquo;, which is
interpreted as &lsquo;<samp>[a*b, 2*c*d]</samp>&rsquo;.  An implicit comma is also inserted
between &lsquo;<samp>][</samp>&rsquo;, as in the matrix &lsquo;<samp>[[1 2][3 4]]</samp>&rsquo;.
</p>
<p>Vectors that contain commas (not embedded within nested parentheses or
brackets) do not treat spaces specially:  &lsquo;<samp>[a b, 2 c d]</samp>&rsquo; is a vector
of two elements.  Also, if it would be an error to treat spaces as
separators, but not otherwise, then Calc will ignore spaces:
&lsquo;<samp>[a&nbsp;<span class="nolinebreak">-</span>&nbsp;b]</samp>&rsquo;<!-- /@w --> is a vector of one element, but &lsquo;<samp>[a&nbsp;<span class="nolinebreak">-b]</span></samp>&rsquo;<!-- /@w --> is
a vector of two elements.  Finally, vectors entered with curly braces
instead of square brackets do not give spaces any special treatment.
When Calc displays a vector that does not contain any commas, it will
insert parentheses if necessary to make the meaning clear:
&lsquo;<samp>[(a&nbsp;b)]</samp>&rsquo;<!-- /@w -->.
</p>
<p>The expression &lsquo;<samp>5%-2</samp>&rsquo; is ambiguous; is this five-percent minus two,
or five modulo minus-two?  Calc always interprets the leftmost symbol as
an infix operator preferentially (modulo, in this case), so you would
need to write &lsquo;<samp>(5%)-2</samp>&rsquo; to get the former interpretation.
</p>
<a name="index-Function-call-notation"></a>
<p>A function call is, e.g., &lsquo;<samp>sin(1+x)</samp>&rsquo;.  (The Calc algebraic function
<code>foo</code> corresponds to the Emacs Lisp function <code>calcFunc-foo</code>,
but unless you access the function from within Emacs Lisp, you don&rsquo;t
need to worry about it.)  Most mathematical Calculator commands like
<code>calc-sin</code> have function equivalents like <code>sin</code>.
If no Lisp function is defined for a function called by a formula, the
call is left as it is during algebraic manipulation: &lsquo;<samp>f(x+y)</samp>&rsquo; is
left alone.  Beware that many innocent-looking short names like <code>in</code>
and <code>re</code> have predefined meanings which could surprise you; however,
single letters or single letters followed by digits are always safe to
use for your own function names.  See <a href="#Function-Index">Function Index</a>.
</p>
<p>In the documentation for particular commands, the notation <kbd>H S</kbd>
(<code>calc-sinh</code>) [<code>sinh</code>] means that the key sequence <kbd>H S</kbd>, the
command <kbd>M-x calc-sinh</kbd>, and the algebraic function <code>sinh(x)</code> all
represent the same operation.
</p>
<p>Commands that interpret (&ldquo;parse&rdquo;) text as algebraic formulas include
algebraic entry (<kbd>'</kbd>), editing commands like <kbd>`</kbd> which parse
the contents of the editing buffer when you finish, the <kbd>C-x * g</kbd>
and <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;r</kbd><!-- /@w --> commands, the <kbd>C-y</kbd> command, the X window system
&ldquo;paste&rdquo; mouse operation, and Embedded mode.  All of these operations
use the same rules for parsing formulas; in particular, language modes
(see <a href="#Language-Modes">Language Modes</a>) affect them all in the same way.
</p>
<p>When you read a large amount of text into the Calculator (say a vector
which represents a big set of rewrite rules; see <a href="#Rewrite-Rules">Rewrite Rules</a>),
you may wish to include comments in the text.  Calc&rsquo;s formula parser
ignores the symbol &lsquo;<samp>%%</samp>&rsquo; and anything following it on a line:
</p>
<div class="example">
<pre class="example">[ a + b,   %% the sum of &quot;a&quot; and &quot;b&quot;
  c + d,
  %% last line is coming up:
  e + f ]
</pre></div>

<p>This is parsed exactly the same as &lsquo;<samp>[ a + b, c + d, e + f ]</samp>&rsquo;.
</p>
<p>See <a href="#Syntax-Tables">Syntax Tables</a>, for a way to create your own operators and other
input notations.  See <a href="#Compositions">Compositions</a>, for a way to create new display
formats.
</p>
<p>See <a href="#Algebra">Algebra</a>, for commands for manipulating formulas symbolically.
</p>
<hr>
<a name="Stack-and-Trail"></a>
<div class="header">
<p>
Next: <a href="#Mode-Settings" accesskey="n" rel="next">Mode Settings</a>, Previous: <a href="#Data-Types" accesskey="p" rel="prev">Data Types</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Stack-and-Trail-Commands"></a>
<h2 class="chapter">5 Stack and Trail Commands</h2>

<p>This chapter describes the Calc commands for manipulating objects on the
stack and in the trail buffer.  (These commands operate on objects of any
type, such as numbers, vectors, formulas, and incomplete objects.)
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Stack-Manipulation" accesskey="1">Stack Manipulation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Editing-Stack-Entries" accesskey="2">Editing Stack Entries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Trail-Commands" accesskey="3">Trail Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keep-Arguments" accesskey="4">Keep Arguments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Stack-Manipulation"></a>
<div class="header">
<p>
Next: <a href="#Editing-Stack-Entries" accesskey="n" rel="next">Editing Stack Entries</a>, Previous: <a href="#Stack-and-Trail" accesskey="p" rel="prev">Stack and Trail</a>, Up: <a href="#Stack-and-Trail" accesskey="u" rel="up">Stack and Trail</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Stack-Manipulation-Commands"></a>
<h3 class="section">5.1 Stack Manipulation Commands</h3>

<p><a name="index-RET"></a>
<a name="index-SPC"></a>
<a name="index-calc_002denter"></a>
<a name="index-Duplicating-stack-entries"></a>
To duplicate the top object on the stack, press <tt class="key">RET</tt> or <tt class="key">SPC</tt>
(two equivalent keys for the <code>calc-enter</code> command).
Given a positive numeric prefix argument, these commands duplicate
several elements at the top of the stack.
Given a negative argument,
these commands duplicate the specified element of the stack.
Given an argument of zero, they duplicate the entire stack.
For example, with &lsquo;<samp>10 20 30</samp>&rsquo; on the stack,
<tt class="key">RET</tt> creates &lsquo;<samp>10 20 30 30</samp>&rsquo;,
<kbd>C-u 2 <span class="key">RET</span></kbd> creates &lsquo;<samp>10 20 30 20 30</samp>&rsquo;,
<kbd>C-u - 2 <span class="key">RET</span></kbd> creates &lsquo;<samp>10 20 30 20</samp>&rsquo;, and
<kbd>C-u 0 <span class="key">RET</span></kbd> creates &lsquo;<samp>10 20 30 10 20 30</samp>&rsquo;.
</p>
<a name="index-LFD"></a>
<a name="index-calc_002dover"></a>
<p>The <tt class="key">LFD</tt> (<code>calc-over</code>) command (on a key marked Line-Feed if you
have it, else on <kbd>C-j</kbd>) is like <code>calc-enter</code>
except that the sign of the numeric prefix argument is interpreted
oppositely.  Also, with no prefix argument the default argument is 2.
Thus with &lsquo;<samp>10 20 30</samp>&rsquo; on the stack, <tt class="key">LFD</tt> and <kbd>C-u 2 <span class="key">LFD</span></kbd>
are both equivalent to <kbd>C-u - 2 <span class="key">RET</span></kbd>, producing
&lsquo;<samp>10 20 30 20</samp>&rsquo;.
</p>
<a name="index-DEL"></a>
<a name="index-C_002dd"></a>
<a name="index-calc_002dpop"></a>
<a name="index-Removing-stack-entries"></a>
<a name="index-Deleting-stack-entries"></a>
<p>To remove the top element from the stack, press <tt class="key">DEL</tt> (<code>calc-pop</code>).
The <kbd>C-d</kbd> key is a synonym for <tt class="key">DEL</tt>.
(If the top element is an incomplete object with at least one element, the
last element is removed from it.)  Given a positive numeric prefix argument,
several elements are removed.  Given a negative argument, the specified
element of the stack is deleted.  Given an argument of zero, the entire
stack is emptied.
For example, with &lsquo;<samp>10 20 30</samp>&rsquo; on the stack,
<tt class="key">DEL</tt> leaves &lsquo;<samp>10 20</samp>&rsquo;,
<kbd>C-u 2 <span class="key">DEL</span></kbd> leaves &lsquo;<samp>10</samp>&rsquo;,
<kbd>C-u - 2 <span class="key">DEL</span></kbd> leaves &lsquo;<samp>10 30</samp>&rsquo;, and
<kbd>C-u 0 <span class="key">DEL</span></kbd> leaves an empty stack.
</p>
<a name="index-M_002dDEL"></a>
<a name="index-calc_002dpop_002dabove"></a>
<p>The <kbd>M-<span class="key">DEL</span></kbd> (<code>calc-pop-above</code>) command is to <tt class="key">DEL</tt> what
<tt class="key">LFD</tt> is to <tt class="key">RET</tt>:  It interprets the sign of the numeric
prefix argument in the opposite way, and the default argument is 2.
Thus <kbd>M-<span class="key">DEL</span></kbd> by itself removes the second-from-top stack element,
leaving the first, third, fourth, and so on; <kbd>M-3 M-<span class="key">DEL</span></kbd> deletes
the third stack element.
</p>
<p>The above commands do not depend on the location of the cursor.
If the customizable variable <code>calc-context-sensitive-enter</code> is
non-<code>nil</code> (see <a href="#Customizing-Calc">Customizing Calc</a>), these commands will become
context sensitive.  For example, instead of duplicating the top of the stack,
<tt class="key">RET</tt> will copy the element at the cursor to the top of the
stack.  With a positive numeric prefix, a copy of the element at the
cursor and the appropriate number of preceding elements will be placed
at the top of the stack.  A negative prefix will still duplicate the
specified element of the stack regardless of the cursor  position.
Similarly, <tt class="key">DEL</tt> will remove the corresponding elements from the
stack.
</p>
<a name="index-TAB"></a>
<a name="index-calc_002droll_002ddown"></a>
<p>To exchange the top two elements of the stack, press <tt class="key">TAB</tt>
(<code>calc-roll-down</code>).  Given a positive numeric prefix argument, the
specified number of elements at the top of the stack are rotated downward.
Given a negative argument, the entire stack is rotated downward the specified
number of times.  Given an argument of zero, the entire stack is reversed
top-for-bottom.
For example, with &lsquo;<samp>10 20 30 40 50</samp>&rsquo; on the stack,
<tt class="key">TAB</tt> creates &lsquo;<samp>10 20 30 50 40</samp>&rsquo;,
<kbd>C-u 3 <span class="key">TAB</span></kbd> creates &lsquo;<samp>10 20 50 30 40</samp>&rsquo;,
<kbd>C-u - 2 <span class="key">TAB</span></kbd> creates &lsquo;<samp>40 50 10 20 30</samp>&rsquo;, and
<kbd>C-u 0 <span class="key">TAB</span></kbd> creates &lsquo;<samp>50 40 30 20 10</samp>&rsquo;.
</p>
<a name="index-M_002dTAB"></a>
<a name="index-calc_002droll_002dup"></a>
<p>The command <kbd>M-<span class="key">TAB</span></kbd> (<code>calc-roll-up</code>) is analogous to <tt class="key">TAB</tt>
except that it rotates upward instead of downward.  Also, the default
with no prefix argument is to rotate the top 3 elements.
For example, with &lsquo;<samp>10 20 30 40 50</samp>&rsquo; on the stack,
<kbd>M-<span class="key">TAB</span></kbd> creates &lsquo;<samp>10 20 40 50 30</samp>&rsquo;,
<kbd>C-u 4 M-<span class="key">TAB</span></kbd> creates &lsquo;<samp>10 30 40 50 20</samp>&rsquo;,
<kbd>C-u - 2 M-<span class="key">TAB</span></kbd> creates &lsquo;<samp>30 40 50 10 20</samp>&rsquo;, and
<kbd>C-u 0 M-<span class="key">TAB</span></kbd> creates &lsquo;<samp>50 40 30 20 10</samp>&rsquo;.
</p>
<p>A good way to view the operation of <tt class="key">TAB</tt> and <kbd>M-<span class="key">TAB</span></kbd> is in
terms of moving a particular element to a new position in the stack.
With a positive argument <var>n</var>, <tt class="key">TAB</tt> moves the top stack
element down to level <var>n</var>, making room for it by pulling all the
intervening stack elements toward the top.  <kbd>M-<span class="key">TAB</span></kbd> moves the
element at level <var>n</var> up to the top.  (Compare with <tt class="key">LFD</tt>,
which copies instead of moving the element in level <var>n</var>.)
</p>
<p>With a negative argument <i>-<var>n</var></i>, <tt class="key">TAB</tt> rotates the stack
to move the object in level <var>n</var> to the deepest place in the
stack, and the object in level <i><var>n</var>+1</i> to the top.  <kbd>M-<span class="key">TAB</span></kbd>
rotates the deepest stack element to be in level <var>n</var>, also
putting the top stack element in level <i><var>n</var>+1</i>.
</p>
<p>See <a href="#Selecting-Subformulas">Selecting Subformulas</a>, for a way to apply these commands to
any portion of a vector or formula on the stack.
</p>
<a name="index-C_002dxC_002dt"></a>
<a name="index-calc_002dtranspose_002dlines"></a>
<a name="index-Moving-stack-entries"></a>
<p>The command <kbd>C-x C-t</kbd> (<code>calc-transpose-lines</code>) will transpose
the stack object determined by the point with the stack object at the
next higher level. For example, with &lsquo;<samp>10 20 30 40 50</samp>&rsquo; on the
stack and the point on the line containing &lsquo;<samp>30</samp>&rsquo;, <kbd>C-x C-t</kbd>
creates &lsquo;<samp>10 20 40 30 50</samp>&rsquo;.  More generally, <kbd>C-x C-t</kbd> acts on
the stack objects determined by the current point (and mark) similar
to how the text-mode command <code>transpose-lines</code> acts on
lines.  With argument <var>n</var>, <kbd>C-x C-t</kbd> will move the stack object
at the level above the current point and move it past N other objects;
for example, with &lsquo;<samp>10 20 30 40 50</samp>&rsquo; on the stack and the point on
the line containing &lsquo;<samp>30</samp>&rsquo;, <kbd>C-u 2 C-x C-t</kbd> creates
&lsquo;<samp>10 40 20 30 50</samp>&rsquo;. With an argument of 0, <kbd>C-x C-t</kbd> will switch
the stack objects at the levels determined by the point and the mark.
</p>
<hr>
<a name="Editing-Stack-Entries"></a>
<div class="header">
<p>
Next: <a href="#Trail-Commands" accesskey="n" rel="next">Trail Commands</a>, Previous: <a href="#Stack-Manipulation" accesskey="p" rel="prev">Stack Manipulation</a>, Up: <a href="#Stack-and-Trail" accesskey="u" rel="up">Stack and Trail</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Editing-Stack-Entries-1"></a>
<h3 class="section">5.2 Editing Stack Entries</h3>

<p><a name="index-_0060"></a>
<a name="index-calc_002dedit"></a>
<a name="index-calc_002dedit_002dfinish"></a>
<a name="index-Editing-the-stack-with-Emacs"></a>
The <kbd>`</kbd> (<code>calc-edit</code>) command creates a temporary buffer
(<samp>*Calc Edit*</samp>) for editing the top-of-stack value using regular
Emacs commands.  Note that <kbd>`</kbd> is a grave accent, not an apostrophe.
With a numeric prefix argument, it edits the specified number of stack
entries at once.  (An argument of zero edits the entire stack; a
negative argument edits one specific stack entry.)
</p>
<p>When you are done editing, press <kbd>C-c C-c</kbd> to finish and return
to Calc.  The <tt class="key">RET</tt> and <tt class="key">LFD</tt> keys also work to finish most
sorts of editing, though in some cases Calc leaves <tt class="key">RET</tt> with its
usual meaning (&ldquo;insert a newline&rdquo;) if it&rsquo;s a situation where you
might want to insert new lines into the editing buffer.
</p>
<p>When you finish editing, the Calculator parses the lines of text in
the <samp>*Calc Edit*</samp> buffer as numbers or formulas, replaces the
original stack elements in the original buffer with these new values,
then kills the <samp>*Calc Edit*</samp> buffer.  The original Calculator buffer
continues to exist during editing, but for best results you should be
careful not to change it until you have finished the edit.  You can
also cancel the edit by killing the buffer with <kbd>C-x k</kbd>.
</p>
<p>The formula is normally reevaluated as it is put onto the stack.
For example, editing &lsquo;<samp>a + 2</samp>&rsquo; to &lsquo;<samp>3 + 2</samp>&rsquo; and pressing
<kbd>C-c C-c</kbd> will push 5 on the stack.  If you use <tt class="key">LFD</tt> to
finish, Calc will put the result on the stack without evaluating it.
</p>
<p>If you give a prefix argument to <kbd>C-c C-c</kbd>,
Calc will not kill the <samp>*Calc Edit*</samp> buffer.  You can switch
back to that buffer and continue editing if you wish.  However, you
should understand that if you initiated the edit with <kbd>`</kbd>, the
<kbd>C-c C-c</kbd> operation will be programmed to replace the top of the
stack with the new edited value, and it will do this even if you have
rearranged the stack in the meanwhile.  This is not so much of a problem
with other editing commands, though, such as <kbd>s e</kbd>
(<code>calc-edit-variable</code>; see <a href="#Operations-on-Variables">Operations on Variables</a>).
</p>
<p>If the <code>calc-edit</code> command involves more than one stack entry,
each line of the <samp>*Calc Edit*</samp> buffer is interpreted as a
separate formula.  Otherwise, the entire buffer is interpreted as
one formula, with line breaks ignored.  (You can use <kbd>C-o</kbd> or
<kbd>C-q C-j</kbd> to insert a newline in the buffer without pressing <tt class="key">RET</tt>.)
</p>
<p>The <kbd>`</kbd> key also works during numeric or algebraic entry.  The
text entered so far is moved to the <samp>*Calc Edit*</samp> buffer for
more extensive editing than is convenient in the minibuffer.
</p>
<hr>
<a name="Trail-Commands"></a>
<div class="header">
<p>
Next: <a href="#Keep-Arguments" accesskey="n" rel="next">Keep Arguments</a>, Previous: <a href="#Editing-Stack-Entries" accesskey="p" rel="prev">Editing Stack Entries</a>, Up: <a href="#Stack-and-Trail" accesskey="u" rel="up">Stack and Trail</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Trail-Commands-1"></a>
<h3 class="section">5.3 Trail Commands</h3>

<p><a name="index-Trail-buffer"></a>
The commands for manipulating the Calc Trail buffer are two-key sequences
beginning with the <kbd>t</kbd> prefix.
</p>
<a name="index-t-d"></a>
<a name="index-calc_002dtrail_002ddisplay"></a>
<p>The <kbd>t d</kbd> (<code>calc-trail-display</code>) command turns display of the
trail on and off.  Normally the trail display is toggled on if it was off,
off if it was on.  With a numeric prefix of zero, this command always
turns the trail off; with a prefix of one, it always turns the trail on.
The other trail-manipulation commands described here automatically turn
the trail on.  Note that when the trail is off values are still recorded
there; they are simply not displayed.  To set Emacs to turn the trail
off by default, type <kbd>t d</kbd> and then save the mode settings with
<kbd>m m</kbd> (<code>calc-save-modes</code>).
</p>
<a name="index-t-i"></a>
<a name="index-calc_002dtrail_002din"></a>
<a name="index-t-o"></a>
<a name="index-calc_002dtrail_002dout"></a>
<p>The <kbd>t i</kbd> (<code>calc-trail-in</code>) and <kbd>t o</kbd>
(<code>calc-trail-out</code>) commands switch the cursor into and out of the
Calc Trail window.  In practice they are rarely used, since the commands
shown below are a more convenient way to move around in the
trail, and they work &ldquo;by remote control&rdquo; when the cursor is still
in the Calculator window.
</p>
<a name="index-Trail-pointer"></a>
<p>There is a <em>trail pointer</em> which selects some entry of the trail at
any given time.  The trail pointer looks like a &lsquo;<samp>&gt;</samp>&rsquo; symbol right
before the selected number.  The following commands operate on the
trail pointer in various ways.
</p>
<a name="index-t-y"></a>
<a name="index-calc_002dtrail_002dyank"></a>
<a name="index-Retrieving-previous-results"></a>
<p>The <kbd>t y</kbd> (<code>calc-trail-yank</code>) command reads the selected value in
the trail and pushes it onto the Calculator stack.  It allows you to
re-use any previously computed value without retyping.  With a numeric
prefix argument <var>n</var>, it yanks the value <var>n</var> lines above the current
trail pointer.
</p>
<a name="index-t-_003c"></a>
<a name="index-calc_002dtrail_002dscroll_002dleft"></a>
<a name="index-t-_003e"></a>
<a name="index-calc_002dtrail_002dscroll_002dright"></a>
<p>The <kbd>t &lt;</kbd> (<code>calc-trail-scroll-left</code>) and <kbd>t &gt;</kbd>
(<code>calc-trail-scroll-right</code>) commands horizontally scroll the trail
window left or right by one half of its width.
</p>
<a name="index-t-n"></a>
<a name="index-calc_002dtrail_002dnext"></a>
<a name="index-t-p"></a>
<a name="index-calc_002dtrail_002dprevious"></a>
<a name="index-t-f"></a>
<a name="index-calc_002dtrail_002dforward"></a>
<a name="index-t-b"></a>
<a name="index-calc_002dtrail_002dbackward"></a>
<p>The <kbd>t n</kbd> (<code>calc-trail-next</code>) and <kbd>t p</kbd>
(<code>calc-trail-previous)</code> commands move the trail pointer down or up
one line.  The <kbd>t f</kbd> (<code>calc-trail-forward</code>) and <kbd>t b</kbd>
(<code>calc-trail-backward</code>) commands move the trail pointer down or up
one screenful at a time.  All of these commands accept numeric prefix
arguments to move several lines or screenfuls at a time.
</p>
<a name="index-t-_005b"></a>
<a name="index-calc_002dtrail_002dfirst"></a>
<a name="index-t-_005d"></a>
<a name="index-calc_002dtrail_002dlast"></a>
<a name="index-t-h"></a>
<a name="index-calc_002dtrail_002dhere"></a>
<p>The <kbd>t [</kbd> (<code>calc-trail-first</code>) and <kbd>t ]</kbd>
(<code>calc-trail-last</code>) commands move the trail pointer to the first or
last line of the trail.  The <kbd>t h</kbd> (<code>calc-trail-here</code>) command
moves the trail pointer to the cursor position; unlike the other trail
commands, <kbd>t h</kbd> works only when Calc Trail is the selected window.
</p>
<a name="index-t-s"></a>
<a name="index-calc_002dtrail_002disearch_002dforward"></a>
<a name="index-t-r"></a>
<a name="index-calc_002dtrail_002disearch_002dbackward"></a>
<p>The <kbd>t s</kbd> (<code>calc-trail-isearch-forward</code>) and <kbd>t r</kbd>
(<code>calc-trail-isearch-backward</code>) commands perform an incremental
search forward or backward through the trail.  You can press <tt class="key">RET</tt>
to terminate the search; the trail pointer moves to the current line.
If you cancel the search with <kbd>C-g</kbd>, the trail pointer stays where
it was when the search began.
</p>
<a name="index-t-m"></a>
<a name="index-calc_002dtrail_002dmarker"></a>
<p>The <kbd>t m</kbd> (<code>calc-trail-marker</code>) command allows you to enter a
line of text of your own choosing into the trail.  The text is inserted
after the line containing the trail pointer; this usually means it is
added to the end of the trail.  Trail markers are useful mainly as the
targets for later incremental searches in the trail.
</p>
<a name="index-t-k"></a>
<a name="index-calc_002dtrail_002dkill"></a>
<p>The <kbd>t k</kbd> (<code>calc-trail-kill</code>) command removes the selected line
from the trail.  The line is saved in the Emacs kill ring suitable for
yanking into another buffer, but it is not easy to yank the text back
into the trail buffer.  With a numeric prefix argument, this command
kills the <var>n</var> lines below or above the selected one.
</p>
<p>The <kbd>t .</kbd> (<code>calc-full-trail-vectors</code>) command is described
elsewhere; see <a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a>.
</p>
<hr>
<a name="Keep-Arguments"></a>
<div class="header">
<p>
Previous: <a href="#Trail-Commands" accesskey="p" rel="prev">Trail Commands</a>, Up: <a href="#Stack-and-Trail" accesskey="u" rel="up">Stack and Trail</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Keep-Arguments-1"></a>
<h3 class="section">5.4 Keep Arguments</h3>

<p><a name="index-K"></a>
<a name="index-calc_002dkeep_002dargs"></a>
The <kbd>K</kbd> (<code>calc-keep-args</code>) command acts like a prefix for
the following command.  It prevents that command from removing its
arguments from the stack.  For example, after <kbd>2 <span class="key">RET</span> 3 +</kbd>,
the stack contains the sole number 5, but after <kbd>2 <span class="key">RET</span> 3 K +</kbd>,
the stack contains the arguments and the result: &lsquo;<samp>2 3 5</samp>&rsquo;.
</p>
<p>With the exception of keyboard macros, this works for all commands that
take arguments off the stack. (To avoid potentially unpleasant behavior,
a <kbd>K</kbd> prefix before a keyboard macro will be ignored.  A <kbd>K</kbd>
prefix called <em>within</em> the keyboard macro will still take effect.)
As another example, <kbd>K a s</kbd> simplifies a formula, pushing the
simplified version of the formula onto the stack after the original
formula (rather than replacing the original formula).  Note that you
could get the same effect by typing <kbd><span class="key">RET</span> a s</kbd>, copying the
formula and then simplifying the copy. One difference is that for a very
large formula the time taken to format the intermediate copy in
<kbd><span class="key">RET</span> a s</kbd> could be noticeable; <kbd>K a s</kbd> would avoid this
extra work.
</p>
<p>Even stack manipulation commands are affected.  <tt class="key">TAB</tt> works by
popping two values and pushing them back in the opposite order,
so <kbd>2 <span class="key">RET</span> 3 K <span class="key">TAB</span></kbd> produces &lsquo;<samp>2 3 3 2</samp>&rsquo;.
</p>
<p>A few Calc commands provide other ways of doing the same thing.
For example, <kbd>' sin($)</kbd> replaces the number on the stack with
its sine using algebraic entry; to push the sine and keep the
original argument you could use either <kbd>' sin($1)</kbd> or
<kbd>K ' sin($)</kbd>.  See <a href="#Algebraic-Entry">Algebraic Entry</a>.  Also, the <kbd>s s</kbd>
command is effectively the same as <kbd>K s t</kbd>.  See <a href="#Storing-Variables">Storing Variables</a>.
</p>
<p>If you execute a command and then decide you really wanted to keep
the argument, you can press <kbd>M-<span class="key">RET</span></kbd> (<code>calc-last-args</code>).
This command pushes the last arguments that were popped by any command
onto the stack.  Note that the order of things on the stack will be
different than with <kbd>K</kbd>:  <kbd>2 <span class="key">RET</span> 3 + M-<span class="key">RET</span></kbd> leaves
&lsquo;<samp>5 2 3</samp>&rsquo; on the stack instead of &lsquo;<samp>2 3 5</samp>&rsquo;.  See <a href="#Undo">Undo</a>.
</p>
<hr>
<a name="Mode-Settings"></a>
<div class="header">
<p>
Next: <a href="#Arithmetic" accesskey="n" rel="next">Arithmetic</a>, Previous: <a href="#Stack-and-Trail" accesskey="p" rel="prev">Stack and Trail</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mode-Settings-1"></a>
<h2 class="chapter">6 Mode Settings</h2>

<p>This chapter describes commands that set modes in the Calculator.
They do not affect the contents of the stack, although they may change
the <em>appearance</em> or <em>interpretation</em> of the stack&rsquo;s contents.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#General-Mode-Commands" accesskey="1">General Mode Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Precision" accesskey="2">Precision</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Inverse-and-Hyperbolic" accesskey="3">Inverse and Hyperbolic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Calculation-Modes" accesskey="4">Calculation Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Simplification-Modes" accesskey="5">Simplification Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Declarations" accesskey="6">Declarations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Display-Modes" accesskey="7">Display Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Language-Modes" accesskey="8">Language Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Modes-Variable" accesskey="9">Modes Variable</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Calc-Mode-Line">Calc Mode Line</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="General-Mode-Commands"></a>
<div class="header">
<p>
Next: <a href="#Precision" accesskey="n" rel="next">Precision</a>, Previous: <a href="#Mode-Settings" accesskey="p" rel="prev">Mode Settings</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="General-Mode-Commands-1"></a>
<h3 class="section">6.1 General Mode Commands</h3>

<p><a name="index-m-m"></a>
<a name="index-calc_002dsave_002dmodes"></a>
<a name="index-Continuous-memory"></a>
<a name="index-Saving-mode-settings"></a>
<a name="index-Permanent-mode-settings"></a>
<a name="index-Calc-init-file_002c-mode-settings"></a>
You can save all of the current mode settings in your Calc init file
(the file given by the variable <code>calc-settings-file</code>, typically
<samp>~/.emacs.d/calc.el</samp>) with the <kbd>m m</kbd> (<code>calc-save-modes</code>)
command.  This will cause Emacs to reestablish these modes each time
it starts up.  The modes saved in the file include everything
controlled by the <kbd>m</kbd> and <kbd>d</kbd> prefix keys, the current
precision and binary word size, whether or not the trail is displayed,
the current height of the Calc window, and more.  The current
interface (used when you type <kbd>C-x * *</kbd>) is also saved.  If there
were already saved mode settings in the file, they are replaced.
Otherwise, the new mode information is appended to the end of the
file.
</p>
<a name="index-m-R"></a>
<a name="index-calc_002dmode_002drecord_002dmode"></a>
<p>The <kbd>m R</kbd> (<code>calc-mode-record-mode</code>) command tells Calc to
record all the mode settings (as if by pressing <kbd>m m</kbd>) every
time a mode setting changes.  If the modes are saved this way, then this
&ldquo;automatic mode recording&rdquo; mode is also saved.
Type <kbd>m R</kbd> again to disable this method of recording the mode
settings.  To turn it off permanently, the <kbd>m m</kbd> command will also be
necessary.   (If Embedded mode is enabled, other options for recording
the modes are available; see <a href="#Mode-Settings-in-Embedded-Mode">Mode Settings in Embedded Mode</a>.)
</p>
<a name="index-m-F"></a>
<a name="index-calc_002dsettings_002dfile_002dname"></a>
<p>The <kbd>m F</kbd> (<code>calc-settings-file-name</code>) command allows you to
choose a different file than the current value of <code>calc-settings-file</code>
for <kbd>m m</kbd>, <kbd>Z P</kbd>, and similar commands to save permanent information.
You are prompted for a file name.  All Calc modes are then reset to
their default values, then settings from the file you named are loaded
if this file exists, and this file becomes the one that Calc will
use in the future for commands like <kbd>m m</kbd>.  The default settings
file name is <samp>~/.emacs.d/calc.el</samp>.  You can see the current file name by
giving a blank response to the <kbd>m F</kbd> prompt.  See also the
discussion of the <code>calc-settings-file</code> variable; see <a href="#Customizing-Calc">Customizing Calc</a>.
</p>
<p>If the file name you give is your user init file (typically
<samp>~/.emacs</samp>), <kbd>m F</kbd> will not automatically load the new file.  This
is because your user init file may contain other things you don&rsquo;t want
to reread.  You can give
a numeric prefix argument of 1 to <kbd>m F</kbd> to force it to read the
file no matter what.  Conversely, an argument of <i>-1</i> tells
<kbd>m F</kbd> <em>not</em> to read the new file.  An argument of 2 or <i>-2</i>
tells <kbd>m F</kbd> not to reset the modes to their defaults beforehand,
which is useful if you intend your new file to have a variant of the
modes present in the file you were using before.
</p>
<a name="index-m-x"></a>
<a name="index-calc_002dalways_002dload_002dextensions"></a>
<p>The <kbd>m x</kbd> (<code>calc-always-load-extensions</code>) command enables a mode
in which the first use of Calc loads the entire program, including all
extensions modules.  Otherwise, the extensions modules will not be loaded
until the various advanced Calc features are used.  Since this mode only
has effect when Calc is first loaded, <kbd>m x</kbd> is usually followed by
<kbd>m m</kbd> to make the mode-setting permanent.  To load all of Calc just
once, rather than always in the future, you can press <kbd>C-x * L</kbd>.
</p>
<a name="index-m-S"></a>
<a name="index-calc_002dshift_002dprefix"></a>
<p>The <kbd>m S</kbd> (<code>calc-shift-prefix</code>) command enables a mode in which
all of Calc&rsquo;s letter prefix keys may be typed shifted as well as unshifted.
If you are typing, say, <kbd>a S</kbd> (<code>calc-solve-for</code>) quite often
you might find it easier to turn this mode on so that you can type
<kbd>A S</kbd> instead.  When this mode is enabled, the commands that used to
be on those single shifted letters (e.g., <kbd>A</kbd> (<code>calc-abs</code>)) can
now be invoked by pressing the shifted letter twice: <kbd>A A</kbd>.  Note
that the <kbd>v</kbd> prefix key always works both shifted and unshifted, and
the <kbd>z</kbd> and <kbd>Z</kbd> prefix keys are always distinct.  Also, the <kbd>h</kbd>
prefix is not affected by this mode.  Press <kbd>m S</kbd> again to disable
shifted-prefix mode.
</p>
<hr>
<a name="Precision"></a>
<div class="header">
<p>
Next: <a href="#Inverse-and-Hyperbolic" accesskey="n" rel="next">Inverse and Hyperbolic</a>, Previous: <a href="#General-Mode-Commands" accesskey="p" rel="prev">General Mode Commands</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Precision-1"></a>
<h3 class="section">6.2 Precision</h3>

<p><a name="index-p"></a>
<a name="index-calc_002dprecision"></a>
<a name="index-Precision-of-calculations"></a>
The <kbd>p</kbd> (<code>calc-precision</code>) command controls the precision to
which floating-point calculations are carried.  The precision must be
at least 3 digits and may be arbitrarily high, within the limits of
memory and time.  This affects only floats:  Integer and rational
calculations are always carried out with as many digits as necessary.
</p>
<p>The <kbd>p</kbd> key prompts for the current precision.  If you wish you
can instead give the precision as a numeric prefix argument.
</p>
<p>Many internal calculations are carried to one or two digits higher
precision than normal.  Results are rounded down afterward to the
current precision.  Unless a special display mode has been selected,
floats are always displayed with their full stored precision, i.e.,
what you see is what you get.  Reducing the current precision does not
round values already on the stack, but those values will be rounded
down before being used in any calculation.  The <kbd>c 0</kbd> through
<kbd>c 9</kbd> commands (see <a href="#Conversions">Conversions</a>) can be used to round an
existing value to a new precision.
</p>
<a name="index-Accuracy-of-calculations-1"></a>
<p>It is important to distinguish the concepts of <em>precision</em> and
<em>accuracy</em>.  In the normal usage of these words, the number
123.4567 has a precision of 7 digits but an accuracy of 4 digits.
The precision is the total number of digits not counting leading
or trailing zeros (regardless of the position of the decimal point).
The accuracy is simply the number of digits after the decimal point
(again not counting trailing zeros).  In Calc you control the precision,
not the accuracy of computations.  If you were to set the accuracy
instead, then calculations like &lsquo;<samp>exp(100)</samp>&rsquo; would generate many
more digits than you would typically need, while &lsquo;<samp>exp(-100)</samp>&rsquo; would
probably round to zero!  In Calc, both these computations give you
exactly 12 (or the requested number of) significant digits.
</p>
<p>The only Calc features that deal with accuracy instead of precision
are fixed-point display mode for floats (<kbd>d f</kbd>; see <a href="#Float-Formats">Float Formats</a>),
and the rounding functions like <code>floor</code> and <code>round</code>
(see <a href="#Integer-Truncation">Integer Truncation</a>).  Also, <kbd>c 0</kbd> through <kbd>c 9</kbd>
deal with both precision and accuracy depending on the magnitudes
of the numbers involved.
</p>
<p>If you need to work with a particular fixed accuracy (say, dollars and
cents with two digits after the decimal point), one solution is to work
with integers and an &ldquo;implied&rdquo; decimal point.  For example, $8.99
divided by 6 would be entered <kbd>899 <span class="key">RET</span> 6 /</kbd>, yielding 149.833
(actually $1.49833 with our implied decimal point); pressing <kbd>R</kbd>
would round this to 150 cents, i.e., $1.50.
</p>
<p>See <a href="#Floats">Floats</a>, for still more on floating-point precision and related
issues.
</p>
<hr>
<a name="Inverse-and-Hyperbolic"></a>
<div class="header">
<p>
Next: <a href="#Calculation-Modes" accesskey="n" rel="next">Calculation Modes</a>, Previous: <a href="#Precision" accesskey="p" rel="prev">Precision</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Inverse-and-Hyperbolic-Flags"></a>
<h3 class="section">6.3 Inverse and Hyperbolic Flags</h3>

<p><a name="index-I"></a>
<a name="index-calc_002dinverse"></a>
There is no single-key equivalent to the <code>calc-arcsin</code> function.
Instead, you must first press <kbd>I</kbd> (<code>calc-inverse</code>) to set
the <em>Inverse Flag</em>, then press <kbd>S</kbd> (<code>calc-sin</code>).
The <kbd>I</kbd> key actually toggles the Inverse Flag.  When this flag
is set, the word &lsquo;<samp>Inv</samp>&rsquo; appears in the mode line.
</p>
<a name="index-H"></a>
<a name="index-calc_002dhyperbolic"></a>
<p>Likewise, the <kbd>H</kbd> key (<code>calc-hyperbolic</code>) sets or clears the
Hyperbolic Flag, which transforms <code>calc-sin</code> into <code>calc-sinh</code>.
If both of these flags are set at once, the effect will be
<code>calc-arcsinh</code>.  (The Hyperbolic flag is also used by some
non-trigonometric commands; for example <kbd>H L</kbd> computes a base-10,
instead of base-<i>e</i>, logarithm.)
</p>
<p>Command names like <code>calc-arcsin</code> are provided for completeness, and
may be executed with <kbd>x</kbd> or <kbd>M-x</kbd>.  Their effect is simply to
toggle the Inverse and/or Hyperbolic flags and then execute the
corresponding base command (<code>calc-sin</code> in this case).
</p>
<a name="index-O"></a>
<a name="index-calc_002doption"></a>
<p>The <kbd>O</kbd> key (<code>calc-option</code>) sets another flag, the
<em>Option Flag</em>, which also can alter the subsequent Calc command in
various ways.
</p>
<p>The Inverse, Hyperbolic and Option flags apply only to the next
Calculator command, after which they are automatically cleared.  (They
are also cleared if the next keystroke is not a Calc command.)  Digits
you type after <kbd>I</kbd>, <kbd>H</kbd> or <kbd>O</kbd> (or <kbd>K</kbd>) are treated as
prefix arguments for the next command, not as numeric entries.  The
same is true of <kbd>C-u</kbd>, but not of the minus sign (<kbd>K -</kbd> means
to subtract and keep arguments).
</p>
<p>Another Calc prefix flag, <kbd>K</kbd> (keep-arguments), is discussed
elsewhere.  See <a href="#Keep-Arguments">Keep Arguments</a>.
</p>
<hr>
<a name="Calculation-Modes"></a>
<div class="header">
<p>
Next: <a href="#Simplification-Modes" accesskey="n" rel="next">Simplification Modes</a>, Previous: <a href="#Inverse-and-Hyperbolic" accesskey="p" rel="prev">Inverse and Hyperbolic</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Calculation-Modes-1"></a>
<h3 class="section">6.4 Calculation Modes</h3>

<p>The commands in this section are two-key sequences beginning with
the <kbd>m</kbd> prefix.  (That&rsquo;s the letter <kbd>m</kbd>, not the <tt class="key">META</tt> key.)
The &lsquo;<samp>m a</samp>&rsquo; (<code>calc-algebraic-mode</code>) command is described elsewhere
(see <a href="#Algebraic-Entry">Algebraic Entry</a>).
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Angular-Modes" accesskey="1">Angular Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Polar-Mode" accesskey="2">Polar Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fraction-Mode" accesskey="3">Fraction Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Infinite-Mode" accesskey="4">Infinite Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Symbolic-Mode" accesskey="5">Symbolic Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matrix-Mode" accesskey="6">Matrix Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Automatic-Recomputation" accesskey="7">Automatic Recomputation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Working-Message" accesskey="8">Working Message</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Angular-Modes"></a>
<div class="header">
<p>
Next: <a href="#Polar-Mode" accesskey="n" rel="next">Polar Mode</a>, Previous: <a href="#Calculation-Modes" accesskey="p" rel="prev">Calculation Modes</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Angular-Modes-1"></a>
<h4 class="subsection">6.4.1 Angular Modes</h4>

<p><a name="index-Angular-mode"></a>
The Calculator supports three notations for angles: radians, degrees,
and degrees-minutes-seconds.  When a number is presented to a function
like <code>sin</code> that requires an angle, the current angular mode is
used to interpret the number as either radians or degrees.  If an HMS
form is presented to <code>sin</code>, it is always interpreted as
degrees-minutes-seconds.
</p>
<p>Functions that compute angles produce a number in radians, a number in
degrees, or an HMS form depending on the current angular mode.  If the
result is a complex number and the current mode is HMS, the number is
instead expressed in degrees.  (Complex-number calculations would
normally be done in Radians mode, though.  Complex numbers are converted
to degrees by calculating the complex result in radians and then
multiplying by 180 over &lsquo;<samp>pi</samp>&rsquo;.)
</p>
<a name="index-m-r"></a>
<a name="index-calc_002dradians_002dmode"></a>
<a name="index-m-d"></a>
<a name="index-calc_002ddegrees_002dmode"></a>
<a name="index-m-h"></a>
<a name="index-calc_002dhms_002dmode"></a>
<p>The <kbd>m r</kbd> (<code>calc-radians-mode</code>), <kbd>m d</kbd> (<code>calc-degrees-mode</code>),
and <kbd>m h</kbd> (<code>calc-hms-mode</code>) commands control the angular mode.
The current angular mode is displayed on the Emacs mode line.
The default angular mode is Degrees.
</p>
<hr>
<a name="Polar-Mode"></a>
<div class="header">
<p>
Next: <a href="#Fraction-Mode" accesskey="n" rel="next">Fraction Mode</a>, Previous: <a href="#Angular-Modes" accesskey="p" rel="prev">Angular Modes</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Polar-Mode-1"></a>
<h4 class="subsection">6.4.2 Polar Mode</h4>

<p><a name="index-Polar-mode"></a>
The Calculator normally &ldquo;prefers&rdquo; rectangular complex numbers in the
sense that rectangular form is used when the proper form can not be
decided from the input.  This might happen by multiplying a rectangular
number by a polar one, by taking the square root of a negative real
number, or by entering <kbd>( 2 <span class="key">SPC</span> 3 )</kbd>.
</p>
<a name="index-m-p"></a>
<a name="index-calc_002dpolar_002dmode"></a>
<p>The <kbd>m p</kbd> (<code>calc-polar-mode</code>) command toggles complex-number
preference between rectangular and polar forms.  In Polar mode, all
of the above example situations would produce polar complex numbers.
</p>
<hr>
<a name="Fraction-Mode"></a>
<div class="header">
<p>
Next: <a href="#Infinite-Mode" accesskey="n" rel="next">Infinite Mode</a>, Previous: <a href="#Polar-Mode" accesskey="p" rel="prev">Polar Mode</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fraction-Mode-1"></a>
<h4 class="subsection">6.4.3 Fraction Mode</h4>

<p><a name="index-Fraction-mode"></a>
<a name="index-Division-of-integers"></a>
Division of two integers normally yields a floating-point number if the
result cannot be expressed as an integer.  In some cases you would
rather get an exact fractional answer.  One way to accomplish this is
to use the <kbd>:</kbd> (<code>calc-fdiv</code>) [<code>fdiv</code>] command, which
divides the two integers on the top of the stack to produce a fraction:
<kbd>6 <span class="key">RET</span> 4 :</kbd> produces &lsquo;<samp>3:2</samp>&rsquo; even though
<kbd>6 <span class="key">RET</span> 4 /</kbd> produces &lsquo;<samp>1.5</samp>&rsquo;.
</p>
<a name="index-m-f"></a>
<a name="index-calc_002dfrac_002dmode"></a>
<p>To set the Calculator to produce fractional results for normal integer
divisions, use the <kbd>m f</kbd> (<code>calc-frac-mode</code>) command.
For example, &lsquo;<samp>8/4</samp>&rsquo; produces &lsquo;<samp>2</samp>&rsquo; in either mode,
but &lsquo;<samp>6/4</samp>&rsquo; produces &lsquo;<samp>3:2</samp>&rsquo; in Fraction mode, &lsquo;<samp>1.5</samp>&rsquo; in
Float mode.
</p>
<p>At any time you can use <kbd>c f</kbd> (<code>calc-float</code>) to convert a
fraction to a float, or <kbd>c F</kbd> (<code>calc-fraction</code>) to convert a
float to a fraction.  See <a href="#Conversions">Conversions</a>.
</p>
<hr>
<a name="Infinite-Mode"></a>
<div class="header">
<p>
Next: <a href="#Symbolic-Mode" accesskey="n" rel="next">Symbolic Mode</a>, Previous: <a href="#Fraction-Mode" accesskey="p" rel="prev">Fraction Mode</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Infinite-Mode-1"></a>
<h4 class="subsection">6.4.4 Infinite Mode</h4>

<p><a name="index-Infinite-mode"></a>
The Calculator normally treats results like &lsquo;<samp>1 / 0</samp>&rsquo; as errors;
formulas like this are left in unsimplified form.  But Calc can be
put into a mode where such calculations instead produce &ldquo;infinite&rdquo;
results.
</p>
<a name="index-m-i"></a>
<a name="index-calc_002dinfinite_002dmode"></a>
<p>The <kbd>m i</kbd> (<code>calc-infinite-mode</code>) command turns this mode
on and off.  When the mode is off, infinities do not arise except
in calculations that already had infinities as inputs.  (One exception
is that infinite open intervals like &lsquo;<samp>[0 .. inf)</samp>&rsquo; can be
generated; however, intervals closed at infinity (&lsquo;<samp>[0 .. inf]</samp>&rsquo;)
will not be generated when Infinite mode is off.)
</p>
<p>With Infinite mode turned on, &lsquo;<samp>1 / 0</samp>&rsquo; will generate <code>uinf</code>,
an undirected infinity.  See <a href="#Infinities">Infinities</a>, for a discussion of the
difference between <code>inf</code> and <code>uinf</code>.  Also, &lsquo;<samp>0 / 0</samp>&rsquo;
evaluates to <code>nan</code>, the &ldquo;indeterminate&rdquo; symbol.  Various other
functions can also return infinities in this mode; for example,
&lsquo;<samp>ln(0) = -inf</samp>&rsquo;, and &lsquo;<samp>gamma(-7) = uinf</samp>&rsquo;.  Once again,
note that &lsquo;<samp>exp(inf) = inf</samp>&rsquo; regardless of Infinite mode because
this calculation has infinity as an input.
</p>
<a name="index-Positive-Infinite-mode"></a>
<p>The <kbd>m i</kbd> command with a numeric prefix argument of zero,
i.e., <kbd>C-u 0 m i</kbd>, turns on a Positive Infinite mode in
which zero is treated as positive instead of being directionless.
Thus, &lsquo;<samp>1 / 0 = inf</samp>&rsquo; and &lsquo;<samp>-1 / 0 = -inf</samp>&rsquo; in this mode.
Note that zero never actually has a sign in Calc; there are no
separate representations for <i>+0</i> and <i>-0</i>.  Positive
Infinite mode merely changes the interpretation given to the
single symbol, &lsquo;<samp>0</samp>&rsquo;.  One consequence of this is that, while
you might expect &lsquo;<samp>1 / -0 = -inf</samp>&rsquo;, actually &lsquo;<samp>1 / -0</samp>&rsquo;
is equivalent to &lsquo;<samp>1 / 0</samp>&rsquo;, which is equal to positive <code>inf</code>.
</p>
<hr>
<a name="Symbolic-Mode"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Mode" accesskey="n" rel="next">Matrix Mode</a>, Previous: <a href="#Infinite-Mode" accesskey="p" rel="prev">Infinite Mode</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Symbolic-Mode-1"></a>
<h4 class="subsection">6.4.5 Symbolic Mode</h4>

<p><a name="index-Symbolic-mode"></a>
<a name="index-Inexact-results"></a>
Calculations are normally performed numerically wherever possible.
For example, the <code>calc-sqrt</code> command, or <code>sqrt</code> function in an
algebraic expression, produces a numeric answer if the argument is a
number or a symbolic expression if the argument is an expression:
<kbd>2 Q</kbd> pushes 1.4142 but <kbd><span class="key">'</span> x+1 <span class="key">RET</span> Q</kbd> pushes &lsquo;<samp>sqrt(x+1)</samp>&rsquo;.
</p>
<a name="index-m-s"></a>
<a name="index-calc_002dsymbolic_002dmode"></a>
<p>In <em>Symbolic mode</em>, controlled by the <kbd>m s</kbd> (<code>calc-symbolic-mode</code>)
command, functions which would produce inexact, irrational results are
left in symbolic form.  Thus <kbd>16 Q</kbd> pushes 4, but <kbd>2 Q</kbd> pushes
&lsquo;<samp>sqrt(2)</samp>&rsquo;.
</p>
<a name="index-N"></a>
<a name="index-calc_002deval_002dnum"></a>
<p>The shift-<kbd>N</kbd> (<code>calc-eval-num</code>) command evaluates numerically
the expression at the top of the stack, by temporarily disabling
<code>calc-symbolic-mode</code> and executing <kbd>=</kbd> (<code>calc-evaluate</code>).
Given a numeric prefix argument, it also
sets the floating-point precision to the specified value for the duration
of the command.
</p>
<p>To evaluate a formula numerically without expanding the variables it
contains, you can use the key sequence <kbd>m s a v m s</kbd> (this uses
<code>calc-alg-evaluate</code>, which resimplifies but doesn&rsquo;t evaluate
variables.)
</p>
<hr>
<a name="Matrix-Mode"></a>
<div class="header">
<p>
Next: <a href="#Automatic-Recomputation" accesskey="n" rel="next">Automatic Recomputation</a>, Previous: <a href="#Symbolic-Mode" accesskey="p" rel="prev">Symbolic Mode</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matrix-and-Scalar-Modes"></a>
<h4 class="subsection">6.4.6 Matrix and Scalar Modes</h4>

<p><a name="index-Matrix-mode"></a>
<a name="index-Scalar-mode"></a>
Calc sometimes makes assumptions during algebraic manipulation that
are awkward or incorrect when vectors and matrices are involved.
Calc has two modes, <em>Matrix mode</em> and <em>Scalar mode</em>, which
modify its behavior around vectors in useful ways.
</p>
<a name="index-m-v"></a>
<a name="index-calc_002dmatrix_002dmode"></a>
<p>Press <kbd>m v</kbd> (<code>calc-matrix-mode</code>) once to enter Matrix mode.
In this mode, all objects are assumed to be matrices unless provably
otherwise.  One major effect is that Calc will no longer consider
multiplication to be commutative.  (Recall that in matrix arithmetic,
&lsquo;<samp>A*B</samp>&rsquo; is not the same as &lsquo;<samp>B*A</samp>&rsquo;.)  This assumption affects
rewrite rules and algebraic simplification.  Another effect of this
mode is that calculations that would normally produce constants like
0 and 1 (e.g., &lsquo;<samp>a - a</samp>&rsquo; and &lsquo;<samp>a / a</samp>&rsquo;, respectively) will now
produce function calls that represent &ldquo;generic&rdquo; zero or identity
matrices: &lsquo;<samp>idn(0)</samp>&rsquo;, &lsquo;<samp>idn(1)</samp>&rsquo;.  The <code>idn</code> function
&lsquo;<samp>idn(<var>a</var>,<var>n</var>)</samp>&rsquo; returns <var>a</var> times an <var>n</var>x<var>n</var>
identity matrix; if <var>n</var> is omitted, it doesn&rsquo;t know what
dimension to use and so the <code>idn</code> call remains in symbolic
form.  However, if this generic identity matrix is later combined
with a matrix whose size is known, it will be converted into
a true identity matrix of the appropriate size.  On the other hand,
if it is combined with a scalar (as in &lsquo;<samp>idn(1) + 2</samp>&rsquo;), Calc
will assume it really was a scalar after all and produce, e.g., 3.
</p>
<p>Press <kbd>m v</kbd> a second time to get Scalar mode.  Here, objects are
assumed <em>not</em> to be vectors or matrices unless provably so.
For example, normally adding a variable to a vector, as in
&lsquo;<samp>[x, y, z] + a</samp>&rsquo;, will leave the sum in symbolic form because
as far as Calc knows, &lsquo;<samp>a</samp>&rsquo; could represent either a number or
another 3-vector.  In Scalar mode, &lsquo;<samp>a</samp>&rsquo; is assumed to be a
non-vector, and the addition is evaluated to &lsquo;<samp>[x+a, y+a, z+a]</samp>&rsquo;.
</p>
<p>Press <kbd>m v</kbd> a third time to return to the normal mode of operation.
</p>
<p>If you press <kbd>m v</kbd> with a numeric prefix argument <var>n</var>, you
get a special &ldquo;dimensioned&rdquo; Matrix mode in which matrices of
unknown size are assumed to be <var>n</var>x<var>n</var> square matrices.
Then, the function call &lsquo;<samp>idn(1)</samp>&rsquo; will expand into an actual
matrix rather than representing a &ldquo;generic&rdquo; matrix.  Simply typing
<kbd>C-u m v</kbd> will get you a square Matrix mode, in which matrices of
unknown size are assumed to be square matrices of unspecified size.
</p>
<a name="index-Declaring-scalar-variables"></a>
<p>Of course these modes are approximations to the true state of
affairs, which is probably that some quantities will be matrices
and others will be scalars.  One solution is to &ldquo;declare&rdquo;
certain variables or functions to be scalar-valued.
See <a href="#Declarations">Declarations</a>, to see how to make declarations in Calc.
</p>
<p>There is nothing stopping you from declaring a variable to be
scalar and then storing a matrix in it; however, if you do, the
results you get from Calc may not be valid.  Suppose you let Calc
get the result &lsquo;<samp>[x+a, y+a, z+a]</samp>&rsquo; shown above, and then stored
&lsquo;<samp>[1, 2, 3]</samp>&rsquo; in &lsquo;<samp>a</samp>&rsquo;.  The result would not be the same as
for &lsquo;<samp>[x, y, z] + [1, 2, 3]</samp>&rsquo;, but that&rsquo;s because you have broken
your earlier promise to Calc that &lsquo;<samp>a</samp>&rsquo; would be scalar.
</p>
<p>Another way to mix scalars and matrices is to use selections
(see <a href="#Selecting-Subformulas">Selecting Subformulas</a>).  Use Matrix mode when operating on
your formula normally; then, to apply Scalar mode to a certain part
of the formula without affecting the rest just select that part,
change into Scalar mode and press <kbd>=</kbd> to resimplify the part
under this mode, then change back to Matrix mode before deselecting.
</p>
<hr>
<a name="Automatic-Recomputation"></a>
<div class="header">
<p>
Next: <a href="#Working-Message" accesskey="n" rel="next">Working Message</a>, Previous: <a href="#Matrix-Mode" accesskey="p" rel="prev">Matrix Mode</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Automatic-Recomputation-1"></a>
<h4 class="subsection">6.4.7 Automatic Recomputation</h4>

<p>The <em>evaluates-to</em> operator, &lsquo;<samp>=&gt;</samp>&rsquo;, has the special
property that any &lsquo;<samp>=&gt;</samp>&rsquo; formulas on the stack are recomputed
whenever variable values or mode settings that might affect them
are changed.  See <a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a>.
</p>
<a name="index-m-C"></a>
<a name="index-calc_002dauto_002drecompute"></a>
<p>The <kbd>m C</kbd> (<code>calc-auto-recompute</code>) command turns this
automatic recomputation on and off.  If you turn it off, Calc will
not update &lsquo;<samp>=&gt;</samp>&rsquo; operators on the stack (nor those in the
attached Embedded mode buffer, if there is one).  They will not
be updated unless you explicitly do so by pressing <kbd>=</kbd> or until
you press <kbd>m C</kbd> to turn recomputation back on.  (While automatic
recomputation is off, you can think of <kbd>m C m C</kbd> as a command
to update all &lsquo;<samp>=&gt;</samp>&rsquo; operators while leaving recomputation off.)
</p>
<p>To update &lsquo;<samp>=&gt;</samp>&rsquo; operators in an Embedded buffer while
automatic recomputation is off, use <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;u</kbd><!-- /@w -->.
See <a href="#Embedded-Mode">Embedded Mode</a>.
</p>
<hr>
<a name="Working-Message"></a>
<div class="header">
<p>
Previous: <a href="#Automatic-Recomputation" accesskey="p" rel="prev">Automatic Recomputation</a>, Up: <a href="#Calculation-Modes" accesskey="u" rel="up">Calculation Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Working-Messages"></a>
<h4 class="subsection">6.4.8 Working Messages</h4>

<p><a name="index-Performance"></a>
<a name="index-Working-messages"></a>
Since the Calculator is written entirely in Emacs Lisp, which is not
designed for heavy numerical work, many operations are quite slow.
The Calculator normally displays the message &lsquo;<samp>Working...</samp>&rsquo; in the
echo area during any command that may be slow.  In addition, iterative
operations such as square roots and trigonometric functions display the
intermediate result at each step.  Both of these types of messages can
be disabled if you find them distracting.
</p>
<a name="index-m-w"></a>
<a name="index-calc_002dworking"></a>
<p>Type <kbd>m w</kbd> (<code>calc-working</code>) with a numeric prefix of 0 to
disable all &ldquo;working&rdquo; messages.  Use a numeric prefix of 1 to enable
only the plain &lsquo;<samp>Working...</samp>&rsquo; message.  Use a numeric prefix of 2 to
see intermediate results as well.  With no numeric prefix this displays
the current mode.
</p>
<p>While it may seem that the &ldquo;working&rdquo; messages will slow Calc down
considerably, experiments have shown that their impact is actually
quite small.  But if your terminal is slow you may find that it helps
to turn the messages off.
</p>
<hr>
<a name="Simplification-Modes"></a>
<div class="header">
<p>
Next: <a href="#Declarations" accesskey="n" rel="next">Declarations</a>, Previous: <a href="#Calculation-Modes" accesskey="p" rel="prev">Calculation Modes</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Simplification-Modes-1"></a>
<h3 class="section">6.5 Simplification Modes</h3>

<p>The current <em>simplification mode</em> controls how numbers and formulas
are &ldquo;normalized&rdquo; when being taken from or pushed onto the stack.
Some normalizations are unavoidable, such as rounding floating-point
results to the current precision, and reducing fractions to simplest
form.  Others, such as simplifying a formula like &lsquo;<samp>a+a</samp>&rsquo; (or &lsquo;<samp>2+3</samp>&rsquo;),
are done automatically but can be turned off when necessary.
</p>
<p>When you press a key like <kbd>+</kbd> when &lsquo;<samp>2</samp>&rsquo; and &lsquo;<samp>3</samp>&rsquo; are on the
stack, Calc pops these numbers, normalizes them, creates the formula
&lsquo;<samp>2+3</samp>&rsquo;, normalizes it, and pushes the result.  Of course the standard
rules for normalizing &lsquo;<samp>2+3</samp>&rsquo; will produce the result &lsquo;<samp>5</samp>&rsquo;.
</p>
<p>Simplification mode commands consist of the lower-case <kbd>m</kbd> prefix key
followed by a shifted letter.
</p>
<a name="index-m-O"></a>
<a name="index-calc_002dno_002dsimplify_002dmode"></a>
<p>The <kbd>m O</kbd> (<code>calc-no-simplify-mode</code>) command turns off all optional
simplifications.  These would leave a formula like &lsquo;<samp>2+3</samp>&rsquo; alone.  In
fact, nothing except simple numbers are ever affected by normalization
in this mode.  Explicit simplification commands, such as <kbd>=</kbd> or
<kbd>a s</kbd>, can still be given to simplify any formulas.
See <a href="#Algebraic-Definitions">Algebraic Definitions</a>, for a sample use of
No-Simplification mode.
</p>
<a name="index-m-N"></a>
<a name="index-calc_002dnum_002dsimplify_002dmode"></a>
<p>The <kbd>m N</kbd> (<code>calc-num-simplify-mode</code>) command turns off simplification
of any formulas except those for which all arguments are constants.  For
example, &lsquo;<samp>1+2</samp>&rsquo; is simplified to &lsquo;<samp>3</samp>&rsquo;, and &lsquo;<samp>a+(2-2)</samp>&rsquo; is
simplified to &lsquo;<samp>a+0</samp>&rsquo; but no further, since one argument of the sum
is not a constant.  Unfortunately, &lsquo;<samp>(a+2)-2</samp>&rsquo; is <em>not</em> simplified
because the top-level &lsquo;<samp>-</samp>&rsquo; operator&rsquo;s arguments are not both
constant numbers (one of them is the formula &lsquo;<samp>a+2</samp>&rsquo;).
A constant is a number or other numeric object (such as a constant
error form or modulo form), or a vector all of whose
elements are constant.
</p>
<a name="index-m-I"></a>
<a name="index-calc_002dbasic_002dsimplify_002dmode"></a>
<p>The <kbd>m I</kbd> (<code>calc-basic-simplify-mode</code>) command does some basic
simplifications for all formulas.  This includes many easy and
fast algebraic simplifications such as &lsquo;<samp>a+0</samp>&rsquo; to &lsquo;<samp>a</samp>&rsquo;, and
&lsquo;<samp>a + 2 a</samp>&rsquo; to &lsquo;<samp>3 a</samp>&rsquo;, as well as evaluating functions like
&lsquo;<samp><tt>deriv</tt>(x^2, x)</samp>&rsquo; to &lsquo;<samp>2 x</samp>&rsquo;.
</p>
<a name="index-m-B"></a>
<a name="index-calc_002dbin_002dsimplify_002dmode"></a>
<p>The <kbd>m B</kbd> (<code>calc-bin-simplify-mode</code>) mode applies the basic
simplifications to a result and then, if the result is an integer,
uses the <kbd>b c</kbd> (<code>calc-clip</code>) command to clip the integer according
to the current binary word size.  See <a href="#Binary-Functions">Binary Functions</a>.  Real numbers
are rounded to the nearest integer and then clipped; other kinds of
results (after the basic simplifications) are left alone.
</p>
<a name="index-m-A"></a>
<a name="index-calc_002dalg_002dsimplify_002dmode"></a>
<p>The <kbd>m A</kbd> (<code>calc-alg-simplify-mode</code>) mode does standard
algebraic simplifications.  See <a href="#Algebraic-Simplifications">Algebraic Simplifications</a>.
</p>
<a name="index-m-E"></a>
<a name="index-calc_002dext_002dsimplify_002dmode"></a>
<p>The <kbd>m E</kbd> (<code>calc-ext-simplify-mode</code>) mode does &ldquo;extended&rdquo;, or
&ldquo;unsafe&rdquo;, algebraic simplification.  See <a href="#Unsafe-Simplifications">Unsafe Simplifications</a>.
</p>
<a name="index-m-U"></a>
<a name="index-calc_002dunits_002dsimplify_002dmode"></a>
<p>The <kbd>m U</kbd> (<code>calc-units-simplify-mode</code>) mode does units
simplification.  See <a href="#Simplification-of-Units">Simplification of Units</a>.  These include the
algebraic simplifications, plus variable names which
are identifiable as unit names (like &lsquo;<samp>mm</samp>&rsquo; for &ldquo;millimeters&rdquo;)
are simplified with their unit definitions in mind.
</p>
<p>A common technique is to set the simplification mode down to the lowest
amount of simplification you will allow to be applied automatically, then
use manual commands like <kbd>a s</kbd> and <kbd>c c</kbd> (<code>calc-clean</code>) to
perform higher types of simplifications on demand.
</p><hr>
<a name="Declarations"></a>
<div class="header">
<p>
Next: <a href="#Display-Modes" accesskey="n" rel="next">Display Modes</a>, Previous: <a href="#Simplification-Modes" accesskey="p" rel="prev">Simplification Modes</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Declarations-1"></a>
<h3 class="section">6.6 Declarations</h3>

<p>A <em>declaration</em> is a statement you make that promises you will
use a certain variable or function in a restricted way.  This may
give Calc the freedom to do things that it couldn&rsquo;t do if it had to
take the fully general situation into account.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Declaration-Basics" accesskey="1">Declaration Basics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Kinds-of-Declarations" accesskey="2">Kinds of Declarations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Functions-for-Declarations" accesskey="3">Functions for Declarations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Declaration-Basics"></a>
<div class="header">
<p>
Next: <a href="#Kinds-of-Declarations" accesskey="n" rel="next">Kinds of Declarations</a>, Previous: <a href="#Declarations" accesskey="p" rel="prev">Declarations</a>, Up: <a href="#Declarations" accesskey="u" rel="up">Declarations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Declaration-Basics-1"></a>
<h4 class="subsection">6.6.1 Declaration Basics</h4>

<p><a name="index-s-d"></a>
<a name="index-calc_002ddeclare_002dvariable"></a>
The <kbd>s d</kbd> (<code>calc-declare-variable</code>) command is the easiest
way to make a declaration for a variable.  This command prompts for
the variable name, then prompts for the declaration.  The default
at the declaration prompt is the previous declaration, if any.
You can edit this declaration, or press <kbd>C-k</kbd> to erase it and
type a new declaration.  (Or, erase it and press <tt class="key">RET</tt> to clear
the declaration, effectively &ldquo;undeclaring&rdquo; the variable.)
</p>
<p>A declaration is in general a vector of <em>type symbols</em> and
<em>range</em> values.  If there is only one type symbol or range value,
you can write it directly rather than enclosing it in a vector.
For example, <kbd>s d foo <span class="key">RET</span> real <span class="key">RET</span></kbd> declares <code>foo</code> to
be a real number, and <kbd>s d bar <span class="key">RET</span> [int, const, [1..6]] <span class="key">RET</span></kbd>
declares <code>bar</code> to be a constant integer between 1 and 6.
(Actually, you can omit the outermost brackets and Calc will
provide them for you: <kbd>s d bar <span class="key">RET</span> int, const, [1..6] <span class="key">RET</span></kbd>.)
</p>
<a name="index-Decls-variable"></a>
<a name="index-Decls"></a>
<p>Declarations in Calc are kept in a special variable called <code>Decls</code>.
This variable encodes the set of all outstanding declarations in
the form of a matrix.  Each row has two elements:  A variable or
vector of variables declared by that row, and the declaration
specifier as described above.  You can use the <kbd>s D</kbd> command to
edit this variable if you wish to see all the declarations at once.
See <a href="#Operations-on-Variables">Operations on Variables</a>, for a description of this command
and the <kbd>s p</kbd> command that allows you to save your declarations
permanently if you wish.
</p>
<p>Items being declared can also be function calls.  The arguments in
the call are ignored; the effect is to say that this function returns
values of the declared type for any valid arguments.  The <kbd>s d</kbd>
command declares only variables, so if you wish to make a function
declaration you will have to edit the <code>Decls</code> matrix yourself.
</p>
<p>For example, the declaration matrix
</p>
<div class="smallexample">
<pre class="smallexample">[ [ foo,       real       ]
  [ [j, k, n], int        ]
  [ f(1,2,3),  [0 .. inf) ] ]
</pre></div>

<p>declares that <code>foo</code> represents a real number, <code>j</code>, <code>k</code>
and <code>n</code> represent integers, and the function <code>f</code> always
returns a real number in the interval shown.
</p>
<a name="index-All"></a>
<p>If there is a declaration for the variable <code>All</code>, then that
declaration applies to all variables that are not otherwise declared.
It does not apply to function names.  For example, using the row
&lsquo;<samp>[All, real]</samp>&rsquo; says that all your variables are real unless they
are explicitly declared without <code>real</code> in some other row.
The <kbd>s d</kbd> command declares <code>All</code> if you give a blank
response to the variable-name prompt.
</p>
<hr>
<a name="Kinds-of-Declarations"></a>
<div class="header">
<p>
Next: <a href="#Functions-for-Declarations" accesskey="n" rel="next">Functions for Declarations</a>, Previous: <a href="#Declaration-Basics" accesskey="p" rel="prev">Declaration Basics</a>, Up: <a href="#Declarations" accesskey="u" rel="up">Declarations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Kinds-of-Declarations-1"></a>
<h4 class="subsection">6.6.2 Kinds of Declarations</h4>

<p>The type-specifier part of a declaration (that is, the second prompt
in the <kbd>s d</kbd> command) can be a type symbol, an interval, or a
vector consisting of zero or more type symbols followed by zero or
more intervals or numbers that represent the set of possible values
for the variable.
</p>
<div class="smallexample">
<pre class="smallexample">[ [ a, [1, 2, 3, 4, 5] ]
  [ b, [1 .. 5]        ]
  [ c, [int, 1 .. 5]   ] ]
</pre></div>

<p>Here <code>a</code> is declared to contain one of the five integers shown;
<code>b</code> is any number in the interval from 1 to 5 (any real number
since we haven&rsquo;t specified), and <code>c</code> is any integer in that
interval.  Thus the declarations for <code>a</code> and <code>c</code> are
nearly equivalent (see below).
</p>
<p>The type-specifier can be the empty vector &lsquo;<samp>[]</samp>&rsquo; to say that
nothing is known about a given variable&rsquo;s value.  This is the same
as not declaring the variable at all except that it overrides any
<code>All</code> declaration which would otherwise apply.
</p>
<p>The initial value of <code>Decls</code> is the empty vector &lsquo;<samp>[]</samp>&rsquo;.
If <code>Decls</code> has no stored value or if the value stored in it
is not valid, it is ignored and there are no declarations as far
as Calc is concerned.  (The <kbd>s d</kbd> command will replace such a
malformed value with a fresh empty matrix, &lsquo;<samp>[]</samp>&rsquo;, before recording
the new declaration.)  Unrecognized type symbols are ignored.
</p>
<p>The following type symbols describe what sorts of numbers will be
stored in a variable:
</p>
<dl compact="compact">
<dt><code>int</code></dt>
<dd><p>Integers.
</p></dd>
<dt><code>numint</code></dt>
<dd><p>Numerical integers.  (Integers or integer-valued floats.)
</p></dd>
<dt><code>frac</code></dt>
<dd><p>Fractions.  (Rational numbers which are not integers.)
</p></dd>
<dt><code>rat</code></dt>
<dd><p>Rational numbers.  (Either integers or fractions.)
</p></dd>
<dt><code>float</code></dt>
<dd><p>Floating-point numbers.
</p></dd>
<dt><code>real</code></dt>
<dd><p>Real numbers.  (Integers, fractions, or floats.  Actually,
intervals and error forms with real components also count as
reals here.)
</p></dd>
<dt><code>pos</code></dt>
<dd><p>Positive real numbers.  (Strictly greater than zero.)
</p></dd>
<dt><code>nonneg</code></dt>
<dd><p>Nonnegative real numbers.  (Greater than or equal to zero.)
</p></dd>
<dt><code>number</code></dt>
<dd><p>Numbers.  (Real or complex.)
</p></dd>
</dl>

<p>Calc uses this information to determine when certain simplifications
of formulas are safe.  For example, &lsquo;<samp>(x^y)^z</samp>&rsquo; cannot be
simplified to &lsquo;<samp>x^(y z)</samp>&rsquo; in general; for example,
&lsquo;<samp>((-3)^2)^1:2</samp>&rsquo; is 3, but &lsquo;<samp>(-3)^(2*1:2) = (-3)^1</samp>&rsquo; is <i>-3</i>.
However, this simplification <em>is</em> safe if <code>z</code> is known
to be an integer, or if <code>x</code> is known to be a nonnegative
real number.  If you have given declarations that allow Calc to
deduce either of these facts, Calc will perform this simplification
of the formula.
</p>
<p>Calc can apply a certain amount of logic when using declarations.
For example, &lsquo;<samp>(x^y)^(2n+1)</samp>&rsquo; will be simplified if <code>n</code>
has been declared <code>int</code>; Calc knows that an integer times an
integer, plus an integer, must always be an integer.  (In fact,
Calc would simplify &lsquo;<samp>(-x)^(2n+1)</samp>&rsquo; to &lsquo;<samp>-(x^(2n+1))</samp>&rsquo; since
it is able to determine that &lsquo;<samp>2n+1</samp>&rsquo; must be an odd integer.)
</p>
<p>Similarly, &lsquo;<samp>(abs(x)^y)^z</samp>&rsquo; will be simplified to &lsquo;<samp>abs(x)^(y z)</samp>&rsquo;
because Calc knows that the <code>abs</code> function always returns a
nonnegative real.  If you had a <code>myabs</code> function that also had
this property, you could get Calc to recognize it by adding the row
&lsquo;<samp>[myabs(), nonneg]</samp>&rsquo; to the <code>Decls</code> matrix.
</p>
<p>One instance of this simplification is &lsquo;<samp>sqrt(x^2)</samp>&rsquo; (since the
<code>sqrt</code> function is effectively a one-half power).  Normally
Calc leaves this formula alone.  After the command
<kbd>s d x <span class="key">RET</span> real <span class="key">RET</span></kbd>, however, it can simplify the formula to
&lsquo;<samp>abs(x)</samp>&rsquo;.  And after <kbd>s d x <span class="key">RET</span> nonneg <span class="key">RET</span></kbd>, Calc can
simplify this formula all the way to &lsquo;<samp>x</samp>&rsquo;.
</p>
<p>If there are any intervals or real numbers in the type specifier,
they comprise the set of possible values that the variable or
function being declared can have.  In particular, the type symbol
<code>real</code> is effectively the same as the range &lsquo;<samp>[-inf .. inf]</samp>&rsquo;
(note that infinity is included in the range of possible values);
<code>pos</code> is the same as &lsquo;<samp>(0 .. inf]</samp>&rsquo;, and <code>nonneg</code> is
the same as &lsquo;<samp>[0 .. inf]</samp>&rsquo;.  Saying &lsquo;<samp>[real, [-5 .. 5]]</samp>&rsquo; is
redundant because the fact that the variable is real can be
deduced just from the interval, but &lsquo;<samp>[int, [-5 .. 5]]</samp>&rsquo; and
&lsquo;<samp>[rat, [-5 .. 5]]</samp>&rsquo; are useful combinations.
</p>
<p>Note that the vector of intervals or numbers is in the same format
used by Calc&rsquo;s set-manipulation commands.  See <a href="#Set-Operations">Set Operations</a>.
</p>
<p>The type specifier &lsquo;<samp>[1, 2, 3]</samp>&rsquo; is equivalent to
&lsquo;<samp>[numint, 1, 2, 3]</samp>&rsquo;, <em>not</em> to &lsquo;<samp>[int, 1, 2, 3]</samp>&rsquo;.
In other words, the range of possible values means only that
the variable&rsquo;s value must be numerically equal to a number in
that range, but not that it must be equal in type as well.
Calc&rsquo;s set operations act the same way; &lsquo;<samp>in(2, [1., 2., 3.])</samp>&rsquo;
and &lsquo;<samp>in(1.5, [1:2, 3:2, 5:2])</samp>&rsquo; both report &ldquo;true.&rdquo;
</p>
<p>If you use a conflicting combination of type specifiers, the
results are unpredictable.  An example is &lsquo;<samp>[pos, [0 .. 5]]</samp>&rsquo;,
where the interval does not lie in the range described by the
type symbol.
</p>
<p>&ldquo;Real&rdquo; declarations mostly affect simplifications involving powers
like the one described above.  Another case where they are used
is in the <kbd>a P</kbd> command which returns a list of all roots of a
polynomial; if the variable has been declared real, only the real
roots (if any) will be included in the list.
</p>
<p>&ldquo;Integer&rdquo; declarations are used for simplifications which are valid
only when certain values are integers (such as &lsquo;<samp>(x^y)^z</samp>&rsquo;
shown above).
</p>
<p>Calc&rsquo;s algebraic simplifications also make use of declarations when
simplifying equations and inequalities.  They will cancel <code>x</code>
from both sides of &lsquo;<samp>a x = b x</samp>&rsquo; only if it is sure <code>x</code>
is non-zero, say, because it has a <code>pos</code> declaration.
To declare specifically that <code>x</code> is real and non-zero,
use &lsquo;<samp>[[-inf .. 0), (0 .. inf]]</samp>&rsquo;.  (There is no way in the
current notation to say that <code>x</code> is nonzero but not necessarily
real.)  The <kbd>a e</kbd> command does &ldquo;unsafe&rdquo; simplifications,
including canceling &lsquo;<samp>x</samp>&rsquo; from the equation when &lsquo;<samp>x</samp>&rsquo; is
not known to be nonzero.
</p>
<p>Another set of type symbols distinguish between scalars and vectors.
</p>
<dl compact="compact">
<dt><code>scalar</code></dt>
<dd><p>The value is not a vector.
</p></dd>
<dt><code>vector</code></dt>
<dd><p>The value is a vector.
</p></dd>
<dt><code>matrix</code></dt>
<dd><p>The value is a matrix (a rectangular vector of vectors).
</p></dd>
<dt><code>sqmatrix</code></dt>
<dd><p>The value is a square matrix.
</p></dd>
</dl>

<p>These type symbols can be combined with the other type symbols
described above; &lsquo;<samp>[int, matrix]</samp>&rsquo; describes an object which
is a matrix of integers.
</p>
<p>Scalar/vector declarations are used to determine whether certain
algebraic operations are safe.  For example, &lsquo;<samp>[a, b, c] + x</samp>&rsquo;
is normally not simplified to &lsquo;<samp>[a + x, b + x, c + x]</samp>&rsquo;, but
it will be if <code>x</code> has been declared <code>scalar</code>.  On the
other hand, multiplication is usually assumed to be commutative,
but the terms in &lsquo;<samp>x y</samp>&rsquo; will never be exchanged if both <code>x</code>
and <code>y</code> are known to be vectors or matrices.  (Calc currently
never distinguishes between <code>vector</code> and <code>matrix</code>
declarations.)
</p>
<p>See <a href="#Matrix-Mode">Matrix Mode</a>, for a discussion of Matrix mode and
Scalar mode, which are similar to declaring &lsquo;<samp>[All, matrix]</samp>&rsquo;
or &lsquo;<samp>[All, scalar]</samp>&rsquo; but much more convenient.
</p>
<p>One more type symbol that is recognized is used with the <kbd>H a d</kbd>
command for taking total derivatives of a formula.  See <a href="#Calculus">Calculus</a>.
</p>
<dl compact="compact">
<dt><code>const</code></dt>
<dd><p>The value is a constant with respect to other variables.
</p></dd>
</dl>

<p>Calc does not check the declarations for a variable when you store
a value in it.  However, storing <i>-3.5</i> in a variable that has
been declared <code>pos</code>, <code>int</code>, or <code>matrix</code> may have
unexpected effects; Calc may evaluate &lsquo;<samp>sqrt(x^2)</samp>&rsquo; to &lsquo;<samp>3.5</samp>&rsquo;
if it substitutes the value first, or to &lsquo;<samp>-3.5</samp>&rsquo; if <code>x</code>
was declared <code>pos</code> and the formula &lsquo;<samp>sqrt(x^2)</samp>&rsquo; is
simplified to &lsquo;<samp>x</samp>&rsquo; before the value is substituted.  Before
using a variable for a new purpose, it is best to use <kbd>s d</kbd>
or <kbd>s D</kbd> to check to make sure you don&rsquo;t still have an old
declaration for the variable that will conflict with its new meaning.
</p>
<hr>
<a name="Functions-for-Declarations"></a>
<div class="header">
<p>
Previous: <a href="#Kinds-of-Declarations" accesskey="p" rel="prev">Kinds of Declarations</a>, Up: <a href="#Declarations" accesskey="u" rel="up">Declarations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Functions-for-Declarations-1"></a>
<h4 class="subsection">6.6.3 Functions for Declarations</h4>

<p>Calc has a set of functions for accessing the current declarations
in a convenient manner.  These functions return 1 if the argument
can be shown to have the specified property, or 0 if the argument
can be shown <em>not</em> to have that property; otherwise they are
left unevaluated.  These functions are suitable for use with rewrite
rules (see <a href="#Conditional-Rewrite-Rules">Conditional Rewrite Rules</a>) or programming constructs
(see <a href="#Conditionals-in-Macros">Conditionals in Macros</a>).  They can be entered only using
algebraic notation.  See <a href="#Logical-Operations">Logical Operations</a>, for functions
that perform other tests not related to declarations.
</p>
<p>For example, &lsquo;<samp>dint(17)</samp>&rsquo; returns 1 because 17 is an integer, as
do &lsquo;<samp>dint(n)</samp>&rsquo; and &lsquo;<samp>dint(2 n - 3)</samp>&rsquo; if <code>n</code> has been declared
<code>int</code>, but &lsquo;<samp>dint(2.5)</samp>&rsquo; and &lsquo;<samp>dint(n + 0.5)</samp>&rsquo; return 0.
Calc consults knowledge of its own built-in functions as well as your
own declarations: &lsquo;<samp>dint(floor(x))</samp>&rsquo; returns 1.
</p>
<a name="index-dint"></a>
<a name="index-dnumint"></a>
<a name="index-dnatnum"></a>
<p>The <code>dint</code> function checks if its argument is an integer.
The <code>dnatnum</code> function checks if its argument is a natural
number, i.e., a nonnegative integer.  The <code>dnumint</code> function
checks if its argument is numerically an integer, i.e., either an
integer or an integer-valued float.  Note that these and the other
data type functions also accept vectors or matrices composed of
suitable elements, and that real infinities &lsquo;<samp>inf</samp>&rsquo; and &lsquo;<samp>-inf</samp>&rsquo;
are considered to be integers for the purposes of these functions.
</p>
<a name="index-drat"></a>
<p>The <code>drat</code> function checks if its argument is rational, i.e.,
an integer or fraction.  Infinities count as rational, but intervals
and error forms do not.
</p>
<a name="index-dreal"></a>
<p>The <code>dreal</code> function checks if its argument is real.  This
includes integers, fractions, floats, real error forms, and intervals.
</p>
<a name="index-dimag"></a>
<p>The <code>dimag</code> function checks if its argument is imaginary,
i.e., is mathematically equal to a real number times &lsquo;<samp>i</samp>&rsquo;.
</p>
<a name="index-dpos"></a>
<a name="index-dneg"></a>
<a name="index-dnonneg"></a>
<p>The <code>dpos</code> function checks for positive (but nonzero) reals.
The <code>dneg</code> function checks for negative reals.  The <code>dnonneg</code>
function checks for nonnegative reals, i.e., reals greater than or
equal to zero.  Note that Calc&rsquo;s algebraic simplifications, which are
effectively applied to all conditions in rewrite rules, can simplify
an expression like &lsquo;<samp>x &gt; 0</samp>&rsquo; to 1 or 0 using <code>dpos</code>.
So the actual functions <code>dpos</code>, <code>dneg</code>, and <code>dnonneg</code>
are rarely necessary.
</p>
<a name="index-dnonzero"></a>
<p>The <code>dnonzero</code> function checks that its argument is nonzero.
This includes all nonzero real or complex numbers, all intervals that
do not include zero, all nonzero modulo forms, vectors all of whose
elements are nonzero, and variables or formulas whose values can be
deduced to be nonzero.  It does not include error forms, since they
represent values which could be anything including zero.  (This is
also the set of objects considered &ldquo;true&rdquo; in conditional contexts.)
</p>
<a name="index-deven"></a>
<a name="index-dodd"></a>
<p>The <code>deven</code> function returns 1 if its argument is known to be
an even integer (or integer-valued float); it returns 0 if its argument
is known not to be even (because it is known to be odd or a non-integer).
Calc&rsquo;s algebraic simplifications use this to simplify a test of the form
&lsquo;<samp>x % 2 = 0</samp>&rsquo;.  There is also an analogous <code>dodd</code> function.
</p>
<a name="index-drange"></a>
<p>The <code>drange</code> function returns a set (an interval or a vector
of intervals and/or numbers; see <a href="#Set-Operations">Set Operations</a>) that describes
the set of possible values of its argument.  If the argument is
a variable or a function with a declaration, the range is copied
from the declaration.  Otherwise, the possible signs of the
expression are determined using a method similar to <code>dpos</code>,
etc., and a suitable set like &lsquo;<samp>[0 .. inf]</samp>&rsquo; is returned.  If
the expression is not provably real, the <code>drange</code> function
remains unevaluated.
</p>
<a name="index-dscalar"></a>
<p>The <code>dscalar</code> function returns 1 if its argument is provably
scalar, or 0 if its argument is provably non-scalar.  It is left
unevaluated if this cannot be determined.  (If Matrix mode or Scalar
mode is in effect, this function returns 1 or 0, respectively,
if it has no other information.)  When Calc interprets a condition
(say, in a rewrite rule) it considers an unevaluated formula to be
&ldquo;false.&rdquo;  Thus, &lsquo;<samp>dscalar(a)</samp>&rsquo; is &ldquo;true&rdquo; only if <code>a</code> is
provably scalar, and &lsquo;<samp>!dscalar(a)</samp>&rsquo; is &ldquo;true&rdquo; only if <code>a</code>
is provably non-scalar; both are &ldquo;false&rdquo; if there is insufficient
information to tell.
</p>
<hr>
<a name="Display-Modes"></a>
<div class="header">
<p>
Next: <a href="#Language-Modes" accesskey="n" rel="next">Language Modes</a>, Previous: <a href="#Declarations" accesskey="p" rel="prev">Declarations</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Display-Modes-1"></a>
<h3 class="section">6.7 Display Modes</h3>

<p>The commands in this section are two-key sequences beginning with the
<kbd>d</kbd> prefix.  The <kbd>d l</kbd> (<code>calc-line-numbering</code>) and <kbd>d b</kbd>
(<code>calc-line-breaking</code>) commands are described elsewhere;
see <a href="#Stack-Basics">Stack Basics</a> and see <a href="#Normal-Language-Modes">Normal Language Modes</a>, respectively.
Display formats for vectors and matrices are also covered elsewhere;
see <a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a>.
</p>
<p>One thing all display modes have in common is their treatment of the
<kbd>H</kbd> prefix.  This prefix causes any mode command that would normally
refresh the stack to leave the stack display alone.  The word &ldquo;Dirty&rdquo;
will appear in the mode line when Calc thinks the stack display may not
reflect the latest mode settings.
</p>
<a name="index-d-RET"></a>
<a name="index-calc_002drefresh_002dtop"></a>
<p>The <kbd>d <span class="key">RET</span></kbd> (<code>calc-refresh-top</code>) command reformats the
top stack entry according to all the current modes.  Positive prefix
arguments reformat the top <var>n</var> entries; negative prefix arguments
reformat the specified entry, and a prefix of zero is equivalent to
<kbd>d <span class="key">SPC</span></kbd> (<code>calc-refresh</code>), which reformats the entire stack.
For example, <kbd>H d s M-2 d <span class="key">RET</span></kbd> changes to scientific notation
but reformats only the top two stack entries in the new mode.
</p>
<p>The <kbd>I</kbd> prefix has another effect on the display modes.  The mode
is set only temporarily; the top stack entry is reformatted according
to that mode, then the original mode setting is restored.  In other
words, <kbd>I d s</kbd> is equivalent to <kbd>H d s d <span class="key">RET</span> H d (<var>old mode</var>)</kbd>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Radix-Modes" accesskey="1">Radix Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Grouping-Digits" accesskey="2">Grouping Digits</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Float-Formats" accesskey="3">Float Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Complex-Formats" accesskey="4">Complex Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fraction-Formats" accesskey="5">Fraction Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#HMS-Formats" accesskey="6">HMS Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Date-Formats" accesskey="7">Date Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Truncating-the-Stack" accesskey="8">Truncating the Stack</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Justification" accesskey="9">Justification</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Labels">Labels</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Radix-Modes"></a>
<div class="header">
<p>
Next: <a href="#Grouping-Digits" accesskey="n" rel="next">Grouping Digits</a>, Previous: <a href="#Display-Modes" accesskey="p" rel="prev">Display Modes</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Radix-Modes-1"></a>
<h4 class="subsection">6.7.1 Radix Modes</h4>

<p><a name="index-Radix-display"></a>
<a name="index-Non_002ddecimal-numbers"></a>
<a name="index-Decimal-and-non_002ddecimal-numbers"></a>
Calc normally displays numbers in decimal (<em>base-10</em> or <em>radix-10</em>)
notation.  Calc can actually display in any radix from two (binary) to 36.
When the radix is above 10, the letters <code>A</code> to <code>Z</code> are used as
digits.  When entering such a number, letter keys are interpreted as
potential digits rather than terminating numeric entry mode.
</p>
<a name="index-d-2"></a>
<a name="index-d-8"></a>
<a name="index-d-6"></a>
<a name="index-d-0"></a>
<a name="index-Hexadecimal-integers"></a>
<a name="index-Octal-integers"></a>
<p>The key sequences <kbd>d 2</kbd>, <kbd>d 8</kbd>, <kbd>d 6</kbd>, and <kbd>d 0</kbd> select
binary, octal, hexadecimal, and decimal as the current display radix,
respectively.  Numbers can always be entered in any radix, though the
current radix is used as a default if you press <kbd>#</kbd> without any initial
digits.  A number entered without a <kbd>#</kbd> is <em>always</em> interpreted
as decimal.
</p>
<a name="index-d-r"></a>
<a name="index-calc_002dradix"></a>
<p>To set the radix generally, use <kbd>d r</kbd> (<code>calc-radix</code>) and enter
an integer from 2 to 36.  You can specify the radix as a numeric prefix
argument; otherwise you will be prompted for it.
</p>
<a name="index-d-z"></a>
<a name="index-calc_002dleading_002dzeros"></a>
<a name="index-Leading-zeros"></a>
<p>Integers normally are displayed with however many digits are necessary to
represent the integer and no more.  The <kbd>d z</kbd> (<code>calc-leading-zeros</code>)
command causes integers to be padded out with leading zeros according to the
current binary word size.  (See <a href="#Binary-Functions">Binary Functions</a>, for a discussion of
word size.)  If the absolute value of the word size is &lsquo;<samp>w</samp>&rsquo;, all integers
are displayed with at least enough digits to represent
&lsquo;<samp>(2^w)-1</samp>&rsquo;
in the current radix.  (Larger integers will still be displayed in their
entirety.)
</p>
<a name="index-Two_0027s-complements"></a>
<p>Calc can display &lsquo;<samp>w</samp>&rsquo;-bit integers using two&rsquo;s complement
notation, although this is most useful with the binary, octal and
hexadecimal display modes.  This option is selected by using the
<kbd>O</kbd> option prefix before setting the display radix, and a negative word
size might be appropriate (see <a href="#Binary-Functions">Binary Functions</a>). In two&rsquo;s
complement notation, the integers in the (nearly) symmetric interval
from
&lsquo;<samp>-2^(w-1)</samp>&rsquo;
to
&lsquo;<samp>2^(w-1)-1</samp>&rsquo;
are represented by the integers from &lsquo;<samp>0</samp>&rsquo; to &lsquo;<samp>2^w-1</samp>&rsquo;:
the integers from &lsquo;<samp>0</samp>&rsquo; to
&lsquo;<samp>2^(w-1)-1</samp>&rsquo;
are represented by themselves and the integers from
&lsquo;<samp>-2^(w-1)</samp>&rsquo;
to &lsquo;<samp>-1</samp>&rsquo; are represented by the integers from
&lsquo;<samp>2^(w-1)</samp>&rsquo;
to &lsquo;<samp>2^w-1</samp>&rsquo; (the integer &lsquo;<samp>k</samp>&rsquo; is represented by &lsquo;<samp>k+2^w</samp>&rsquo;).
Calc will display a two&rsquo;s complement integer by the radix (either
&lsquo;<samp>2</samp>&rsquo;, &lsquo;<samp>8</samp>&rsquo; or &lsquo;<samp>16</samp>&rsquo;), two <kbd>#</kbd> symbols, and then its
representation (including any leading zeros necessary to include all
&lsquo;<samp>w</samp>&rsquo; bits).  In a two&rsquo;s complement display mode, numbers that
are not displayed in two&rsquo;s complement notation (i.e., that aren&rsquo;t
integers from
&lsquo;<samp>-2^(w-1)</samp>&rsquo;
to
&lsquo;<samp>2^(w-1)-1</samp>&rsquo;)
will be represented using Calc&rsquo;s usual notation (in the appropriate
radix).
</p>
<hr>
<a name="Grouping-Digits"></a>
<div class="header">
<p>
Next: <a href="#Float-Formats" accesskey="n" rel="next">Float Formats</a>, Previous: <a href="#Radix-Modes" accesskey="p" rel="prev">Radix Modes</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Grouping-Digits-1"></a>
<h4 class="subsection">6.7.2 Grouping Digits</h4>

<p><a name="index-d-g"></a>
<a name="index-calc_002dgroup_002ddigits"></a>
<a name="index-Grouping-digits"></a>
<a name="index-Digit-grouping"></a>
Long numbers can be hard to read if they have too many digits.  For
example, the factorial of 30 is 33 digits long!  Press <kbd>d g</kbd>
(<code>calc-group-digits</code>) to enable <em>Grouping</em> mode, in which digits
are displayed in clumps of 3 or 4 (depending on the current radix)
separated by commas.
</p>
<p>The <kbd>d g</kbd> command toggles grouping on and off.
With a numeric prefix of 0, this command displays the current state of
the grouping flag; with an argument of minus one it disables grouping;
with a positive argument &lsquo;<samp>N</samp>&rsquo; it enables grouping on every &lsquo;<samp>N</samp>&rsquo;
digits.  For floating-point numbers, grouping normally occurs only
before the decimal point.  A negative prefix argument &lsquo;<samp>-N</samp>&rsquo; enables
grouping every &lsquo;<samp>N</samp>&rsquo; digits both before and after the decimal point.
</p>
<a name="index-d-_002c"></a>
<a name="index-calc_002dgroup_002dchar"></a>
<p>The <kbd>d ,</kbd> (<code>calc-group-char</code>) command allows you to choose any
character as the grouping separator.  The default is the comma character.
If you find it difficult to read vectors of large integers grouped with
commas, you may wish to use spaces or some other character instead.
This command takes the next character you type, whatever it is, and
uses it as the digit separator.  As a special case, <kbd>d , \</kbd> selects
&lsquo;<samp>\,</samp>&rsquo; (TeX&rsquo;s thin-space symbol) as the digit separator.
</p>
<p>Please note that grouped numbers will not generally be parsed correctly
if re-read in textual form, say by the use of <kbd>C-x * y</kbd> and <kbd>C-x * g</kbd>.
(See <a href="#Kill-and-Yank">Kill and Yank</a>, for details on these commands.)  One exception is
the &lsquo;<samp>\,</samp>&rsquo; separator, which doesn&rsquo;t interfere with parsing because it
is ignored by TeX language mode.
</p>
<hr>
<a name="Float-Formats"></a>
<div class="header">
<p>
Next: <a href="#Complex-Formats" accesskey="n" rel="next">Complex Formats</a>, Previous: <a href="#Grouping-Digits" accesskey="p" rel="prev">Grouping Digits</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Float-Formats-1"></a>
<h4 class="subsection">6.7.3 Float Formats</h4>

<p>Floating-point quantities are normally displayed in standard decimal
form, with scientific notation used if the exponent is especially high
or low.  All significant digits are normally displayed.  The commands
in this section allow you to choose among several alternative display
formats for floats.
</p>
<a name="index-d-n"></a>
<a name="index-calc_002dnormal_002dnotation"></a>
<p>The <kbd>d n</kbd> (<code>calc-normal-notation</code>) command selects the normal
display format.  All significant figures in a number are displayed.
With a positive numeric prefix, numbers are rounded if necessary to
that number of significant digits.  With a negative numerix prefix,
the specified number of significant digits less than the current
precision is used.  (Thus <kbd>C-u -2 d n</kbd> displays 10 digits if the
current precision is 12.)
</p>
<a name="index-d-f"></a>
<a name="index-calc_002dfix_002dnotation"></a>
<p>The <kbd>d f</kbd> (<code>calc-fix-notation</code>) command selects fixed-point
notation.  The numeric argument is the number of digits after the
decimal point, zero or more.  This format will relax into scientific
notation if a nonzero number would otherwise have been rounded all the
way to zero.  Specifying a negative number of digits is the same as
for a positive number, except that small nonzero numbers will be rounded
to zero rather than switching to scientific notation.
</p>
<a name="index-d-s"></a>
<a name="index-calc_002dsci_002dnotation"></a>
<a name="index-Scientific-notation_002c-display-of"></a>
<p>The <kbd>d s</kbd> (<code>calc-sci-notation</code>) command selects scientific
notation.  A positive argument sets the number of significant figures
displayed, of which one will be before and the rest after the decimal
point.  A negative argument works the same as for <kbd>d n</kbd> format.
The default is to display all significant digits.
</p>
<a name="index-d-e"></a>
<a name="index-calc_002deng_002dnotation"></a>
<a name="index-Engineering-notation_002c-display-of"></a>
<p>The <kbd>d e</kbd> (<code>calc-eng-notation</code>) command selects engineering
notation.  This is similar to scientific notation except that the
exponent is rounded down to a multiple of three, with from one to three
digits before the decimal point.  An optional numeric prefix sets the
number of significant digits to display, as for <kbd>d s</kbd>.
</p>
<p>It is important to distinguish between the current <em>precision</em> and
the current <em>display format</em>.  After the commands <kbd>C-u 10 p</kbd>
and <kbd>C-u 6 d n</kbd> the Calculator computes all results to ten
significant figures but displays only six.  (In fact, intermediate
calculations are often carried to one or two more significant figures,
but values placed on the stack will be rounded down to ten figures.)
Numbers are never actually rounded to the display precision for storage,
except by commands like <kbd>C-k</kbd> and <kbd>C-x * y</kbd> which operate on the
actual displayed text in the Calculator buffer.
</p>
<a name="index-d-_002e"></a>
<a name="index-calc_002dpoint_002dchar"></a>
<p>The <kbd>d .</kbd> (<code>calc-point-char</code>) command selects the character used
as a decimal point.  Normally this is a period; users in some countries
may wish to change this to a comma.  Note that this is only a display
style; on entry, periods must always be used to denote floating-point
numbers, and commas to separate elements in a list.
</p>
<hr>
<a name="Complex-Formats"></a>
<div class="header">
<p>
Next: <a href="#Fraction-Formats" accesskey="n" rel="next">Fraction Formats</a>, Previous: <a href="#Float-Formats" accesskey="p" rel="prev">Float Formats</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Complex-Formats-1"></a>
<h4 class="subsection">6.7.4 Complex Formats</h4>

<p><a name="index-d-c"></a>
<a name="index-calc_002dcomplex_002dnotation"></a>
There are three supported notations for complex numbers in rectangular
form.  The default is as a pair of real numbers enclosed in parentheses
and separated by a comma: &lsquo;<samp>(a,b)</samp>&rsquo;.  The <kbd>d c</kbd>
(<code>calc-complex-notation</code>) command selects this style.
</p>
<a name="index-d-i"></a>
<a name="index-calc_002di_002dnotation"></a>
<a name="index-d-j"></a>
<a name="index-calc_002dj_002dnotation"></a>
<p>The other notations are <kbd>d i</kbd> (<code>calc-i-notation</code>), in which
numbers are displayed in &lsquo;<samp>a+bi</samp>&rsquo; form, and <kbd>d j</kbd>
(<code>calc-j-notation</code>) which displays the form &lsquo;<samp>a+bj</samp>&rsquo; preferred
in some disciplines.
</p>
<a name="index-i-variable-1"></a>
<a name="index-i-2"></a>
<p>Complex numbers are normally entered in &lsquo;<samp>(a,b)</samp>&rsquo; format.
If you enter &lsquo;<samp>2+3i</samp>&rsquo; as an algebraic formula, it will be stored as
the formula &lsquo;<samp>2 + 3 * i</samp>&rsquo;.  However, if you use <kbd>=</kbd> to evaluate
this formula and you have not changed the variable &lsquo;<samp>i</samp>&rsquo;, the &lsquo;<samp>i</samp>&rsquo;
will be interpreted as &lsquo;<samp>(0,1)</samp>&rsquo; and the formula will be simplified
to &lsquo;<samp>(2,3)</samp>&rsquo;.  Other commands (like <code>calc-sin</code>) will <em>not</em>
interpret the formula &lsquo;<samp>2 + 3 * i</samp>&rsquo; as a complex number.
See <a href="#Variables">Variables</a>, under &ldquo;special constants.&rdquo;
</p>
<hr>
<a name="Fraction-Formats"></a>
<div class="header">
<p>
Next: <a href="#HMS-Formats" accesskey="n" rel="next">HMS Formats</a>, Previous: <a href="#Complex-Formats" accesskey="p" rel="prev">Complex Formats</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fraction-Formats-1"></a>
<h4 class="subsection">6.7.5 Fraction Formats</h4>

<p><a name="index-d-o"></a>
<a name="index-calc_002dover_002dnotation"></a>
Display of fractional numbers is controlled by the <kbd>d o</kbd>
(<code>calc-over-notation</code>) command.  By default, a number like
eight thirds is displayed in the form &lsquo;<samp>8:3</samp>&rsquo;.  The <kbd>d o</kbd> command
prompts for a one- or two-character format.  If you give one character,
that character is used as the fraction separator.  Common separators are
&lsquo;<samp>:</samp>&rsquo; and &lsquo;<samp>/</samp>&rsquo;.  (During input of numbers, the <kbd>:</kbd> key must be
used regardless of the display format; in particular, the <kbd>/</kbd> is used
for RPN-style division, <em>not</em> for entering fractions.)
</p>
<p>If you give two characters, fractions use &ldquo;integer-plus-fractional-part&rdquo;
notation.  For example, the format &lsquo;<samp>+/</samp>&rsquo; would display eight thirds
as &lsquo;<samp>2+2/3</samp>&rsquo;.  If two colons are present in a number being entered,
the number is interpreted in this form (so that the entries <kbd>2:2:3</kbd>
and <kbd>8:3</kbd> are equivalent).
</p>
<p>It is also possible to follow the one- or two-character format with
a number.  For example:  &lsquo;<samp>:10</samp>&rsquo; or &lsquo;<samp>+/3</samp>&rsquo;.  In this case,
Calc adjusts all fractions that are displayed to have the specified
denominator, if possible.  Otherwise it adjusts the denominator to
be a multiple of the specified value.  For example, in &lsquo;<samp>:6</samp>&rsquo; mode
the fraction &lsquo;<samp>1:6</samp>&rsquo; will be unaffected, but &lsquo;<samp>2:3</samp>&rsquo; will be
displayed as &lsquo;<samp>4:6</samp>&rsquo;, &lsquo;<samp>1:2</samp>&rsquo; will be displayed as &lsquo;<samp>3:6</samp>&rsquo;,
and &lsquo;<samp>1:8</samp>&rsquo; will be displayed as &lsquo;<samp>3:24</samp>&rsquo;.  Integers are also
affected by this mode:  3 is displayed as &lsquo;<samp>18:6</samp>&rsquo;.  Note that the
format &lsquo;<samp>:1</samp>&rsquo; writes fractions the same as &lsquo;<samp>:</samp>&rsquo;, but it writes
integers as &lsquo;<samp>n:1</samp>&rsquo;.
</p>
<p>The fraction format does not affect the way fractions or integers are
stored, only the way they appear on the screen.  The fraction format
never affects floats.
</p>
<hr>
<a name="HMS-Formats"></a>
<div class="header">
<p>
Next: <a href="#Date-Formats" accesskey="n" rel="next">Date Formats</a>, Previous: <a href="#Fraction-Formats" accesskey="p" rel="prev">Fraction Formats</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="HMS-Formats-1"></a>
<h4 class="subsection">6.7.6 HMS Formats</h4>

<p><a name="index-d-h"></a>
<a name="index-calc_002dhms_002dnotation"></a>
The <kbd>d h</kbd> (<code>calc-hms-notation</code>) command controls the display of
HMS (hours-minutes-seconds) forms.  It prompts for a string which
consists basically of an &ldquo;hours&rdquo; marker, optional punctuation, a
&ldquo;minutes&rdquo; marker, more optional punctuation, and a &ldquo;seconds&rdquo; marker.
Punctuation is zero or more spaces, commas, or semicolons.  The hours
marker is one or more non-punctuation characters.  The minutes and
seconds markers must be single non-punctuation characters.
</p>
<p>The default HMS format is &lsquo;<samp>@ ' &quot;</samp>&rsquo;, producing HMS values of the form
&lsquo;<samp>23@ 30' 15.75&quot;</samp>&rsquo;.  The format &lsquo;<samp>deg, ms</samp>&rsquo; would display this same
value as &lsquo;<samp>23deg, 30m15.75s</samp>&rsquo;.  During numeric entry, the <kbd>h</kbd> or <kbd>o</kbd>
keys are recognized as synonyms for <kbd>@</kbd> regardless of display format.
The <kbd>m</kbd> and <kbd>s</kbd> keys are recognized as synonyms for <kbd>'</kbd> and
<kbd>&quot;</kbd>, respectively, but only if an <kbd>@</kbd> (or <kbd>h</kbd> or <kbd>o</kbd>) has
already been typed; otherwise, they have their usual meanings
(<kbd>m-</kbd> prefix and <kbd>s-</kbd> prefix).  Thus, <kbd>5 &quot;</kbd>, <kbd>0 @ 5 &quot;</kbd>, and
<kbd>0 h 5 s</kbd> are some of the ways to enter the quantity &ldquo;five seconds.&rdquo;
The <kbd>'</kbd> key is recognized as &ldquo;minutes&rdquo; only if <kbd>@</kbd> (or <kbd>h</kbd> or
<kbd>o</kbd>) has already been pressed; otherwise it means to switch to algebraic
entry.
</p>
<hr>
<a name="Date-Formats"></a>
<div class="header">
<p>
Next: <a href="#Truncating-the-Stack" accesskey="n" rel="next">Truncating the Stack</a>, Previous: <a href="#HMS-Formats" accesskey="p" rel="prev">HMS Formats</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Formats-1"></a>
<h4 class="subsection">6.7.7 Date Formats</h4>

<p><a name="index-d-d"></a>
<a name="index-calc_002ddate_002dnotation"></a>
The <kbd>d d</kbd> (<code>calc-date-notation</code>) command controls the display
of date forms (see <a href="#Date-Forms">Date Forms</a>).  It prompts for a string which
contains letters that represent the various parts of a date and time.
To show which parts should be omitted when the form represents a pure
date with no time, parts of the string can be enclosed in &lsquo;<samp>&lt; &gt;</samp>&rsquo;
marks.  If you don&rsquo;t include &lsquo;<samp>&lt; &gt;</samp>&rsquo; markers in the format, Calc
guesses at which parts, if any, should be omitted when formatting
pure dates.
</p>
<p>The default format is:  &lsquo;<samp>&lt;H:mm:SSpp &gt;Www Mmm D, YYYY</samp>&rsquo;.
An example string in this format is &lsquo;<samp>3:32pm Wed Jan 9, 1991</samp>&rsquo;.
If you enter a blank format string, this default format is
reestablished.
</p>
<p>Calc uses &lsquo;<samp>&lt; &gt;</samp>&rsquo; notation for nameless functions as well as for
dates.  See <a href="#Specifying-Operators">Specifying Operators</a>.  To avoid confusion with nameless
functions, your date formats should avoid using the &lsquo;<samp>#</samp>&rsquo; character.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#ISO-8601" accesskey="1">ISO 8601</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Date-Formatting-Codes" accesskey="2">Date Formatting Codes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Free_002dForm-Dates" accesskey="3">Free-Form Dates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Date-Formats" accesskey="4">Standard Date Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="ISO-8601"></a>
<div class="header">
<p>
Next: <a href="#Date-Formatting-Codes" accesskey="n" rel="next">Date Formatting Codes</a>, Previous: <a href="#Date-Formats" accesskey="p" rel="prev">Date Formats</a>, Up: <a href="#Date-Formats" accesskey="u" rel="up">Date Formats</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="ISO-8601-1"></a>
<h4 class="subsubsection">6.7.7.1 ISO 8601</h4>

<p><a name="index-ISO-8601"></a>
The same date can be written down in different formats and Calc tries
to allow you to choose your preferred format.  Some common formats are
ambiguous, however; for example, 10/11/2012 means October 11,
2012 in the United States but it means November 10, 2012 in
Europe.  To help avoid such ambiguities, the International Organization
for Standardization (ISO) provides the ISO 8601 standard, which
provides three different but easily distinguishable and unambiguous
ways to represent a date.
</p>
<p>The ISO 8601 calendar date representation is
</p>
<div class="example">
<pre class="example">   <var>YYYY</var>-<var>MM</var>-<var>DD</var>
</pre></div>

<p>where <var>YYYY</var> is the four digit year, <var>MM</var> is the two-digit month
number (01 for January to 12 for December), and <var>DD</var> is the
two-digit day of the month (01 to 31).  (Note that <var>YYYY</var> does not
correspond to Calc&rsquo;s date formatting code, which will be introduced
later.)  The year, which should be padded with zeros to ensure it has at
least four digits, is the Gregorian year, except that the year before
0001 (1 AD) is the year 0000 (1 BC).  The date October 11, 2012 is
written 2012-10-11 in this representation and November 10, 2012 is
written 2012-11-10.
</p>
<p>The ISO 8601 ordinal date representation is
</p>
<div class="example">
<pre class="example">  <var>YYYY</var>-<var>DDD</var>
</pre></div>

<p>where <var>YYYY</var> is the year, as above, and <var>DDD</var> is the day of the year.
The date December 31, 2011 is written 2011-365 in this representation
and January 1, 2012 is written 2012-001.
</p>
<p>The ISO 8601 week date representation is
</p>
<div class="example">
<pre class="example"> <var>YYYY</var>-W<var>ww</var>-<var>D</var>
</pre></div>

<p>where <var>YYYY</var> is the ISO week-numbering year, <var>ww</var> is the two
digit week number (preceded by a literal &ldquo;W&rdquo;), and <var>D</var> is the day
of the week (1 for Monday through 7 for Sunday).  The ISO week-numbering
year is based on the Gregorian year but can differ slightly.  The first
week of an ISO week-numbering year is the week with the Gregorian year&rsquo;s
first Thursday in it (equivalently, the week containing January 4);
any day of that week (Monday through Sunday) is part of the same ISO
week-numbering year, any day from the previous week is part of the
previous year.  For example, January 4, 2013 is on a Friday, and so
the first week for the ISO week-numbering year 2013 starts  on
Monday, December 31, 2012.  The day December 31, 2012 is then part of the
Gregorian year 2012 but ISO week-numbering year 2013.  In the week
date representation, this week goes from 2013-W01-1 (December 31,
2012) to 2013-W01-7 (January 6, 2013).
</p>
<p>All three ISO 8601 representations arrange the numbers from most
significant to least significant; as well as being unambiguous
representations, they are easy to sort since chronological order in
this formats corresponds to lexicographical order. The hyphens are
sometimes omitted.
</p>
<p>The ISO 8601 standard uses a 24 hour clock; a particular time is
represented by <var>hh</var>:<var>mm</var>:<var>ss</var> where <var>hh</var> is the
two-digit hour (from 00 to 24), <var>mm</var> is the two-digit minute (from
00 to 59) and <var>ss</var> is the two-digit second.  The seconds or minutes
and seconds can be omitted, and decimals can be added.  If a date with a
time is represented, they should be separated by a literal &ldquo;T&rdquo;, so noon
on December 13, 2012 can be represented as 2012-12-13T12:00.
</p>
<hr>
<a name="Date-Formatting-Codes"></a>
<div class="header">
<p>
Next: <a href="#Free_002dForm-Dates" accesskey="n" rel="next">Free-Form Dates</a>, Previous: <a href="#ISO-8601" accesskey="p" rel="prev">ISO 8601</a>, Up: <a href="#Date-Formats" accesskey="u" rel="up">Date Formats</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Formatting-Codes-1"></a>
<h4 class="subsubsection">6.7.7.2 Date Formatting Codes</h4>

<p>When displaying a date, the current date format is used.  All
characters except for letters and &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&gt;</samp>&rsquo; are
copied literally when dates are formatted.  The portion between
&lsquo;<samp>&lt; &gt;</samp>&rsquo; markers is omitted for pure dates, or included for
date/time forms.  Letters are interpreted according to the table
below.
</p>
<p>When dates are read in during algebraic entry, Calc first tries to
match the input string to the current format either with or without
the time part.  The punctuation characters (including spaces) must
match exactly; letter fields must correspond to suitable text in
the input.  If this doesn&rsquo;t work, Calc checks if the input is a
simple number; if so, the number is interpreted as a number of days
since Dec 31, 1 BC.  Otherwise, Calc tries a much more relaxed and
flexible algorithm which is described in the next section.
</p>
<p>Weekday names are ignored during reading.
</p>
<p>Two-digit year numbers are interpreted as lying in the range
from 1941 to 2039.  Years outside that range are always
entered and displayed in full.  Year numbers with a leading
&lsquo;<samp>+</samp>&rsquo; sign are always interpreted exactly, allowing the
entry and display of the years 1 through 99 AD.
</p>
<p>Here is a complete list of the formatting codes for dates:
</p>
<dl compact="compact">
<dt>Y</dt>
<dd><p>Year:  &ldquo;91&rdquo; for 1991, &ldquo;7&rdquo; for 2007, &ldquo;+23&rdquo; for 23 AD.
</p></dd>
<dt>YY</dt>
<dd><p>Year:  &ldquo;91&rdquo; for 1991, &ldquo;07&rdquo; for 2007, &ldquo;+23&rdquo; for 23 AD.
</p></dd>
<dt>BY</dt>
<dd><p>Year:  &ldquo;91&rdquo; for 1991, &ldquo; 7&rdquo; for 2007, &ldquo;+23&rdquo; for 23 AD.
</p></dd>
<dt>YYY</dt>
<dd><p>Year:  &ldquo;1991&rdquo; for 1991, &ldquo;23&rdquo; for 23 AD.
</p></dd>
<dt>YYYY</dt>
<dd><p>Year:  &ldquo;1991&rdquo; for 1991, &ldquo;+23&rdquo; for 23 AD.
</p></dd>
<dt>ZYYY</dt>
<dd><p>Year:  &ldquo;1991&rdquo; for 1991, &ldquo;0023&rdquo; for 23 AD, &ldquo;0000&rdquo; for 1 BC.
</p></dd>
<dt>IYYY</dt>
<dd><p>Year:  ISO 8601 week-numbering year.
</p></dd>
<dt>aa</dt>
<dd><p>Year:  &ldquo;ad&rdquo; or blank.
</p></dd>
<dt>AA</dt>
<dd><p>Year:  &ldquo;AD&rdquo; or blank.
</p></dd>
<dt>aaa</dt>
<dd><p>Year:  &ldquo;ad &rdquo; or blank.  (Note trailing space.)
</p></dd>
<dt>AAA</dt>
<dd><p>Year:  &ldquo;AD &rdquo; or blank.
</p></dd>
<dt>aaaa</dt>
<dd><p>Year:  &ldquo;a.d.&rdquo; or blank.
</p></dd>
<dt>AAAA</dt>
<dd><p>Year:  &ldquo;A.D.&rdquo; or blank.
</p></dd>
<dt>bb</dt>
<dd><p>Year:  &ldquo;bc&rdquo; or blank.
</p></dd>
<dt>BB</dt>
<dd><p>Year:  &ldquo;BC&rdquo; or blank.
</p></dd>
<dt>bbb</dt>
<dd><p>Year:  &ldquo; bc&rdquo; or blank.  (Note leading space.)
</p></dd>
<dt>BBB</dt>
<dd><p>Year:  &ldquo; BC&rdquo; or blank.
</p></dd>
<dt>bbbb</dt>
<dd><p>Year:  &ldquo;b.c.&rdquo; or blank.
</p></dd>
<dt>BBBB</dt>
<dd><p>Year:  &ldquo;B.C.&rdquo; or blank.
</p></dd>
<dt>M</dt>
<dd><p>Month:  &ldquo;8&rdquo; for August.
</p></dd>
<dt>MM</dt>
<dd><p>Month:  &ldquo;08&rdquo; for August.
</p></dd>
<dt>BM</dt>
<dd><p>Month:  &ldquo; 8&rdquo; for August.
</p></dd>
<dt>MMM</dt>
<dd><p>Month:  &ldquo;AUG&rdquo; for August.
</p></dd>
<dt>Mmm</dt>
<dd><p>Month:  &ldquo;Aug&rdquo; for August.
</p></dd>
<dt>mmm</dt>
<dd><p>Month:  &ldquo;aug&rdquo; for August.
</p></dd>
<dt>MMMM</dt>
<dd><p>Month:  &ldquo;AUGUST&rdquo; for August.
</p></dd>
<dt>Mmmm</dt>
<dd><p>Month:  &ldquo;August&rdquo; for August.
</p></dd>
<dt>D</dt>
<dd><p>Day:  &ldquo;7&rdquo; for 7th day of month.
</p></dd>
<dt>DD</dt>
<dd><p>Day:  &ldquo;07&rdquo; for 7th day of month.
</p></dd>
<dt>BD</dt>
<dd><p>Day:  &ldquo; 7&rdquo; for 7th day of month.
</p></dd>
<dt>W</dt>
<dd><p>Weekday:  &ldquo;0&rdquo; for Sunday, &ldquo;6&rdquo; for Saturday.
</p></dd>
<dt>w</dt>
<dd><p>Weekday:  &ldquo;1&rdquo; for Monday, &ldquo;7&rdquo; for Sunday.
</p></dd>
<dt>WWW</dt>
<dd><p>Weekday:  &ldquo;SUN&rdquo; for Sunday.
</p></dd>
<dt>Www</dt>
<dd><p>Weekday:  &ldquo;Sun&rdquo; for Sunday.
</p></dd>
<dt>www</dt>
<dd><p>Weekday:  &ldquo;sun&rdquo; for Sunday.
</p></dd>
<dt>WWWW</dt>
<dd><p>Weekday:  &ldquo;SUNDAY&rdquo; for Sunday.
</p></dd>
<dt>Wwww</dt>
<dd><p>Weekday:  &ldquo;Sunday&rdquo; for Sunday.
</p></dd>
<dt>Iww</dt>
<dd><p>Week number:  ISO 8601 week number, &ldquo;W01&rdquo; for week 1.
</p></dd>
<dt>d</dt>
<dd><p>Day of year:  &ldquo;34&rdquo; for Feb. 3.
</p></dd>
<dt>ddd</dt>
<dd><p>Day of year:  &ldquo;034&rdquo; for Feb. 3.
</p></dd>
<dt>bdd</dt>
<dd><p>Day of year:  &ldquo; 34&rdquo; for Feb. 3.
</p></dd>
<dt>T</dt>
<dd><p>Letter:  Literal &ldquo;T&rdquo;.
</p></dd>
<dt>h</dt>
<dd><p>Hour:  &ldquo;5&rdquo; for 5 AM; &ldquo;17&rdquo; for 5 PM.
</p></dd>
<dt>hh</dt>
<dd><p>Hour:  &ldquo;05&rdquo; for 5 AM; &ldquo;17&rdquo; for 5 PM.
</p></dd>
<dt>bh</dt>
<dd><p>Hour:  &ldquo; 5&rdquo; for 5 AM; &ldquo;17&rdquo; for 5 PM.
</p></dd>
<dt>H</dt>
<dd><p>Hour:  &ldquo;5&rdquo; for 5 AM and 5 PM.
</p></dd>
<dt>HH</dt>
<dd><p>Hour:  &ldquo;05&rdquo; for 5 AM and 5 PM.
</p></dd>
<dt>BH</dt>
<dd><p>Hour:  &ldquo; 5&rdquo; for 5 AM and 5 PM.
</p></dd>
<dt>p</dt>
<dd><p>AM/PM:  &ldquo;a&rdquo; or &ldquo;p&rdquo;.
</p></dd>
<dt>P</dt>
<dd><p>AM/PM:  &ldquo;A&rdquo; or &ldquo;P&rdquo;.
</p></dd>
<dt>pp</dt>
<dd><p>AM/PM:  &ldquo;am&rdquo; or &ldquo;pm&rdquo;.
</p></dd>
<dt>PP</dt>
<dd><p>AM/PM:  &ldquo;AM&rdquo; or &ldquo;PM&rdquo;.
</p></dd>
<dt>pppp</dt>
<dd><p>AM/PM:  &ldquo;a.m.&rdquo; or &ldquo;p.m.&rdquo;.
</p></dd>
<dt>PPPP</dt>
<dd><p>AM/PM:  &ldquo;A.M.&rdquo; or &ldquo;P.M.&rdquo;.
</p></dd>
<dt>m</dt>
<dd><p>Minutes:  &ldquo;7&rdquo; for 7.
</p></dd>
<dt>mm</dt>
<dd><p>Minutes:  &ldquo;07&rdquo; for 7.
</p></dd>
<dt>bm</dt>
<dd><p>Minutes:  &ldquo; 7&rdquo; for 7.
</p></dd>
<dt>s</dt>
<dd><p>Seconds:  &ldquo;7&rdquo; for 7;  &ldquo;7.23&rdquo; for 7.23.
</p></dd>
<dt>ss</dt>
<dd><p>Seconds:  &ldquo;07&rdquo; for 7;  &ldquo;07.23&rdquo; for 7.23.
</p></dd>
<dt>bs</dt>
<dd><p>Seconds:  &ldquo; 7&rdquo; for 7;  &ldquo; 7.23&rdquo; for 7.23.
</p></dd>
<dt>SS</dt>
<dd><p>Optional seconds:  &ldquo;07&rdquo; for 7;  blank for 0.
</p></dd>
<dt>BS</dt>
<dd><p>Optional seconds:  &ldquo; 7&rdquo; for 7;  blank for 0.
</p></dd>
<dt>N</dt>
<dd><p>Numeric date/time:  &ldquo;726842.25&rdquo; for 6:00am Wed Jan 9, 1991.
</p></dd>
<dt>n</dt>
<dd><p>Numeric date:  &ldquo;726842&rdquo; for any time on Wed Jan 9, 1991.
</p></dd>
<dt>J</dt>
<dd><p>Julian date/time:  &ldquo;2448265.75&rdquo; for 6:00am Wed Jan 9, 1991.
</p></dd>
<dt>j</dt>
<dd><p>Julian date:  &ldquo;2448266&rdquo; for any time on Wed Jan 9, 1991.
</p></dd>
<dt>U</dt>
<dd><p>Unix time:  &ldquo;663400800&rdquo; for 6:00am Wed Jan 9, 1991.
</p></dd>
<dt>X</dt>
<dd><p>Brackets suppression.  An &ldquo;X&rdquo; at the front of the format
causes the surrounding &lsquo;<samp>&lt;&nbsp;&gt;</samp>&rsquo;<!-- /@w --> delimiters to be omitted
when formatting dates.  Note that the brackets are still
required for algebraic entry.
</p></dd>
</dl>

<p>If &ldquo;SS&rdquo; or &ldquo;BS&rdquo; (optional seconds) is preceded by a colon, the
colon is also omitted if the seconds part is zero.
</p>
<p>If &ldquo;bb,&rdquo; &ldquo;bbb&rdquo; or &ldquo;bbbb&rdquo; or their upper-case equivalents
appear in the format, then negative year numbers are displayed
without a minus sign.  Note that &ldquo;aa&rdquo; and &ldquo;bb&rdquo; are mutually
exclusive.  Some typical usages would be &lsquo;<samp>YYYY AABB</samp>&rsquo;;
&lsquo;<samp>AAAYYYYBBB</samp>&rsquo;; &lsquo;<samp>YYYYBBB</samp>&rsquo;.
</p>
<p>The formats &ldquo;YY,&rdquo; &ldquo;YYYY,&rdquo; &ldquo;MM,&rdquo; &ldquo;DD,&rdquo; &ldquo;ddd,&rdquo; &ldquo;hh,&rdquo; &ldquo;HH,&rdquo;
&ldquo;mm,&rdquo; &ldquo;ss,&rdquo; and &ldquo;SS&rdquo; actually match any number of digits during
reading unless several of these codes are strung together with no
punctuation in between, in which case the input must have exactly as
many digits as there are letters in the format.
</p>
<p>The &ldquo;j,&rdquo; &ldquo;J,&rdquo; and &ldquo;U&rdquo; formats do not make any time zone
adjustment.  They effectively use &lsquo;<samp>julian(x,0)</samp>&rsquo; and
&lsquo;<samp>unixtime(x,0)</samp>&rsquo; to make the conversion; see <a href="#Date-Arithmetic">Date Arithmetic</a>.
</p>
<hr>
<a name="Free_002dForm-Dates"></a>
<div class="header">
<p>
Next: <a href="#Standard-Date-Formats" accesskey="n" rel="next">Standard Date Formats</a>, Previous: <a href="#Date-Formatting-Codes" accesskey="p" rel="prev">Date Formatting Codes</a>, Up: <a href="#Date-Formats" accesskey="u" rel="up">Date Formats</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Free_002dForm-Dates-1"></a>
<h4 class="subsubsection">6.7.7.3 Free-Form Dates</h4>

<p>When reading a date form during algebraic entry, Calc falls back
on the algorithm described here if the input does not exactly
match the current date format.  This algorithm generally
&ldquo;does the right thing&rdquo; and you don&rsquo;t have to worry about it,
but it is described here in full detail for the curious.
</p>
<p>Calc does not distinguish between upper- and lower-case letters
while interpreting dates.
</p>
<p>First, the time portion, if present, is located somewhere in the
text and then removed.  The remaining text is then interpreted as
the date.
</p>
<p>A time is of the form &lsquo;<samp>hh:mm:ss</samp>&rsquo;, possibly with the seconds
part omitted and possibly with an AM/PM indicator added to indicate
12-hour time.  If the AM/PM is present, the minutes may also be
omitted.  The AM/PM part may be any of the words &lsquo;<samp>am</samp>&rsquo;,
&lsquo;<samp>pm</samp>&rsquo;, &lsquo;<samp>noon</samp>&rsquo;, or &lsquo;<samp>midnight</samp>&rsquo;; each of these may be
abbreviated to one letter, and the alternate forms &lsquo;<samp>a.m.</samp>&rsquo;,
&lsquo;<samp>p.m.</samp>&rsquo;, and &lsquo;<samp>mid</samp>&rsquo; are also understood.  Obviously
&lsquo;<samp>noon</samp>&rsquo; and &lsquo;<samp>midnight</samp>&rsquo; are allowed only on 12:00:00.
The words &lsquo;<samp>noon</samp>&rsquo;, &lsquo;<samp>mid</samp>&rsquo;, and &lsquo;<samp>midnight</samp>&rsquo; are also
recognized with no number attached.  Midnight will represent the
beginning of a day.
</p>
<p>If there is no AM/PM indicator, the time is interpreted in 24-hour
format.
</p>
<p>When reading the date portion, Calc first checks to see if it is an
ISO 8601 week-numbering date; if the string contains an integer
representing the year, a &ldquo;W&rdquo; followed by two digits for the week
number, and an integer from 1 to 7 representing the weekday (in that
order), then all other characters are ignored and this information
determines the date.  Otherwise, all words and numbers are isolated
from the string; other characters are ignored.  All words must be
either month names or day-of-week names (the latter of which are
ignored). Names can be written in full or as three-letter
abbreviations.
</p>
<p>Large numbers, or numbers with &lsquo;<samp>+</samp>&rsquo; or &lsquo;<samp>-</samp>&rsquo; signs,
are interpreted as years.  If one of the other numbers is
greater than 12, then that must be the day and the remaining
number in the input is therefore the month.  Otherwise, Calc
assumes the month, day and year are in the same order that they
appear in the current date format.  If the year is omitted, the
current year is taken from the system clock.
</p>
<p>If there are too many or too few numbers, or any unrecognizable
words, then the input is rejected.
</p>
<p>If there are any large numbers (of five digits or more) other than
the year, they are ignored on the assumption that they are something
like Julian dates that were included along with the traditional
date components when the date was formatted.
</p>
<p>One of the words &lsquo;<samp>ad</samp>&rsquo;, &lsquo;<samp>a.d.</samp>&rsquo;, &lsquo;<samp>bc</samp>&rsquo;, or &lsquo;<samp>b.c.</samp>&rsquo;
may optionally be used; the latter two are equivalent to a
minus sign on the year value.
</p>
<p>If you always enter a four-digit year, and use a name instead
of a number for the month, there is no danger of ambiguity.
</p>
<hr>
<a name="Standard-Date-Formats"></a>
<div class="header">
<p>
Previous: <a href="#Free_002dForm-Dates" accesskey="p" rel="prev">Free-Form Dates</a>, Up: <a href="#Date-Formats" accesskey="u" rel="up">Date Formats</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-Date-Formats-1"></a>
<h4 class="subsubsection">6.7.7.4 Standard Date Formats</h4>

<p>There are actually ten standard date formats, numbered 0 through 9.
Entering a blank line at the <kbd>d d</kbd> command&rsquo;s prompt gives
you format number 1, Calc&rsquo;s usual format.  You can enter any digit
to select the other formats.
</p>
<p>To create your own standard date formats, give a numeric prefix
argument from 0 to 9 to the <kbd>d&nbsp;d</kbd><!-- /@w --> command.  The format you
enter will be recorded as the new standard format of that
number, as well as becoming the new current date format.
You can save your formats permanently with the <kbd>m&nbsp;m</kbd><!-- /@w -->
command (see <a href="#Mode-Settings">Mode Settings</a>).
</p>
<dl compact="compact">
<dt>0</dt>
<dd><p>&lsquo;<samp>N</samp>&rsquo;  (Numerical format)
</p></dd>
<dt>1</dt>
<dd><p>&lsquo;<samp>&lt;H:mm:SSpp &gt;Www Mmm D, YYYY</samp>&rsquo;  (American format)
</p></dd>
<dt>2</dt>
<dd><p>&lsquo;<samp>D Mmm YYYY&lt;, h:mm:SS&gt;</samp>&rsquo;  (European format)
</p></dd>
<dt>3</dt>
<dd><p>&lsquo;<samp>Www Mmm BD&lt; hh:mm:ss&gt; YYYY</samp>&rsquo;  (Unix written date format)
</p></dd>
<dt>4</dt>
<dd><p>&lsquo;<samp>M/D/Y&lt; H:mm:SSpp&gt;</samp>&rsquo;  (American slashed format)
</p></dd>
<dt>5</dt>
<dd><p>&lsquo;<samp>D.M.Y&lt; h:mm:SS&gt;</samp>&rsquo;  (European dotted format)
</p></dd>
<dt>6</dt>
<dd><p>&lsquo;<samp>M-D-Y&lt; H:mm:SSpp&gt;</samp>&rsquo;  (American dashed format)
</p></dd>
<dt>7</dt>
<dd><p>&lsquo;<samp>D-M-Y&lt; h:mm:SS&gt;</samp>&rsquo;  (European dashed format)
</p></dd>
<dt>8</dt>
<dd><p>&lsquo;<samp>j&lt;, h:mm:ss&gt;</samp>&rsquo;  (Julian day plus time)
</p></dd>
<dt>9</dt>
<dd><p>&lsquo;<samp>YYddd&lt; hh:mm:ss&gt;</samp>&rsquo;  (Year-day format)
</p></dd>
<dt>10</dt>
<dd><p>&lsquo;<samp>ZYYY-MM-DD Www&lt; hh:mm&gt;</samp>&rsquo; (Org mode format)
</p></dd>
<dt>11</dt>
<dd><p>&lsquo;<samp>IYYY-Iww-w&lt;Thh:mm:ss&gt;</samp>&rsquo; (ISO 8601 week numbering format)
</p></dd>
</dl>

<hr>
<a name="Truncating-the-Stack"></a>
<div class="header">
<p>
Next: <a href="#Justification" accesskey="n" rel="next">Justification</a>, Previous: <a href="#Date-Formats" accesskey="p" rel="prev">Date Formats</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Truncating-the-Stack-1"></a>
<h4 class="subsection">6.7.8 Truncating the Stack</h4>

<p><a name="index-d-t"></a>
<a name="index-calc_002dtruncate_002dstack"></a>
<a name="index-Truncating-the-stack"></a>
<a name="index-Narrowing-the-stack"></a>
The <kbd>d t</kbd> (<code>calc-truncate-stack</code>) command moves the &lsquo;<samp>.</samp>&rsquo;
line that marks the top-of-stack up or down in the Calculator buffer.
The number right above that line is considered to the be at the top of
the stack.  Any numbers below that line are &ldquo;hidden&rdquo; from all stack
operations (although still visible to the user).  This is similar to the
Emacs &ldquo;narrowing&rdquo; feature, except that the values below the &lsquo;<samp>.</samp>&rsquo;
are <em>visible</em>, just temporarily frozen.  This feature allows you to
keep several independent calculations running at once in different parts
of the stack, or to apply a certain command to an element buried deep in
the stack.
</p>
<p>Pressing <kbd>d t</kbd> by itself moves the &lsquo;<samp>.</samp>&rsquo; to the line the cursor
is on.  Thus, this line and all those below it become hidden.  To un-hide
these lines, move down to the end of the buffer and press <kbd>d&nbsp;t</kbd><!-- /@w -->.
With a positive numeric prefix argument &lsquo;<samp>n</samp>&rsquo;, <kbd>d t</kbd> hides the
bottom &lsquo;<samp>n</samp>&rsquo; values in the buffer.  With a negative argument, it hides
all but the top &lsquo;<samp>n</samp>&rsquo; values.  With an argument of zero, it hides zero
values, i.e., moves the &lsquo;<samp>.</samp>&rsquo; all the way down to the bottom.
</p>
<a name="index-d-_005b"></a>
<a name="index-calc_002dtruncate_002dup"></a>
<a name="index-d-_005d"></a>
<a name="index-calc_002dtruncate_002ddown"></a>
<p>The <kbd>d [</kbd> (<code>calc-truncate-up</code>) and <kbd>d ]</kbd>
(<code>calc-truncate-down</code>) commands move the &lsquo;<samp>.</samp>&rsquo; up or down one
line at a time (or several lines with a prefix argument).
</p>
<hr>
<a name="Justification"></a>
<div class="header">
<p>
Next: <a href="#Labels" accesskey="n" rel="next">Labels</a>, Previous: <a href="#Truncating-the-Stack" accesskey="p" rel="prev">Truncating the Stack</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Justification-1"></a>
<h4 class="subsection">6.7.9 Justification</h4>

<p><a name="index-d-_003c"></a>
<a name="index-calc_002dleft_002djustify"></a>
<a name="index-d-_003d"></a>
<a name="index-calc_002dcenter_002djustify"></a>
<a name="index-d-_003e"></a>
<a name="index-calc_002dright_002djustify"></a>
Values on the stack are normally left-justified in the window.  You can
control this arrangement by typing <kbd>d &lt;</kbd> (<code>calc-left-justify</code>),
<kbd>d &gt;</kbd> (<code>calc-right-justify</code>), or <kbd>d =</kbd>
(<code>calc-center-justify</code>).  For example, in Right-Justification mode,
stack entries are displayed flush-right against the right edge of the
window.
</p>
<p>If you change the width of the Calculator window you may have to type
<kbd>d <span class="key">SPC</span></kbd> (<code>calc-refresh</code>) to re-align right-justified or centered
text.
</p>
<p>Right-justification is especially useful together with fixed-point
notation (see <code>d f</code>; <code>calc-fix-notation</code>).  With these modes
together, the decimal points on numbers will always line up.
</p>
<p>With a numeric prefix argument, the justification commands give you
a little extra control over the display.  The argument specifies the
horizontal &ldquo;origin&rdquo; of a display line.  It is also possible to
specify a maximum line width using the <kbd>d b</kbd> command (see <a href="#Normal-Language-Modes">Normal Language Modes</a>).  For reference, the precise rules for formatting and
breaking lines are given below.  Notice that the interaction between
origin and line width is slightly different in each justification
mode.
</p>
<p>In Left-Justified mode, the line is indented by a number of spaces
given by the origin (default zero).  If the result is longer than the
maximum line width, if given, or too wide to fit in the Calc window
otherwise, then it is broken into lines which will fit; each broken
line is indented to the origin.
</p>
<p>In Right-Justified mode, lines are shifted right so that the rightmost
character is just before the origin, or just before the current
window width if no origin was specified.  If the line is too long
for this, then it is broken; the current line width is used, if
specified, or else the origin is used as a width if that is
specified, or else the line is broken to fit in the window.
</p>
<p>In Centering mode, the origin is the column number of the center of
each stack entry.  If a line width is specified, lines will not be
allowed to go past that width; Calc will either indent less or
break the lines if necessary.  If no origin is specified, half the
line width or Calc window width is used.
</p>
<p>Note that, in each case, if line numbering is enabled the display
is indented an additional four spaces to make room for the line
number.  The width of the line number is taken into account when
positioning according to the current Calc window width, but not
when positioning by explicit origins and widths.  In the latter
case, the display is formatted as specified, and then uniformly
shifted over four spaces to fit the line numbers.
</p>
<hr>
<a name="Labels"></a>
<div class="header">
<p>
Previous: <a href="#Justification" accesskey="p" rel="prev">Justification</a>, Up: <a href="#Display-Modes" accesskey="u" rel="up">Display Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Labels-1"></a>
<h4 class="subsection">6.7.10 Labels</h4>

<p><a name="index-d-_007b"></a>
<a name="index-calc_002dleft_002dlabel"></a>
The <kbd>d {</kbd> (<code>calc-left-label</code>) command prompts for a string,
then displays that string to the left of every stack entry.  If the
entries are left-justified (see <a href="#Justification">Justification</a>), then they will
appear immediately after the label (unless you specified an origin
greater than the length of the label).  If the entries are centered
or right-justified, the label appears on the far left and does not
affect the horizontal position of the stack entry.
</p>
<p>Give a blank string (with <kbd>d { <span class="key">RET</span></kbd>) to turn the label off.
</p>
<a name="index-d-_007d"></a>
<a name="index-calc_002dright_002dlabel"></a>
<p>The <kbd>d }</kbd> (<code>calc-right-label</code>) command similarly adds a
label on the righthand side.  It does not affect positioning of
the stack entries unless they are right-justified.  Also, if both
a line width and an origin are given in Right-Justified mode, the
stack entry is justified to the origin and the righthand label is
justified to the line width.
</p>
<p>One application of labels would be to add equation numbers to
formulas you are manipulating in Calc and then copying into a
document (possibly using Embedded mode).  The equations would
typically be centered, and the equation numbers would be on the
left or right as you prefer.
</p>
<hr>
<a name="Language-Modes"></a>
<div class="header">
<p>
Next: <a href="#Modes-Variable" accesskey="n" rel="next">Modes Variable</a>, Previous: <a href="#Display-Modes" accesskey="p" rel="prev">Display Modes</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Language-Modes-1"></a>
<h3 class="section">6.8 Language Modes</h3>

<p>The commands in this section change Calc to use a different notation for
entry and display of formulas, corresponding to the conventions of some
other common language such as Pascal or LaTeX.  Objects displayed on the
stack or yanked from the Calculator to an editing buffer will be formatted
in the current language; objects entered in algebraic entry or yanked from
another buffer will be interpreted according to the current language.
</p>
<p>The current language has no effect on things written to or read from the
trail buffer, nor does it affect numeric entry.  Only algebraic entry is
affected.  You can make even algebraic entry ignore the current language
and use the standard notation by giving a numeric prefix, e.g., <kbd>C-u '</kbd>.
</p>
<p>For example, suppose the formula &lsquo;<samp>2*a[1] + atan(a[2])</samp>&rsquo; occurs in a C
program; elsewhere in the program you need the derivatives of this formula
with respect to &lsquo;<samp>a[1]</samp>&rsquo; and &lsquo;<samp>a[2]</samp>&rsquo;.  First, type <kbd>d C</kbd>
to switch to C notation.  Now use <code>C-u C-x * g</code> to grab the formula
into the Calculator, <kbd>a d a[1] <span class="key">RET</span></kbd> to differentiate with respect
to the first variable, and <kbd>C-x * y</kbd> to yank the formula for the derivative
back into your C program.  Press <kbd>U</kbd> to undo the differentiation and
repeat with <kbd>a d a[2] <span class="key">RET</span></kbd> for the other derivative.
</p>
<p>Without being switched into C mode first, Calc would have misinterpreted
the brackets in &lsquo;<samp>a[1]</samp>&rsquo; and &lsquo;<samp>a[2]</samp>&rsquo;, would not have known that
<code>atan</code> was equivalent to Calc&rsquo;s built-in <code>arctan</code> function,
and would have written the formula back with notations (like implicit
multiplication) which would not have been valid for a C program.
</p>
<p>As another example, suppose you are maintaining a C program and a LaTeX
document, each of which needs a copy of the same formula.  You can grab the
formula from the program in C mode, switch to LaTeX mode, and yank the
formula into the document in LaTeX math-mode format.
</p>
<p>Language modes are selected by typing the letter <kbd>d</kbd> followed by a
shifted letter key.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Normal-Language-Modes" accesskey="1">Normal Language Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#C-FORTRAN-Pascal" accesskey="2">C FORTRAN Pascal</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#TeX-and-LaTeX-Language-Modes" accesskey="3">TeX and LaTeX Language Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Eqn-Language-Mode" accesskey="4">Eqn Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Yacas-Language-Mode" accesskey="5">Yacas Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Maxima-Language-Mode" accesskey="6">Maxima Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Giac-Language-Mode" accesskey="7">Giac Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mathematica-Language-Mode" accesskey="8">Mathematica Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Maple-Language-Mode" accesskey="9">Maple Language Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Compositions">Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Syntax-Tables">Syntax Tables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Normal-Language-Modes"></a>
<div class="header">
<p>
Next: <a href="#C-FORTRAN-Pascal" accesskey="n" rel="next">C FORTRAN Pascal</a>, Previous: <a href="#Language-Modes" accesskey="p" rel="prev">Language Modes</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Normal-Language-Modes-1"></a>
<h4 class="subsection">6.8.1 Normal Language Modes</h4>

<p><a name="index-d-N"></a>
<a name="index-calc_002dnormal_002dlanguage"></a>
The <kbd>d N</kbd> (<code>calc-normal-language</code>) command selects the usual
notation for Calc formulas, as described in the rest of this manual.
Matrices are displayed in a multi-line tabular format, but all other
objects are written in linear form, as they would be typed from the
keyboard.
</p>
<a name="index-d-O"></a>
<a name="index-calc_002dflat_002dlanguage"></a>
<a name="index-Matrix-display"></a>
<p>The <kbd>d O</kbd> (<code>calc-flat-language</code>) command selects a language
identical with the normal one, except that matrices are written in
one-line form along with everything else.  In some applications this
form may be more suitable for yanking data into other buffers.
</p>
<a name="index-d-b"></a>
<a name="index-calc_002dline_002dbreaking"></a>
<a name="index-Line-breaking"></a>
<a name="index-Breaking-up-long-lines"></a>
<p>Even in one-line mode, long formulas or vectors will still be split
across multiple lines if they exceed the width of the Calculator window.
The <kbd>d b</kbd> (<code>calc-line-breaking</code>) command turns this line-breaking
feature on and off.  (It works independently of the current language.)
If you give a numeric prefix argument of five or greater to the <kbd>d b</kbd>
command, that argument will specify the line width used when breaking
long lines.
</p>
<a name="index-d-B"></a>
<a name="index-calc_002dbig_002dlanguage"></a>
<p>The <kbd>d B</kbd> (<code>calc-big-language</code>) command selects a language
which uses textual approximations to various mathematical notations,
such as powers, quotients, and square roots:
</p>
<div class="example">
<pre class="example">  ____________
 | a + 1    2
 | ----- + c
\|   b
</pre></div>

<p>in place of &lsquo;<samp>sqrt((a+1)/b + c^2)</samp>&rsquo;.
</p>
<p>Subscripts like &lsquo;<samp>a_i</samp>&rsquo; are displayed as actual subscripts in Big
mode.  Double subscripts, &lsquo;<samp>a_i_j</samp>&rsquo; (&lsquo;<samp>subscr(subscr(a, i), j)</samp>&rsquo;)
are displayed as &lsquo;<samp>a</samp>&rsquo; with subscripts separated by commas:
&lsquo;<samp>i, j</samp>&rsquo;.  They must still be entered in the usual underscore
notation.
</p>
<p>One slight ambiguity of Big notation is that
</p>
<div class="example">
<pre class="example">  3
- -
  4
</pre></div>

<p>can represent either the negative rational number &lsquo;<samp>-3:4</samp>&rsquo;, or the
actual expression &lsquo;<samp>-(3/4)</samp>&rsquo;; but the latter formula would normally
never be displayed because it would immediately be evaluated to
&lsquo;<samp>-3:4</samp>&rsquo; or &lsquo;<samp>-0.75</samp>&rsquo;, so this ambiguity is not a problem in
typical use.
</p>
<p>Non-decimal numbers are displayed with subscripts.  Thus there is no
way to tell the difference between &lsquo;<samp>16#C2</samp>&rsquo; and &lsquo;<samp>C2_16</samp>&rsquo;,
though generally you will know which interpretation is correct.
Logarithms &lsquo;<samp>log(x,b)</samp>&rsquo; and &lsquo;<samp>log10(x)</samp>&rsquo; also use subscripts
in Big mode.
</p>
<p>In Big mode, stack entries often take up several lines.  To aid
readability, stack entries are separated by a blank line in this mode.
You may find it useful to expand the Calc window&rsquo;s height using
<kbd>C-x ^</kbd> (<code>enlarge-window</code>) or to make the Calc window the only
one on the screen with <kbd>C-x 1</kbd> (<code>delete-other-windows</code>).
</p>
<p>Long lines are currently not rearranged to fit the window width in
Big mode, so you may need to use the <kbd>&lt;</kbd> and <kbd>&gt;</kbd> keys
to scroll across a wide formula.  For really big formulas, you may
even need to use <kbd>{</kbd> and <kbd>}</kbd> to scroll up and down.
</p>
<a name="index-d-U"></a>
<a name="index-calc_002dunformatted_002dlanguage"></a>
<p>The <kbd>d U</kbd> (<code>calc-unformatted-language</code>) command altogether disables
the use of operator notation in formulas.  In this mode, the formula
shown above would be displayed:
</p>
<div class="example">
<pre class="example">sqrt(add(div(add(a, 1), b), pow(c, 2)))
</pre></div>

<p>These four modes differ only in display format, not in the format
expected for algebraic entry.  The standard Calc operators work in
all four modes, and unformatted notation works in any language mode
(except that Mathematica mode expects square brackets instead of
parentheses).
</p>
<hr>
<a name="C-FORTRAN-Pascal"></a>
<div class="header">
<p>
Next: <a href="#TeX-and-LaTeX-Language-Modes" accesskey="n" rel="next">TeX and LaTeX Language Modes</a>, Previous: <a href="#Normal-Language-Modes" accesskey="p" rel="prev">Normal Language Modes</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="C_002c-FORTRAN_002c-and-Pascal-Modes"></a>
<h4 class="subsection">6.8.2 C, FORTRAN, and Pascal Modes</h4>

<p><a name="index-d-C"></a>
<a name="index-calc_002dc_002dlanguage"></a>
<a name="index-C-language"></a>
The <kbd>d C</kbd> (<code>calc-c-language</code>) command selects the conventions
of the C language for display and entry of formulas.  This differs from
the normal language mode in a variety of (mostly minor) ways.  In
particular, C language operators and operator precedences are used in
place of Calc&rsquo;s usual ones.  For example, &lsquo;<samp>a^b</samp>&rsquo; means &lsquo;<samp>xor(a,b)</samp>&rsquo;
in C mode; a value raised to a power is written as a function call,
&lsquo;<samp>pow(a,b)</samp>&rsquo;.
</p>
<p>In C mode, vectors and matrices use curly braces instead of brackets.
Octal and hexadecimal values are written with leading &lsquo;<samp>0</samp>&rsquo; or &lsquo;<samp>0x</samp>&rsquo;
rather than using the &lsquo;<samp>#</samp>&rsquo; symbol.  Array subscripting is
translated into <code>subscr</code> calls, so that &lsquo;<samp>a[i]</samp>&rsquo; in C
mode is the same as &lsquo;<samp>a_i</samp>&rsquo; in Normal mode.  Assignments
turn into the <code>assign</code> function, which Calc normally displays
using the &lsquo;<samp>:=</samp>&rsquo; symbol.
</p>
<p>The variables <code>pi</code> and <code>e</code> would be displayed &lsquo;<samp>pi</samp>&rsquo;
and &lsquo;<samp>e</samp>&rsquo; in Normal mode, but in C mode they are displayed as
&lsquo;<samp>M_PI</samp>&rsquo; and &lsquo;<samp>M_E</samp>&rsquo;, corresponding to the names of constants
typically provided in the <samp>&lt;math.h&gt;</samp> header.  Functions whose
names are different in C are translated automatically for entry and
display purposes.  For example, entering &lsquo;<samp>asin(x)</samp>&rsquo; will push the
formula &lsquo;<samp>arcsin(x)</samp>&rsquo; onto the stack; this formula will be displayed
as &lsquo;<samp>asin(x)</samp>&rsquo; as long as C mode is in effect.
</p>
<a name="index-d-P"></a>
<a name="index-calc_002dpascal_002dlanguage"></a>
<a name="index-Pascal-language"></a>
<p>The <kbd>d P</kbd> (<code>calc-pascal-language</code>) command selects Pascal
conventions.  Like C mode, Pascal mode interprets array brackets and uses
a different table of operators.  Hexadecimal numbers are entered and
displayed with a preceding dollar sign.  (Thus the regular meaning of
<kbd>$2</kbd> during algebraic entry does not work in Pascal mode, though
<kbd>$</kbd> (and <kbd>$$</kbd>, etc.) not followed by digits works the same as
always.)  No special provisions are made for other non-decimal numbers,
vectors, and so on, since there is no universally accepted standard way
of handling these in Pascal.
</p>
<a name="index-d-F"></a>
<a name="index-calc_002dfortran_002dlanguage"></a>
<a name="index-FORTRAN-language"></a>
<p>The <kbd>d F</kbd> (<code>calc-fortran-language</code>) command selects FORTRAN
conventions.  Various function names are transformed into FORTRAN
equivalents.  Vectors are written as &lsquo;<samp>/1, 2, 3/</samp>&rsquo;, and may be
entered this way or using square brackets.  Since FORTRAN uses round
parentheses for both function calls and array subscripts, Calc displays
both in the same way; &lsquo;<samp>a(i)</samp>&rsquo; is interpreted as a function call
upon reading, and subscripts must be entered as &lsquo;<samp>subscr(a, i)</samp>&rsquo;.
If the variable <code>a</code> has been declared to have type
<code>vector</code> or <code>matrix</code>, however,  then &lsquo;<samp>a(i)</samp>&rsquo; will be
parsed as a subscript.  (See <a href="#Declarations">Declarations</a>.)  Usually it doesn&rsquo;t
matter, though; if you enter the subscript expression &lsquo;<samp>a(i)</samp>&rsquo; and
Calc interprets it as a function call, you&rsquo;ll never know the difference
unless you switch to another language mode or replace <code>a</code> with an
actual vector (or unless <code>a</code> happens to be the name of a built-in
function!).
</p>
<p>Underscores are allowed in variable and function names in all of these
language modes.  The underscore here is equivalent to the &lsquo;<samp>#</samp>&rsquo; in
Normal mode, or to hyphens in the underlying Emacs Lisp variable names.
</p>
<p>FORTRAN and Pascal modes normally do not adjust the case of letters in
formulas.  Most built-in Calc names use lower-case letters.  If you use a
positive numeric prefix argument with <kbd>d P</kbd> or <kbd>d F</kbd>, these
modes will use upper-case letters exclusively for display, and will
convert to lower-case on input.  With a negative prefix, these modes
convert to lower-case for display and input.
</p>
<hr>
<a name="TeX-and-LaTeX-Language-Modes"></a>
<div class="header">
<p>
Next: <a href="#Eqn-Language-Mode" accesskey="n" rel="next">Eqn Language Mode</a>, Previous: <a href="#C-FORTRAN-Pascal" accesskey="p" rel="prev">C FORTRAN Pascal</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="TeX-and-LaTeX-Language-Modes-1"></a>
<h4 class="subsection">6.8.3 TeX and LaTeX Language Modes</h4>

<p><a name="index-d-T"></a>
<a name="index-calc_002dtex_002dlanguage"></a>
<a name="index-TeX-language"></a>
<a name="index-d-L"></a>
<a name="index-calc_002dlatex_002dlanguage"></a>
<a name="index-LaTeX-language"></a>
The <kbd>d T</kbd> (<code>calc-tex-language</code>) command selects the conventions
of &ldquo;math mode&rdquo; in Donald Knuth&rsquo;s TeX typesetting language,
and the <kbd>d L</kbd> (<code>calc-latex-language</code>) command selects the
conventions of &ldquo;math mode&rdquo; in LaTeX, a typesetting language that
uses TeX as its formatting engine.  Calc&rsquo;s LaTeX language mode can
read any formula that the TeX language mode can, although LaTeX
mode may display it differently.
</p>
<p>Formulas are entered and displayed in the appropriate notation;
&lsquo;<samp>sin(a/b)</samp>&rsquo;
will appear as &lsquo;<samp>\sin\left( {a \over b} \right)</samp>&rsquo; in TeX mode and
&lsquo;<samp>\sin\left(\frac{a}{b}\right)</samp>&rsquo; in LaTeX mode.
Math formulas are often enclosed by &lsquo;<samp>$ $</samp>&rsquo; signs in TeX and
LaTeX; these should be omitted when interfacing with Calc.  To Calc,
the &lsquo;<samp>$</samp>&rsquo; sign has the same meaning it always does in algebraic
formulas (a reference to an existing entry on the stack).
</p>
<p>Complex numbers are displayed as in &lsquo;<samp>3 + 4i</samp>&rsquo;.  Fractions and
quotients are written using <code>\over</code> in TeX mode (as in
<code>{a \over b}</code>) and <code>\frac</code> in LaTeX mode (as in
<code>\frac{a}{b}</code>);  binomial coefficients are written with
<code>\choose</code> in TeX mode (as in <code>{a \choose b}</code>) and
<code>\binom</code> in LaTeX mode (as in <code>\binom{a}{b}</code>).
Interval forms are written with <code>\ldots</code>, and error forms are
written with <code>\pm</code>. Absolute values are written as in
&lsquo;<samp>|x + 1|</samp>&rsquo;, and the floor and ceiling functions are written with
<code>\lfloor</code>, <code>\rfloor</code>, etc. The words <code>\left</code> and
<code>\right</code> are ignored when reading formulas in TeX and LaTeX
modes.  Both <code>inf</code> and <code>uinf</code> are written as <code>\infty</code>;
when read, <code>\infty</code> always translates to <code>inf</code>.
</p>
<p>Function calls are written the usual way, with the function name followed
by the arguments in parentheses.  However, functions for which TeX
and LaTeX have special names (like <code>\sin</code>) will use curly braces
instead of parentheses for very simple arguments.  During input, curly
braces and parentheses work equally well for grouping, but when the
document is formatted the curly braces will be invisible.  Thus the
printed result is
&lsquo;<samp>sin 2x</samp>&rsquo;
but
&lsquo;<samp>sin(2 + x)</samp>&rsquo;.
</p>
<p>The TeX specific unit names (see <a href="#Predefined-Units">Predefined Units</a>) will not use
the &lsquo;<samp>tex</samp>&rsquo; prefix;  the unit name for a TeX point will be
&lsquo;<samp>pt</samp>&rsquo; instead of &lsquo;<samp>texpt</samp>&rsquo;, for example.
</p>
<p>Function and variable names not treated specially by TeX and LaTeX
are simply written out as-is, which will cause them to come out in
italic letters in the printed document.  If you invoke <kbd>d T</kbd> or
<kbd>d L</kbd> with a positive numeric prefix argument, names of more than
one character will instead be enclosed in a protective commands that
will prevent them from being typeset in the math italics; they will be
written &lsquo;<samp>\hbox{<var>name</var>}</samp>&rsquo; in TeX mode and
&lsquo;<samp>\text{<var>name</var>}</samp>&rsquo; in LaTeX mode.  The
&lsquo;<samp>\hbox{ }</samp>&rsquo; and &lsquo;<samp>\text{ }</samp>&rsquo; notations are ignored during
reading.  If you use a negative prefix argument, such function names are
written &lsquo;<samp>\<var>name</var></samp>&rsquo;, and function names that begin with <code>\</code> during
reading have the <code>\</code> removed.  (Note that in this mode, long
variable names are still written with <code>\hbox</code> or <code>\text</code>.
However, you can always make an actual variable name like <code>\bar</code> in
any TeX mode.)
</p>
<p>During reading, text of the form &lsquo;<samp>\matrix{ ... }</samp>&rsquo; is replaced
by &lsquo;<samp>[ ... ]</samp>&rsquo;.  The same also applies to <code>\pmatrix</code> and
<code>\bmatrix</code>.  In LaTeX mode this also applies to
&lsquo;<samp>\begin{matrix} ... \end{matrix}</samp>&rsquo;,
&lsquo;<samp>\begin{bmatrix} ... \end{bmatrix}</samp>&rsquo;,
&lsquo;<samp>\begin{pmatrix} ... \end{pmatrix}</samp>&rsquo;, as well as
&lsquo;<samp>\begin{smallmatrix} ... \end{smallmatrix}</samp>&rsquo;.
The symbol &lsquo;<samp>&amp;</samp>&rsquo; is interpreted as a comma,
and the symbols &lsquo;<samp>\cr</samp>&rsquo; and &lsquo;<samp>\\</samp>&rsquo; are interpreted as semicolons.
During output, matrices are displayed in &lsquo;<samp>\matrix{ a &amp; b \\ c &amp; d}</samp>&rsquo;
format in TeX mode and in
&lsquo;<samp>\begin{pmatrix} a &amp; b \\ c &amp; d \end{pmatrix}</samp>&rsquo; format in
LaTeX mode; you may need to edit this afterwards to change to your
preferred matrix form.  If you invoke <kbd>d T</kbd> or <kbd>d L</kbd> with an
argument of 2 or -2, then matrices will be displayed in two-dimensional
form, such as
</p>
<div class="example">
<pre class="example">\begin{pmatrix}
a &amp; b \\
c &amp; d
\end{pmatrix}
</pre></div>

<p>This may be convenient for isolated matrices, but could lead to
expressions being displayed like
</p>
<div class="example">
<pre class="example">\begin{pmatrix} \times x
a &amp; b \\
c &amp; d
\end{pmatrix}
</pre></div>

<p>While this wouldn&rsquo;t bother Calc, it is incorrect LaTeX.
(Similarly for TeX.)
</p>
<p>Accents like <code>\tilde</code> and <code>\bar</code> translate into function
calls internally (&lsquo;<samp>tilde(x)</samp>&rsquo;, &lsquo;<samp>bar(x)</samp>&rsquo;).  The <code>\underline</code>
sequence is treated as an accent.  The <code>\vec</code> accent corresponds
to the function name <code>Vec</code>, because <code>vec</code> is the name of
a built-in Calc function.  The following table shows the accents
in Calc, TeX, LaTeX and <em>eqn</em> (described in the next section):
</p>
<a name="index-acute"></a>
<a name="index-Acute"></a>
<a name="index-bar"></a>
<a name="index-Bar"></a>
<a name="index-breve"></a>
<a name="index-Breve"></a>
<a name="index-check"></a>
<a name="index-Check"></a>
<a name="index-dddot"></a>
<a name="index-ddddot"></a>
<a name="index-dot"></a>
<a name="index-Dot"></a>
<a name="index-dotdot"></a>
<a name="index-DotDot"></a>
<a name="index-dyad"></a>
<a name="index-grave"></a>
<a name="index-Grave"></a>
<a name="index-hat"></a>
<a name="index-Hat"></a>
<a name="index-Prime"></a>
<a name="index-tilde"></a>
<a name="index-Tilde"></a>
<a name="index-under"></a>
<a name="index-Vec"></a>
<a name="index-VEC"></a>
<div class="example">
<pre class="example">Calc      TeX           LaTeX         eqn
----      ---           -----         ---
acute     \acute        \acute
Acute                   \Acute
bar       \bar          \bar          bar
Bar                     \Bar
breve     \breve        \breve
Breve                   \Breve
check     \check        \check
Check                   \Check
dddot                   \dddot
ddddot                  \ddddot
dot       \dot          \dot          dot
Dot                     \Dot
dotdot    \ddot         \ddot         dotdot
DotDot                  \Ddot
dyad                                  dyad
grave     \grave        \grave
Grave                   \Grave
hat       \hat          \hat          hat
Hat                     \Hat
Prime                                 prime
tilde     \tilde        \tilde        tilde
Tilde                   \Tilde
under     \underline    \underline    under
Vec       \vec          \vec          vec
VEC                     \Vec
</pre></div>

<p>The &lsquo;<samp>=&gt;</samp>&rsquo; (evaluates-to) operator appears as a <code>\to</code> symbol:
&lsquo;<samp>{<var>a</var> \to <var>b</var>}</samp>&rsquo;.  TeX defines <code>\to</code> as an
alias for <code>\rightarrow</code>.  However, if the &lsquo;<samp>=&gt;</samp>&rsquo; is the
top-level expression being formatted, a slightly different notation
is used:  &lsquo;<samp>\evalto <var>a</var> \to <var>b</var></samp>&rsquo;.  The <code>\evalto</code>
word is ignored by Calc&rsquo;s input routines, and is undefined in TeX.
You will typically want to include one of the following definitions
at the top of a TeX file that uses <code>\evalto</code>:
</p>
<div class="example">
<pre class="example">\def\evalto{}
\def\evalto#1\to{}
</pre></div>

<p>The first definition formats evaluates-to operators in the usual
way.  The second causes only the <var>b</var> part to appear in the
printed document; the <var>a</var> part and the arrow are hidden.
Another definition you may wish to use is &lsquo;<samp>\let\to=\Rightarrow</samp>&rsquo;
which causes <code>\to</code> to appear more like Calc&rsquo;s &lsquo;<samp>=&gt;</samp>&rsquo; symbol.
See <a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a>, for a discussion of <code>evalto</code>.
</p>
<p>The complete set of TeX control sequences that are ignored during
reading is:
</p>
<div class="example">
<pre class="example">\hbox  \mbox  \text  \left  \right
\,  \&gt;  \:  \;  \!  \quad  \qquad  \hfil  \hfill
\displaystyle  \textstyle  \dsize  \tsize
\scriptstyle  \scriptscriptstyle  \ssize  \ssize
\rm  \bf  \it  \sl  \roman  \bold  \italic  \slanted
\cal  \mit  \Cal  \Bbb  \frak  \goth
\evalto
</pre></div>

<p>Note that, because these symbols are ignored, reading a TeX or
LaTeX formula into Calc and writing it back out may lose spacing and
font information.
</p>
<p>Also, the &ldquo;discretionary multiplication sign&rdquo; &lsquo;<samp>\*</samp>&rsquo; is read
the same as &lsquo;<samp>*</samp>&rsquo;.
</p>
<p>The TeX version of this manual includes some printed examples at the
end of this section.
</p>
<hr>
<a name="Eqn-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Yacas-Language-Mode" accesskey="n" rel="next">Yacas Language Mode</a>, Previous: <a href="#TeX-and-LaTeX-Language-Modes" accesskey="p" rel="prev">TeX and LaTeX Language Modes</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Eqn-Language-Mode-1"></a>
<h4 class="subsection">6.8.4 Eqn Language Mode</h4>

<p><a name="index-d-E"></a>
<a name="index-calc_002deqn_002dlanguage"></a>
<em>Eqn</em> is another popular formatter for math formulas.  It is
designed for use with the TROFF text formatter, and comes standard
with many versions of Unix.  The <kbd>d E</kbd> (<code>calc-eqn-language</code>)
command selects <em>eqn</em> notation.
</p>
<p>The <em>eqn</em> language&rsquo;s main idiosyncrasy is that whitespace plays
a significant part in the parsing of the language.  For example,
&lsquo;<samp>sqrt x+1 + y</samp>&rsquo; treats &lsquo;<samp>x+1</samp>&rsquo; as the argument of the
<code>sqrt</code> operator.  <em>Eqn</em> also understands more conventional
grouping using curly braces:  &lsquo;<samp>sqrt{x+1} + y</samp>&rsquo;.  Braces are
required only when the argument contains spaces.
</p>
<p>In Calc&rsquo;s <em>eqn</em> mode, however, curly braces are required to
delimit arguments of operators like <code>sqrt</code>.  The first of the
above examples would treat only the &lsquo;<samp>x</samp>&rsquo; as the argument of
<code>sqrt</code>, and in fact &lsquo;<samp>sin x+1</samp>&rsquo; would be interpreted as
&lsquo;<samp>sin * x + 1</samp>&rsquo;, because <code>sin</code> is not a special operator
in the <em>eqn</em> language.  If you always surround the argument
with curly braces, Calc will never misunderstand.
</p>
<p>Calc also understands parentheses as grouping characters.  Another
peculiarity of <em>eqn</em>&rsquo;s syntax makes it advisable to separate
words with spaces from any surrounding characters that aren&rsquo;t curly
braces, so Calc writes &lsquo;<samp>sin ( x + y )</samp>&rsquo; in <em>eqn</em> mode.
(The spaces around <code>sin</code> are important to make <em>eqn</em>
recognize that <code>sin</code> should be typeset in a roman font, and
the spaces around <code>x</code> and <code>y</code> are a good idea just in
case the <em>eqn</em> document has defined special meanings for these
names, too.)
</p>
<p>Powers and subscripts are written with the <code>sub</code> and <code>sup</code>
operators, respectively.  Note that the caret symbol &lsquo;<samp>^</samp>&rsquo; is
treated the same as a space in <em>eqn</em> mode, as is the &lsquo;<samp>~</samp>&rsquo;
symbol (these are used to introduce spaces of various widths into
the typeset output of <em>eqn</em>).
</p>
<p>As in LaTeX mode, Calc&rsquo;s formatter omits parentheses around the
arguments of functions like <code>ln</code> and <code>sin</code> if they are
&ldquo;simple-looking&rdquo;; in this case Calc surrounds the argument with
braces, separated by a &lsquo;<samp>~</samp>&rsquo; from the function name: &lsquo;<samp>sin~{x}</samp>&rsquo;.
</p>
<p>Font change codes (like &lsquo;<samp>roman <var>x</var></samp>&rsquo;) and positioning codes
(like &lsquo;<samp>~</samp>&rsquo; and &lsquo;<samp>down <var>n</var> <var>x</var></samp>&rsquo;) are ignored by the
<em>eqn</em> reader.  Also ignored are the words <code>left</code>, <code>right</code>,
<code>mark</code>, and <code>lineup</code>.  Quotation marks in <em>eqn</em> mode input
are treated the same as curly braces: &lsquo;<samp>sqrt &quot;1+x&quot;</samp>&rsquo; is equivalent to
&lsquo;<samp>sqrt {1+x}</samp>&rsquo;; this is only an approximation to the true meaning
of quotes in <em>eqn</em>, but it is good enough for most uses.
</p>
<p>Accent codes (&lsquo;<samp><var>x</var> dot</samp>&rsquo;) are handled by treating them as
function calls (&lsquo;<samp>dot(<var>x</var>)</samp>&rsquo;) internally.
See <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>, for a table of these accent
functions.  The <code>prime</code> accent is treated specially if it occurs on
a variable or function name: &lsquo;<samp>f prime prime (&nbsp;x&nbsp;prime&nbsp;)<!-- /@w --></samp>&rsquo; is
stored internally as &lsquo;<samp>f''<!-- /@w -->(x')</samp>&rsquo;.  For example, taking the
derivative of &lsquo;<samp>f(2 x)</samp>&rsquo; with <kbd>a d x</kbd> will produce &lsquo;<samp>2 f'(2
x)</samp>&rsquo;, which <em>eqn</em> mode will display as &lsquo;<samp>2 f prime ( 2 x )</samp>&rsquo;.
</p>
<p>Assignments are written with the &lsquo;<samp>&lt;-</samp>&rsquo; (left-arrow) symbol,
and <code>evalto</code> operators are written with &lsquo;<samp>-&gt;</samp>&rsquo; or
&lsquo;<samp>evalto ... -&gt;</samp>&rsquo; (see <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>, for a discussion
of this).  The regular Calc symbols &lsquo;<samp>:=</samp>&rsquo; and &lsquo;<samp>=&gt;</samp>&rsquo; are also
recognized for these operators during reading.
</p>
<p>Vectors in <em>eqn</em> mode use regular Calc square brackets, but
matrices are formatted as &lsquo;<samp>matrix { ccol { a above b } ... }</samp>&rsquo;.
The words <code>lcol</code> and <code>rcol</code> are recognized as synonyms
for <code>ccol</code> during input, and are generated instead of <code>ccol</code>
if the matrix justification mode so specifies.
</p>
<hr>
<a name="Yacas-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Maxima-Language-Mode" accesskey="n" rel="next">Maxima Language Mode</a>, Previous: <a href="#Eqn-Language-Mode" accesskey="p" rel="prev">Eqn Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Yacas-Language-Mode-1"></a>
<h4 class="subsection">6.8.5 Yacas Language Mode</h4>

<p><a name="index-d-Y"></a>
<a name="index-calc_002dyacas_002dlanguage"></a>
<a name="index-Yacas-language"></a>
The <kbd>d Y</kbd> (<code>calc-yacas-language</code>) command selects the
conventions of Yacas, a free computer algebra system.  While the
operators and functions in Yacas are similar to those of Calc, the names
of built-in functions in Yacas are capitalized.  The Calc formula
&lsquo;<samp>sin(2 x)</samp>&rsquo;, for example, is entered and displayed &lsquo;<samp>Sin(2 x)</samp>&rsquo;
in Yacas mode,  and &lsquo;&lsquo;<samp>arcsin(x^2)</samp>&rsquo; is &lsquo;<samp>ArcSin(x^2)</samp>&rsquo; in Yacas
mode.  Complex numbers are written  are written &lsquo;<samp>3 + 4 I</samp>&rsquo;.
The standard special constants are written <code>Pi</code>, <code>E</code>,
<code>I</code>, <code>GoldenRatio</code> and <code>Gamma</code>.  <code>Infinity</code>
represents both <code>inf</code> and <code>uinf</code>, and <code>Undefined</code>
represents <code>nan</code>.
</p>
<p>Certain operators on functions, such as <code>D</code> for differentiation
and <code>Integrate</code> for integration, take a prefix form in Yacas.  For
example, the derivative of &lsquo;<samp>e^x&nbsp;sin(x)</samp>&rsquo;<!-- /@w --> can be computed with
&lsquo;<samp>D(x)&nbsp;Exp(x)*Sin(x)</samp>&rsquo;<!-- /@w -->.
</p>
<p>Other notable differences between Yacas and standard Calc expressions
are that vectors and matrices use curly braces in Yacas, and subscripts
use square brackets.  If, for example, &lsquo;<samp>A</samp>&rsquo; represents the list
&lsquo;<samp>{a,2,c,4}</samp>&rsquo;, then &lsquo;<samp>A[3]</samp>&rsquo; would equal &lsquo;<samp>c</samp>&rsquo;.
</p>

<hr>
<a name="Maxima-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Giac-Language-Mode" accesskey="n" rel="next">Giac Language Mode</a>, Previous: <a href="#Yacas-Language-Mode" accesskey="p" rel="prev">Yacas Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Maxima-Language-Mode-1"></a>
<h4 class="subsection">6.8.6 Maxima Language Mode</h4>

<p><a name="index-d-X"></a>
<a name="index-calc_002dmaxima_002dlanguage"></a>
<a name="index-Maxima-language"></a>
The <kbd>d X</kbd> (<code>calc-maxima-language</code>) command selects the
conventions of Maxima, another free computer algebra system.  The
function names in Maxima are similar, but not always identical, to Calc.
For example, instead of &lsquo;<samp>arcsin(x)</samp>&rsquo;, Maxima will use
&lsquo;<samp>asin(x)</samp>&rsquo;.  Complex numbers are written &lsquo;<samp>3 + 4 %i</samp>&rsquo;.  The
standard special constants are written <code>%pi</code>,  <code>%e</code>,
<code>%i</code>, <code>%phi</code> and <code>%gamma</code>.  In Maxima,  <code>inf</code> means
the same as in Calc, but <code>infinity</code> represents Calc&rsquo;s <code>uinf</code>.
</p>
<p>Underscores as well as percent signs are allowed in function and
variable names in Maxima mode.  The underscore again is equivalent to
the &lsquo;<samp>#</samp>&rsquo; in Normal mode, and the percent sign is equivalent to
&lsquo;<samp>o'o</samp>&rsquo;.
</p>
<p>Maxima uses square brackets for lists and vectors, and matrices are
written as calls to the function <code>matrix</code>, given the row vectors of
the matrix as arguments.  Square brackets are also used as subscripts.
</p>
<hr>
<a name="Giac-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Mathematica-Language-Mode" accesskey="n" rel="next">Mathematica Language Mode</a>, Previous: <a href="#Maxima-Language-Mode" accesskey="p" rel="prev">Maxima Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Giac-Language-Mode-1"></a>
<h4 class="subsection">6.8.7 Giac Language Mode</h4>

<p><a name="index-d-A"></a>
<a name="index-calc_002dgiac_002dlanguage"></a>
<a name="index-Giac-language"></a>
The <kbd>d A</kbd> (<code>calc-giac-language</code>) command selects the
conventions of Giac, another free computer algebra system.  The function
names in Giac are similar to Maxima.  Complex numbers are written
&lsquo;<samp>3 + 4 i</samp>&rsquo;.  The standard special constants in Giac are the same as
in Calc, except that <code>infinity</code> represents both Calc&rsquo;s <code>inf</code>
and <code>uinf</code>.
</p>
<p>Underscores are allowed in function and variable names in Giac mode.
Brackets are used for subscripts.  In Giac, indexing of lists begins at
0, instead of 1 as in Calc.  So if  &lsquo;<samp>A</samp>&rsquo; represents the list
&lsquo;<samp>[a,2,c,4]</samp>&rsquo;, then &lsquo;<samp>A[2]</samp>&rsquo; would equal &lsquo;<samp>c</samp>&rsquo;.  In general,
&lsquo;<samp>A[n]</samp>&rsquo; in Giac mode corresponds to &lsquo;<samp>A_(n+1)</samp>&rsquo; in Normal mode.
</p>
<p>The Giac interval notation &lsquo;<samp>2 .. 3</samp>&rsquo; has no surrounding brackets;
Calc reads &lsquo;<samp>2 .. 3</samp>&rsquo; as the closed interval &lsquo;<samp>[2 .. 3]</samp>&rsquo; and
writes any kind of interval as &lsquo;<samp>2 .. 3</samp>&rsquo;.  This means you cannot see
the difference between an open and a closed interval while in Giac mode.
</p>
<hr>
<a name="Mathematica-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Maple-Language-Mode" accesskey="n" rel="next">Maple Language Mode</a>, Previous: <a href="#Giac-Language-Mode" accesskey="p" rel="prev">Giac Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mathematica-Language-Mode-1"></a>
<h4 class="subsection">6.8.8 Mathematica Language Mode</h4>

<p><a name="index-d-M"></a>
<a name="index-calc_002dmathematica_002dlanguage"></a>
<a name="index-Mathematica-language"></a>
The <kbd>d M</kbd> (<code>calc-mathematica-language</code>) command selects the
conventions of Mathematica.  Notable differences in Mathematica mode
are that the names of built-in functions are capitalized, and function
calls use square brackets instead of parentheses.  Thus the Calc
formula &lsquo;<samp>sin(2 x)</samp>&rsquo; is entered and displayed &lsquo;<samp>Sin[2&nbsp;x]</samp>&rsquo;<!-- /@w --> in
Mathematica mode.
</p>
<p>Vectors and matrices use curly braces in Mathematica.  Complex numbers
are written &lsquo;<samp>3 + 4 I</samp>&rsquo;.  The standard special constants in Calc are
written <code>Pi</code>, <code>E</code>, <code>I</code>, <code>GoldenRatio</code>, <code>EulerGamma</code>,
<code>Infinity</code>, <code>ComplexInfinity</code>, and <code>Indeterminate</code> in
Mathematica mode.
Non-decimal numbers are written, e.g., &lsquo;<samp>16^^7fff</samp>&rsquo;.  Floating-point
numbers in scientific notation are written &lsquo;<samp>1.23*10.^3</samp>&rsquo;.
Subscripts use double square brackets: &lsquo;<samp>a[[i]]</samp>&rsquo;.
</p>
<hr>
<a name="Maple-Language-Mode"></a>
<div class="header">
<p>
Next: <a href="#Compositions" accesskey="n" rel="next">Compositions</a>, Previous: <a href="#Mathematica-Language-Mode" accesskey="p" rel="prev">Mathematica Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Maple-Language-Mode-1"></a>
<h4 class="subsection">6.8.9 Maple Language Mode</h4>

<p><a name="index-d-W"></a>
<a name="index-calc_002dmaple_002dlanguage"></a>
<a name="index-Maple-language"></a>
The <kbd>d W</kbd> (<code>calc-maple-language</code>) command selects the
conventions of Maple.
</p>
<p>Maple&rsquo;s language is much like C.  Underscores are allowed in symbol
names; square brackets are used for subscripts; explicit &lsquo;<samp>*</samp>&rsquo;s for
multiplications are required.  Use either &lsquo;<samp>^</samp>&rsquo; or &lsquo;<samp>**</samp>&rsquo; to
denote powers.
</p>
<p>Maple uses square brackets for lists and curly braces for sets.  Calc
interprets both notations as vectors, and displays vectors with square
brackets.  This means Maple sets will be converted to lists when they
pass through Calc.  As a special case, matrices are written as calls
to the function <code>matrix</code>, given a list of lists as the argument,
and can be read in this form or with all-capitals <code>MATRIX</code>.
</p>
<p>The Maple interval notation &lsquo;<samp>2 .. 3</samp>&rsquo; is like Giac&rsquo;s interval
notation, and is handled the same by Calc.
</p>
<p>Maple writes complex numbers as &lsquo;<samp>3 + 4*I</samp>&rsquo;.  Its special constants
are <code>Pi</code>, <code>E</code>, <code>I</code>, and <code>infinity</code> (all three of
<code>inf</code>, <code>uinf</code>, and <code>nan</code> display as <code>infinity</code>).
Floating-point numbers are written &lsquo;<samp>1.23*10.^3</samp>&rsquo;.
</p>
<p>Among things not currently handled by Calc&rsquo;s Maple mode are the
various quote symbols, procedures and functional operators, and
inert (&lsquo;<samp>&amp;</samp>&rsquo;) operators.
</p>
<hr>
<a name="Compositions"></a>
<div class="header">
<p>
Next: <a href="#Syntax-Tables" accesskey="n" rel="next">Syntax Tables</a>, Previous: <a href="#Maple-Language-Mode" accesskey="p" rel="prev">Maple Language Mode</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Compositions-1"></a>
<h4 class="subsection">6.8.10 Compositions</h4>

<p><a name="index-Compositions"></a>
There are several <em>composition functions</em> which allow you to get
displays in a variety of formats similar to those in Big language
mode.  Most of these functions do not evaluate to anything; they are
placeholders which are left in symbolic form by Calc&rsquo;s evaluator but
are recognized by Calc&rsquo;s display formatting routines.
</p>
<p>Two of these, <code>string</code> and <code>bstring</code>, are described elsewhere.
See <a href="#Strings">Strings</a>.  For example, &lsquo;<samp>string(&quot;ABC&quot;)</samp>&rsquo; is displayed as
&lsquo;<samp>ABC</samp>&rsquo;.  When viewed on the stack it will be indistinguishable from
the variable <code>ABC</code>, but internally it will be stored as
&lsquo;<samp>string([65, 66, 67])</samp>&rsquo; and can still be manipulated this way; for
example, the selection and vector commands <kbd>j 1 v v j u</kbd> would
select the vector portion of this object and reverse the elements, then
deselect to reveal a string whose characters had been reversed.
</p>
<p>The composition functions do the same thing in all language modes
(although their components will of course be formatted in the current
language mode).  The one exception is Unformatted mode (<kbd>d U</kbd>),
which does not give the composition functions any special treatment.
The functions are discussed here because of their relationship to
the language modes.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Composition-Basics" accesskey="1">Composition Basics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Horizontal-Compositions" accesskey="2">Horizontal Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vertical-Compositions" accesskey="3">Vertical Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Other-Compositions" accesskey="4">Other Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Information-about-Compositions" accesskey="5">Information about Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User_002dDefined-Compositions" accesskey="6">User-Defined Compositions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Composition-Basics"></a>
<div class="header">
<p>
Next: <a href="#Horizontal-Compositions" accesskey="n" rel="next">Horizontal Compositions</a>, Previous: <a href="#Compositions" accesskey="p" rel="prev">Compositions</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Composition-Basics-1"></a>
<h4 class="subsubsection">6.8.10.1 Composition Basics</h4>

<p>Compositions are generally formed by stacking formulas together
horizontally or vertically in various ways.  Those formulas are
themselves compositions.  TeX users will find this analogous
to TeX&rsquo;s &ldquo;boxes.&rdquo;  Each multi-line composition has a
<em>baseline</em>; horizontal compositions use the baselines to
decide how formulas should be positioned relative to one another.
For example, in the Big mode formula
</p>
<div class="example">
<pre class="example">          2
     a + b
17 + ------
       c
</pre></div>

<p>the second term of the sum is four lines tall and has line three as
its baseline.  Thus when the term is combined with 17, line three
is placed on the same level as the baseline of 17.
</p>

<p>Another important composition concept is <em>precedence</em>.  This is
an integer that represents the binding strength of various operators.
For example, &lsquo;<samp>*</samp>&rsquo; has higher precedence (195) than &lsquo;<samp>+</samp>&rsquo; (180),
which means that &lsquo;<samp>(a * b) + c</samp>&rsquo; will be formatted without the
parentheses, but &lsquo;<samp>a * (b + c)</samp>&rsquo; will keep the parentheses.
</p>
<p>The operator table used by normal and Big language modes has the
following precedences:
</p>
<div class="example">
<pre class="example">_     1200    <span class="roman">(subscripts)</span>
%     1100    <span class="roman">(as in n</span>%<span class="roman">)</span>
!     1000    <span class="roman">(as in </span>!<span class="roman">n)</span>
mod    400
+/-    300
!!     210    <span class="roman">(as in n</span>!!<span class="roman">)</span>
!      210    <span class="roman">(as in n</span>!<span class="roman">)</span>
^      200
-      197    <span class="roman">(as in </span>-<span class="roman">n)</span>
*      195    <span class="roman">(or implicit multiplication)</span>
/ % \  190
+ -    180    <span class="roman">(as in a</span>+<span class="roman">b)</span>
|      170
&lt; =    160    <span class="roman">(and other relations)</span>
&amp;&amp;     110
||     100
? :     90
!!!     85
&amp;&amp;&amp;     80
|||     75
:=      50
::      45
=&gt;      40
</pre></div>

<p>The general rule is that if an operator with precedence &lsquo;<samp>n</samp>&rsquo;
occurs as an argument to an operator with precedence &lsquo;<samp>m</samp>&rsquo;, then
the argument is enclosed in parentheses if &lsquo;<samp>n &lt; m</samp>&rsquo;.  Top-level
expressions and expressions which are function arguments, vector
components, etc., are formatted with precedence zero (so that they
normally never get additional parentheses).
</p>
<p>For binary left-associative operators like &lsquo;<samp>+</samp>&rsquo;, the righthand
argument is actually formatted with one-higher precedence than shown
in the table.  This makes sure &lsquo;<samp>(a + b) + c</samp>&rsquo; omits the parentheses,
but the unnatural form &lsquo;<samp>a + (b + c)</samp>&rsquo; keeps its parentheses.
Right-associative operators like &lsquo;<samp>^</samp>&rsquo; format the lefthand argument
with one-higher precedence.
</p>
<a name="index-cprec"></a>
<p>The <code>cprec</code> function formats an expression with an arbitrary
precedence.  For example, &lsquo;<samp>cprec(abc, 185)</samp>&rsquo; will combine into
sums and products as follows:  &lsquo;<samp>7 + abc</samp>&rsquo;, &lsquo;<samp>7 (abc)</samp>&rsquo; (because
this <code>cprec</code> form has higher precedence than addition, but lower
precedence than multiplication).
</p>

<p>A final composition issue is <em>line breaking</em>.  Calc uses two
different strategies for &ldquo;flat&rdquo; and &ldquo;non-flat&rdquo; compositions.
A non-flat composition is anything that appears on multiple lines
(not counting line breaking).  Examples would be matrices and Big
mode powers and quotients.  Non-flat compositions are displayed
exactly as specified.  If they come out wider than the current
window, you must use horizontal scrolling (<kbd>&lt;</kbd> and <kbd>&gt;</kbd>) to
view them.
</p>
<p>Flat compositions, on the other hand, will be broken across several
lines if they are too wide to fit the window.  Certain points in a
composition are noted internally as <em>break points</em>.  Calc&rsquo;s
general strategy is to fill each line as much as possible, then to
move down to the next line starting at the first break point that
didn&rsquo;t fit.  However, the line breaker understands the hierarchical
structure of formulas.  It will not break an &ldquo;inner&rdquo; formula if
it can use an earlier break point from an &ldquo;outer&rdquo; formula instead.
For example, a vector of sums might be formatted as:
</p>
<div class="example">
<pre class="example">[ a + b + c, d + e + f,
  g + h + i, j + k + l, m ]
</pre></div>

<p>If the &lsquo;<samp>m</samp>&rsquo; can fit, then so, it seems, could the &lsquo;<samp>g</samp>&rsquo;.
But Calc prefers to break at the comma since the comma is part
of a &ldquo;more outer&rdquo; formula.  Calc would break at a plus sign
only if it had to, say, if the very first sum in the vector had
itself been too large to fit.
</p>
<p>Of the composition functions described below, only <code>choriz</code>
generates break points.  The <code>bstring</code> function (see <a href="#Strings">Strings</a>)
also generates breakable items:  A break point is added after every
space (or group of spaces) except for spaces at the very beginning or
end of the string.
</p>
<p>Composition functions themselves count as levels in the formula
hierarchy, so a <code>choriz</code> that is a component of a larger
<code>choriz</code> will be less likely to be broken.  As a special case,
if a <code>bstring</code> occurs as a component of a <code>choriz</code> or
<code>choriz</code>-like object (such as a vector or a list of arguments
in a function call), then the break points in that <code>bstring</code>
will be on the same level as the break points of the surrounding
object.
</p>
<hr>
<a name="Horizontal-Compositions"></a>
<div class="header">
<p>
Next: <a href="#Vertical-Compositions" accesskey="n" rel="next">Vertical Compositions</a>, Previous: <a href="#Composition-Basics" accesskey="p" rel="prev">Composition Basics</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Horizontal-Compositions-1"></a>
<h4 class="subsubsection">6.8.10.2 Horizontal Compositions</h4>

<p><a name="index-choriz"></a>
The <code>choriz</code> function takes a vector of objects and composes
them horizontally.  For example, &lsquo;<samp>choriz([17, a b/c, d])</samp>&rsquo; formats
as &lsquo;<samp>17a&nbsp;b&nbsp;/&nbsp;cd</samp>&rsquo;<!-- /@w --> in Normal language mode, or as
</p>
<div class="example">
<pre class="example">  a b
17---d
   c
</pre></div>

<p>in Big language mode.  This is actually one case of the general
function &lsquo;<samp>choriz(<var>vec</var>, <var>sep</var>, <var>prec</var>)</samp>&rsquo;, where
either or both of <var>sep</var> and <var>prec</var> may be omitted.
<var>Prec</var> gives the <em>precedence</em> to use when formatting
each of the components of <var>vec</var>.  The default precedence is
the precedence from the surrounding environment.
</p>
<p><var>Sep</var> is a string (i.e., a vector of character codes as might
be entered with <code>&quot; &quot;</code> notation) which should separate components
of the composition.  Also, if <var>sep</var> is given, the line breaker
will allow lines to be broken after each occurrence of <var>sep</var>.
If <var>sep</var> is omitted, the composition will not be breakable
(unless any of its component compositions are breakable).
</p>
<p>For example, &lsquo;<samp>2 choriz([a, b c, d = e], &quot; + &quot;, 180)</samp>&rsquo; is
formatted as &lsquo;<samp>2 a + b c + (d = e)</samp>&rsquo;.  To get the <code>choriz</code>
to have precedence 180 &ldquo;outwards&rdquo; as well as &ldquo;inwards,&rdquo;
enclose it in a <code>cprec</code> form:  &lsquo;<samp>2 cprec(choriz(...), 180)</samp>&rsquo;
formats as &lsquo;<samp>2 (a + b c + (d = e))</samp>&rsquo;.
</p>
<p>The baseline of a horizontal composition is the same as the
baselines of the component compositions, which are all aligned.
</p>
<hr>
<a name="Vertical-Compositions"></a>
<div class="header">
<p>
Next: <a href="#Other-Compositions" accesskey="n" rel="next">Other Compositions</a>, Previous: <a href="#Horizontal-Compositions" accesskey="p" rel="prev">Horizontal Compositions</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vertical-Compositions-1"></a>
<h4 class="subsubsection">6.8.10.3 Vertical Compositions</h4>

<p><a name="index-cvert"></a>
The <code>cvert</code> function makes a vertical composition.  Each
component of the vector is centered in a column.  The baseline of
the result is by default the top line of the resulting composition.
For example, &lsquo;<samp>f(cvert([a, bb, ccc]), cvert([a^2 + 1, b^2]))</samp>&rsquo;
formats in Big mode as
</p>
<div class="example">
<pre class="example">f( a ,  2    )
  bb   a  + 1
  ccc     2
         b
</pre></div>

<a name="index-cbase"></a>
<p>There are several special composition functions that work only as
components of a vertical composition.  The <code>cbase</code> function
controls the baseline of the vertical composition; the baseline
will be the same as the baseline of whatever component is enclosed
in <code>cbase</code>.  Thus &lsquo;<samp>f(cvert([a, cbase(bb), ccc]),
cvert([a^2 + 1, cbase(b^2)]))</samp>&rsquo; displays as
</p>
<div class="example">
<pre class="example">        2
       a  + 1
   a      2
f(bb ,   b   )
  ccc
</pre></div>

<a name="index-ctbase"></a>
<a name="index-cbbase"></a>
<p>There are also <code>ctbase</code> and <code>cbbase</code> functions which
make the baseline of the vertical composition equal to the top
or bottom line (rather than the baseline) of that component.
Thus &lsquo;<samp>cvert([cbase(a / b)]) + cvert([ctbase(a / b)]) +
cvert([cbbase(a / b)])</samp>&rsquo; gives
</p>
<div class="example">
<pre class="example">        a
a       -
- + a + b
b   -
    b
</pre></div>

<p>There should be only one <code>cbase</code>, <code>ctbase</code>, or <code>cbbase</code>
function in a given vertical composition.  These functions can also
be written with no arguments:  &lsquo;<samp>ctbase()</samp>&rsquo; is a zero-height object
which means the baseline is the top line of the following item, and
&lsquo;<samp>cbbase()</samp>&rsquo; means the baseline is the bottom line of the preceding
item.
</p>
<a name="index-crule"></a>
<p>The <code>crule</code> function builds a &ldquo;rule,&rdquo; or horizontal line,
across a vertical composition.  By itself &lsquo;<samp>crule()</samp>&rsquo; uses &lsquo;<samp>-</samp>&rsquo;
characters to build the rule.  You can specify any other character,
e.g., &lsquo;<samp>crule(&quot;=&quot;)</samp>&rsquo;.  The argument must be a character code or
vector of exactly one character code.  It is repeated to match the
width of the widest item in the stack.  For example, a quotient
with a thick line is &lsquo;<samp>cvert([a + 1, cbase(crule(&quot;=&quot;)), b^2])</samp>&rsquo;:
</p>
<div class="example">
<pre class="example">a + 1
=====
  2
 b
</pre></div>

<a name="index-clvert"></a>
<a name="index-crvert"></a>
<p>Finally, the functions <code>clvert</code> and <code>crvert</code> act exactly
like <code>cvert</code> except that the items are left- or right-justified
in the stack.  Thus &lsquo;<samp>clvert([a, bb, ccc]) + crvert([a, bb, ccc])</samp>&rsquo;
gives:
</p>
<div class="example">
<pre class="example">a   +   a
bb     bb
ccc   ccc
</pre></div>

<p>Like <code>choriz</code>, the vertical compositions accept a second argument
which gives the precedence to use when formatting the components.
Vertical compositions do not support separator strings.
</p>
<hr>
<a name="Other-Compositions"></a>
<div class="header">
<p>
Next: <a href="#Information-about-Compositions" accesskey="n" rel="next">Information about Compositions</a>, Previous: <a href="#Vertical-Compositions" accesskey="p" rel="prev">Vertical Compositions</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-Compositions-1"></a>
<h4 class="subsubsection">6.8.10.4 Other Compositions</h4>

<p><a name="index-csup"></a>
The <code>csup</code> function builds a superscripted expression.  For
example, &lsquo;<samp>csup(a, b)</samp>&rsquo; looks the same as &lsquo;<samp>a^b</samp>&rsquo; does in Big
language mode.  This is essentially a horizontal composition of
&lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;, where &lsquo;<samp>b</samp>&rsquo; is shifted up so that its
bottom line is one above the baseline.
</p>
<a name="index-csub"></a>
<p>Likewise, the <code>csub</code> function builds a subscripted expression.
This shifts &lsquo;<samp>b</samp>&rsquo; down so that its top line is one below the
bottom line of &lsquo;<samp>a</samp>&rsquo; (note that this is not quite analogous to
<code>csup</code>).  Other arrangements can be obtained by using
<code>choriz</code> and <code>cvert</code> directly.
</p>
<a name="index-cflat"></a>
<p>The <code>cflat</code> function formats its argument in &ldquo;flat&rdquo; mode,
as obtained by &lsquo;<samp>d O</samp>&rsquo;, if the current language mode is normal
or Big.  It has no effect in other language modes.  For example,
&lsquo;<samp>a^(b/c)</samp>&rsquo; is formatted by Big mode like &lsquo;<samp>csup(a, cflat(b/c))</samp>&rsquo;
to improve its readability.
</p>
<a name="index-cspace"></a>
<p>The <code>cspace</code> function creates horizontal space.  For example,
&lsquo;<samp>cspace(4)</samp>&rsquo; is effectively the same as &lsquo;<samp>string(&quot;    &quot;)</samp>&rsquo;.
A second string (i.e., vector of characters) argument is repeated
instead of the space character.  For example, &lsquo;<samp>cspace(4, &quot;ab&quot;)</samp>&rsquo;
looks like &lsquo;<samp>abababab</samp>&rsquo;.  If the second argument is not a string,
it is formatted in the normal way and then several copies of that
are composed together:  &lsquo;<samp>cspace(4, a^2)</samp>&rsquo; yields
</p>
<div class="example">
<pre class="example"> 2 2 2 2
a a a a
</pre></div>

<p>If the number argument is zero, this is a zero-width object.
</p>
<a name="index-cvspace"></a>
<p>The <code>cvspace</code> function creates vertical space, or a vertical
stack of copies of a certain string or formatted object.  The
baseline is the center line of the resulting stack.  A numerical
argument of zero will produce an object which contributes zero
height if used in a vertical composition.
</p>
<a name="index-ctspace"></a>
<a name="index-cbspace"></a>
<p>There are also <code>ctspace</code> and <code>cbspace</code> functions which
create vertical space with the baseline the same as the baseline
of the top or bottom copy, respectively, of the second argument.
Thus &lsquo;<samp>cvspace(2, a/b) + ctspace(2, a/b) + cbspace(2, a/b)</samp>&rsquo;
displays as:
</p>
<div class="example">
<pre class="example">        a
        -
a       b
-   a   a
b + - + -
a   b   b
-   a
b   -
    b
</pre></div>

<hr>
<a name="Information-about-Compositions"></a>
<div class="header">
<p>
Next: <a href="#User_002dDefined-Compositions" accesskey="n" rel="next">User-Defined Compositions</a>, Previous: <a href="#Other-Compositions" accesskey="p" rel="prev">Other Compositions</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Information-about-Compositions-1"></a>
<h4 class="subsubsection">6.8.10.5 Information about Compositions</h4>

<p>The functions in this section are actual functions; they compose their
arguments according to the current language and other display modes,
then return a certain measurement of the composition as an integer.
</p>
<a name="index-cwidth"></a>
<p>The <code>cwidth</code> function measures the width, in characters, of a
composition.  For example, &lsquo;<samp>cwidth(a + b)</samp>&rsquo; is 5, and
&lsquo;<samp>cwidth(a / b)</samp>&rsquo; is 5 in Normal mode, 1 in Big mode, and 11 in
TeX mode (for &lsquo;<samp>{a \over b}</samp>&rsquo;).  The argument may involve
the composition functions described in this section.
</p>
<a name="index-cheight"></a>
<p>The <code>cheight</code> function measures the height of a composition.
This is the total number of lines in the argument&rsquo;s printed form.
</p>
<a name="index-cascent"></a>
<a name="index-cdescent"></a>
<p>The functions <code>cascent</code> and <code>cdescent</code> measure the amount
of the height that is above (and including) the baseline, or below
the baseline, respectively.  Thus &lsquo;<samp>cascent(<var>x</var>) + cdescent(<var>x</var>)</samp>&rsquo;
always equals &lsquo;<samp>cheight(<var>x</var>)</samp>&rsquo;.  For a one-line formula like
&lsquo;<samp>a + b</samp>&rsquo;, <code>cascent</code> returns 1 and <code>cdescent</code> returns 0.
For &lsquo;<samp>a / b</samp>&rsquo; in Big mode, <code>cascent</code> returns 2 and <code>cdescent</code>
returns 1.  The only formula for which <code>cascent</code> will return zero
is &lsquo;<samp>cvspace(0)</samp>&rsquo; or equivalents.
</p>
<hr>
<a name="User_002dDefined-Compositions"></a>
<div class="header">
<p>
Previous: <a href="#Information-about-Compositions" accesskey="p" rel="prev">Information about Compositions</a>, Up: <a href="#Compositions" accesskey="u" rel="up">Compositions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="User_002dDefined-Compositions-1"></a>
<h4 class="subsubsection">6.8.10.6 User-Defined Compositions</h4>

<p><a name="index-Z-C"></a>
<a name="index-calc_002duser_002ddefine_002dcomposition"></a>
The <kbd>Z C</kbd> (<code>calc-user-define-composition</code>) command lets you
define the display format for any algebraic function.  You provide a
formula containing a certain number of argument variables on the stack.
Any time Calc formats a call to the specified function in the current
language mode and with that number of arguments, Calc effectively
replaces the function call with that formula with the arguments
replaced.
</p>
<p>Calc builds the default argument list by sorting all the variable names
that appear in the formula into alphabetical order.  You can edit this
argument list before pressing <tt class="key">RET</tt> if you wish.  Any variables in
the formula that do not appear in the argument list will be displayed
literally; any arguments that do not appear in the formula will not
affect the display at all.
</p>
<p>You can define formats for built-in functions, for functions you have
defined with <kbd>Z F</kbd> (see <a href="#Algebraic-Definitions">Algebraic Definitions</a>), or for functions
which have no definitions but are being used as purely syntactic objects.
You can define different formats for each language mode, and for each
number of arguments, using a succession of <kbd>Z C</kbd> commands.  When
Calc formats a function call, it first searches for a format defined
for the current language mode (and number of arguments); if there is
none, it uses the format defined for the Normal language mode.  If
neither format exists, Calc uses its built-in standard format for that
function (usually just &lsquo;<samp><var>func</var>(<var>args</var>)</samp>&rsquo;).
</p>
<p>If you execute <kbd>Z C</kbd> with the number 0 on the stack instead of a
formula, any defined formats for the function in the current language
mode will be removed.  The function will revert to its standard format.
</p>
<p>For example, the default format for the binomial coefficient function
&lsquo;<samp>choose(n, m)</samp>&rsquo; in the Big language mode is
</p>
<div class="example">
<pre class="example"> n
( )
 m
</pre></div>

<p>You might prefer the notation,
</p>
<div class="example">
<pre class="example"> C
n m
</pre></div>

<p>To define this notation, first make sure you are in Big mode,
then put the formula
</p>
<div class="smallexample">
<pre class="smallexample">choriz([cvert([cvspace(1), n]), C, cvert([cvspace(1), m])])
</pre></div>

<p>on the stack and type <kbd>Z C</kbd>.  Answer the first prompt with
<code>choose</code>.  The second prompt will be the default argument list
of &lsquo;<samp>(C m n)</samp>&rsquo;.  Edit this list to be &lsquo;<samp>(n m)</samp>&rsquo; and press
<tt class="key">RET</tt>.  Now, try it out:  For example, turn simplification
off with <kbd>m O</kbd> and enter &lsquo;<samp>choose(a,b) + choose(7,3)</samp>&rsquo;
as an algebraic entry.
</p>
<div class="example">
<pre class="example"> C  +  C
a b   7 3
</pre></div>

<p>As another example, let&rsquo;s define the usual notation for Stirling
numbers of the first kind, &lsquo;<samp>stir1(n, m)</samp>&rsquo;.  This is just like
the regular format for binomial coefficients but with square brackets
instead of parentheses.
</p>
<div class="smallexample">
<pre class="smallexample">choriz([string(&quot;[&quot;), cvert([n, cbase(cvspace(1)), m]), string(&quot;]&quot;)])
</pre></div>

<p>Now type <kbd>Z C stir1 <span class="key">RET</span></kbd>, edit the argument list to
&lsquo;<samp>(n m)</samp>&rsquo;, and type <tt class="key">RET</tt>.
</p>
<p>The formula provided to <kbd>Z C</kbd> usually will involve composition
functions, but it doesn&rsquo;t have to.  Putting the formula &lsquo;<samp>a + b + c</samp>&rsquo;
onto the stack and typing <kbd>Z C foo <span class="key">RET</span> <span class="key">RET</span></kbd> would define
the function &lsquo;<samp>foo(x,y,z)</samp>&rsquo; to display like &lsquo;<samp>x + y + z</samp>&rsquo;.
This &ldquo;sum&rdquo; will act exactly like a real sum for all formatting
purposes (it will be parenthesized the same, and so on).  However
it will be computationally unrelated to a sum.  For example, the
formula &lsquo;<samp>2 * foo(1, 2, 3)</samp>&rsquo; will display as &lsquo;<samp>2 (1 + 2 + 3)</samp>&rsquo;.
Operator precedences have caused the &ldquo;sum&rdquo; to be written in
parentheses, but the arguments have not actually been summed.
(Generally a display format like this would be undesirable, since
it can easily be confused with a real sum.)
</p>
<p>The special function <code>eval</code> can be used inside a <kbd>Z C</kbd>
composition formula to cause all or part of the formula to be
evaluated at display time.  For example, if the formula is
&lsquo;<samp>a + eval(b + c)</samp>&rsquo;, then &lsquo;<samp>foo(1, 2, 3)</samp>&rsquo; will be displayed
as &lsquo;<samp>1 + 5</samp>&rsquo;.  Evaluation will use the default simplifications,
regardless of the current simplification mode.  There are also
<code>evalsimp</code> and <code>evalextsimp</code> which simplify as if by
<kbd>a s</kbd> and <kbd>a e</kbd> (respectively).  Note that these &ldquo;functions&rdquo;
operate only in the context of composition formulas (and also in
rewrite rules, where they serve a similar purpose; see <a href="#Rewrite-Rules">Rewrite Rules</a>).  On the stack, a call to <code>eval</code> will be left in
symbolic form.
</p>
<p>It is not a good idea to use <code>eval</code> except as a last resort.
It can cause the display of formulas to be extremely slow.  For
example, while &lsquo;<samp>eval(a + b)</samp>&rsquo; might seem quite fast and simple,
there are several situations where it could be slow.  For example,
&lsquo;<samp>a</samp>&rsquo; and/or &lsquo;<samp>b</samp>&rsquo; could be polar complex numbers, in which
case doing the sum requires trigonometry.  Or, &lsquo;<samp>a</samp>&rsquo; could be
the factorial &lsquo;<samp>fact(100)</samp>&rsquo; which is unevaluated because you
have typed <kbd>m O</kbd>; <code>eval</code> will evaluate it anyway to
produce a large, unwieldy integer.
</p>
<p>You can save your display formats permanently using the <kbd>Z P</kbd>
command (see <a href="#Creating-User-Keys">Creating User Keys</a>).
</p>
<hr>
<a name="Syntax-Tables"></a>
<div class="header">
<p>
Previous: <a href="#Compositions" accesskey="p" rel="prev">Compositions</a>, Up: <a href="#Language-Modes" accesskey="u" rel="up">Language Modes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Syntax-Tables-1"></a>
<h4 class="subsection">6.8.11 Syntax Tables</h4>

<p><a name="index-Syntax-tables"></a>
<a name="index-Parsing-formulas_002c-customized"></a>
Syntax tables do for input what compositions do for output:  They
allow you to teach custom notations to Calc&rsquo;s formula parser.
Calc keeps a separate syntax table for each language mode.
</p>
<p>(Note that the Calc &ldquo;syntax tables&rdquo; discussed here are completely
unrelated to the syntax tables described in the Emacs manual.)
</p>
<a name="index-Z-S"></a>
<a name="index-calc_002dedit_002duser_002dsyntax"></a>
<p>The <kbd>Z S</kbd> (<code>calc-edit-user-syntax</code>) command edits the
syntax table for the current language mode.  If you want your
syntax to work in any language, define it in the Normal language
mode.  Type <kbd>C-c C-c</kbd> to finish editing the syntax table, or
<kbd>C-x k</kbd> to cancel the edit.  The <kbd>m m</kbd> command saves all
the syntax tables along with the other mode settings;
see <a href="#General-Mode-Commands">General Mode Commands</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Syntax-Table-Basics" accesskey="1">Syntax Table Basics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Precedence-in-Syntax-Tables" accesskey="2">Precedence in Syntax Tables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Advanced-Syntax-Patterns" accesskey="3">Advanced Syntax Patterns</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Syntax-Rules" accesskey="4">Conditional Syntax Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Syntax-Table-Basics"></a>
<div class="header">
<p>
Next: <a href="#Precedence-in-Syntax-Tables" accesskey="n" rel="next">Precedence in Syntax Tables</a>, Previous: <a href="#Syntax-Tables" accesskey="p" rel="prev">Syntax Tables</a>, Up: <a href="#Syntax-Tables" accesskey="u" rel="up">Syntax Tables</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Syntax-Table-Basics-1"></a>
<h4 class="subsubsection">6.8.11.1 Syntax Table Basics</h4>

<p><em>Parsing</em> is the process of converting a raw string of characters,
such as you would type in during algebraic entry, into a Calc formula.
Calc&rsquo;s parser works in two stages.  First, the input is broken down
into <em>tokens</em>, such as words, numbers, and punctuation symbols
like &lsquo;<samp>+</samp>&rsquo;, &lsquo;<samp>:=</samp>&rsquo;, and &lsquo;<samp>+/-</samp>&rsquo;.  Space between tokens is
ignored (except when it serves to separate adjacent words).  Next,
the parser matches this string of tokens against various built-in
syntactic patterns, such as &ldquo;an expression followed by &lsquo;<samp>+</samp>&rsquo;
followed by another expression&rdquo; or &ldquo;a name followed by &lsquo;<samp>(</samp>&rsquo;,
zero or more expressions separated by commas, and &lsquo;<samp>)</samp>&rsquo;.&rdquo;
</p>
<p>A <em>syntax table</em> is a list of user-defined <em>syntax rules</em>,
which allow you to specify new patterns to define your own
favorite input notations.  Calc&rsquo;s parser always checks the syntax
table for the current language mode, then the table for the Normal
language mode, before it uses its built-in rules to parse an
algebraic formula you have entered.  Each syntax rule should go on
its own line; it consists of a <em>pattern</em>, a &lsquo;<samp>:=</samp>&rsquo; symbol,
and a Calc formula with an optional <em>condition</em>.  (Syntax rules
resemble algebraic rewrite rules, but the notation for patterns is
completely different.)
</p>
<p>A syntax pattern is a list of tokens, separated by spaces.
Except for a few special symbols, tokens in syntax patterns are
matched literally, from left to right.  For example, the rule,
</p>
<div class="example">
<pre class="example">foo ( ) := 2+3
</pre></div>

<p>would cause Calc to parse the formula &lsquo;<samp>4+foo()*5</samp>&rsquo; as if it
were &lsquo;<samp>4+(2+3)*5</samp>&rsquo;.  Notice that the parentheses were written
as two separate tokens in the rule.  As a result, the rule works
for both &lsquo;<samp>foo()</samp>&rsquo; and &lsquo;<samp>foo&nbsp;(&nbsp;&nbsp;)</samp>&rsquo;<!-- /@w -->.  If we had written
the rule as &lsquo;<samp>foo () := 2+3</samp>&rsquo;, then Calc would treat &lsquo;<samp>()</samp>&rsquo;
as a single, indivisible token, so that &lsquo;<samp>foo(&nbsp;)</samp>&rsquo;<!-- /@w --> would
not be recognized by the rule.  (It would be parsed as a regular
zero-argument function call instead.)  In fact, this rule would
also make trouble for the rest of Calc&rsquo;s parser:  An unrelated
formula like &lsquo;<samp>bar()</samp>&rsquo; would now be tokenized into &lsquo;<samp>bar ()</samp>&rsquo;
instead of &lsquo;<samp>bar ( )</samp>&rsquo;, so that the standard parser for function
calls would no longer recognize it!
</p>
<p>While it is possible to make a token with a mixture of letters
and punctuation symbols, this is not recommended.  It is better to
break it into several tokens, as we did with &lsquo;<samp>foo()</samp>&rsquo; above.
</p>
<p>The symbol &lsquo;<samp>#</samp>&rsquo; in a syntax pattern matches any Calc expression.
On the righthand side, the things that matched the &lsquo;<samp>#</samp>&rsquo;s can
be referred to as &lsquo;<samp>#1</samp>&rsquo;, &lsquo;<samp>#2</samp>&rsquo;, and so on (where &lsquo;<samp>#1</samp>&rsquo;
matches the leftmost &lsquo;<samp>#</samp>&rsquo; in the pattern).  For example, these
rules match a user-defined function, prefix operator, infix operator,
and postfix operator, respectively:
</p>
<div class="example">
<pre class="example">foo ( # ) := myfunc(#1)
foo # := myprefix(#1)
# foo # := myinfix(#1,#2)
# foo := mypostfix(#1)
</pre></div>

<p>Thus &lsquo;<samp>foo(3)</samp>&rsquo; will parse as &lsquo;<samp>myfunc(3)</samp>&rsquo;, and &lsquo;<samp>2+3 foo</samp>&rsquo;
will parse as &lsquo;<samp>mypostfix(2+3)</samp>&rsquo;.
</p>
<p>It is important to write the first two rules in the order shown,
because Calc tries rules in order from first to last.  If the
pattern &lsquo;<samp>foo #</samp>&rsquo; came first, it would match anything that could
match the &lsquo;<samp>foo ( # )</samp>&rsquo; rule, since an expression in parentheses
is itself a valid expression.  Thus the &lsquo;<samp>foo&nbsp;(&nbsp;#&nbsp;)</samp>&rsquo;<!-- /@w --> rule would
never get to match anything.  Likewise, the last two rules must be
written in the order shown or else &lsquo;<samp>3 foo 4</samp>&rsquo; will be parsed as
&lsquo;<samp>mypostfix(3) * 4</samp>&rsquo;.  (Of course, the best way to avoid these
ambiguities is not to use the same symbol in more than one way at
the same time!  In case you&rsquo;re not convinced, try the following
exercise:  How will the above rules parse the input &lsquo;<samp>foo(3,4)</samp>&rsquo;,
if at all?  Work it out for yourself, then try it in Calc and see.)
</p>
<p>Calc is quite flexible about what sorts of patterns are allowed.
The only rule is that every pattern must begin with a literal
token (like &lsquo;<samp>foo</samp>&rsquo; in the first two patterns above), or with
a &lsquo;<samp>#</samp>&rsquo; followed by a literal token (as in the last two
patterns).  After that, any mixture is allowed, although putting
two &lsquo;<samp>#</samp>&rsquo;s in a row will not be very useful since two
expressions with nothing between them will be parsed as one
expression that uses implicit multiplication.
</p>
<p>As a more practical example, Maple uses the notation
&lsquo;<samp>sum(a(i), i=1..10)</samp>&rsquo; for sums, which Calc&rsquo;s Maple mode doesn&rsquo;t
recognize at present.  To handle this syntax, we simply add the
rule,
</p>
<div class="example">
<pre class="example">sum ( # , # = # .. # ) := sum(#1,#2,#3,#4)
</pre></div>

<p>to the Maple mode syntax table.  As another example, C mode can&rsquo;t
read assignment operators like &lsquo;<samp>++</samp>&rsquo; and &lsquo;<samp>*=</samp>&rsquo;.  We can
define these operators quite easily:
</p>
<div class="example">
<pre class="example"># *= # := muleq(#1,#2)
# ++ := postinc(#1)
++ # := preinc(#1)
</pre></div>

<p>To complete the job, we would use corresponding composition functions
and <kbd>Z C</kbd> to cause these functions to display in their respective
Maple and C notations.  (Note that the C example ignores issues of
operator precedence, which are discussed in the next section.)
</p>
<p>You can enclose any token in quotes to prevent its usual
interpretation in syntax patterns:
</p>
<div class="example">
<pre class="example"># &quot;:=&quot; # := becomes(#1,#2)
</pre></div>

<p>Quotes also allow you to include spaces in a token, although once
again it is generally better to use two tokens than one token with
an embedded space.  To include an actual quotation mark in a quoted
token, precede it with a backslash.  (This also works to include
backslashes in tokens.)
</p>
<div class="example">
<pre class="example"># &quot;bad token&quot; # &quot;/\&quot;\\&quot; # := silly(#1,#2,#3)
</pre></div>

<p>This will parse &lsquo;<samp>3 bad token 4 /&quot;\ 5</samp>&rsquo; to &lsquo;<samp>silly(3,4,5)</samp>&rsquo;.
</p>
<p>The token <kbd>#</kbd> has a predefined meaning in Calc&rsquo;s formula parser;
it is not valid to use &lsquo;<samp>&quot;#&quot;</samp>&rsquo; in a syntax rule.  However, longer
tokens that include the &lsquo;<samp>#</samp>&rsquo; character are allowed.  Also, while
&lsquo;<samp>&quot;$&quot;</samp>&rsquo; and &lsquo;<samp>&quot;\&quot;&quot;</samp>&rsquo; are allowed as tokens, their presence in
the syntax table will prevent those characters from working in their
usual ways (referring to stack entries and quoting strings,
respectively).
</p>
<p>Finally, the notation &lsquo;<samp>%%</samp>&rsquo; anywhere in a syntax table causes
the rest of the line to be ignored as a comment.
</p>
<hr>
<a name="Precedence-in-Syntax-Tables"></a>
<div class="header">
<p>
Next: <a href="#Advanced-Syntax-Patterns" accesskey="n" rel="next">Advanced Syntax Patterns</a>, Previous: <a href="#Syntax-Table-Basics" accesskey="p" rel="prev">Syntax Table Basics</a>, Up: <a href="#Syntax-Tables" accesskey="u" rel="up">Syntax Tables</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Precedence"></a>
<h4 class="subsubsection">6.8.11.2 Precedence</h4>

<p>Different operators are generally assigned different <em>precedences</em>.
By default, an operator defined by a rule like
</p>
<div class="example">
<pre class="example"># foo # := foo(#1,#2)
</pre></div>

<p>will have an extremely low precedence, so that &lsquo;<samp>2*3+4 foo 5 == 6</samp>&rsquo;
will be parsed as &lsquo;<samp>(2*3+4) foo (5 == 6)</samp>&rsquo;.  To change the
precedence of an operator, use the notation &lsquo;<samp>#/<var>p</var></samp>&rsquo; in
place of &lsquo;<samp>#</samp>&rsquo;, where <var>p</var> is an integer precedence level.
For example, 185 lies between the precedences for &lsquo;<samp>+</samp>&rsquo; and
&lsquo;<samp>*</samp>&rsquo;, so if we change this rule to
</p>
<div class="example">
<pre class="example">#/185 foo #/186 := foo(#1,#2)
</pre></div>

<p>then &lsquo;<samp>2+3 foo 4*5</samp>&rsquo; will be parsed as &lsquo;<samp>2+(3 foo (4*5))</samp>&rsquo;.
Also, because we&rsquo;ve given the righthand expression slightly higher
precedence, our new operator will be left-associative:
&lsquo;<samp>1 foo 2 foo 3</samp>&rsquo; will be parsed as &lsquo;<samp>(1 foo 2) foo 3</samp>&rsquo;.
By raising the precedence of the lefthand expression instead, we
can create a right-associative operator.
</p>
<p>See <a href="#Composition-Basics">Composition Basics</a>, for a table of precedences of the
standard Calc operators.  For the precedences of operators in other
language modes, look in the Calc source file <samp>calc-lang.el</samp>.
</p>
<hr>
<a name="Advanced-Syntax-Patterns"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Syntax-Rules" accesskey="n" rel="next">Conditional Syntax Rules</a>, Previous: <a href="#Precedence-in-Syntax-Tables" accesskey="p" rel="prev">Precedence in Syntax Tables</a>, Up: <a href="#Syntax-Tables" accesskey="u" rel="up">Syntax Tables</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Advanced-Syntax-Patterns-1"></a>
<h4 class="subsubsection">6.8.11.3 Advanced Syntax Patterns</h4>

<p>To match a function with a variable number of arguments, you could
write
</p>
<div class="example">
<pre class="example">foo ( # ) := myfunc(#1)
foo ( # , # ) := myfunc(#1,#2)
foo ( # , # , # ) := myfunc(#1,#2,#3)
</pre></div>

<p>but this isn&rsquo;t very elegant.  To match variable numbers of items,
Calc uses some notations inspired regular expressions and the
&ldquo;extended BNF&rdquo; style used by some language designers.
</p>
<div class="example">
<pre class="example">foo ( { # }*, ) := apply(myfunc,#1)
</pre></div>

<p>The token &lsquo;<samp>{</samp>&rsquo; introduces a repeated or optional portion.
One of the three tokens &lsquo;<samp>}*</samp>&rsquo;, &lsquo;<samp>}+</samp>&rsquo;, or &lsquo;<samp>}?</samp>&rsquo;
ends the portion.  These will match zero or more, one or more,
or zero or one copies of the enclosed pattern, respectively.
In addition, &lsquo;<samp>}*</samp>&rsquo; and &lsquo;<samp>}+</samp>&rsquo; can be followed by a
separator token (with no space in between, as shown above).
Thus &lsquo;<samp>{ # }*,</samp>&rsquo; matches nothing, or one expression, or
several expressions separated by commas.
</p>
<p>A complete &lsquo;<samp>{ ... }</samp>&rsquo; item matches as a vector of the
items that matched inside it.  For example, the above rule will
match &lsquo;<samp>foo(1,2,3)</samp>&rsquo; to get &lsquo;<samp>apply(myfunc,[1,2,3])</samp>&rsquo;.
The Calc <code>apply</code> function takes a function name and a vector
of arguments and builds a call to the function with those
arguments, so the net result is the formula &lsquo;<samp>myfunc(1,2,3)</samp>&rsquo;.
</p>
<p>If the body of a &lsquo;<samp>{ ... }</samp>&rsquo; contains several &lsquo;<samp>#</samp>&rsquo;s
(or nested &lsquo;<samp>{ ... }</samp>&rsquo; constructs), then the items will be
strung together into the resulting vector.  If the body
does not contain anything but literal tokens, the result will
always be an empty vector.
</p>
<div class="example">
<pre class="example">foo ( { # , # }+, ) := bar(#1)
foo ( { { # }*, }*; ) := matrix(#1)
</pre></div>

<p>will parse &lsquo;<samp>foo(1, 2, 3, 4)</samp>&rsquo; as &lsquo;<samp>bar([1, 2, 3, 4])</samp>&rsquo;, and
&lsquo;<samp>foo(1, 2; 3, 4)</samp>&rsquo; as &lsquo;<samp>matrix([[1, 2], [3, 4]])</samp>&rsquo;.  Also, after
some thought it&rsquo;s easy to see how this pair of rules will parse
&lsquo;<samp>foo(1, 2, 3)</samp>&rsquo; as &lsquo;<samp>matrix([[1, 2, 3]])</samp>&rsquo;, since the first
rule will only match an even number of arguments.  The rule
</p>
<div class="example">
<pre class="example">foo ( # { , # , # }? ) := bar(#1,#2)
</pre></div>

<p>will parse &lsquo;<samp>foo(2,3,4)</samp>&rsquo; as &lsquo;<samp>bar(2,[3,4])</samp>&rsquo;, and
&lsquo;<samp>foo(2)</samp>&rsquo; as &lsquo;<samp>bar(2,[])</samp>&rsquo;.
</p>
<p>The notation &lsquo;<samp>{ ... }?.</samp>&rsquo; (note the trailing period) works
just the same as regular &lsquo;<samp>{ ... }?</samp>&rsquo;, except that it does not
count as an argument; the following two rules are equivalent:
</p>
<div class="example">
<pre class="example">foo ( # , { also }? # ) := bar(#1,#3)
foo ( # , { also }?. # ) := bar(#1,#2)
</pre></div>

<p>Note that in the first case the optional text counts as &lsquo;<samp>#2</samp>&rsquo;,
which will always be an empty vector, but in the second case no
empty vector is produced.
</p>
<p>Another variant is &lsquo;<samp>{ ... }?$</samp>&rsquo;, which means the body is
optional only at the end of the input formula.  All built-in syntax
rules in Calc use this for closing delimiters, so that during
algebraic entry you can type <kbd>[sqrt(2), sqrt(3 <span class="key">RET</span></kbd>, omitting
the closing parenthesis and bracket.  Calc does this automatically
for trailing &lsquo;<samp>)</samp>&rsquo;, &lsquo;<samp>]</samp>&rsquo;, and &lsquo;<samp>&gt;</samp>&rsquo; tokens in syntax
rules, but you can use &lsquo;<samp>{ ... }?$</samp>&rsquo; explicitly to get
this effect with any token (such as &lsquo;<samp>&quot;}&quot;</samp>&rsquo; or &lsquo;<samp>end</samp>&rsquo;).
Like &lsquo;<samp>{ ... }?.</samp>&rsquo;, this notation does not count as an
argument.  Conversely, you can use quotes, as in &lsquo;<samp>&quot;)&quot;</samp>&rsquo;, to
prevent a closing-delimiter token from being automatically treated
as optional.
</p>
<p>Calc&rsquo;s parser does not have full backtracking, which means some
patterns will not work as you might expect:
</p>
<div class="example">
<pre class="example">foo ( { # , }? # , # ) := bar(#1,#2,#3)
</pre></div>

<p>Here we are trying to make the first argument optional, so that
&lsquo;<samp>foo(2,3)</samp>&rsquo; parses as &lsquo;<samp>bar([],2,3)</samp>&rsquo;.  Unfortunately, Calc
first tries to match &lsquo;<samp>2,</samp>&rsquo; against the optional part of the
pattern, finds a match, and so goes ahead to match the rest of the
pattern.  Later on it will fail to match the second comma, but it
doesn&rsquo;t know how to go back and try the other alternative at that
point.  One way to get around this would be to use two rules:
</p>
<div class="example">
<pre class="example">foo ( # , # , # ) := bar([#1],#2,#3)
foo ( # , # ) := bar([],#1,#2)
</pre></div>

<p>More precisely, when Calc wants to match an optional or repeated
part of a pattern, it scans forward attempting to match that part.
If it reaches the end of the optional part without failing, it
&ldquo;finalizes&rdquo; its choice and proceeds.  If it fails, though, it
backs up and tries the other alternative.  Thus Calc has &ldquo;partial&rdquo;
backtracking.  A fully backtracking parser would go on to make sure
the rest of the pattern matched before finalizing the choice.
</p>
<hr>
<a name="Conditional-Syntax-Rules"></a>
<div class="header">
<p>
Previous: <a href="#Advanced-Syntax-Patterns" accesskey="p" rel="prev">Advanced Syntax Patterns</a>, Up: <a href="#Syntax-Tables" accesskey="u" rel="up">Syntax Tables</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditional-Syntax-Rules-1"></a>
<h4 class="subsubsection">6.8.11.4 Conditional Syntax Rules</h4>

<p>It is possible to attach a <em>condition</em> to a syntax rule.  For
example, the rules
</p>
<div class="example">
<pre class="example">foo ( # ) := ifoo(#1) :: integer(#1)
foo ( # ) := gfoo(#1)
</pre></div>

<p>will parse &lsquo;<samp>foo(3)</samp>&rsquo; as &lsquo;<samp>ifoo(3)</samp>&rsquo;, but will parse
&lsquo;<samp>foo(3.5)</samp>&rsquo; and &lsquo;<samp>foo(x)</samp>&rsquo; as calls to <code>gfoo</code>.  Any
number of conditions may be attached; all must be true for the
rule to succeed.  A condition is &ldquo;true&rdquo; if it evaluates to a
nonzero number.  See <a href="#Logical-Operations">Logical Operations</a>, for a list of Calc
functions like <code>integer</code> that perform logical tests.
</p>
<p>The exact sequence of events is as follows:  When Calc tries a
rule, it first matches the pattern as usual.  It then substitutes
&lsquo;<samp>#1</samp>&rsquo;, &lsquo;<samp>#2</samp>&rsquo;, etc., in the conditions, if any.  Next, the
conditions are simplified and evaluated in order from left to right,
using the algebraic simplifications (see <a href="#Simplifying-Formulas">Simplifying Formulas</a>).
Each result is true if it is a nonzero number, or an expression
that can be proven to be nonzero (see <a href="#Declarations">Declarations</a>).  If the
results of all conditions are true, the expression (such as
&lsquo;<samp>ifoo(#1)</samp>&rsquo;) has its &lsquo;<samp>#</samp>&rsquo;s substituted, and that is the
result of the parse.  If the result of any condition is false, Calc
goes on to try the next rule in the syntax table.
</p>
<p>Syntax rules also support <code>let</code> conditions, which operate in
exactly the same way as they do in algebraic rewrite rules.
See <a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a>, for details.  A <code>let</code>
condition is always true, but as a side effect it defines a
variable which can be used in later conditions, and also in the
expression after the &lsquo;<samp>:=</samp>&rsquo; sign:
</p>
<div class="example">
<pre class="example">foo ( # ) := hifoo(x) :: let(x := #1 + 0.5) :: dnumint(x)
</pre></div>

<p>The <code>dnumint</code> function tests if a value is numerically an
integer, i.e., either a true integer or an integer-valued float.
This rule will parse <code>foo</code> with a half-integer argument,
like &lsquo;<samp>foo(3.5)</samp>&rsquo;, to a call like &lsquo;<samp>hifoo(4.)</samp>&rsquo;.
</p>
<p>The lefthand side of a syntax rule <code>let</code> must be a simple
variable, not the arbitrary pattern that is allowed in rewrite
rules.
</p>
<p>The <code>matches</code> function is also treated specially in syntax
rule conditions (again, in the same way as in rewrite rules).
See <a href="#Matching-Commands">Matching Commands</a>.  If the matching pattern contains
meta-variables, then those meta-variables may be used in later
conditions and in the result expression.  The arguments to
<code>matches</code> are not evaluated in this situation.
</p>
<div class="example">
<pre class="example">sum ( # , # ) := sum(#1,a,b,c) :: matches(#2, a=[b..c])
</pre></div>

<p>This is another way to implement the Maple mode <code>sum</code> notation.
In this approach, we allow &lsquo;<samp>#2</samp>&rsquo; to equal the whole expression
&lsquo;<samp>i=1..10</samp>&rsquo;.  Then, we use <code>matches</code> to break it apart into
its components.  If the expression turns out not to match the pattern,
the syntax rule will fail.  Note that <kbd>Z S</kbd> always uses Calc&rsquo;s
Normal language mode for editing expressions in syntax rules, so we
must use regular Calc notation for the interval &lsquo;<samp>[b..c]</samp>&rsquo; that
will correspond to the Maple mode interval &lsquo;<samp>1..10</samp>&rsquo;.
</p>
<hr>
<a name="Modes-Variable"></a>
<div class="header">
<p>
Next: <a href="#Calc-Mode-Line" accesskey="n" rel="next">Calc Mode Line</a>, Previous: <a href="#Language-Modes" accesskey="p" rel="prev">Language Modes</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Modes-Variable"></a>
<h3 class="section">6.9 The <code>Modes</code> Variable</h3>

<p><a name="index-m-g"></a>
<a name="index-calc_002dget_002dmodes"></a>
The <kbd>m g</kbd> (<code>calc-get-modes</code>) command pushes onto the stack
a vector of numbers that describes the various mode settings that
are in effect.  With a numeric prefix argument, it pushes only the
<var>n</var>th mode, i.e., the <var>n</var>th element of this vector.  Keyboard
macros can use the <kbd>m g</kbd> command to modify their behavior based
on the current mode settings.
</p>
<a name="index-Modes-variable"></a>
<a name="index-Modes"></a>
<p>The modes vector is also available in the special variable
<code>Modes</code>.  In other words, <kbd>m g</kbd> is like <kbd>s r Modes <span class="key">RET</span></kbd>.
It will not work to store into this variable; in fact, if you do,
<code>Modes</code> will cease to track the current modes.  (The <kbd>m g</kbd>
command will continue to work, however.)
</p>
<p>In general, each number in this vector is suitable as a numeric
prefix argument to the associated mode-setting command.  (Recall
that the <kbd>~</kbd> key takes a number from the stack and gives it as
a numeric prefix to the next command.)
</p>
<p>The elements of the modes vector are as follows:
</p>
<ol>
<li> Current precision.  Default is 12; associated command is <kbd>p</kbd>.

</li><li> Binary word size.  Default is 32; associated command is <kbd>b w</kbd>.

</li><li> Stack size (not counting the value about to be pushed by <kbd>m g</kbd>).
This is zero if <kbd>m g</kbd> is executed with an empty stack.

</li><li> Number radix.  Default is 10; command is <kbd>d r</kbd>.

</li><li> Floating-point format.  This is the number of digits, plus the
constant 0 for normal notation, 10000 for scientific notation,
20000 for engineering notation, or 30000 for fixed-point notation.
These codes are acceptable as prefix arguments to the <kbd>d n</kbd>
command, but note that this may lose information:  For example,
<kbd>d s</kbd> and <kbd>C-u 12 d s</kbd> have similar (but not quite
identical) effects if the current precision is 12, but they both
produce a code of 10012, which will be treated by <kbd>d n</kbd> as
<kbd>C-u 12 d s</kbd>.  If the precision then changes, the float format
will still be frozen at 12 significant figures.

</li><li> Angular mode.  Default is 1 (degrees).  Other values are 2 (radians)
and 3 (HMS).  The <kbd>m d</kbd> command accepts these prefixes.

</li><li> Symbolic mode.  Value is 0 or 1; default is 0.  Command is <kbd>m s</kbd>.

</li><li> Fraction mode.  Value is 0 or 1; default is 0.  Command is <kbd>m f</kbd>.

</li><li> Polar mode.  Value is 0 (rectangular) or 1 (polar); default is 0.
Command is <kbd>m p</kbd>.

</li><li> Matrix/Scalar mode.  Default value is <i>-1</i>.  Value is 0 for Scalar
mode, <i>-2</i> for Matrix mode, <i>-3</i> for square Matrix mode,
or <var>N</var> for
<var>N</var>x<var>N</var>
Matrix mode.  Command is <kbd>m v</kbd>.

</li><li> Simplification mode.  Default is 1.  Value is <i>-1</i> for off (<kbd>m O</kbd>),
0 for <kbd>m N</kbd>, 2 for <kbd>m B</kbd>, 3 for <kbd>m A</kbd>, 4 for <kbd>m E</kbd>,
or 5 for <kbd>m&nbsp;U</kbd><!-- /@w -->.  The <kbd>m D</kbd> command accepts these prefixes.

</li><li> Infinite mode.  Default is <i>-1</i> (off).  Value is 1 if the mode is on,
or 0 if the mode is on with positive zeros.  Command is <kbd>m i</kbd>.
</li></ol>

<p>For example, the sequence <kbd>M-1 m g <span class="key">RET</span> 2 + ~ p</kbd> increases the
precision by two, leaving a copy of the old precision on the stack.
Later, <kbd>~ p</kbd> will restore the original precision using that
stack value.  (This sequence might be especially useful inside a
keyboard macro.)
</p>
<p>As another example, <kbd>M-3 m g 1 - ~ <span class="key">DEL</span></kbd> deletes all but the
oldest (bottommost) stack entry.
</p>
<p>Yet another example:  The HP-48 &ldquo;round&rdquo; command rounds a number
to the current displayed precision.  You could roughly emulate this
in Calc with the sequence <kbd>M-5 m g 10000 % ~ c c</kbd>.  (This
would not work for fixed-point mode, but it wouldn&rsquo;t be hard to
do a full emulation with the help of the <kbd>Z [</kbd> and <kbd>Z ]</kbd>
programming commands.  See <a href="#Conditionals-in-Macros">Conditionals in Macros</a>.)
</p>
<hr>
<a name="Calc-Mode-Line"></a>
<div class="header">
<p>
Previous: <a href="#Modes-Variable" accesskey="p" rel="prev">Modes Variable</a>, Up: <a href="#Mode-Settings" accesskey="u" rel="up">Mode Settings</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Calc-Mode-Line"></a>
<h3 class="section">6.10 The Calc Mode Line</h3>

<p><a name="index-Mode-line-indicators"></a>
This section is a summary of all symbols that can appear on the
Calc mode line, the highlighted bar that appears under the Calc
stack window (or under an editing window in Embedded mode).
</p>
<p>The basic mode line format is:
</p>
<div class="example">
<pre class="example">--%*-Calc: 12 Deg <var>other modes</var>       (Calculator)
</pre></div>

<p>The &lsquo;<samp>%*</samp>&rsquo; indicates that the buffer is &ldquo;read-only&rdquo;; it shows that
regular Emacs commands are not allowed to edit the stack buffer
as if it were text.
</p>
<p>The word &lsquo;<samp>Calc:</samp>&rsquo; changes to &lsquo;<samp>CalcEmbed:</samp>&rsquo; if Embedded mode
is enabled.  The words after this describe the various Calc modes
that are in effect.
</p>
<p>The first mode is always the current precision, an integer.
The second mode is always the angular mode, either <code>Deg</code>,
<code>Rad</code>, or <code>Hms</code>.
</p>
<p>Here is a complete list of the remaining symbols that can appear
on the mode line:
</p>
<dl compact="compact">
<dt><code>Alg</code></dt>
<dd><p>Algebraic mode (<kbd>m a</kbd>; see <a href="#Algebraic-Entry">Algebraic Entry</a>).
</p>
</dd>
<dt><code>Alg[(</code></dt>
<dd><p>Incomplete algebraic mode (<kbd>C-u m a</kbd>).
</p>
</dd>
<dt><code>Alg*</code></dt>
<dd><p>Total algebraic mode (<kbd>m t</kbd>).
</p>
</dd>
<dt><code>Symb</code></dt>
<dd><p>Symbolic mode (<kbd>m s</kbd>; see <a href="#Symbolic-Mode">Symbolic Mode</a>).
</p>
</dd>
<dt><code>Matrix</code></dt>
<dd><p>Matrix mode (<kbd>m v</kbd>; see <a href="#Matrix-Mode">Matrix Mode</a>).
</p>
</dd>
<dt><code>Matrix<var>n</var></code></dt>
<dd><p>Dimensioned Matrix mode (<kbd>C-u <var>n</var> m v</kbd>; see <a href="#Matrix-Mode">Matrix Mode</a>).
</p>
</dd>
<dt><code>SqMatrix</code></dt>
<dd><p>Square Matrix mode (<kbd>C-u m v</kbd>; see <a href="#Matrix-Mode">Matrix Mode</a>).
</p>
</dd>
<dt><code>Scalar</code></dt>
<dd><p>Scalar mode (<kbd>m v</kbd>; see <a href="#Matrix-Mode">Matrix Mode</a>).
</p>
</dd>
<dt><code>Polar</code></dt>
<dd><p>Polar complex mode (<kbd>m p</kbd>; see <a href="#Polar-Mode">Polar Mode</a>).
</p>
</dd>
<dt><code>Frac</code></dt>
<dd><p>Fraction mode (<kbd>m f</kbd>; see <a href="#Fraction-Mode">Fraction Mode</a>).
</p>
</dd>
<dt><code>Inf</code></dt>
<dd><p>Infinite mode (<kbd>m i</kbd>; see <a href="#Infinite-Mode">Infinite Mode</a>).
</p>
</dd>
<dt><code>+Inf</code></dt>
<dd><p>Positive Infinite mode (<kbd>C-u 0 m i</kbd>).
</p>
</dd>
<dt><code>NoSimp</code></dt>
<dd><p>Default simplifications off (<kbd>m O</kbd>; see <a href="#Simplification-Modes">Simplification Modes</a>).
</p>
</dd>
<dt><code>NumSimp</code></dt>
<dd><p>Default simplifications for numeric arguments only (<kbd>m N</kbd>).
</p>
</dd>
<dt><code>BinSimp<var>w</var></code></dt>
<dd><p>Binary-integer simplification mode; word size <var>w</var> (<kbd>m B</kbd>, <kbd>b w</kbd>).
</p>
</dd>
<dt><code>BasicSimp</code></dt>
<dd><p>Basic simplification mode (<kbd>m I</kbd>).
</p>
</dd>
<dt><code>ExtSimp</code></dt>
<dd><p>Extended algebraic simplification mode (<kbd>m E</kbd>).
</p>
</dd>
<dt><code>UnitSimp</code></dt>
<dd><p>Units simplification mode (<kbd>m U</kbd>).
</p>
</dd>
<dt><code>Bin</code></dt>
<dd><p>Current radix is 2 (<kbd>d 2</kbd>; see <a href="#Radix-Modes">Radix Modes</a>).
</p>
</dd>
<dt><code>Oct</code></dt>
<dd><p>Current radix is 8 (<kbd>d 8</kbd>).
</p>
</dd>
<dt><code>Hex</code></dt>
<dd><p>Current radix is 16 (<kbd>d 6</kbd>).
</p>
</dd>
<dt><code>Radix<var>n</var></code></dt>
<dd><p>Current radix is <var>n</var> (<kbd>d r</kbd>).
</p>
</dd>
<dt><code>Zero</code></dt>
<dd><p>Leading zeros (<kbd>d z</kbd>; see <a href="#Radix-Modes">Radix Modes</a>).
</p>
</dd>
<dt><code>Big</code></dt>
<dd><p>Big language mode (<kbd>d B</kbd>; see <a href="#Normal-Language-Modes">Normal Language Modes</a>).
</p>
</dd>
<dt><code>Flat</code></dt>
<dd><p>One-line normal language mode (<kbd>d O</kbd>).
</p>
</dd>
<dt><code>Unform</code></dt>
<dd><p>Unformatted language mode (<kbd>d U</kbd>).
</p>
</dd>
<dt><code>C</code></dt>
<dd><p>C language mode (<kbd>d C</kbd>; see <a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a>).
</p>
</dd>
<dt><code>Pascal</code></dt>
<dd><p>Pascal language mode (<kbd>d P</kbd>).
</p>
</dd>
<dt><code>Fortran</code></dt>
<dd><p>FORTRAN language mode (<kbd>d F</kbd>).
</p>
</dd>
<dt><code>TeX</code></dt>
<dd><p>TeX language mode (<kbd>d T</kbd>; see <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>).
</p>
</dd>
<dt><code>LaTeX</code></dt>
<dd><p>LaTeX language mode (<kbd>d L</kbd>; see <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>).
</p>
</dd>
<dt><code>Eqn</code></dt>
<dd><p><em>Eqn</em> language mode (<kbd>d E</kbd>; see <a href="#Eqn-Language-Mode">Eqn Language Mode</a>).
</p>
</dd>
<dt><code>Math</code></dt>
<dd><p>Mathematica language mode (<kbd>d M</kbd>; see <a href="#Mathematica-Language-Mode">Mathematica Language Mode</a>).
</p>
</dd>
<dt><code>Maple</code></dt>
<dd><p>Maple language mode (<kbd>d W</kbd>; see <a href="#Maple-Language-Mode">Maple Language Mode</a>).
</p>
</dd>
<dt><code>Norm<var>n</var></code></dt>
<dd><p>Normal float mode with <var>n</var> digits (<kbd>d n</kbd>; see <a href="#Float-Formats">Float Formats</a>).
</p>
</dd>
<dt><code>Fix<var>n</var></code></dt>
<dd><p>Fixed point mode with <var>n</var> digits after the point (<kbd>d f</kbd>).
</p>
</dd>
<dt><code>Sci</code></dt>
<dd><p>Scientific notation mode (<kbd>d s</kbd>).
</p>
</dd>
<dt><code>Sci<var>n</var></code></dt>
<dd><p>Scientific notation with <var>n</var> digits (<kbd>d s</kbd>).
</p>
</dd>
<dt><code>Eng</code></dt>
<dd><p>Engineering notation mode (<kbd>d e</kbd>).
</p>
</dd>
<dt><code>Eng<var>n</var></code></dt>
<dd><p>Engineering notation with <var>n</var> digits (<kbd>d e</kbd>).
</p>
</dd>
<dt><code>Left<var>n</var></code></dt>
<dd><p>Left-justified display indented by <var>n</var> (<kbd>d &lt;</kbd>; see <a href="#Justification">Justification</a>).
</p>
</dd>
<dt><code>Right</code></dt>
<dd><p>Right-justified display (<kbd>d &gt;</kbd>).
</p>
</dd>
<dt><code>Right<var>n</var></code></dt>
<dd><p>Right-justified display with width <var>n</var> (<kbd>d &gt;</kbd>).
</p>
</dd>
<dt><code>Center</code></dt>
<dd><p>Centered display (<kbd>d =</kbd>).
</p>
</dd>
<dt><code>Center<var>n</var></code></dt>
<dd><p>Centered display with center column <var>n</var> (<kbd>d =</kbd>).
</p>
</dd>
<dt><code>Wid<var>n</var></code></dt>
<dd><p>Line breaking with width <var>n</var> (<kbd>d b</kbd>; see <a href="#Normal-Language-Modes">Normal Language Modes</a>).
</p>
</dd>
<dt><code>Wide</code></dt>
<dd><p>No line breaking (<kbd>d b</kbd>).
</p>
</dd>
<dt><code>Break</code></dt>
<dd><p>Selections show deep structure (<kbd>j b</kbd>; see <a href="#Making-Selections">Making Selections</a>).
</p>
</dd>
<dt><code>Save</code></dt>
<dd><p>Record modes in <samp>~/.emacs.d/calc.el</samp> (<kbd>m R</kbd>; see <a href="#General-Mode-Commands">General Mode Commands</a>).
</p>
</dd>
<dt><code>Local</code></dt>
<dd><p>Record modes in Embedded buffer (<kbd>m R</kbd>).
</p>
</dd>
<dt><code>LocEdit</code></dt>
<dd><p>Record modes as editing-only in Embedded buffer (<kbd>m R</kbd>).
</p>
</dd>
<dt><code>LocPerm</code></dt>
<dd><p>Record modes as permanent-only in Embedded buffer (<kbd>m R</kbd>).
</p>
</dd>
<dt><code>Global</code></dt>
<dd><p>Record modes as global in Embedded buffer (<kbd>m R</kbd>).
</p>
</dd>
<dt><code>Manual</code></dt>
<dd><p>Automatic recomputation turned off (<kbd>m C</kbd>; see <a href="#Automatic-Recomputation">Automatic Recomputation</a>).
</p>
</dd>
<dt><code>Graph</code></dt>
<dd><p>GNUPLOT process is alive in background (see <a href="#Graphics">Graphics</a>).
</p>
</dd>
<dt><code>Sel</code></dt>
<dd><p>Top-of-stack has a selection (Embedded only; see <a href="#Making-Selections">Making Selections</a>).
</p>
</dd>
<dt><code>Dirty</code></dt>
<dd><p>The stack display may not be up-to-date (see <a href="#Display-Modes">Display Modes</a>).
</p>
</dd>
<dt><code>Inv</code></dt>
<dd><p>&ldquo;Inverse&rdquo; prefix was pressed (<kbd>I</kbd>; see <a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a>).
</p>
</dd>
<dt><code>Hyp</code></dt>
<dd><p>&ldquo;Hyperbolic&rdquo; prefix was pressed (<kbd>H</kbd>).
</p>
</dd>
<dt><code>Keep</code></dt>
<dd><p>&ldquo;Keep-arguments&rdquo; prefix was pressed (<kbd>K</kbd>).
</p>
</dd>
<dt><code>Narrow</code></dt>
<dd><p>Stack is truncated (<kbd>d t</kbd>; see <a href="#Truncating-the-Stack">Truncating the Stack</a>).
</p></dd>
</dl>

<p>In addition, the symbols <code>Active</code> and <code>~Active</code> can appear
as minor modes on an Embedded buffer&rsquo;s mode line.  See <a href="#Embedded-Mode">Embedded Mode</a>.
</p>
<hr>
<a name="Arithmetic"></a>
<div class="header">
<p>
Next: <a href="#Scientific-Functions" accesskey="n" rel="next">Scientific Functions</a>, Previous: <a href="#Mode-Settings" accesskey="p" rel="prev">Mode Settings</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Arithmetic-Functions"></a>
<h2 class="chapter">7 Arithmetic Functions</h2>

<p>This chapter describes the Calc commands for doing simple calculations
on numbers, such as addition, absolute value, and square roots.  These
commands work by removing the top one or two values from the stack,
performing the desired operation, and pushing the result back onto the
stack.  If the operation cannot be performed, the result pushed is a
formula instead of a number, such as &lsquo;<samp>2/0</samp>&rsquo; (because division by zero
is invalid) or &lsquo;<samp>sqrt(x)</samp>&rsquo; (because the argument &lsquo;<samp>x</samp>&rsquo; is a formula).
</p>
<p>Most of the commands described here can be invoked by a single keystroke.
Some of the more obscure ones are two-letter sequences beginning with
the <kbd>f</kbd> (&ldquo;functions&rdquo;) prefix key.
</p>
<p>See <a href="#Prefix-Arguments">Prefix Arguments</a>, for a discussion of the effect of numeric
prefix arguments on commands in this chapter which do not otherwise
interpret a prefix argument.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Arithmetic" accesskey="1">Basic Arithmetic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Integer-Truncation" accesskey="2">Integer Truncation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Complex-Number-Functions" accesskey="3">Complex Number Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conversions" accesskey="4">Conversions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Date-Arithmetic" accesskey="5">Date Arithmetic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Financial-Functions" accesskey="6">Financial Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Binary-Functions" accesskey="7">Binary Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Arithmetic"></a>
<div class="header">
<p>
Next: <a href="#Integer-Truncation" accesskey="n" rel="next">Integer Truncation</a>, Previous: <a href="#Arithmetic" accesskey="p" rel="prev">Arithmetic</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Arithmetic-1"></a>
<h3 class="section">7.1 Basic Arithmetic</h3>

<p><a name="index-_002b"></a>
<a name="index-calc_002dplus"></a>
<a name="index-_002b-1"></a>
The <kbd>+</kbd> (<code>calc-plus</code>) command adds two numbers.  The numbers may
be any of the standard Calc data types.  The resulting sum is pushed back
onto the stack.
</p>
<p>If both arguments of <kbd>+</kbd> are vectors or matrices (of matching dimensions),
the result is a vector or matrix sum.  If one argument is a vector and the
other a scalar (i.e., a non-vector), the scalar is added to each of the
elements of the vector to form a new vector.  If the scalar is not a
number, the operation is left in symbolic form:  Suppose you added &lsquo;<samp>x</samp>&rsquo;
to the vector &lsquo;<samp>[1,2]</samp>&rsquo;.  You may want the result &lsquo;<samp>[1+x,2+x]</samp>&rsquo;, or
you may plan to substitute a 2-vector for &lsquo;<samp>x</samp>&rsquo; in the future.  Since
the Calculator can&rsquo;t tell which interpretation you want, it makes the
safest assumption.  See <a href="#Reducing-and-Mapping">Reducing and Mapping</a>, for a way to add &lsquo;<samp>x</samp>&rsquo;
to every element of a vector.
</p>
<p>If either argument of <kbd>+</kbd> is a complex number, the result will in general
be complex.  If one argument is in rectangular form and the other polar,
the current Polar mode determines the form of the result.  If Symbolic
mode is enabled, the sum may be left as a formula if the necessary
conversions for polar addition are non-trivial.
</p>
<p>If both arguments of <kbd>+</kbd> are HMS forms, the forms are added according to
the usual conventions of hours-minutes-seconds notation.  If one argument
is an HMS form and the other is a number, that number is converted from
degrees or radians (depending on the current Angular mode) to HMS format
and then the two HMS forms are added.
</p>
<p>If one argument of <kbd>+</kbd> is a date form, the other can be either a
real number, which advances the date by a certain number of days, or
an HMS form, which advances the date by a certain amount of time.
Subtracting two date forms yields the number of days between them.
Adding two date forms is meaningless, but Calc interprets it as the
subtraction of one date form and the negative of the other.  (The
negative of a date form can be understood by remembering that dates
are stored as the number of days before or after Jan 1, 1 AD.)
</p>
<p>If both arguments of <kbd>+</kbd> are error forms, the result is an error form
with an appropriately computed standard deviation.  If one argument is an
error form and the other is a number, the number is taken to have zero error.
Error forms may have symbolic formulas as their mean and/or error parts;
adding these will produce a symbolic error form result.  However, adding an
error form to a plain symbolic formula (as in &lsquo;<samp>(a +/- b) + c</samp>&rsquo;) will not
work, for the same reasons just mentioned for vectors.  Instead you must
write &lsquo;<samp>(a +/- b) + (c +/- 0)</samp>&rsquo;.
</p>
<p>If both arguments of <kbd>+</kbd> are modulo forms with equal values of &lsquo;<samp>M</samp>&rsquo;,
or if one argument is a modulo form and the other a plain number, the
result is a modulo form which represents the sum, modulo &lsquo;<samp>M</samp>&rsquo;, of
the two values.
</p>
<p>If both arguments of <kbd>+</kbd> are intervals, the result is an interval
which describes all possible sums of the possible input values.  If
one argument is a plain number, it is treated as the interval
&lsquo;<samp>[x&nbsp;..&nbsp;x]</samp>&rsquo;<!-- /@w -->.
</p>
<p>If one argument of <kbd>+</kbd> is an infinity and the other is not, the
result is that same infinity.  If both arguments are infinite and in
the same direction, the result is the same infinity, but if they are
infinite in different directions the result is <code>nan</code>.
</p>
<a name="index-_002d"></a>
<a name="index-calc_002dminus"></a>
<a name="index-_002d-1"></a>
<p>The <kbd>-</kbd> (<code>calc-minus</code>) command subtracts two values.  The top
number on the stack is subtracted from the one behind it, so that the
computation <kbd>5 <span class="key">RET</span> 2 -</kbd> produces 3, not <i>-3</i>.  All options
available for <kbd>+</kbd> are available for <kbd>-</kbd> as well.
</p>
<a name="index-_002a"></a>
<a name="index-calc_002dtimes"></a>
<a name="index-_002a-1"></a>
<p>The <kbd>*</kbd> (<code>calc-times</code>) command multiplies two numbers.  If one
argument is a vector and the other a scalar, the scalar is multiplied by
the elements of the vector to produce a new vector.  If both arguments
are vectors, the interpretation depends on the dimensions of the
vectors:  If both arguments are matrices, a matrix multiplication is
done.  If one argument is a matrix and the other a plain vector, the
vector is interpreted as a row vector or column vector, whichever is
dimensionally correct.  If both arguments are plain vectors, the result
is a single scalar number which is the dot product of the two vectors.
</p>
<p>If one argument of <kbd>*</kbd> is an HMS form and the other a number, the
HMS form is multiplied by that amount.  It is an error to multiply two
HMS forms together, or to attempt any multiplication involving date
forms.  Error forms, modulo forms, and intervals can be multiplied;
see the comments for addition of those forms.  When two error forms
or intervals are multiplied they are considered to be statistically
independent; thus, &lsquo;<samp>[-2 .. 3] * [-2 .. 3]</samp>&rsquo; is &lsquo;<samp>[-6 .. 9]</samp>&rsquo;,
whereas &lsquo;<samp><span class="nolinebreak">[-2</span>&nbsp;..&nbsp;3]&nbsp;^&nbsp;2</samp>&rsquo;<!-- /@w --> is &lsquo;<samp>[0 .. 9]</samp>&rsquo;.
</p>
<a name="index-_002f"></a>
<a name="index-calc_002ddivide"></a>
<a name="index-_002f-1"></a>
<p>The <kbd>/</kbd> (<code>calc-divide</code>) command divides two numbers.
</p>
<p>When combining multiplication and division in an algebraic formula, it
is good style to use parentheses to distinguish between possible
interpretations; the expression &lsquo;<samp>a/b*c</samp>&rsquo; should be written
&lsquo;<samp>(a/b)*c</samp>&rsquo; or &lsquo;<samp>a/(b*c)</samp>&rsquo;, as appropriate.  Without the
parentheses, Calc will interpret &lsquo;<samp>a/b*c</samp>&rsquo; as &lsquo;<samp>a/(b*c)</samp>&rsquo;, since
in algebraic entry Calc gives division a lower precedence than
multiplication. (This is not standard across all computer languages, and
Calc may change the precedence depending on the language mode being used.
See <a href="#Language-Modes">Language Modes</a>.)  This default ordering can be changed by setting
the customizable variable <code>calc-multiplication-has-precedence</code> to
<code>nil</code> (see <a href="#Customizing-Calc">Customizing Calc</a>); this will give multiplication and
division equal precedences.  Note that Calc&rsquo;s default choice of
precedence allows &lsquo;<samp>a b / c d</samp>&rsquo; to be used as a shortcut for
</p><div class="smallexample">
<pre class="smallexample">a b
---.
c d
</pre></div>

<p>When dividing a scalar &lsquo;<samp>B</samp>&rsquo; by a square matrix &lsquo;<samp>A</samp>&rsquo;, the
computation performed is &lsquo;<samp>B</samp>&rsquo; times the inverse of &lsquo;<samp>A</samp>&rsquo;.  This
also occurs if &lsquo;<samp>B</samp>&rsquo; is itself a vector or matrix, in which case the
effect is to solve the set of linear equations represented by &lsquo;<samp>B</samp>&rsquo;.
If &lsquo;<samp>B</samp>&rsquo; is a matrix with the same number of rows as &lsquo;<samp>A</samp>&rsquo;, or a
plain vector (which is interpreted here as a column vector), then the
equation &lsquo;<samp>A X = B</samp>&rsquo; is solved for the vector or matrix &lsquo;<samp>X</samp>&rsquo;.
Otherwise, if &lsquo;<samp>B</samp>&rsquo; is a non-square matrix with the same number of
<em>columns</em> as &lsquo;<samp>A</samp>&rsquo;, the equation &lsquo;<samp>X A = B</samp>&rsquo; is solved.  If
you wish a vector &lsquo;<samp>B</samp>&rsquo; to be interpreted as a row vector to be
solved as &lsquo;<samp>X A = B</samp>&rsquo;, make it into a one-row matrix with <kbd>C-u 1
v p</kbd> first.  To force a left-handed solution with a square matrix
&lsquo;<samp>B</samp>&rsquo;, transpose &lsquo;<samp>A</samp>&rsquo; and &lsquo;<samp>B</samp>&rsquo; before dividing, then
transpose the result.
</p>
<p>HMS forms can be divided by real numbers or by other HMS forms.  Error
forms can be divided in any combination of ways.  Modulo forms where both
values and the modulo are integers can be divided to get an integer modulo
form result.  Intervals can be divided; dividing by an interval that
encompasses zero or has zero as a limit will result in an infinite
interval.
</p>
<a name="index-_005e"></a>
<a name="index-calc_002dpower"></a>
<a name="index-_005e-1"></a>
<p>The <kbd>^</kbd> (<code>calc-power</code>) command raises a number to a power.  If
the power is an integer, an exact result is computed using repeated
multiplications.  For non-integer powers, Calc uses Newton&rsquo;s method or
logarithms and exponentials.  Square matrices can be raised to integer
powers.  If either argument is an error (or interval or modulo) form,
the result is also an error (or interval or modulo) form.
</p>
<a name="index-I-_005e"></a>
<a name="index-nroot"></a>
<p>If you press the <kbd>I</kbd> (inverse) key first, the <kbd>I ^</kbd> command
computes an Nth root:  <kbd>125 <span class="key">RET</span> 3 I ^</kbd> computes the number 5.
(This is entirely equivalent to <kbd>125 <span class="key">RET</span> 1:3 ^</kbd>.)
</p>
<a name="index-_005c"></a>
<a name="index-calc_002didiv"></a>
<a name="index-idiv-1"></a>
<a name="index-_005c-1"></a>
<p>The <kbd>\</kbd> (<code>calc-idiv</code>) command divides two numbers on the stack
to produce an integer result.  It is equivalent to dividing with
<tt class="key">/</tt>, then rounding down with <kbd>F</kbd> (<code>calc-floor</code>), only a bit
more convenient and efficient.  Also, since it is an all-integer
operation when the arguments are integers, it avoids problems that
<kbd>/ F</kbd> would have with floating-point roundoff.
</p>
<a name="index-_0025"></a>
<a name="index-calc_002dmod"></a>
<a name="index-_0025-1"></a>
<p>The <kbd>%</kbd> (<code>calc-mod</code>) command performs a &ldquo;modulo&rdquo; (or &ldquo;remainder&rdquo;)
operation.  Mathematically, &lsquo;<samp>a%b = a - (a\b)*b</samp>&rsquo;, and is defined
for all real numbers &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; (except &lsquo;<samp>b=0</samp>&rsquo;).  For
positive &lsquo;<samp>b</samp>&rsquo;, the result will always be between 0 (inclusive) and
&lsquo;<samp>b</samp>&rsquo; (exclusive).  Modulo does not work for HMS forms and error forms.
If &lsquo;<samp>a</samp>&rsquo; is a modulo form, its modulo is changed to &lsquo;<samp>b</samp>&rsquo;, which
must be positive real number.
</p>
<a name="index-_003a"></a>
<a name="index-calc_002dfdiv"></a>
<a name="index-fdiv"></a>
<p>The <kbd>:</kbd> (<code>calc-fdiv</code>) [<code>fdiv</code>] command
divides the two integers on the top of the stack to produce a fractional
result.  This is a convenient shorthand for enabling Fraction mode (with
<kbd>m f</kbd>) temporarily and using &lsquo;<samp>/</samp>&rsquo;.  Note that during numeric entry
the <kbd>:</kbd> key is interpreted as a fraction separator, so to divide 8 by 6
you would have to type <kbd>8 <span class="key">RET</span> 6 <span class="key">RET</span> :</kbd>.  (Of course, in
this case, it would be much easier simply to enter the fraction directly
as <kbd>8:6 <span class="key">RET</span></kbd>!)
</p>
<a name="index-n"></a>
<a name="index-calc_002dchange_002dsign"></a>
<p>The <kbd>n</kbd> (<code>calc-change-sign</code>) command negates the number on the top
of the stack.  It works on numbers, vectors and matrices, HMS forms, date
forms, error forms, intervals, and modulo forms.
</p>
<a name="index-A"></a>
<a name="index-calc_002dabs"></a>
<a name="index-abs"></a>
<p>The <kbd>A</kbd> (<code>calc-abs</code>) [<code>abs</code>] command computes the absolute
value of a number.  The result of <code>abs</code> is always a nonnegative
real number:  With a complex argument, it computes the complex magnitude.
With a vector or matrix argument, it computes the Frobenius norm, i.e.,
the square root of the sum of the squares of the absolute values of the
elements.  The absolute value of an error form is defined by replacing
the mean part with its absolute value and leaving the error part the same.
The absolute value of a modulo form is undefined.  The absolute value of
an interval is defined in the obvious way.
</p>
<a name="index-f-A"></a>
<a name="index-calc_002dabssqr"></a>
<a name="index-abssqr"></a>
<p>The <kbd>f A</kbd> (<code>calc-abssqr</code>) [<code>abssqr</code>] command computes the
absolute value squared of a number, vector or matrix, or error form.
</p>
<a name="index-f-s"></a>
<a name="index-calc_002dsign"></a>
<a name="index-sign"></a>
<p>The <kbd>f s</kbd> (<code>calc-sign</code>) [<code>sign</code>] command returns 1 if its
argument is positive, <i>-1</i> if its argument is negative, or 0 if its
argument is zero.  In algebraic form, you can also write &lsquo;<samp>sign(a,x)</samp>&rsquo;
which evaluates to &lsquo;<samp>x * sign(a)</samp>&rsquo;, i.e., either &lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>-x</samp>&rsquo;, or
zero depending on the sign of &lsquo;<samp>a</samp>&rsquo;.
</p>
<a name="index-_0026"></a>
<a name="index-calc_002dinv"></a>
<a name="index-inv"></a>
<a name="index-Reciprocal"></a>
<p>The <kbd>&amp;</kbd> (<code>calc-inv</code>) [<code>inv</code>] command computes the
reciprocal of a number, i.e., &lsquo;<samp>1 / x</samp>&rsquo;.  Operating on a square
matrix, it computes the inverse of that matrix.
</p>
<a name="index-Q"></a>
<a name="index-calc_002dsqrt"></a>
<a name="index-sqrt"></a>
<p>The <kbd>Q</kbd> (<code>calc-sqrt</code>) [<code>sqrt</code>] command computes the square
root of a number.  For a negative real argument, the result will be a
complex number whose form is determined by the current Polar mode.
</p>
<a name="index-f-h"></a>
<a name="index-calc_002dhypot"></a>
<a name="index-hypot"></a>
<p>The <kbd>f h</kbd> (<code>calc-hypot</code>) [<code>hypot</code>] command computes the square
root of the sum of the squares of two numbers.  That is, &lsquo;<samp>hypot(a,b)</samp>&rsquo;
is the length of the hypotenuse of a right triangle with sides &lsquo;<samp>a</samp>&rsquo;
and &lsquo;<samp>b</samp>&rsquo;.  If the arguments are complex numbers, their squared
magnitudes are used.
</p>
<a name="index-f-Q"></a>
<a name="index-calc_002disqrt"></a>
<a name="index-isqrt-1"></a>
<p>The <kbd>f Q</kbd> (<code>calc-isqrt</code>) [<code>isqrt</code>] command computes the
integer square root of an integer.  This is the true square root of the
number, rounded down to an integer.  For example, &lsquo;<samp>isqrt(10)</samp>&rsquo;
produces 3.  Note that, like <kbd>\</kbd> [<code>idiv</code>], this uses exact
integer arithmetic throughout to avoid roundoff problems.  If the input
is a floating-point number or other non-integer value, this is exactly
the same as &lsquo;<samp>floor(sqrt(x))</samp>&rsquo;.
</p>
<a name="index-f-n"></a>
<a name="index-f-x"></a>
<a name="index-calc_002dmin"></a>
<a name="index-min"></a>
<a name="index-calc_002dmax"></a>
<a name="index-max"></a>
<p>The <kbd>f n</kbd> (<code>calc-min</code>) [<code>min</code>] and <kbd>f x</kbd> (<code>calc-max</code>)
[<code>max</code>] commands take the minimum or maximum of two real numbers,
respectively.  These commands also work on HMS forms, date forms,
intervals, and infinities.  (In algebraic expressions, these functions
take any number of arguments and return the maximum or minimum among
all the arguments.)
</p>
<a name="index-f-M"></a>
<a name="index-f-X"></a>
<a name="index-calc_002dmant_002dpart"></a>
<a name="index-mant"></a>
<a name="index-calc_002dxpon_002dpart"></a>
<a name="index-xpon"></a>
<p>The <kbd>f M</kbd> (<code>calc-mant-part</code>) [<code>mant</code>] function extracts
the &ldquo;mantissa&rdquo; part &lsquo;<samp>m</samp>&rsquo; of its floating-point argument; <kbd>f X</kbd>
(<code>calc-xpon-part</code>) [<code>xpon</code>] extracts the &ldquo;exponent&rdquo; part
&lsquo;<samp>e</samp>&rsquo;.  The original number is equal to
&lsquo;<samp>m * 10^e</samp>&rsquo;,
where &lsquo;<samp>m</samp>&rsquo; is in the interval &lsquo;<samp>[1.0 .. 10.0)</samp>&rsquo; except that
&lsquo;<samp>m=e=0</samp>&rsquo; if the original number is zero.  For integers
and fractions, <code>mant</code> returns the number unchanged and <code>xpon</code>
returns zero.  The <kbd>v u</kbd> (<code>calc-unpack</code>) command can also be
used to &ldquo;unpack&rdquo; a floating-point number; this produces an integer
mantissa and exponent, with the constraint that the mantissa is not
a multiple of ten (again except for the &lsquo;<samp>m=e=0</samp>&rsquo; case).
</p>
<a name="index-f-S"></a>
<a name="index-calc_002dscale_002dfloat"></a>
<a name="index-scf"></a>
<p>The <kbd>f S</kbd> (<code>calc-scale-float</code>) [<code>scf</code>] function scales a number
by a given power of ten.  Thus, &lsquo;<samp>scf(mant(x), xpon(x)) = x</samp>&rsquo; for any
real &lsquo;<samp>x</samp>&rsquo;.  The second argument must be an integer, but the first
may actually be any numeric value.  For example, &lsquo;<samp>scf(5,-2) = 0.05</samp>&rsquo;
or &lsquo;<samp>1:20</samp>&rsquo; depending on the current Fraction mode.
</p>
<a name="index-f-_005b"></a>
<a name="index-f-_005d"></a>
<a name="index-calc_002ddecrement"></a>
<a name="index-calc_002dincrement"></a>
<a name="index-decr"></a>
<a name="index-incr"></a>
<p>The <kbd>f [</kbd> (<code>calc-decrement</code>) [<code>decr</code>] and <kbd>f ]</kbd>
(<code>calc-increment</code>) [<code>incr</code>] functions decrease or increase
a number by one unit.  For integers, the effect is obvious.  For
floating-point numbers, the change is by one unit in the last place.
For example, incrementing &lsquo;<samp>12.3456</samp>&rsquo; when the current precision
is 6 digits yields &lsquo;<samp>12.3457</samp>&rsquo;.  If the current precision had been
8 digits, the result would have been &lsquo;<samp>12.345601</samp>&rsquo;.  Incrementing
&lsquo;<samp>0.0</samp>&rsquo; produces
&lsquo;<samp>10^-p</samp>&rsquo;,
where &lsquo;<samp>p</samp>&rsquo; is the current
precision.  These operations are defined only on integers and floats.
With numeric prefix arguments, they change the number by &lsquo;<samp>n</samp>&rsquo; units.
</p>
<p>Note that incrementing followed by decrementing, or vice-versa, will
almost but not quite always cancel out.  Suppose the precision is
6 digits and the number &lsquo;<samp>9.99999</samp>&rsquo; is on the stack.  Incrementing
will produce &lsquo;<samp>10.0000</samp>&rsquo;; decrementing will produce &lsquo;<samp>9.9999</samp>&rsquo;.
One digit has been dropped.  This is an unavoidable consequence of the
way floating-point numbers work.
</p>
<p>Incrementing a date/time form adjusts it by a certain number of seconds.
Incrementing a pure date form adjusts it by a certain number of days.
</p>
<hr>
<a name="Integer-Truncation"></a>
<div class="header">
<p>
Next: <a href="#Complex-Number-Functions" accesskey="n" rel="next">Complex Number Functions</a>, Previous: <a href="#Basic-Arithmetic" accesskey="p" rel="prev">Basic Arithmetic</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Integer-Truncation-1"></a>
<h3 class="section">7.2 Integer Truncation</h3>

<p>There are four commands for truncating a real number to an integer,
differing mainly in their treatment of negative numbers.  All of these
commands have the property that if the argument is an integer, the result
is the same integer.  An integer-valued floating-point argument is converted
to integer form.
</p>
<p>If you press <kbd>H</kbd> (<code>calc-hyperbolic</code>) first, the result will be
expressed as an integer-valued floating-point number.
</p>
<a name="index-Integer-part-of-a-number"></a>
<a name="index-F"></a>
<a name="index-calc_002dfloor"></a>
<a name="index-floor"></a>
<a name="index-ffloor"></a>
<a name="index-H-F"></a>
<p>The <kbd>F</kbd> (<code>calc-floor</code>) [<code>floor</code> or <code>ffloor</code>] command
truncates a real number to the next lower integer, i.e., toward minus
infinity.  Thus <kbd>3.6 F</kbd> produces 3, but <kbd>_3.6 F</kbd> produces
<i>-4</i>.
</p>
<a name="index-I-F"></a>
<a name="index-calc_002dceiling"></a>
<a name="index-ceil"></a>
<a name="index-fceil"></a>
<a name="index-H-I-F"></a>
<p>The <kbd>I F</kbd> (<code>calc-ceiling</code>) [<code>ceil</code> or <code>fceil</code>]
command truncates toward positive infinity.  Thus <kbd>3.6 I F</kbd> produces
4, and <kbd>_3.6 I F</kbd> produces <i>-3</i>.
</p>
<a name="index-R"></a>
<a name="index-calc_002dround"></a>
<a name="index-round"></a>
<a name="index-fround"></a>
<a name="index-H-R"></a>
<p>The <kbd>R</kbd> (<code>calc-round</code>) [<code>round</code> or <code>fround</code>] command
rounds to the nearest integer.  When the fractional part is .5 exactly,
this command rounds away from zero.  (All other rounding in the
Calculator uses this convention as well.)  Thus <kbd>3.5 R</kbd> produces 4
but <kbd>3.4 R</kbd> produces 3; <kbd>_3.5 R</kbd> produces <i>-4</i>.
</p>
<a name="index-I-R"></a>
<a name="index-calc_002dtrunc"></a>
<a name="index-trunc"></a>
<a name="index-ftrunc"></a>
<a name="index-H-I-R"></a>
<p>The <kbd>I R</kbd> (<code>calc-trunc</code>) [<code>trunc</code> or <code>ftrunc</code>]
command truncates toward zero.  In other words, it &ldquo;chops off&rdquo;
everything after the decimal point.  Thus <kbd>3.6 I R</kbd> produces 3 and
<kbd>_3.6 I R</kbd> produces <i>-3</i>.
</p>
<p>These functions may not be applied meaningfully to error forms, but they
do work for intervals.  As a convenience, applying <code>floor</code> to a
modulo form floors the value part of the form.  Applied to a vector,
these functions operate on all elements of the vector one by one.
Applied to a date form, they operate on the internal numerical
representation of dates, converting a date/time form into a pure date.
</p>
<a name="index-rounde"></a>
<a name="index-roundu"></a>
<a name="index-frounde"></a>
<a name="index-froundu"></a>
<p>There are two more rounding functions which can only be entered in
algebraic notation.  The <code>roundu</code> function is like <code>round</code>
except that it rounds up, toward plus infinity, when the fractional
part is .5.  This distinction matters only for negative arguments.
Also, <code>rounde</code> rounds to an even number in the case of a tie,
rounding up or down as necessary.  For example, &lsquo;<samp>rounde(3.5)</samp>&rsquo; and
&lsquo;<samp>rounde(4.5)</samp>&rsquo; both return 4, but &lsquo;<samp>rounde(5.5)</samp>&rsquo; returns 6.
The advantage of round-to-even is that the net error due to rounding
after a long calculation tends to cancel out to zero.  An important
subtle point here is that the number being fed to <code>rounde</code> will
already have been rounded to the current precision before <code>rounde</code>
begins.  For example, &lsquo;<samp>rounde(2.500001)</samp>&rsquo; with a current precision
of 6 will incorrectly, or at least surprisingly, yield 2 because the
argument will first have been rounded down to &lsquo;<samp>2.5</samp>&rsquo; (which
<code>rounde</code> sees as an exact tie between 2 and 3).
</p>
<p>Each of these functions, when written in algebraic formulas, allows
a second argument which specifies the number of digits after the
decimal point to keep.  For example, &lsquo;<samp>round(123.4567, 2)</samp>&rsquo; will
produce the answer 123.46, and &lsquo;<samp>round(123.4567, -1)</samp>&rsquo; will
produce 120 (i.e., the cutoff is one digit to the <em>left</em> of
the decimal point).  A second argument of zero is equivalent to
no second argument at all.
</p>
<a name="index-Fractional-part-of-a-number"></a>
<p>To compute the fractional part of a number (i.e., the amount which, when
added to &lsquo;<tt>floor(</tt><var>n</var><tt>)</tt>&rsquo;, will produce <var>n</var>) just take <var>n</var>
modulo 1 using the <code>%</code> command.
</p>
<p>Note also the <kbd>\</kbd> (integer quotient), <kbd>f I</kbd> (integer logarithm),
and <kbd>f Q</kbd> (integer square root) commands, which are analogous to
<kbd>/</kbd>, <kbd>B</kbd>, and <kbd>Q</kbd>, respectively, except that they take integer
arguments and return the result rounded down to an integer.
</p>
<hr>
<a name="Complex-Number-Functions"></a>
<div class="header">
<p>
Next: <a href="#Conversions" accesskey="n" rel="next">Conversions</a>, Previous: <a href="#Integer-Truncation" accesskey="p" rel="prev">Integer Truncation</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Complex-Number-Functions-1"></a>
<h3 class="section">7.3 Complex Number Functions</h3>

<p><a name="index-J"></a>
<a name="index-calc_002dconj"></a>
<a name="index-conj"></a>
The <kbd>J</kbd> (<code>calc-conj</code>) [<code>conj</code>] command computes the
complex conjugate of a number.  For complex number &lsquo;<samp>a+bi</samp>&rsquo;, the
complex conjugate is &lsquo;<samp>a-bi</samp>&rsquo;.  If the argument is a real number,
this command leaves it the same.  If the argument is a vector or matrix,
this command replaces each element by its complex conjugate.
</p>
<a name="index-G"></a>
<a name="index-calc_002dargument"></a>
<a name="index-arg"></a>
<p>The <kbd>G</kbd> (<code>calc-argument</code>) [<code>arg</code>] command computes the
&ldquo;argument&rdquo; or polar angle of a complex number.  For a number in polar
notation, this is simply the second component of the pair
&lsquo;<tt>(</tt><var>r</var><tt>;</tt><var>theta</var><tt>)</tt>&rsquo;.
The result is expressed according to the current angular mode and will
be in the range <i>-180</i> degrees (exclusive) to <i>+180</i> degrees
(inclusive), or the equivalent range in radians.
</p>
<a name="index-calc_002dimaginary"></a>
<p>The <code>calc-imaginary</code> command multiplies the number on the
top of the stack by the imaginary number &lsquo;<samp>i = (0,1)</samp>&rsquo;.  This
command is not normally bound to a key in Calc, but it is available
on the <tt class="key">IMAG</tt> button in Keypad mode.
</p>
<a name="index-f-r"></a>
<a name="index-calc_002dre"></a>
<a name="index-re"></a>
<p>The <kbd>f r</kbd> (<code>calc-re</code>) [<code>re</code>] command replaces a complex number
by its real part.  This command has no effect on real numbers.  (As an
added convenience, <code>re</code> applied to a modulo form extracts
the value part.)
</p>
<a name="index-f-i"></a>
<a name="index-calc_002dim"></a>
<a name="index-im"></a>
<p>The <kbd>f i</kbd> (<code>calc-im</code>) [<code>im</code>] command replaces a complex number
by its imaginary part; real numbers are converted to zero.  With a vector
or matrix argument, these functions operate element-wise.
</p>
<a name="index-v-p-_0028complex_0029"></a>
<a name="index-V-p-_0028complex_0029"></a>
<a name="index-calc_002dpack"></a>
<p>The <kbd>v p</kbd> (<code>calc-pack</code>) command can pack the top two numbers on
the stack into a composite object such as a complex number.  With
a prefix argument of <i>-1</i>, it produces a rectangular complex number;
with an argument of <i>-2</i>, it produces a polar complex number.
(Also, see <a href="#Building-Vectors">Building Vectors</a>.)
</p>
<a name="index-v-u-_0028complex_0029"></a>
<a name="index-V-u-_0028complex_0029"></a>
<a name="index-calc_002dunpack"></a>
<p>The <kbd>v u</kbd> (<code>calc-unpack</code>) command takes the complex number
(or other composite object) on the top of the stack and unpacks it
into its separate components.
</p>
<hr>
<a name="Conversions"></a>
<div class="header">
<p>
Next: <a href="#Date-Arithmetic" accesskey="n" rel="next">Date Arithmetic</a>, Previous: <a href="#Complex-Number-Functions" accesskey="p" rel="prev">Complex Number Functions</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conversions-1"></a>
<h3 class="section">7.4 Conversions</h3>

<p>The commands described in this section convert numbers from one form
to another; they are two-key sequences beginning with the letter <kbd>c</kbd>.
</p>
<a name="index-c-f"></a>
<a name="index-calc_002dfloat"></a>
<a name="index-pfloat"></a>
<p>The <kbd>c f</kbd> (<code>calc-float</code>) [<code>pfloat</code>] command converts the
number on the top of the stack to floating-point form.  For example,
&lsquo;<samp>23</samp>&rsquo; is converted to &lsquo;<samp>23.0</samp>&rsquo;, &lsquo;<samp>3:2</samp>&rsquo; is converted to
&lsquo;<samp>1.5</samp>&rsquo;, and &lsquo;<samp>2.3</samp>&rsquo; is left the same.  If the value is a composite
object such as a complex number or vector, each of the components is
converted to floating-point.  If the value is a formula, all numbers
in the formula are converted to floating-point.  Note that depending
on the current floating-point precision, conversion to floating-point
format may lose information.
</p>
<p>As a special exception, integers which appear as powers or subscripts
are not floated by <kbd>c f</kbd>.  If you really want to float a power,
you can use a <kbd>j s</kbd> command to select the power followed by <kbd>c f</kbd>.
Because <kbd>c f</kbd> cannot examine the formula outside of the selection,
it does not notice that the thing being floated is a power.
See <a href="#Selecting-Subformulas">Selecting Subformulas</a>.
</p>
<p>The normal <kbd>c f</kbd> command is &ldquo;pervasive&rdquo; in the sense that it
applies to all numbers throughout the formula.  The <code>pfloat</code>
algebraic function never stays around in a formula; &lsquo;<samp>pfloat(a + 1)</samp>&rsquo;
changes to &lsquo;<samp>a + 1.0</samp>&rsquo; as soon as it is evaluated.
</p>
<a name="index-H-c-f"></a>
<a name="index-float-2"></a>
<p>With the Hyperbolic flag, <kbd>H c f</kbd> [<code>float</code>] operates
only on the number or vector of numbers at the top level of its
argument.  Thus, &lsquo;<samp>float(1)</samp>&rsquo; is 1.0, but &lsquo;<samp>float(a + 1)</samp>&rsquo;
is left unevaluated because its argument is not a number.
</p>
<p>You should use <kbd>H c f</kbd> if you wish to guarantee that the final
value, once all the variables have been assigned, is a float; you
would use <kbd>c f</kbd> if you wish to do the conversion on the numbers
that appear right now.
</p>
<a name="index-c-F"></a>
<a name="index-calc_002dfraction"></a>
<a name="index-pfrac"></a>
<p>The <kbd>c F</kbd> (<code>calc-fraction</code>) [<code>pfrac</code>] command converts a
floating-point number into a fractional approximation.  By default, it
produces a fraction whose decimal representation is the same as the
input number, to within the current precision.  You can also give a
numeric prefix argument to specify a tolerance, either directly, or,
if the prefix argument is zero, by using the number on top of the stack
as the tolerance.  If the tolerance is a positive integer, the fraction
is correct to within that many significant figures.  If the tolerance is
a non-positive integer, it specifies how many digits fewer than the current
precision to use.  If the tolerance is a floating-point number, the
fraction is correct to within that absolute amount.
</p>
<a name="index-H-c-F"></a>
<a name="index-frac"></a>
<p>The <code>pfrac</code> function is pervasive, like <code>pfloat</code>.
There is also a non-pervasive version, <kbd>H c F</kbd> [<code>frac</code>],
which is analogous to <kbd>H c f</kbd> discussed above.
</p>
<a name="index-c-d"></a>
<a name="index-calc_002dto_002ddegrees"></a>
<a name="index-deg"></a>
<p>The <kbd>c d</kbd> (<code>calc-to-degrees</code>) [<code>deg</code>] command converts a
number into degrees form.  The value on the top of the stack may be an
HMS form (interpreted as degrees-minutes-seconds), or a real number which
will be interpreted in radians regardless of the current angular mode.
</p>
<a name="index-c-r"></a>
<a name="index-calc_002dto_002dradians"></a>
<a name="index-rad"></a>
<p>The <kbd>c r</kbd> (<code>calc-to-radians</code>) [<code>rad</code>] command converts an
HMS form or angle in degrees into an angle in radians.
</p>
<a name="index-c-h"></a>
<a name="index-calc_002dto_002dhms"></a>
<a name="index-hms"></a>
<p>The <kbd>c h</kbd> (<code>calc-to-hms</code>) [<code>hms</code>] command converts a real
number, interpreted according to the current angular mode, to an HMS
form describing the same angle.  In algebraic notation, the <code>hms</code>
function also accepts three arguments: &lsquo;<samp>hms(<var>h</var>, <var>m</var>, <var>s</var>)</samp>&rsquo;.
(The three-argument version is independent of the current angular mode.)
</p>
<a name="index-calc_002dfrom_002dhms"></a>
<p>The <code>calc-from-hms</code> command converts the HMS form on the top of the
stack into a real number according to the current angular mode.
</p>
<a name="index-c-p"></a>
<a name="index-I-c-p"></a>
<a name="index-calc_002dpolar"></a>
<a name="index-polar"></a>
<a name="index-rect"></a>
<p>The <kbd>c p</kbd> (<code>calc-polar</code>) command converts the complex number on
the top of the stack from polar to rectangular form, or from rectangular
to polar form, whichever is appropriate.  Real numbers are left the same.
This command is equivalent to the <code>rect</code> or <code>polar</code>
functions in algebraic formulas, depending on the direction of
conversion.  (It uses <code>polar</code>, except that if the argument is
already a polar complex number, it uses <code>rect</code> instead.  The
<kbd>I c p</kbd> command always uses <code>rect</code>.)
</p>
<a name="index-c-c"></a>
<a name="index-calc_002dclean"></a>
<a name="index-pclean"></a>
<p>The <kbd>c c</kbd> (<code>calc-clean</code>) [<code>pclean</code>] command &ldquo;cleans&rdquo; the
number on the top of the stack.  Floating point numbers are re-rounded
according to the current precision.  Polar numbers whose angular
components have strayed from the <i>-180</i> to <i>+180</i> degree range
are normalized.  (Note that results will be undesirable if the current
angular mode is different from the one under which the number was
produced!)  Integers and fractions are generally unaffected by this
operation.  Vectors and formulas are cleaned by cleaning each component
number (i.e., pervasively).
</p>
<p>If the simplification mode is set below basic simplification, it is raised
for the purposes of this command.  Thus, <kbd>c c</kbd> applies the basic
simplifications even if their automatic application is disabled.
See <a href="#Simplification-Modes">Simplification Modes</a>.
</p>
<a name="index-Roundoff-errors_002c-correcting"></a>
<p>A numeric prefix argument to <kbd>c c</kbd> sets the floating-point precision
to that value for the duration of the command.  A positive prefix (of at
least 3) sets the precision to the specified value; a negative or zero
prefix decreases the precision by the specified amount.
</p>
<a name="index-c-0_002d9"></a>
<a name="index-calc_002dclean_002dnum"></a>
<p>The keystroke sequences <kbd>c 0</kbd> through <kbd>c 9</kbd> are equivalent
to <kbd>c c</kbd> with the corresponding negative prefix argument.  If roundoff
errors have changed 2.0 into 1.999999, typing <kbd>c 1</kbd> to clip off one
decimal place often conveniently does the trick.
</p>
<p>The <kbd>c c</kbd> command with a numeric prefix argument, and the <kbd>c 0</kbd>
through <kbd>c 9</kbd> commands, also &ldquo;clip&rdquo; very small floating-point
numbers to zero.  If the exponent is less than or equal to the negative
of the specified precision, the number is changed to 0.0.  For example,
if the current precision is 12, then <kbd>c 2</kbd> changes the vector
&lsquo;<samp>[1e-8, 1e-9, 1e-10, 1e-11]</samp>&rsquo; to &lsquo;<samp>[1e-8, 1e-9, 0, 0]</samp>&rsquo;.
Numbers this small generally arise from roundoff noise.
</p>
<p>If the numbers you are using really are legitimately this small,
you should avoid using the <kbd>c 0</kbd> through <kbd>c 9</kbd> commands.
(The plain <kbd>c c</kbd> command rounds to the current precision but
does not clip small numbers.)
</p>
<p>One more property of <kbd>c 0</kbd> through <kbd>c 9</kbd>, and of <kbd>c c</kbd> with
a prefix argument, is that integer-valued floats are converted to
plain integers, so that <kbd>c 1</kbd> on &lsquo;<samp>[1., 1.5, 2., 2.5, 3.]</samp>&rsquo;
produces &lsquo;<samp>[1, 1.5, 2, 2.5, 3]</samp>&rsquo;.  This is not done for huge
numbers (&lsquo;<samp>1e100</samp>&rsquo; is technically an integer-valued float, but
you wouldn&rsquo;t want it automatically converted to a 100-digit integer).
</p>
<a name="index-H-c-0_002d9"></a>
<a name="index-H-c-c"></a>
<a name="index-clean"></a>
<p>With the Hyperbolic flag, <kbd>H c c</kbd> and <kbd>H c 0</kbd> through <kbd>H c 9</kbd>
operate non-pervasively [<code>clean</code>].
</p>
<hr>
<a name="Date-Arithmetic"></a>
<div class="header">
<p>
Next: <a href="#Financial-Functions" accesskey="n" rel="next">Financial Functions</a>, Previous: <a href="#Conversions" accesskey="p" rel="prev">Conversions</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Arithmetic-1"></a>
<h3 class="section">7.5 Date Arithmetic</h3>

<p><a name="index-Date-arithmetic_002c-additional-functions"></a>
The commands described in this section perform various conversions
and calculations involving date forms (see <a href="#Date-Forms">Date Forms</a>).  They
use the <kbd>t</kbd> (for time/date) prefix key followed by shifted
letters.
</p>
<p>The simplest date arithmetic is done using the regular <kbd>+</kbd> and <kbd>-</kbd>
commands.  In particular, adding a number to a date form advances the
date form by a certain number of days; adding an HMS form to a date
form advances the date by a certain amount of time; and subtracting two
date forms produces a difference measured in days.  The commands
described here provide additional, more specialized operations on dates.
</p>
<p>Many of these commands accept a numeric prefix argument; if you give
plain <kbd>C-u</kbd> as the prefix, these commands will instead take the
additional argument from the top of the stack.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Date-Conversions" accesskey="1">Date Conversions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Date-Functions" accesskey="2">Date Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Time-Zones" accesskey="3">Time Zones</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Business-Days" accesskey="4">Business Days</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Date-Conversions"></a>
<div class="header">
<p>
Next: <a href="#Date-Functions" accesskey="n" rel="next">Date Functions</a>, Previous: <a href="#Date-Arithmetic" accesskey="p" rel="prev">Date Arithmetic</a>, Up: <a href="#Date-Arithmetic" accesskey="u" rel="up">Date Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Conversions-1"></a>
<h4 class="subsection">7.5.1 Date Conversions</h4>

<p><a name="index-t-D"></a>
<a name="index-calc_002ddate"></a>
<a name="index-date"></a>
The <kbd>t D</kbd> (<code>calc-date</code>) [<code>date</code>] command converts a
date form into a number, measured in days since Jan 1, 1 AD.  The
result will be an integer if <var>date</var> is a pure date form, or a
fraction or float if <var>date</var> is a date/time form.  Or, if its
argument is a number, it converts this number into a date form.
</p>
<p>With a numeric prefix argument, <kbd>t D</kbd> takes that many objects
(up to six) from the top of the stack and interprets them in one
of the following ways:
</p>
<p>The &lsquo;<samp>date(<var>year</var>, <var>month</var>, <var>day</var>)</samp>&rsquo; function
builds a pure date form out of the specified year, month, and
day, which must all be integers.  <var>Year</var> is a year number,
such as 1991 (<em>not</em> the same as 91!).  <var>Month</var> must be
an integer in the range 1 to 12; <var>day</var> must be in the range
1 to 31.  If the specified month has fewer than 31 days and
<var>day</var> is too large, the equivalent day in the following
month will be used.
</p>
<p>The &lsquo;<samp>date(<var>month</var>, <var>day</var>)</samp>&rsquo; function builds a
pure date form using the current year, as determined by the
real-time clock.
</p>
<p>The &lsquo;<samp>date(<var>year</var>, <var>month</var>, <var>day</var>, <var>hms</var>)</samp>&rsquo;
function builds a date/time form using an <var>hms</var> form.
</p>
<p>The &lsquo;<samp>date(<var>year</var>, <var>month</var>, <var>day</var>, <var>hour</var>,
<var>minute</var>, <var>second</var>)</samp>&rsquo; function builds a date/time form.
<var>hour</var> should be an integer in the range 0 to 23;
<var>minute</var> should be an integer in the range 0 to 59;
<var>second</var> should be any real number in the range &lsquo;<samp>[0 .. 60)</samp>&rsquo;.
The last two arguments default to zero if omitted.
</p>
<a name="index-t-J"></a>
<a name="index-calc_002djulian"></a>
<a name="index-julian"></a>
<a name="index-Julian-day-counts_002c-conversions"></a>
<p>The <kbd>t J</kbd> (<code>calc-julian</code>) [<code>julian</code>] command converts
a date form into a Julian day count, which is the number of days
since noon (GMT) on Jan 1, 4713 BC.  A pure date is converted to an
integer Julian count representing noon of that day.  A date/time form
is converted to an exact floating-point Julian count, adjusted to
interpret the date form in the current time zone but the Julian
day count in Greenwich Mean Time.  A numeric prefix argument allows
you to specify the time zone; see <a href="#Time-Zones">Time Zones</a>.  Use a prefix of
zero to suppress the time zone adjustment.  Note that pure date forms
are never time-zone adjusted.
</p>
<p>This command can also do the opposite conversion, from a Julian day
count (either an integer day, or a floating-point day and time in
the GMT zone), into a pure date form or a date/time form in the
current or specified time zone.
</p>
<a name="index-t-U"></a>
<a name="index-calc_002dunix_002dtime"></a>
<a name="index-unixtime"></a>
<a name="index-Unix-time-format_002c-conversions"></a>
<p>The <kbd>t U</kbd> (<code>calc-unix-time</code>) [<code>unixtime</code>] command
converts a date form into a Unix time value, which is the number of
seconds since midnight on Jan 1, 1970, or vice-versa.  The numeric result
will be an integer if the current precision is 12 or less; for higher
precision, the result may be a float with (<var>precision</var>-12)
digits after the decimal.  Just as for <kbd>t J</kbd>, the numeric time
is interpreted in the GMT time zone and the date form is interpreted
in the current or specified zone.  Some systems use Unix-like
numbering but with the local time zone; give a prefix of zero to
suppress the adjustment if so.
</p>
<a name="index-t-C"></a>
<a name="index-calc_002dconvert_002dtime_002dzones"></a>
<a name="index-tzconv"></a>
<a name="index-Time-Zones_002c-converting-between"></a>
<p>The <kbd>t C</kbd> (<code>calc-convert-time-zones</code>) [<code>tzconv</code>]
command converts a date form from one time zone to another.  You
are prompted for each time zone name in turn; you can answer with
any suitable Calc time zone expression (see <a href="#Time-Zones">Time Zones</a>).
If you answer either prompt with a blank line, the local time
zone is used for that prompt.  You can also answer the first
prompt with <kbd>$</kbd> to take the two time zone names from the
stack (and the date to be converted from the third stack level).
</p>
<hr>
<a name="Date-Functions"></a>
<div class="header">
<p>
Next: <a href="#Business-Days" accesskey="n" rel="next">Business Days</a>, Previous: <a href="#Date-Conversions" accesskey="p" rel="prev">Date Conversions</a>, Up: <a href="#Date-Arithmetic" accesskey="u" rel="up">Date Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Date-Functions-1"></a>
<h4 class="subsection">7.5.2 Date Functions</h4>

<p><a name="index-t-N"></a>
<a name="index-calc_002dnow"></a>
<a name="index-now"></a>
The <kbd>t N</kbd> (<code>calc-now</code>) [<code>now</code>] command pushes the
current date and time on the stack as a date form.  The time is
reported in terms of the specified time zone; with no numeric prefix
argument, <kbd>t N</kbd> reports for the current time zone.
</p>
<a name="index-t-P"></a>
<a name="index-calc_002ddate_002dpart"></a>
<p>The <kbd>t P</kbd> (<code>calc-date-part</code>) command extracts one part
of a date form.  The prefix argument specifies the part; with no
argument, this command prompts for a part code from 1 to 9.
The various part codes are described in the following paragraphs.
</p>
<a name="index-year"></a>
<p>The <kbd>M-1 t P</kbd> [<code>year</code>] function extracts the year number
from a date form as an integer, e.g., 1991.  This and the
following functions will also accept a real number for an
argument, which is interpreted as a standard Calc day number.
Note that this function will never return zero, since the year
1 BC immediately precedes the year 1 AD.
</p>
<a name="index-month"></a>
<p>The <kbd>M-2 t P</kbd> [<code>month</code>] function extracts the month number
from a date form as an integer in the range 1 to 12.
</p>
<a name="index-day"></a>
<p>The <kbd>M-3 t P</kbd> [<code>day</code>] function extracts the day number
from a date form as an integer in the range 1 to 31.
</p>
<a name="index-hour"></a>
<p>The <kbd>M-4 t P</kbd> [<code>hour</code>] function extracts the hour from
a date form as an integer in the range 0 (midnight) to 23.  Note
that 24-hour time is always used.  This returns zero for a pure
date form.  This function (and the following two) also accept
HMS forms as input.
</p>
<a name="index-minute"></a>
<p>The <kbd>M-5 t P</kbd> [<code>minute</code>] function extracts the minute
from a date form as an integer in the range 0 to 59.
</p>
<a name="index-second"></a>
<p>The <kbd>M-6 t P</kbd> [<code>second</code>] function extracts the second
from a date form.  If the current precision is 12 or less,
the result is an integer in the range 0 to 59.  For higher
precision, the result may instead be a floating-point number.
</p>
<a name="index-weekday"></a>
<p>The <kbd>M-7 t P</kbd> [<code>weekday</code>] function extracts the weekday
number from a date form as an integer in the range 0 (Sunday)
to 6 (Saturday).
</p>
<a name="index-yearday"></a>
<p>The <kbd>M-8 t P</kbd> [<code>yearday</code>] function extracts the day-of-year
number from a date form as an integer in the range 1 (January 1)
to 366 (December 31 of a leap year).
</p>
<a name="index-time"></a>
<p>The <kbd>M-9 t P</kbd> [<code>time</code>] function extracts the time portion
of a date form as an HMS form.  This returns &lsquo;<samp>0@ 0' 0&quot;</samp>&rsquo;
for a pure date form.
</p>
<a name="index-t-M"></a>
<a name="index-calc_002dnew_002dmonth"></a>
<a name="index-newmonth"></a>
<p>The <kbd>t M</kbd> (<code>calc-new-month</code>) [<code>newmonth</code>] command
computes a new date form that represents the first day of the month
specified by the input date.  The result is always a pure date
form; only the year and month numbers of the input are retained.
With a numeric prefix argument <var>n</var> in the range from 1 to 31,
<kbd>t M</kbd> computes the <var>n</var>th day of the month.  (If <var>n</var>
is greater than the actual number of days in the month, or if
<var>n</var> is zero, the last day of the month is used.)
</p>
<a name="index-t-Y"></a>
<a name="index-calc_002dnew_002dyear"></a>
<a name="index-newyear"></a>
<p>The <kbd>t Y</kbd> (<code>calc-new-year</code>) [<code>newyear</code>] command
computes a new pure date form that represents the first day of
the year specified by the input.  The month, day, and time
of the input date form are lost.  With a numeric prefix argument
<var>n</var> in the range from 1 to 366, <kbd>t Y</kbd> computes the
<var>n</var>th day of the year (366 is treated as 365 in non-leap
years).  A prefix argument of 0 computes the last day of the
year (December 31).  A negative prefix argument from <i>-1</i> to
<i>-12</i> computes the first day of the <var>n</var>th month of the year.
</p>
<a name="index-t-W"></a>
<a name="index-calc_002dnew_002dweek"></a>
<a name="index-newweek"></a>
<p>The <kbd>t W</kbd> (<code>calc-new-week</code>) [<code>newweek</code>] command
computes a new pure date form that represents the Sunday on or before
the input date.  With a numeric prefix argument, it can be made to
use any day of the week as the starting day; the argument must be in
the range from 0 (Sunday) to 6 (Saturday).  This function always
subtracts between 0 and 6 days from the input date.
</p>
<p>Here&rsquo;s an example use of <code>newweek</code>:  Find the date of the next
Wednesday after a given date.  Using <kbd>M-3 t W</kbd> or &lsquo;<samp>newweek(d, 3)</samp>&rsquo;
will give you the <em>preceding</em> Wednesday, so &lsquo;<samp>newweek(d+7, 3)</samp>&rsquo;
will give you the following Wednesday.  A further look at the definition
of <code>newweek</code> shows that if the input date is itself a Wednesday,
this formula will return the Wednesday one week in the future.  An
exercise for the reader is to modify this formula to yield the same day
if the input is already a Wednesday.  Another interesting exercise is
to preserve the time-of-day portion of the input (<code>newweek</code> resets
the time to midnight; hint: how can <code>newweek</code> be defined in terms
of the <code>weekday</code> function?).
</p>
<a name="index-pwday"></a>
<p>The &lsquo;<samp>pwday(<var>date</var>)</samp>&rsquo; function (not on any key) computes the
day-of-month number of the Sunday on or before <var>date</var>.  With
two arguments, &lsquo;<samp>pwday(<var>date</var>, <var>day</var>)</samp>&rsquo; computes the day
number of the Sunday on or before day number <var>day</var> of the month
specified by <var>date</var>.  The <var>day</var> must be in the range from
7 to 31; if the day number is greater than the actual number of days
in the month, the true number of days is used instead.  Thus
&lsquo;<samp>pwday(<var>date</var>, 7)</samp>&rsquo; finds the first Sunday of the month, and
&lsquo;<samp>pwday(<var>date</var>, 31)</samp>&rsquo; finds the last Sunday of the month.
With a third <var>weekday</var> argument, <code>pwday</code> can be made to look
for any day of the week instead of Sunday.
</p>
<a name="index-t-I"></a>
<a name="index-calc_002dinc_002dmonth"></a>
<a name="index-incmonth"></a>
<p>The <kbd>t I</kbd> (<code>calc-inc-month</code>) [<code>incmonth</code>] command
increases a date form by one month, or by an arbitrary number of
months specified by a numeric prefix argument.  The time portion,
if any, of the date form stays the same.  The day also stays the
same, except that if the new month has fewer days the day
number may be reduced to lie in the valid range.  For example,
&lsquo;<samp>incmonth(&lt;Jan 31, 1991&gt;)</samp>&rsquo; produces &lsquo;<samp>&lt;Feb 28, 1991&gt;</samp>&rsquo;.
Because of this, <kbd>t I t I</kbd> and <kbd>M-2 t I</kbd> do not always give
the same results (&lsquo;<samp>&lt;Mar 28, 1991&gt;</samp>&rsquo; versus &lsquo;<samp>&lt;Mar 31, 1991&gt;</samp>&rsquo;
in this case).
</p>
<a name="index-incyear"></a>
<p>The &lsquo;<samp>incyear(<var>date</var>, <var>step</var>)</samp>&rsquo; function increases
a date form by the specified number of years, which may be
any positive or negative integer.  Note that &lsquo;<samp>incyear(d, n)</samp>&rsquo;
is equivalent to &lsquo;<samp>incmonth(d,&nbsp;12*n)</samp>&rsquo;<!-- /@w -->, but these do not have
simple equivalents in terms of day arithmetic because
months and years have varying lengths.  If the <var>step</var>
argument is omitted, 1 year is assumed.  There is no keyboard
command for this function; use <kbd>C-u 12 t I</kbd> instead.
</p>
<p>There is no <code>newday</code> function at all because <kbd>F</kbd> [<code>floor</code>]
serves this purpose.  Similarly, instead of <code>incday</code> and
<code>incweek</code> simply use &lsquo;<samp>d + n</samp>&rsquo; or &lsquo;<samp>d + 7 n</samp>&rsquo;.
</p>
<p>See <a href="#Basic-Arithmetic">Basic Arithmetic</a>, for the <kbd>f ]</kbd> [<code>incr</code>] command
which can adjust a date/time form by a certain number of seconds.
</p>
<hr>
<a name="Business-Days"></a>
<div class="header">
<p>
Next: <a href="#Time-Zones" accesskey="n" rel="next">Time Zones</a>, Previous: <a href="#Date-Functions" accesskey="p" rel="prev">Date Functions</a>, Up: <a href="#Date-Arithmetic" accesskey="u" rel="up">Date Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Business-Days-1"></a>
<h4 class="subsection">7.5.3 Business Days</h4>

<p>Often time is measured in &ldquo;business days&rdquo; or &ldquo;working days,&rdquo;
where weekends and holidays are skipped.  Calc&rsquo;s normal date
arithmetic functions use calendar days, so that subtracting two
consecutive Mondays will yield a difference of 7 days.  By contrast,
subtracting two consecutive Mondays would yield 5 business days
(assuming two-day weekends and the absence of holidays).
</p>
<a name="index-t-_002b"></a>
<a name="index-t-_002d"></a>
<a name="index-badd"></a>
<a name="index-bsub"></a>
<a name="index-calc_002dbusiness_002ddays_002dplus"></a>
<a name="index-calc_002dbusiness_002ddays_002dminus"></a>
<p>The <kbd>t +</kbd> (<code>calc-business-days-plus</code>) [<code>badd</code>]
and <kbd>t -</kbd> (<code>calc-business-days-minus</code>) [<code>bsub</code>]
commands perform arithmetic using business days.  For <kbd>t +</kbd>,
one argument must be a date form and the other must be a real
number (positive or negative).  If the number is not an integer,
then a certain amount of time is added as well as a number of
days; for example, adding 0.5 business days to a time in Friday
evening will produce a time in Monday morning.  It is also
possible to add an HMS form; adding &lsquo;<samp>12@ 0' 0&quot;</samp>&rsquo; also adds
half a business day.  For <kbd>t -</kbd>, the arguments are either a
date form and a number or HMS form, or two date forms, in which
case the result is the number of business days between the two
dates.
</p>
<a name="index-Holidays-variable"></a>
<a name="index-Holidays"></a>
<p>By default, Calc considers any day that is not a Saturday or
Sunday to be a business day.  You can define any number of
additional holidays by editing the variable <code>Holidays</code>.
(There is an <kbd>s&nbsp;H</kbd><!-- /@w --> convenience command for editing this
variable.)  Initially, <code>Holidays</code> contains the vector
&lsquo;<samp>[sat, sun]</samp>&rsquo;.  Entries in the <code>Holidays</code> vector may
be any of the following kinds of objects:
</p>
<ul>
<li> Date forms (pure dates, not date/time forms).  These specify
particular days which are to be treated as holidays.

</li><li> Intervals of date forms.  These specify a range of days, all of
which are holidays (e.g., Christmas week).  See <a href="#Interval-Forms">Interval Forms</a>.

</li><li> Nested vectors of date forms.  Each date form in the vector is
considered to be a holiday.

</li><li> Any Calc formula which evaluates to one of the above three things.
If the formula involves the variable &lsquo;<samp>y</samp>&rsquo;, it stands for a
yearly repeating holiday; &lsquo;<samp>y</samp>&rsquo; will take on various year
numbers like 1992.  For example, &lsquo;<samp>date(y, 12, 25)</samp>&rsquo; specifies
Christmas day, and &lsquo;<samp>newweek(date(y, 11, 7), 4) + 21</samp>&rsquo; specifies
Thanksgiving (which is held on the fourth Thursday of November).
If the formula involves the variable &lsquo;<samp>m</samp>&rsquo;, that variable
takes on month numbers from 1 to 12:  &lsquo;<samp>date(y, m, 15)</samp>&rsquo; is
a holiday that takes place on the 15th of every month.

</li><li> A weekday name, such as <code>sat</code> or <code>sun</code>.  This is really
a variable whose name is a three-letter, lower-case day name.

</li><li> An interval of year numbers (integers).  This specifies the span of
years over which this holiday list is to be considered valid.  Any
business-day arithmetic that goes outside this range will result
in an error message.  Use this if you are including an explicit
list of holidays, rather than a formula to generate them, and you
want to make sure you don&rsquo;t accidentally go beyond the last point
where the holidays you entered are complete.  If there is no
limiting interval in the <code>Holidays</code> vector, the default
&lsquo;<samp>[1 .. 2737]</samp>&rsquo; is used.  (This is the absolute range of years
for which Calc&rsquo;s business-day algorithms will operate.)

</li><li> An interval of HMS forms.  This specifies the span of hours that
are to be considered one business day.  For example, if this
range is &lsquo;<samp>[9@ 0' 0&quot; .. 17@ 0' 0&quot;]</samp>&rsquo; (i.e., 9am to 5pm), then
the business day is only eight hours long, so that <kbd>1.5 t +</kbd>
on &lsquo;<samp>&lt;4:00pm Fri Dec 13, 1991&gt;</samp>&rsquo; will add one business day and
four business hours to produce &lsquo;<samp>&lt;12:00pm Tue Dec 17, 1991&gt;</samp>&rsquo;.
Likewise, <kbd>t -</kbd> will now express differences in time as
fractions of an eight-hour day.  Times before 9am will be treated
as 9am by business date arithmetic, and times at or after 5pm will
be treated as 4:59:59pm.  If there is no HMS interval in <code>Holidays</code>,
the full 24-hour day &lsquo;<samp>[0&nbsp;0' 0&quot; .. 24&nbsp;0' 0&quot;]</samp>&rsquo; is assumed.
(Regardless of the type of bounds you specify, the interval is
treated as inclusive on the low end and exclusive on the high end,
so that the work day goes from 9am up to, but not including, 5pm.)
</li></ul>

<p>If the <code>Holidays</code> vector is empty, then <kbd>t +</kbd> and
<kbd>t -</kbd> will act just like <kbd>+</kbd> and <kbd>-</kbd> because there will
then be no difference between business days and calendar days.
</p>
<p>Calc expands the intervals and formulas you give into a complete
list of holidays for internal use.  This is done mainly to make
sure it can detect multiple holidays.  (For example,
&lsquo;<samp>&lt;Jan 1, 1989&gt;</samp>&rsquo; is both New Year&rsquo;s Day and a Sunday, but
Calc&rsquo;s algorithms take care to count it only once when figuring
the number of holidays between two dates.)
</p>
<p>Since the complete list of holidays for all the years from 1 to
2737 would be huge, Calc actually computes only the part of the
list between the smallest and largest years that have been involved
in business-day calculations so far.  Normally, you won&rsquo;t have to
worry about this.  Keep in mind, however, that if you do one
calculation for 1992, and another for 1792, even if both involve
only a small range of years, Calc will still work out all the
holidays that fall in that 200-year span.
</p>
<p>If you add a (positive) number of days to a date form that falls on a
weekend or holiday, the date form is treated as if it were the most
recent business day.  (Thus adding one business day to a Friday,
Saturday, or Sunday will all yield the following Monday.)  If you
subtract a number of days from a weekend or holiday, the date is
effectively on the following business day.  (So subtracting one business
day from Saturday, Sunday, or Monday yields the preceding Friday.)  The
difference between two dates one or both of which fall on holidays
equals the number of actual business days between them.  These
conventions are consistent in the sense that, if you add <var>n</var>
business days to any date, the difference between the result and the
original date will come out to <var>n</var> business days.  (It can&rsquo;t be
completely consistent though; a subtraction followed by an addition
might come out a bit differently, since <kbd>t +</kbd> is incapable of
producing a date that falls on a weekend or holiday.)
</p>
<a name="index-holiday"></a>
<p>There is a <code>holiday</code> function, not on any keys, that takes
any date form and returns 1 if that date falls on a weekend or
holiday, as defined in <code>Holidays</code>, or 0 if the date is a
business day.
</p>
<hr>
<a name="Time-Zones"></a>
<div class="header">
<p>
Previous: <a href="#Business-Days" accesskey="p" rel="prev">Business Days</a>, Up: <a href="#Date-Arithmetic" accesskey="u" rel="up">Date Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Time-Zones-1"></a>
<h4 class="subsection">7.5.4 Time Zones</h4>

<p><a name="index-Time-zones"></a>
<a name="index-Daylight-saving-time"></a>
Time zones and daylight saving time are a complicated business.
The conversions to and from Julian and Unix-style dates automatically
compute the correct time zone and daylight saving adjustment to use,
provided they can figure out this information.  This section describes
Calc&rsquo;s time zone adjustment algorithm in detail, in case you want to
do conversions in different time zones or in case Calc&rsquo;s algorithms
can&rsquo;t determine the right correction to use.
</p>
<p>Adjustments for time zones and daylight saving time are done by
<kbd>t U</kbd>, <kbd>t J</kbd>, <kbd>t N</kbd>, and <kbd>t C</kbd>, but not by any other
commands.  In particular, &lsquo;<samp>&lt;may 1 1991&gt; - &lt;apr 1 1991&gt;</samp>&rsquo; evaluates
to exactly 30 days even though there is a daylight-saving
transition in between.  This is also true for Julian pure dates:
&lsquo;<samp>julian(&lt;may 1 1991&gt;) - julian(&lt;apr 1 1991&gt;)</samp>&rsquo;.  But Julian
and Unix date/times will adjust for daylight saving time:  using Calc&rsquo;s
default daylight saving time rule (see the explanation below),
&lsquo;<samp>julian(&lt;12am may 1 1991&gt;) - julian(&lt;12am apr 1 1991&gt;)</samp>&rsquo;
evaluates to &lsquo;<samp>29.95833</samp>&rsquo; (that&rsquo;s 29 days and 23 hours)
because one hour was lost when daylight saving commenced on
April 7, 1991.
</p>
<p>In brief, the idiom &lsquo;<samp>julian(<var>date1</var>) - julian(<var>date2</var>)</samp>&rsquo;
computes the actual number of 24-hour periods between two dates, whereas
&lsquo;<samp><var>date1</var> - <var>date2</var></samp>&rsquo; computes the number of calendar
days between two dates without taking daylight saving into account.
</p>
<a name="index-calc_002dtime_002dzone"></a>
<a name="index-tzone"></a>
<p>The <code>calc-time-zone</code> [<code>tzone</code>] command converts the time
zone specified by its numeric prefix argument into a number of
seconds difference from Greenwich mean time (GMT).  If the argument
is a number, the result is simply that value multiplied by 3600.
Typical arguments for North America are 5 (Eastern) or 8 (Pacific).  If
Daylight Saving time is in effect, one hour should be subtracted from
the normal difference.
</p>
<p>If you give a prefix of plain <kbd>C-u</kbd>, <code>calc-time-zone</code> (like other
date arithmetic commands that include a time zone argument) takes the
zone argument from the top of the stack.  (In the case of <kbd>t J</kbd>
and <kbd>t U</kbd>, the normal argument is then taken from the second-to-top
stack position.)  This allows you to give a non-integer time zone
adjustment.  The time-zone argument can also be an HMS form, or
it can be a variable which is a time zone name in upper- or lower-case.
For example &lsquo;<samp>tzone(PST) = tzone(8)</samp>&rsquo; and &lsquo;<samp>tzone(pdt) = tzone(7)</samp>&rsquo;
(for Pacific standard and daylight saving times, respectively).
</p>
<p>North American and European time zone names are defined as follows;
note that for each time zone there is one name for standard time,
another for daylight saving time, and a third for &ldquo;generalized&rdquo; time
in which the daylight saving adjustment is computed from context.
</p>
<div class="smallexample">
<pre class="smallexample">YST  PST  MST  CST  EST  AST    NST    GMT   WET     MET    MEZ
 9    8    7    6    5    4     3.5     0     -1      -2     -2

YDT  PDT  MDT  CDT  EDT  ADT    NDT    BST  WETDST  METDST  MESZ
 8    7    6    5    4    3     2.5     -1    -2      -3     -3

YGT  PGT  MGT  CGT  EGT  AGT    NGT    BGT   WEGT    MEGT   MEGZ
9/8  8/7  7/6  6/5  5/4  4/3  3.5/2.5  0/-1 -1/-2   -2/-3  -2/-3
</pre></div>

<a name="index-math_002dtzone_002dnames"></a>
<p>To define time zone names that do not appear in the above table,
you must modify the Lisp variable <code>math-tzone-names</code>.  This
is a list of lists describing the different time zone names; its
structure is best explained by an example.  The three entries for
Pacific Time look like this:
</p>
<div class="smallexample">
<pre class="smallexample">( ( &quot;PST&quot; 8 0 )    ; Name as an upper-case string, then standard
  ( &quot;PDT&quot; 8 -1 )   ; adjustment, then daylight saving adjustment.
  ( &quot;PGT&quot; 8 &quot;PST&quot; &quot;PDT&quot; ) )   ; Generalized time zone.
</pre></div>

<a name="index-TimeZone-variable"></a>
<a name="index-TimeZone"></a>
<p>With no arguments, <code>calc-time-zone</code> or &lsquo;<samp>tzone()</samp>&rsquo; will by
default get the time zone and daylight saving information from the
calendar (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Daylight-Saving">The Calendar and the Diary</a> in <cite>The GNU Emacs Manual</cite>).  To use a different time zone, or if the
calendar does not give the desired result, you can set the Calc variable
<code>TimeZone</code> (which is by default <code>nil</code>) to an appropriate
time zone name.  (The easiest way to do this is to edit the
<code>TimeZone</code> variable using Calc&rsquo;s <kbd>s T</kbd> command, then use the
<kbd>s p</kbd> (<code>calc-permanent-variable</code>) command to save the value of
<code>TimeZone</code> permanently.)
If the time zone given by <code>TimeZone</code> is a generalized time zone,
e.g., <code>EGT</code>, Calc examines the date being converted to tell whether
to use standard or daylight saving time.  But if the current time zone
is explicit, e.g., <code>EST</code> or <code>EDT</code>, then that adjustment is
used exactly and Calc&rsquo;s daylight saving algorithm is not consulted.
The special time zone name <code>local</code>
is equivalent to no argument; i.e., it uses the information obtained
from the calendar.
</p>
<p>The <kbd>t J</kbd> and <code>t U</code> commands with no numeric prefix
arguments do the same thing as &lsquo;<samp>tzone()</samp>&rsquo;; namely, use the
information from the calendar if <code>TimeZone</code> is <code>nil</code>,
otherwise use the time zone given by <code>TimeZone</code>.
</p>
<a name="index-math_002ddaylight_002dsavings_002dhook"></a>
<a name="index-math_002dstd_002ddaylight_002dsavings"></a>
<p>When Calc computes the daylight saving information itself (i.e., when
the <code>TimeZone</code> variable is set), it will by default consider
daylight saving time to begin at 2 a.m. on the second Sunday of March
(for years from 2007 on) or on the last Sunday in April (for years
before 2007), and to end at 2 a.m. on the first Sunday of
November. (for years from 2007 on) or the last Sunday in October (for
years before 2007).  These are the rules that have been in effect in
much of North America since 1966 and take into account the rule change
that began in 2007.  If you are in a country that uses different rules
for computing daylight saving time, you have two choices: Write your own
daylight saving hook, or control time zones explicitly by setting the
<code>TimeZone</code> variable and/or always giving a time-zone argument for
the conversion functions.
</p>
<p>The Lisp variable <code>math-daylight-savings-hook</code> holds the
name of a function that is used to compute the daylight saving
adjustment for a given date.  The default is
<code>math-std-daylight-savings</code>, which computes an adjustment
(either 0 or <i>-1</i>) using the North American rules given above.
</p>
<p>The daylight saving hook function is called with four arguments:
The date, as a floating-point number in standard Calc format;
a six-element list of the date decomposed into year, month, day,
hour, minute, and second, respectively; a string which contains
the generalized time zone name in upper-case, e.g., <code>&quot;WEGT&quot;</code>;
and a special adjustment to be applied to the hour value when
converting into a generalized time zone (see below).
</p>
<a name="index-math_002dprev_002dweekday_002din_002dmonth"></a>
<p>The Lisp function <code>math-prev-weekday-in-month</code> is useful for
daylight saving computations.  This is an internal version of
the user-level <code>pwday</code> function described in the previous
section. It takes four arguments:  The floating-point date value,
the corresponding six-element date list, the day-of-month number,
and the weekday number (0&ndash;6).
</p>
<p>The default daylight saving hook ignores the time zone name, but a
more sophisticated hook could use different algorithms for different
time zones.  It would also be possible to use different algorithms
depending on the year number, but the default hook always uses the
algorithm for 1987 and later.  Here is a listing of the default
daylight saving hook:
</p>
<div class="smallexample">
<pre class="smallexample">(defun math-std-daylight-savings (date dt zone bump)
  (cond ((&lt; (nth 1 dt) 4) 0)
        ((= (nth 1 dt) 4)
         (let ((sunday (math-prev-weekday-in-month date dt 7 0)))
           (cond ((&lt; (nth 2 dt) sunday) 0)
                 ((= (nth 2 dt) sunday)
                  (if (&gt;= (nth 3 dt) (+ 3 bump)) -1 0))
                 (t -1))))
        ((&lt; (nth 1 dt) 10) -1)
        ((= (nth 1 dt) 10)
         (let ((sunday (math-prev-weekday-in-month date dt 31 0)))
           (cond ((&lt; (nth 2 dt) sunday) -1)
                 ((= (nth 2 dt) sunday)
                  (if (&gt;= (nth 3 dt) (+ 2 bump)) 0 -1))
                 (t 0))))
        (t 0))
)
</pre></div>

<p>The <code>bump</code> parameter is equal to zero when Calc is converting
from a date form in a generalized time zone into a GMT date value.
It is <i>-1</i> when Calc is converting in the other direction.  The
adjustments shown above ensure that the conversion behaves correctly
and reasonably around the 2 a.m. transition in each direction.
</p>
<p>There is a &ldquo;missing&rdquo; hour between 2 a.m. and 3 a.m. at the
beginning of daylight saving time; converting a date/time form that
falls in this hour results in a time value for the following hour,
from 3 a.m. to 4 a.m.  At the end of daylight saving time, the
hour from 1 a.m. to 2 a.m. repeats itself; converting a date/time
form that falls in this hour results in a time value for the first
manifestation of that time (<em>not</em> the one that occurs one hour
later).
</p>
<p>If <code>math-daylight-savings-hook</code> is <code>nil</code>, then the
daylight saving adjustment is always taken to be zero.
</p>
<p>In algebraic formulas, &lsquo;<samp>tzone(<var>zone</var>, <var>date</var>)</samp>&rsquo;
computes the time zone adjustment for a given zone name at a
given date.  The <var>date</var> is ignored unless <var>zone</var> is a
generalized time zone.  If <var>date</var> is a date form, the
daylight saving computation is applied to it as it appears.
If <var>date</var> is a numeric date value, it is adjusted for the
daylight-saving version of <var>zone</var> before being given to
the daylight saving hook.  This odd-sounding rule ensures
that the daylight-saving computation is always done in
local time, not in the GMT time that a numeric <var>date</var>
is typically represented in.
</p>
<a name="index-dsadj"></a>
<p>The &lsquo;<samp>dsadj(<var>date</var>, <var>zone</var>)</samp>&rsquo; function computes the
daylight saving adjustment that is appropriate for <var>date</var> in
time zone <var>zone</var>.  If <var>zone</var> is explicitly in or not in
daylight saving time (e.g., <code>PDT</code> or <code>PST</code>) the
<var>date</var> is ignored.  If <var>zone</var> is a generalized time zone,
the algorithms described above are used.  If <var>zone</var> is omitted,
the computation is done for the current time zone.
</p>
<hr>
<a name="Financial-Functions"></a>
<div class="header">
<p>
Next: <a href="#Binary-Functions" accesskey="n" rel="next">Binary Functions</a>, Previous: <a href="#Date-Arithmetic" accesskey="p" rel="prev">Date Arithmetic</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Financial-Functions-1"></a>
<h3 class="section">7.6 Financial Functions</h3>

<p>Calc&rsquo;s financial or business functions use the <kbd>b</kbd> prefix
key followed by a shifted letter.  (The <kbd>b</kbd> prefix followed by
a lower-case letter is used for operations on binary numbers.)
</p>
<p>Note that the rate and the number of intervals given to these
functions must be on the same time scale, e.g., both months or
both years.  Mixing an annual interest rate with a time expressed
in months will give you very wrong answers!
</p>
<p>It is wise to compute these functions to a higher precision than
you really need, just to make sure your answer is correct to the
last penny; also, you may wish to check the definitions at the end
of this section to make sure the functions have the meaning you expect.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Percentages" accesskey="1">Percentages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Future-Value" accesskey="2">Future Value</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Present-Value" accesskey="3">Present Value</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Related-Financial-Functions" accesskey="4">Related Financial Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Depreciation-Functions" accesskey="5">Depreciation Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Definitions-of-Financial-Functions" accesskey="6">Definitions of Financial Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Percentages"></a>
<div class="header">
<p>
Next: <a href="#Future-Value" accesskey="n" rel="next">Future Value</a>, Previous: <a href="#Financial-Functions" accesskey="p" rel="prev">Financial Functions</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Percentages-1"></a>
<h4 class="subsection">7.6.1 Percentages</h4>

<a name="index-M_002d_0025"></a>
<a name="index-calc_002dpercent"></a>
<a name="index-_0025-2"></a>
<a name="index-percent"></a>
<p>The <kbd>M-%</kbd> (<code>calc-percent</code>) command takes a percentage value,
say 5.4, and converts it to an equivalent actual number.  For example,
<kbd>5.4 M-%</kbd> enters 0.054 on the stack.  (That&rsquo;s the <tt class="key">META</tt> or
<tt class="key">ESC</tt> key combined with <kbd>%</kbd>.)
</p>
<p>Actually, <kbd>M-%</kbd> creates a formula of the form &lsquo;<samp>5.4%</samp>&rsquo;.
You can enter &lsquo;<samp>5.4%</samp>&rsquo; yourself during algebraic entry.  The
&lsquo;<samp>%</samp>&rsquo; operator simply means, &ldquo;the preceding value divided by
100.&rdquo;  The &lsquo;<samp>%</samp>&rsquo; operator has very high precedence, so that
&lsquo;<samp>1+8%</samp>&rsquo; is interpreted as &lsquo;<samp>1+(8%)</samp>&rsquo;, not as &lsquo;<samp>(1+8)%</samp>&rsquo;.
(The &lsquo;<samp>%</samp>&rsquo; operator is just a postfix notation for the
<code>percent</code> function, just like &lsquo;<samp>20!</samp>&rsquo; is the notation for
&lsquo;<samp>fact(20)</samp>&rsquo;, or twenty-factorial.)
</p>
<p>The formula &lsquo;<samp>5.4%</samp>&rsquo; would normally evaluate immediately to
0.054, but the <kbd>M-%</kbd> command suppresses evaluation as it puts
the formula onto the stack.  However, the next Calc command that
uses the formula &lsquo;<samp>5.4%</samp>&rsquo; will evaluate it as its first step.
The net effect is that you get to look at &lsquo;<samp>5.4%</samp>&rsquo; on the stack,
but Calc commands see it as &lsquo;<samp>0.054</samp>&rsquo;, which is what they expect.
</p>
<p>In particular, &lsquo;<samp>5.4%</samp>&rsquo; and &lsquo;<samp>0.054</samp>&rsquo; are suitable values
for the <var>rate</var> arguments of the various financial functions,
but the number &lsquo;<samp>5.4</samp>&rsquo; is probably <em>not</em> suitable&mdash;it
represents a rate of 540 percent!
</p>
<p>The key sequence <kbd>M-% *</kbd> effectively means &ldquo;percent-of.&rdquo;
For example, <kbd>68 <span class="key">RET</span> 25 M-% *</kbd> computes 17, which is 25% of
68 (and also 68% of 25, which comes out to the same thing).
</p>
<a name="index-c-_0025"></a>
<a name="index-calc_002dconvert_002dpercent"></a>
<p>The <kbd>c %</kbd> (<code>calc-convert-percent</code>) command converts the
value on the top of the stack from numeric to percentage form.
For example, if 0.08 is on the stack, <kbd>c %</kbd> converts it to
&lsquo;<samp>8%</samp>&rsquo;.  The quantity is the same, it&rsquo;s just represented
differently.  (Contrast this with <kbd>M-%</kbd>, which would convert
this number to &lsquo;<samp>0.08%</samp>&rsquo;.)  The <kbd>=</kbd> key is a convenient way
to convert a formula like &lsquo;<samp>8%</samp>&rsquo; back to numeric form, 0.08.
</p>
<p>To compute what percentage one quantity is of another quantity,
use <kbd>/ c %</kbd>.  For example, <kbd>17&nbsp;<span class="key">RET</span>&nbsp;68&nbsp;/&nbsp;c&nbsp;%</kbd><!-- /@w --> displays
&lsquo;<samp>25%</samp>&rsquo;.
</p>
<a name="index-b-_0025"></a>
<a name="index-calc_002dpercent_002dchange"></a>
<a name="index-relch"></a>
<p>The <kbd>b %</kbd> (<code>calc-percent-change</code>) [<code>relch</code>] command
calculates the percentage change from one number to another.
For example, <kbd>40 <span class="key">RET</span> 50 b %</kbd> produces the answer &lsquo;<samp>25%</samp>&rsquo;,
since 50 is 25% larger than 40.  A negative result represents a
decrease:  <kbd>50 <span class="key">RET</span> 40 b %</kbd> produces &lsquo;<samp>-20%</samp>&rsquo;, since 40 is
20% smaller than 50.  (The answers are different in magnitude
because, in the first case, we&rsquo;re increasing by 25% of 40, but
in the second case, we&rsquo;re decreasing by 20% of 50.)  The effect
of <kbd>40 <span class="key">RET</span> 50 b %</kbd> is to compute &lsquo;<samp>(50-40)/40</samp>&rsquo;, converting
the answer to percentage form as if by <kbd>c %</kbd>.
</p>
<hr>
<a name="Future-Value"></a>
<div class="header">
<p>
Next: <a href="#Present-Value" accesskey="n" rel="next">Present Value</a>, Previous: <a href="#Percentages" accesskey="p" rel="prev">Percentages</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Future-Value-1"></a>
<h4 class="subsection">7.6.2 Future Value</h4>

<p><a name="index-b-F"></a>
<a name="index-calc_002dfin_002dfv"></a>
<a name="index-fv"></a>
The <kbd>b F</kbd> (<code>calc-fin-fv</code>) [<code>fv</code>] command computes
the future value of an investment.  It takes three arguments
from the stack:  &lsquo;<samp>fv(<var>rate</var>, <var>n</var>, <var>payment</var>)</samp>&rsquo;.
If you give payments of <var>payment</var> every year for <var>n</var>
years, and the money you have paid earns interest at <var>rate</var> per
year, then this function tells you what your investment would be
worth at the end of the period.  (The actual interval doesn&rsquo;t
have to be years, as long as <var>n</var> and <var>rate</var> are expressed
in terms of the same intervals.)  This function assumes payments
occur at the <em>end</em> of each interval.
</p>
<a name="index-I-b-F"></a>
<a name="index-fvb"></a>
<p>The <kbd>I b F</kbd> [<code>fvb</code>] command does the same computation,
but assuming your payments are at the beginning of each interval.
Suppose you plan to deposit $1000 per year in a savings account
earning 5.4% interest, starting right now.  How much will be
in the account after five years?  <code>fvb(5.4%, 5, 1000) = 5870.73</code>.
Thus you will have earned $870 worth of interest over the years.
Using the stack, this calculation would have been
<kbd>5.4 M-% 5 <span class="key">RET</span> 1000 I b F</kbd>.  Note that the rate is expressed
as a number between 0 and 1, <em>not</em> as a percentage.
</p>
<a name="index-H-b-F"></a>
<a name="index-fvl"></a>
<p>The <kbd>H b F</kbd> [<code>fvl</code>] command computes the future value
of an initial lump sum investment.  Suppose you could deposit
those five thousand dollars in the bank right now; how much would
they be worth in five years?  <code>fvl(5.4%, 5, 5000) = 6503.89</code>.
</p>
<p>The algebraic functions <code>fv</code> and <code>fvb</code> accept an optional
fourth argument, which is used as an initial lump sum in the sense
of <code>fvl</code>.  In other words, <code>fv(<var>rate</var>, <var>n</var>,
<var>payment</var>, <var>initial</var>) = fv(<var>rate</var>, <var>n</var>, <var>payment</var>)
+ fvl(<var>rate</var>, <var>n</var>, <var>initial</var>)</code>.
</p>
<p>To illustrate the relationships between these functions, we could
do the <code>fvb</code> calculation &ldquo;by hand&rdquo; using <code>fvl</code>.  The
final balance will be the sum of the contributions of our five
deposits at various times.  The first deposit earns interest for
five years:  <code>fvl(5.4%, 5, 1000) = 1300.78</code>.  The second
deposit only earns interest for four years:  <code>fvl(5.4%, 4, 1000) =
1234.13</code>.  And so on down to the last deposit, which earns one
year&rsquo;s interest:  <code>fvl(5.4%, 1, 1000) = 1054.00</code>.  The sum of
these five values is, sure enough, $5870.73, just as was computed
by <code>fvb</code> directly.
</p>
<p>What does <code>fv(5.4%, 5, 1000) = 5569.96</code> mean?  The payments
are now at the ends of the periods.  The end of one year is the same
as the beginning of the next, so what this really means is that we&rsquo;ve
lost the payment at year zero (which contributed $1300.78), but we&rsquo;re
now counting the payment at year five (which, since it didn&rsquo;t have
a chance to earn interest, counts as $1000).  Indeed, &lsquo;<samp>5569.96 =
5870.73 - 1300.78 + 1000</samp>&rsquo; (give or take a bit of roundoff error).
</p>
<hr>
<a name="Present-Value"></a>
<div class="header">
<p>
Next: <a href="#Related-Financial-Functions" accesskey="n" rel="next">Related Financial Functions</a>, Previous: <a href="#Future-Value" accesskey="p" rel="prev">Future Value</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Present-Value-1"></a>
<h4 class="subsection">7.6.3 Present Value</h4>

<p><a name="index-b-P"></a>
<a name="index-calc_002dfin_002dpv"></a>
<a name="index-pv"></a>
The <kbd>b P</kbd> (<code>calc-fin-pv</code>) [<code>pv</code>] command computes
the present value of an investment.  Like <code>fv</code>, it takes
three arguments:  <code>pv(<var>rate</var>, <var>n</var>, <var>payment</var>)</code>.
It computes the present value of a series of regular payments.
Suppose you have the chance to make an investment that will
pay $2000 per year over the next four years; as you receive
these payments you can put them in the bank at 9% interest.
You want to know whether it is better to make the investment, or
to keep the money in the bank where it earns 9% interest right
from the start.  The calculation <code>pv(9%, 4, 2000)</code> gives the
result 6479.44.  If your initial investment must be less than this,
say, $6000, then the investment is worthwhile.  But if you had to
put up $7000, then it would be better just to leave it in the bank.
</p>
<p>Here is the interpretation of the result of <code>pv</code>:  You are
trying to compare the return from the investment you are
considering, which is <code>fv(9%, 4, 2000) = 9146.26</code>, with
the return from leaving the money in the bank, which is
<code>fvl(9%, 4, <var>x</var>)</code> where <var>x</var> is the amount of money
you would have to put up in advance.  The <code>pv</code> function
finds the break-even point, &lsquo;<samp>x = 6479.44</samp>&rsquo;, at which
<code>fvl(9%, 4, 6479.44)</code> is also equal to 9146.26.  This is
the largest amount you should be willing to invest.
</p>
<a name="index-I-b-P"></a>
<a name="index-pvb"></a>
<p>The <kbd>I b P</kbd> [<code>pvb</code>] command solves the same problem,
but with payments occurring at the beginning of each interval.
It has the same relationship to <code>fvb</code> as <code>pv</code> has
to <code>fv</code>.  For example <code>pvb(9%, 4, 2000) = 7062.59</code>,
a larger number than <code>pv</code> produced because we get to start
earning interest on the return from our investment sooner.
</p>
<a name="index-H-b-P"></a>
<a name="index-pvl"></a>
<p>The <kbd>H b P</kbd> [<code>pvl</code>] command computes the present value of
an investment that will pay off in one lump sum at the end of the
period.  For example, if we get our $8000 all at the end of the
four years, <code>pvl(9%, 4, 8000) = 5667.40</code>.  This is much
less than <code>pv</code> reported, because we don&rsquo;t earn any interest
on the return from this investment.  Note that <code>pvl</code> and
<code>fvl</code> are simple inverses:  <code>fvl(9%, 4, 5667.40) = 8000</code>.
</p>
<p>You can give an optional fourth lump-sum argument to <code>pv</code>
and <code>pvb</code>; this is handled in exactly the same way as the
fourth argument for <code>fv</code> and <code>fvb</code>.
</p>
<a name="index-b-N"></a>
<a name="index-calc_002dfin_002dnpv"></a>
<a name="index-npv"></a>
<p>The <kbd>b N</kbd> (<code>calc-fin-npv</code>) [<code>npv</code>] command computes
the net present value of a series of irregular investments.
The first argument is the interest rate.  The second argument is
a vector which represents the expected return from the investment
at the end of each interval.  For example, if the rate represents
a yearly interest rate, then the vector elements are the return
from the first year, second year, and so on.
</p>
<p>Thus, <code>npv(9%, [2000,2000,2000,2000]) = pv(9%, 4, 2000) = 6479.44</code>.
Obviously this function is more interesting when the payments are
not all the same!
</p>
<p>The <code>npv</code> function can actually have two or more arguments.
Multiple arguments are interpreted in the same way as for the
vector statistical functions like <code>vsum</code>.
See <a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a>.  Basically, if there are several
payment arguments, each either a vector or a plain number, all these
values are collected left-to-right into the complete list of payments.
A numeric prefix argument on the <kbd>b N</kbd> command says how many
payment values or vectors to take from the stack.
</p>
<a name="index-I-b-N"></a>
<a name="index-npvb"></a>
<p>The <kbd>I b N</kbd> [<code>npvb</code>] command computes the net present
value where payments occur at the beginning of each interval
rather than at the end.
</p>
<hr>
<a name="Related-Financial-Functions"></a>
<div class="header">
<p>
Next: <a href="#Depreciation-Functions" accesskey="n" rel="next">Depreciation Functions</a>, Previous: <a href="#Present-Value" accesskey="p" rel="prev">Present Value</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Related-Financial-Functions-1"></a>
<h4 class="subsection">7.6.4 Related Financial Functions</h4>

<p>The functions in this section are basically inverses of the
present value functions with respect to the various arguments.
</p>
<a name="index-b-M"></a>
<a name="index-calc_002dfin_002dpmt"></a>
<a name="index-pmt"></a>
<p>The <kbd>b M</kbd> (<code>calc-fin-pmt</code>) [<code>pmt</code>] command computes
the amount of periodic payment necessary to amortize a loan.
Thus <code>pmt(<var>rate</var>, <var>n</var>, <var>amount</var>)</code> equals the
value of <var>payment</var> such that <code>pv(<var>rate</var>, <var>n</var>,
<var>payment</var>) = <var>amount</var></code>.
</p>
<a name="index-I-b-M"></a>
<a name="index-pmtb"></a>
<p>The <kbd>I b M</kbd> [<code>pmtb</code>] command does the same computation
but using <code>pvb</code> instead of <code>pv</code>.  Like <code>pv</code> and
<code>pvb</code>, these functions can also take a fourth argument which
represents an initial lump-sum investment.
</p>
<a name="index-H-b-M"></a>
<p>The <kbd>H b M</kbd> key just invokes the <code>fvl</code> function, which is
the inverse of <code>pvl</code>.  There is no explicit <code>pmtl</code> function.
</p>
<a name="index-b-_0023"></a>
<a name="index-calc_002dfin_002dnper"></a>
<a name="index-nper"></a>
<p>The <kbd>b #</kbd> (<code>calc-fin-nper</code>) [<code>nper</code>] command computes
the number of regular payments necessary to amortize a loan.
Thus <code>nper(<var>rate</var>, <var>payment</var>, <var>amount</var>)</code> equals
the value of <var>n</var> such that <code>pv(<var>rate</var>, <var>n</var>,
<var>payment</var>) = <var>amount</var></code>.  If <var>payment</var> is too small
ever to amortize a loan for <var>amount</var> at interest rate <var>rate</var>,
the <code>nper</code> function is left in symbolic form.
</p>
<a name="index-I-b-_0023"></a>
<a name="index-nperb"></a>
<p>The <kbd>I b #</kbd> [<code>nperb</code>] command does the same computation
but using <code>pvb</code> instead of <code>pv</code>.  You can give a fourth
lump-sum argument to these functions, but the computation will be
rather slow in the four-argument case.
</p>
<a name="index-H-b-_0023"></a>
<a name="index-nperl"></a>
<p>The <kbd>H b #</kbd> [<code>nperl</code>] command does the same computation
using <code>pvl</code>.  By exchanging <var>payment</var> and <var>amount</var> you
can also get the solution for <code>fvl</code>.  For example,
<code>nperl(8%, 2000, 1000) = 9.006</code>, so if you place $1000 in a
bank account earning 8%, it will take nine years to grow to $2000.
</p>
<a name="index-b-T"></a>
<a name="index-calc_002dfin_002drate"></a>
<a name="index-rate"></a>
<p>The <kbd>b T</kbd> (<code>calc-fin-rate</code>) [<code>rate</code>] command computes
the rate of return on an investment.  This is also an inverse of <code>pv</code>:
<code>rate(<var>n</var>, <var>payment</var>, <var>amount</var>)</code> computes the value of
<var>rate</var> such that <code>pv(<var>rate</var>, <var>n</var>, <var>payment</var>) =
<var>amount</var></code>.  The result is expressed as a formula like &lsquo;<samp>6.3%</samp>&rsquo;.
</p>
<a name="index-I-b-T"></a>
<a name="index-H-b-T"></a>
<a name="index-rateb"></a>
<a name="index-ratel"></a>
<p>The <kbd>I b T</kbd> [<code>rateb</code>] and <kbd>H b T</kbd> [<code>ratel</code>]
commands solve the analogous equations with <code>pvb</code> or <code>pvl</code>
in place of <code>pv</code>.  Also, <code>rate</code> and <code>rateb</code> can
accept an optional fourth argument just like <code>pv</code> and <code>pvb</code>.
To redo the above example from a different perspective,
<code>ratel(9, 2000, 1000) = 8.00597%</code>, which says you will need an
interest rate of 8% in order to double your account in nine years.
</p>
<a name="index-b-I"></a>
<a name="index-calc_002dfin_002dirr"></a>
<a name="index-irr"></a>
<p>The <kbd>b I</kbd> (<code>calc-fin-irr</code>) [<code>irr</code>] command is the
analogous function to <code>rate</code> but for net present value.
Its argument is a vector of payments.  Thus <code>irr(<var>payments</var>)</code>
computes the <var>rate</var> such that <code>npv(<var>rate</var>, <var>payments</var>) = 0</code>;
this rate is known as the <em>internal rate of return</em>.
</p>
<a name="index-I-b-I"></a>
<a name="index-irrb"></a>
<p>The <kbd>I b I</kbd> [<code>irrb</code>] command computes the internal rate of
return assuming payments occur at the beginning of each period.
</p>
<hr>
<a name="Depreciation-Functions"></a>
<div class="header">
<p>
Next: <a href="#Definitions-of-Financial-Functions" accesskey="n" rel="next">Definitions of Financial Functions</a>, Previous: <a href="#Related-Financial-Functions" accesskey="p" rel="prev">Related Financial Functions</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Depreciation-Functions-1"></a>
<h4 class="subsection">7.6.5 Depreciation Functions</h4>

<p>The functions in this section calculate <em>depreciation</em>, which is
the amount of value that a possession loses over time.  These functions
are characterized by three parameters:  <var>cost</var>, the original cost
of the asset; <var>salvage</var>, the value the asset will have at the end
of its expected &ldquo;useful life&rdquo;; and <var>life</var>, the number of years
(or other periods) of the expected useful life.
</p>
<p>There are several methods for calculating depreciation that differ in
the way they spread the depreciation over the lifetime of the asset.
</p>
<a name="index-b-S"></a>
<a name="index-calc_002dfin_002dsln"></a>
<a name="index-sln"></a>
<p>The <kbd>b S</kbd> (<code>calc-fin-sln</code>) [<code>sln</code>] command computes the
&ldquo;straight-line&rdquo; depreciation.  In this method, the asset depreciates
by the same amount every year (or period).  For example,
&lsquo;<samp>sln(12000, 2000, 5)</samp>&rsquo; returns 2000.  The asset costs $12000
initially and will be worth $2000 after five years; it loses $2000
per year.
</p>
<a name="index-b-Y"></a>
<a name="index-calc_002dfin_002dsyd"></a>
<a name="index-syd"></a>
<p>The <kbd>b Y</kbd> (<code>calc-fin-syd</code>) [<code>syd</code>] command computes the
accelerated &ldquo;sum-of-years&rsquo;-digits&rdquo; depreciation.  Here the depreciation
is higher during the early years of the asset&rsquo;s life.  Since the
depreciation is different each year, <kbd>b Y</kbd> takes a fourth <var>period</var>
parameter which specifies which year is requested, from 1 to <var>life</var>.
If <var>period</var> is outside this range, the <code>syd</code> function will
return zero.
</p>
<a name="index-b-D"></a>
<a name="index-calc_002dfin_002dddb"></a>
<a name="index-ddb"></a>
<p>The <kbd>b D</kbd> (<code>calc-fin-ddb</code>) [<code>ddb</code>] command computes an
accelerated depreciation using the double-declining balance method.
It also takes a fourth <var>period</var> parameter.
</p>
<p>For symmetry, the <code>sln</code> function will accept a <var>period</var>
parameter as well, although it will ignore its value except that the
return value will as usual be zero if <var>period</var> is out of range.
</p>
<p>For example, pushing the vector &lsquo;<samp>[1,2,3,4,5]</samp>&rsquo; (perhaps with <kbd>v x 5</kbd>)
and then mapping <kbd>V M ' [sln(12000,2000,5,$), syd(12000,2000,5,$),
ddb(12000,2000,5,$)] <span class="key">RET</span></kbd> produces a matrix that allows us to compare
the three depreciation methods:
</p>
<div class="example">
<pre class="example">[ [ 2000, 3333, 4800 ]
  [ 2000, 2667, 2880 ]
  [ 2000, 2000, 1728 ]
  [ 2000, 1333,  592 ]
  [ 2000,  667,   0  ] ]
</pre></div>

<p>(Values have been rounded to nearest integers in this figure.)
We see that <code>sln</code> depreciates by the same amount each year,
<kbd>syd</kbd> depreciates more at the beginning and less at the end,
and <kbd>ddb</kbd> weights the depreciation even more toward the beginning.
</p>
<p>Summing columns with <kbd>V R : +</kbd> yields &lsquo;<samp>[10000, 10000, 10000]</samp>&rsquo;;
the total depreciation in any method is (by definition) the
difference between the cost and the salvage value.
</p>
<hr>
<a name="Definitions-of-Financial-Functions"></a>
<div class="header">
<p>
Previous: <a href="#Depreciation-Functions" accesskey="p" rel="prev">Depreciation Functions</a>, Up: <a href="#Financial-Functions" accesskey="u" rel="up">Financial Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Definitions"></a>
<h4 class="subsection">7.6.6 Definitions</h4>

<p>For your reference, here are the actual formulas used to compute
Calc&rsquo;s financial functions.
</p>
<p>Calc will not evaluate a financial function unless the <var>rate</var> or
<var>n</var> argument is known.  However, <var>payment</var> or <var>amount</var> can
be a variable.  Calc expands these functions according to the
formulas below for symbolic arguments only when you use the <kbd>a &quot;</kbd>
(<code>calc-expand-formula</code>) command, or when taking derivatives or
integrals or solving equations involving the functions.
</p>
<p>These formulas are shown using the conventions of Big display
mode (<kbd>d B</kbd>); for example, the formula for <code>fv</code> written
linearly is &lsquo;<samp>pmt * ((1 + rate)^n) - 1) / rate</samp>&rsquo;.
</p>
<div class="example">
<pre class="example">                                        n
                              (1 + rate)  - 1
fv(rate, n, pmt) =      pmt * ---------------
                                   rate

                                         n
                              ((1 + rate)  - 1) (1 + rate)
fvb(rate, n, pmt) =     pmt * ----------------------------
                                         rate

                                        n
fvl(rate, n, pmt) =     pmt * (1 + rate)

                                            -n
                              1 - (1 + rate)
pv(rate, n, pmt) =      pmt * ----------------
                                    rate

                                             -n
                              (1 - (1 + rate)  ) (1 + rate)
pvb(rate, n, pmt) =     pmt * -----------------------------
                                         rate

                                        -n
pvl(rate, n, pmt) =     pmt * (1 + rate)

                                    -1               -2               -3
npv(rate, [a, b, c]) =  a*(1 + rate)   + b*(1 + rate)   + c*(1 + rate)

                                        -1               -2
npvb(rate, [a, b, c]) = a + b*(1 + rate)   + c*(1 + rate)

                                             -n
                        (amt - x * (1 + rate)  ) * rate
pmt(rate, n, amt, x) =  -------------------------------
                                             -n
                               1 - (1 + rate)

                                             -n
                        (amt - x * (1 + rate)  ) * rate
pmtb(rate, n, amt, x) = -------------------------------
                                        -n
                         (1 - (1 + rate)  ) (1 + rate)

                                   amt * rate
nper(rate, pmt, amt) =  - log(1 - ------------, 1 + rate)
                                      pmt

                                    amt * rate
nperb(rate, pmt, amt) = - log(1 - ---------------, 1 + rate)
                                  pmt * (1 + rate)

                              amt
nperl(rate, pmt, amt) = - log(---, 1 + rate)
                              pmt

                           1/n
                        pmt
ratel(n, pmt, amt) =    ------ - 1
                           1/n
                        amt

                        cost - salv
sln(cost, salv, life) = -----------
                           life

                             (cost - salv) * (life - per + 1)
syd(cost, salv, life, per) = --------------------------------
                                  life * (life + 1) / 2

                             book * 2
ddb(cost, salv, life, per) = --------,  book = cost - depreciation so far
                               life
</pre></div>

<p>In <code>pmt</code> and <code>pmtb</code>, &lsquo;<samp>x=0</samp>&rsquo; if omitted.
</p>
<p>These functions accept any numeric objects, including error forms,
intervals, and even (though not very usefully) complex numbers.  The
above formulas specify exactly the behavior of these functions with
all sorts of inputs.
</p>
<p>Note that if the first argument to the <code>log</code> in <code>nper</code> is
negative, <code>nper</code> leaves itself in symbolic form rather than
returning a (financially meaningless) complex number.
</p>
<p>&lsquo;<samp>rate(num, pmt, amt)</samp>&rsquo; solves the equation
&lsquo;<samp>pv(rate, num, pmt) = amt</samp>&rsquo; for &lsquo;<samp>rate</samp>&rsquo; using <kbd>H a R</kbd>
(<code>calc-find-root</code>), with the interval &lsquo;<samp>[.01% .. 100%]</samp>&rsquo;
for an initial guess.  The <code>rateb</code> function is the same except
that it uses <code>pvb</code>.  Note that <code>ratel</code> can be solved
directly; its formula is shown in the above list.
</p>
<p>Similarly, &lsquo;<samp>irr(pmts)</samp>&rsquo; solves the equation &lsquo;<samp>npv(rate, pmts) = 0</samp>&rsquo;
for &lsquo;<samp>rate</samp>&rsquo;.
</p>
<p>If you give a fourth argument to <code>nper</code> or <code>nperb</code>, Calc
will also use <kbd>H a R</kbd> to solve the equation using an initial
guess interval of &lsquo;<samp>[0 .. 100]</samp>&rsquo;.
</p>
<p>A fourth argument to <code>fv</code> simply sums the two components
calculated from the above formulas for <code>fv</code> and <code>fvl</code>.
The same is true of <code>fvb</code>, <code>pv</code>, and <code>pvb</code>.
</p>
<p>The <kbd>ddb</kbd> function is computed iteratively; the &ldquo;book&rdquo; value
starts out equal to <var>cost</var>, and decreases according to the above
formula for the specified number of periods.  If the book value
would decrease below <var>salvage</var>, it only decreases to <var>salvage</var>
and the depreciation is zero for all subsequent periods.  The <code>ddb</code>
function returns the amount the book value decreased in the specified
period.
</p>
<hr>
<a name="Binary-Functions"></a>
<div class="header">
<p>
Previous: <a href="#Financial-Functions" accesskey="p" rel="prev">Financial Functions</a>, Up: <a href="#Arithmetic" accesskey="u" rel="up">Arithmetic</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Binary-Number-Functions"></a>
<h3 class="section">7.7 Binary Number Functions</h3>

<p>The commands in this chapter all use two-letter sequences beginning with
the <kbd>b</kbd> prefix.
</p>
<a name="index-Binary-numbers"></a>
<p>The &ldquo;binary&rdquo; operations actually work regardless of the currently
displayed radix, although their results make the most sense in a radix
like 2, 8, or 16 (as obtained by the <kbd>d 2</kbd>, <kbd>d 8</kbd>, or <kbd>d&nbsp;6</kbd><!-- /@w -->
commands, respectively).  You may also wish to enable display of leading
zeros with <kbd>d z</kbd>.  See <a href="#Radix-Modes">Radix Modes</a>.
</p>
<a name="index-Word-size-for-binary-operations"></a>
<p>The Calculator maintains a current <em>word size</em> &lsquo;<samp>w</samp>&rsquo;, an
arbitrary positive or negative integer.  For a positive word size, all
of the binary operations described here operate modulo &lsquo;<samp>2^w</samp>&rsquo;.  In
particular, negative arguments are converted to positive integers modulo
&lsquo;<samp>2^w</samp>&rsquo; by all binary functions.
</p>
<p>If the word size is negative, binary operations produce twos-complement
integers from
&lsquo;<samp>-(2^(-w-1))</samp>&rsquo;
to
&lsquo;<samp>2^(-w-1)-1</samp>&rsquo;
inclusive.  Either mode accepts inputs in any range; the sign of
&lsquo;<samp>w</samp>&rsquo; affects only the results produced.
</p>
<a name="index-b-c"></a>
<a name="index-calc_002dclip"></a>
<a name="index-clip"></a>
<p>The <kbd>b c</kbd> (<code>calc-clip</code>)
[<code>clip</code>] command can be used to clip a number by reducing it modulo
&lsquo;<samp>2^w</samp>&rsquo;.  The commands described in this chapter automatically clip
their results to the current word size.  Note that other operations like
addition do not use the current word size, since integer addition
generally is not &ldquo;binary.&rdquo;  (However, see <a href="#Simplification-Modes">Simplification Modes</a>,
<code>calc-bin-simplify-mode</code>.)  For example, with a word size of 8
bits <kbd>b c</kbd> converts a number to the range 0 to 255; with a word
size of <i>-8</i> <kbd>b c</kbd> converts to the range <i>-128</i> to 127.
</p>
<a name="index-b-w"></a>
<a name="index-calc_002dword_002dsize"></a>
<p>The default word size is 32 bits.  All operations except the shifts and
rotates allow you to specify a different word size for that one
operation by giving a numeric prefix argument:  <kbd>C-u 8 b c</kbd> clips the
top of stack to the range 0 to 255 regardless of the current word size.
To set the word size permanently, use <kbd>b w</kbd> (<code>calc-word-size</code>).
This command displays a prompt with the current word size; press <tt class="key">RET</tt>
immediately to keep this word size, or type a new word size at the prompt.
</p>
<p>When the binary operations are written in symbolic form, they take an
optional second (or third) word-size parameter.  When a formula like
&lsquo;<samp>and(a,b)</samp>&rsquo; is finally evaluated, the word size current at that time
will be used, but when &lsquo;<samp>and(a,b,-8)</samp>&rsquo; is evaluated, a word size of
<i>-8</i> will always be used.  A symbolic binary function will be left
in symbolic form unless the all of its argument(s) are integers or
integer-valued floats.
</p>
<p>If either or both arguments are modulo forms for which &lsquo;<samp>M</samp>&rsquo; is a
power of two, that power of two is taken as the word size unless a
numeric prefix argument overrides it.  The current word size is never
consulted when modulo-power-of-two forms are involved.
</p>
<a name="index-b-a"></a>
<a name="index-calc_002dand"></a>
<a name="index-and"></a>
<p>The <kbd>b a</kbd> (<code>calc-and</code>) [<code>and</code>] command computes the bitwise
AND of the two numbers on the top of the stack.  In other words, for each
of the &lsquo;<samp>w</samp>&rsquo; binary digits of the two numbers (pairwise), the corresponding
bit of the result is 1 if and only if both input bits are 1:
&lsquo;<samp>and(2#1100, 2#1010) = 2#1000</samp>&rsquo;.
</p>
<a name="index-b-o"></a>
<a name="index-calc_002dor"></a>
<a name="index-or"></a>
<p>The <kbd>b o</kbd> (<code>calc-or</code>) [<code>or</code>] command computes the bitwise
inclusive OR of two numbers.  A bit is 1 if either of the input bits, or
both, are 1:  &lsquo;<samp>or(2#1100, 2#1010) = 2#1110</samp>&rsquo;.
</p>
<a name="index-b-x"></a>
<a name="index-calc_002dxor"></a>
<a name="index-xor"></a>
<p>The <kbd>b x</kbd> (<code>calc-xor</code>) [<code>xor</code>] command computes the bitwise
exclusive OR of two numbers.  A bit is 1 if exactly one of the input bits
is 1:  &lsquo;<samp>xor(2#1100, 2#1010) = 2#0110</samp>&rsquo;.
</p>
<a name="index-b-d"></a>
<a name="index-calc_002ddiff"></a>
<a name="index-diff"></a>
<p>The <kbd>b d</kbd> (<code>calc-diff</code>) [<code>diff</code>] command computes the bitwise
difference of two numbers; this is defined by &lsquo;<samp>diff(a,b) = and(a,not(b))</samp>&rsquo;,
so that &lsquo;<samp>diff(2#1100, 2#1010) = 2#0100</samp>&rsquo;.
</p>
<a name="index-b-n"></a>
<a name="index-calc_002dnot"></a>
<a name="index-not"></a>
<p>The <kbd>b n</kbd> (<code>calc-not</code>) [<code>not</code>] command computes the bitwise
NOT of a number.  A bit is 1 if the input bit is 0 and vice-versa.
</p>
<a name="index-b-l"></a>
<a name="index-calc_002dlshift_002dbinary"></a>
<a name="index-lsh"></a>
<p>The <kbd>b l</kbd> (<code>calc-lshift-binary</code>) [<code>lsh</code>] command shifts a
number left by one bit, or by the number of bits specified in the numeric
prefix argument.  A negative prefix argument performs a logical right shift,
in which zeros are shifted in on the left.  In symbolic form, &lsquo;<samp>lsh(a)</samp>&rsquo;
is short for &lsquo;<samp>lsh(a,1)</samp>&rsquo;, which in turn is short for &lsquo;<samp>lsh(a,n,w)</samp>&rsquo;.
Bits shifted &ldquo;off the end,&rdquo; according to the current word size, are lost.
</p>
<a name="index-H-b-l"></a>
<a name="index-H-b-r"></a>
<a name="index-H-b-L"></a>
<a name="index-H-b-R"></a>
<a name="index-H-b-t"></a>
<p>The <kbd>H b l</kbd> command also does a left shift, but it takes two arguments
from the stack (the value to shift, and, at top-of-stack, the number of
bits to shift).  This version interprets the prefix argument just like
the regular binary operations, i.e., as a word size.  The Hyperbolic flag
has a similar effect on the rest of the binary shift and rotate commands.
</p>
<a name="index-b-r"></a>
<a name="index-calc_002drshift_002dbinary"></a>
<a name="index-rsh"></a>
<p>The <kbd>b r</kbd> (<code>calc-rshift-binary</code>) [<code>rsh</code>] command shifts a
number right by one bit, or by the number of bits specified in the numeric
prefix argument:  &lsquo;<samp>rsh(a,n) = lsh(a,-n)</samp>&rsquo;.
</p>
<a name="index-b-L"></a>
<a name="index-calc_002dlshift_002darith"></a>
<a name="index-ash"></a>
<p>The <kbd>b L</kbd> (<code>calc-lshift-arith</code>) [<code>ash</code>] command shifts a
number left.  It is analogous to <code>lsh</code>, except that if the shift
is rightward (the prefix argument is negative), an arithmetic shift
is performed as described below.
</p>
<a name="index-b-R"></a>
<a name="index-calc_002drshift_002darith"></a>
<a name="index-rash"></a>
<p>The <kbd>b R</kbd> (<code>calc-rshift-arith</code>) [<code>rash</code>] command performs
an &ldquo;arithmetic&rdquo; shift to the right, in which the leftmost bit (according
to the current word size) is duplicated rather than shifting in zeros.
This corresponds to dividing by a power of two where the input is interpreted
as a signed, twos-complement number.  (The distinction between the &lsquo;<samp>rsh</samp>&rsquo;
and &lsquo;<samp>rash</samp>&rsquo; operations is totally independent from whether the word
size is positive or negative.)  With a negative prefix argument, this
performs a standard left shift.
</p>
<a name="index-b-t"></a>
<a name="index-calc_002drotate_002dbinary"></a>
<a name="index-rot"></a>
<p>The <kbd>b t</kbd> (<code>calc-rotate-binary</code>) [<code>rot</code>] command rotates a
number one bit to the left.  The leftmost bit (according to the current
word size) is dropped off the left and shifted in on the right.  With a
numeric prefix argument, the number is rotated that many bits to the left
or right.
</p>
<p>See <a href="#Set-Operations">Set Operations</a>, for the <kbd>b p</kbd> and <kbd>b u</kbd> commands that
pack and unpack binary integers into sets.  (For example, <kbd>b u</kbd>
unpacks the number &lsquo;<samp>2#11001</samp>&rsquo; to the set of bit-numbers
&lsquo;<samp>[0, 3, 4]</samp>&rsquo;.)  Type <kbd>b u V #</kbd> to count the number of &ldquo;1&rdquo;
bits in a binary integer.
</p>
<p>Another interesting use of the set representation of binary integers
is to reverse the bits in, say, a 32-bit integer.  Type <kbd>b u</kbd> to
unpack; type <kbd>31 <span class="key">TAB</span> -</kbd> to replace each bit-number in the set
with 31 minus that bit-number; type <kbd>b p</kbd> to pack the set back
into a binary integer.
</p>
<hr>
<a name="Scientific-Functions"></a>
<div class="header">
<p>
Next: <a href="#Matrix-Functions" accesskey="n" rel="next">Matrix Functions</a>, Previous: <a href="#Arithmetic" accesskey="p" rel="prev">Arithmetic</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Scientific-Functions-1"></a>
<h2 class="chapter">8 Scientific Functions</h2>

<p>The functions described here perform trigonometric and other transcendental
calculations.  They generally produce floating-point answers correct to the
full current precision.  The <kbd>H</kbd> (Hyperbolic) and <kbd>I</kbd> (Inverse)
flag keys must be used to get some of these functions from the keyboard.
</p>
<a name="index-P"></a>
<a name="index-calc_002dpi"></a>
<a name="index-pi-variable-1"></a>
<a name="index-pi-2"></a>
<a name="index-H-P"></a>
<a name="index-e-variable-1"></a>
<a name="index-e-3"></a>
<a name="index-I-P"></a>
<a name="index-gamma-variable-1"></a>
<a name="index-gamma-2"></a>
<a name="index-Gamma-constant_002c-Euler_0027s-1"></a>
<a name="index-Euler_0027s-gamma-constant-1"></a>
<a name="index-H-I-P"></a>
<a name="index-phi-variable-1"></a>
<a name="index-Phi_002c-golden-ratio-1"></a>
<a name="index-Golden-ratio-1"></a>
<p>One miscellaneous command is shift-<kbd>P</kbd> (<code>calc-pi</code>), which pushes
the value of &lsquo;<samp>pi</samp>&rsquo; (at the current precision) onto the stack.  With the
Hyperbolic flag, it pushes the value &lsquo;<samp>e</samp>&rsquo;, the base of natural logarithms.
With the Inverse flag, it pushes Euler&rsquo;s constant
&lsquo;<samp>gamma</samp>&rsquo;
(about 0.5772).  With both Inverse and Hyperbolic, it
pushes the &ldquo;golden ratio&rdquo;
&lsquo;<samp>phi</samp>&rsquo;
(about 1.618).  (At present, Euler&rsquo;s constant is not available
to unlimited precision; Calc knows only the first 100 digits.)
In Symbolic mode, these commands push the
actual variables &lsquo;<samp>pi</samp>&rsquo;, &lsquo;<samp>e</samp>&rsquo;, &lsquo;<samp>gamma</samp>&rsquo;, and &lsquo;<samp>phi</samp>&rsquo;,
respectively, instead of their values; see <a href="#Symbolic-Mode">Symbolic Mode</a>.
</p>
<a name="index-I-Q"></a>
<a name="index-sqr-1"></a>
<p>The <kbd>Q</kbd> (<code>calc-sqrt</code>) [<code>sqrt</code>] function is described elsewhere;
see <a href="#Basic-Arithmetic">Basic Arithmetic</a>.  With the Inverse flag [<code>sqr</code>], this command
computes the square of the argument.
</p>
<p>See <a href="#Prefix-Arguments">Prefix Arguments</a>, for a discussion of the effect of numeric
prefix arguments on commands in this chapter which do not otherwise
interpret a prefix argument.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Logarithmic-Functions" accesskey="1">Logarithmic Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Trigonometric-and-Hyperbolic-Functions" accesskey="2">Trigonometric and Hyperbolic Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Advanced-Math-Functions" accesskey="3">Advanced Math Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Branch-Cuts" accesskey="4">Branch Cuts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Random-Numbers" accesskey="5">Random Numbers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Combinatorial-Functions" accesskey="6">Combinatorial Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Probability-Distribution-Functions" accesskey="7">Probability Distribution Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Logarithmic-Functions"></a>
<div class="header">
<p>
Next: <a href="#Trigonometric-and-Hyperbolic-Functions" accesskey="n" rel="next">Trigonometric and Hyperbolic Functions</a>, Previous: <a href="#Scientific-Functions" accesskey="p" rel="prev">Scientific Functions</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Logarithmic-Functions-1"></a>
<h3 class="section">8.1 Logarithmic Functions</h3>

<p><a name="index-L"></a>
<a name="index-calc_002dln"></a>
<a name="index-ln"></a>
<a name="index-I-E"></a>
The shift-<kbd>L</kbd> (<code>calc-ln</code>) [<code>ln</code>] command computes the natural
logarithm of the real or complex number on the top of the stack.  With
the Inverse flag it computes the exponential function instead, although
this is redundant with the <kbd>E</kbd> command.
</p>
<a name="index-E"></a>
<a name="index-calc_002dexp"></a>
<a name="index-exp"></a>
<a name="index-I-L"></a>
<p>The shift-<kbd>E</kbd> (<code>calc-exp</code>) [<code>exp</code>] command computes the
exponential, i.e., &lsquo;<samp>e</samp>&rsquo; raised to the power of the number on the stack.
The meanings of the Inverse and Hyperbolic flags follow from those for
the <code>calc-ln</code> command.
</p>
<a name="index-H-L"></a>
<a name="index-H-E"></a>
<a name="index-calc_002dlog10"></a>
<a name="index-log10"></a>
<a name="index-exp10"></a>
<a name="index-H-I-L"></a>
<a name="index-H-I-E"></a>
<p>The <kbd>H L</kbd> (<code>calc-log10</code>) [<code>log10</code>] command computes the common
(base-10) logarithm of a number.  (With the Inverse flag [<code>exp10</code>],
it raises ten to a given power.)  Note that the common logarithm of a
complex number is computed by taking the natural logarithm and dividing
by
&lsquo;<samp>ln(10)</samp>&rsquo;.
</p>
<a name="index-B"></a>
<a name="index-I-B"></a>
<a name="index-calc_002dlog"></a>
<a name="index-log"></a>
<a name="index-alog"></a>
<p>The <kbd>B</kbd> (<code>calc-log</code>) [<code>log</code>] command computes a logarithm
to any base.  For example, <kbd>1024 <span class="key">RET</span> 2 B</kbd> produces 10, since
&lsquo;<samp>2^10 = 1024</samp>&rsquo;.
In certain cases like &lsquo;<samp>log(3,9)</samp>&rsquo;, the result
will be either &lsquo;<samp>1:2</samp>&rsquo; or &lsquo;<samp>0.5</samp>&rsquo; depending on the current Fraction
mode setting.  With the Inverse flag [<code>alog</code>], this command is
similar to <kbd>^</kbd> except that the order of the arguments is reversed.
</p>
<a name="index-f-I"></a>
<a name="index-calc_002dilog"></a>
<a name="index-ilog"></a>
<p>The <kbd>f I</kbd> (<code>calc-ilog</code>) [<code>ilog</code>] command computes the
integer logarithm of a number to any base.  The number and the base must
themselves be positive integers.  This is the true logarithm, rounded
down to an integer.  Thus <kbd>ilog(x,10)</kbd> is 3 for all &lsquo;<samp>x</samp>&rsquo; in the
range from 1000 to 9999.  If both arguments are positive integers, exact
integer arithmetic is used; otherwise, this is equivalent to
&lsquo;<samp>floor(log(x,b))</samp>&rsquo;.
</p>
<a name="index-f-E"></a>
<a name="index-calc_002dexpm1"></a>
<a name="index-expm1"></a>
<p>The <kbd>f E</kbd> (<code>calc-expm1</code>) [<code>expm1</code>] command computes
&lsquo;<samp>exp(x)-1</samp>&rsquo;,
but using an algorithm that produces a more accurate
answer when the result is close to zero, i.e., when
&lsquo;<samp>exp(x)</samp>&rsquo;
is close to one.
</p>
<a name="index-f-L"></a>
<a name="index-calc_002dlnp1"></a>
<a name="index-lnp1"></a>
<p>The <kbd>f L</kbd> (<code>calc-lnp1</code>) [<code>lnp1</code>] command computes
&lsquo;<samp>ln(x+1)</samp>&rsquo;,
producing a more accurate answer when &lsquo;<samp>x</samp>&rsquo; is close to zero.
</p>
<hr>
<a name="Trigonometric-and-Hyperbolic-Functions"></a>
<div class="header">
<p>
Next: <a href="#Advanced-Math-Functions" accesskey="n" rel="next">Advanced Math Functions</a>, Previous: <a href="#Logarithmic-Functions" accesskey="p" rel="prev">Logarithmic Functions</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Trigonometric_002fHyperbolic-Functions"></a>
<h3 class="section">8.2 Trigonometric/Hyperbolic Functions</h3>

<p><a name="index-S"></a>
<a name="index-calc_002dsin"></a>
<a name="index-sin"></a>
The shift-<kbd>S</kbd> (<code>calc-sin</code>) [<code>sin</code>] command computes the sine
of an angle or complex number.  If the input is an HMS form, it is interpreted
as degrees-minutes-seconds; otherwise, the input is interpreted according
to the current angular mode.  It is best to use Radians mode when operating
on complex numbers.
</p>
<p>Calc&rsquo;s &ldquo;units&rdquo; mechanism includes angular units like <code>deg</code>,
<code>rad</code>, and <code>grad</code>.  While &lsquo;<samp>sin(45 deg)</samp>&rsquo; is not evaluated
all the time, the <kbd>u s</kbd> (<code>calc-simplify-units</code>) command will
simplify &lsquo;<samp>sin(45 deg)</samp>&rsquo; by taking the sine of 45 degrees, regardless
of the current angular mode.  See <a href="#Basic-Operations-on-Units">Basic Operations on Units</a>.
</p>
<p>Also, the symbolic variable <code>pi</code> is not ordinarily recognized in
arguments to trigonometric functions, as in &lsquo;<samp>sin(3 pi / 4)</samp>&rsquo;, but
the default algebraic simplifications recognize many such
formulas when the current angular mode is Radians <em>and</em> Symbolic
mode is enabled; this example would be replaced by &lsquo;<samp>sqrt(2) / 2</samp>&rsquo;.
See <a href="#Symbolic-Mode">Symbolic Mode</a>.  Beware, this simplification occurs even if you
have stored a different value in the variable &lsquo;<samp>pi</samp>&rsquo;; this is one
reason why changing built-in variables is a bad idea.  Arguments of
the form &lsquo;<samp>x</samp>&rsquo; plus a multiple of &lsquo;<samp>pi/2</samp>&rsquo; are also simplified.
Calc includes similar formulas for <code>cos</code> and <code>tan</code>.
</p>
<p>Calc&rsquo;s algebraic simplifications know all angles which are integer multiples of
&lsquo;<samp>pi/12</samp>&rsquo;, &lsquo;<samp>pi/10</samp>&rsquo;, or &lsquo;<samp>pi/8</samp>&rsquo; radians.  In Degrees mode,
analogous simplifications occur for integer multiples of 15 or 18
degrees, and for arguments plus multiples of 90 degrees.
</p>
<a name="index-I-S"></a>
<a name="index-calc_002darcsin"></a>
<a name="index-arcsin"></a>
<p>With the Inverse flag, <code>calc-sin</code> computes an arcsine.  This is also
available as the <code>calc-arcsin</code> command or <code>arcsin</code> algebraic
function.  The returned argument is converted to degrees, radians, or HMS
notation depending on the current angular mode.
</p>
<a name="index-H-S"></a>
<a name="index-calc_002dsinh"></a>
<a name="index-sinh"></a>
<a name="index-H-I-S"></a>
<a name="index-calc_002darcsinh"></a>
<a name="index-arcsinh"></a>
<p>With the Hyperbolic flag, <code>calc-sin</code> computes the hyperbolic
sine, also available as <code>calc-sinh</code> [<code>sinh</code>].  With the
Hyperbolic and Inverse flags, it computes the hyperbolic arcsine
(<code>calc-arcsinh</code>) [<code>arcsinh</code>].
</p>
<a name="index-C"></a>
<a name="index-calc_002dcos"></a>
<a name="index-cos"></a>
<a name="index-I-C"></a>
<a name="index-calc_002darccos"></a>
<a name="index-arccos"></a>
<a name="index-H-C"></a>
<a name="index-calc_002dcosh"></a>
<a name="index-cosh"></a>
<a name="index-H-I-C"></a>
<a name="index-calc_002darccosh"></a>
<a name="index-arccosh"></a>
<a name="index-T"></a>
<a name="index-calc_002dtan"></a>
<a name="index-tan"></a>
<a name="index-I-T"></a>
<a name="index-calc_002darctan"></a>
<a name="index-arctan"></a>
<a name="index-H-T"></a>
<a name="index-calc_002dtanh"></a>
<a name="index-tanh"></a>
<a name="index-H-I-T"></a>
<a name="index-calc_002darctanh"></a>
<a name="index-arctanh"></a>
<p>The shift-<kbd>C</kbd> (<code>calc-cos</code>) [<code>cos</code>] command computes the cosine
of an angle or complex number, and shift-<kbd>T</kbd> (<code>calc-tan</code>) [<code>tan</code>]
computes the tangent, along with all the various inverse and hyperbolic
variants of these functions.
</p>
<a name="index-f-T"></a>
<a name="index-calc_002darctan2"></a>
<a name="index-arctan2"></a>
<p>The <kbd>f T</kbd> (<code>calc-arctan2</code>) [<code>arctan2</code>] command takes two
numbers from the stack and computes the arc tangent of their ratio.  The
result is in the full range from <i>-180</i> (exclusive) to <i>+180</i>
(inclusive) degrees, or the analogous range in radians.  A similar
result would be obtained with <kbd>/</kbd> followed by <kbd>I T</kbd>, but the
value would only be in the range from <i>-90</i> to <i>+90</i> degrees
since the division loses information about the signs of the two
components, and an error might result from an explicit division by zero
which <code>arctan2</code> would avoid.  By (arbitrary) definition,
&lsquo;<samp>arctan2(0,0)=0</samp>&rsquo;.
</p>
<a name="index-calc_002dsincos"></a>
<a name="index-sincos"></a>
<a name="index-arcsincos"></a>
<p>The <code>calc-sincos</code> [<code>sincos</code>] command computes the sine and
cosine of a number, returning them as a vector of the form
&lsquo;<samp>[<var>cos</var>, <var>sin</var>]</samp>&rsquo;.
With the Inverse flag [<code>arcsincos</code>], this command takes a two-element
vector as an argument and computes <code>arctan2</code> of the elements.
(This command does not accept the Hyperbolic flag.)
</p>
<a name="index-calc_002dsec"></a>
<a name="index-sec"></a>
<a name="index-calc_002dcsc"></a>
<a name="index-csc"></a>
<a name="index-calc_002dcot"></a>
<a name="index-cot"></a>
<a name="index-calc_002dsech"></a>
<a name="index-sech"></a>
<a name="index-calc_002dcsch"></a>
<a name="index-csch"></a>
<a name="index-calc_002dcoth"></a>
<a name="index-coth"></a>
<p>The remaining trigonometric functions, <code>calc-sec</code> [<code>sec</code>],
<code>calc-csc</code> [<code>csc</code>] and <code>calc-cot</code> [<code>cot</code>], are also
available.  With the Hyperbolic flag, these compute their hyperbolic
counterparts, which are also available separately as <code>calc-sech</code>
[<code>sech</code>], <code>calc-csch</code> [<code>csch</code>] and <code>calc-coth</code>
[<code>coth</code>].  (These commands do not accept the Inverse flag.)
</p>
<hr>
<a name="Advanced-Math-Functions"></a>
<div class="header">
<p>
Next: <a href="#Branch-Cuts" accesskey="n" rel="next">Branch Cuts</a>, Previous: <a href="#Trigonometric-and-Hyperbolic-Functions" accesskey="p" rel="prev">Trigonometric and Hyperbolic Functions</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Advanced-Mathematical-Functions"></a>
<h3 class="section">8.3 Advanced Mathematical Functions</h3>

<p>Calc can compute a variety of less common functions that arise in
various branches of mathematics.  All of the functions described in
this section allow arbitrary complex arguments and, except as noted,
will work to arbitrarily large precision.  They can not at present
handle error forms or intervals as arguments.
</p>
<p>NOTE:  These functions are still experimental.  In particular, their
accuracy is not guaranteed in all domains.  It is advisable to set the
current precision comfortably higher than you actually need when
using these functions.  Also, these functions may be impractically
slow for some values of the arguments.
</p>
<a name="index-f-g"></a>
<a name="index-calc_002dgamma"></a>
<a name="index-gamma"></a>
<p>The <kbd>f g</kbd> (<code>calc-gamma</code>) [<code>gamma</code>] command computes the Euler
gamma function.  For positive integer arguments, this is related to the
factorial function:  &lsquo;<samp>gamma(n+1) = fact(n)</samp>&rsquo;.  For general complex
arguments the gamma function can be defined by the following definite
integral:
&lsquo;<samp>gamma(a) = integ(t^(a-1) exp(t), t, 0, inf)</samp>&rsquo;.
(The actual implementation uses far more efficient computational methods.)
</p>
<a name="index-f-G"></a>
<a name="index-gammaP"></a>
<a name="index-I-f-G"></a>
<a name="index-H-f-G"></a>
<a name="index-H-I-f-G"></a>
<a name="index-calc_002dinc_002dgamma"></a>
<a name="index-gammaQ"></a>
<a name="index-gammag"></a>
<a name="index-gammaG"></a>
<p>The <kbd>f G</kbd> (<code>calc-inc-gamma</code>) [<code>gammaP</code>] command computes
the incomplete gamma function, denoted &lsquo;<samp>P(a,x)</samp>&rsquo;.  This is defined by
the integral,
&lsquo;<samp>gammaP(a,x) = integ(t^(a-1) exp(t), t, 0, x) / gamma(a)</samp>&rsquo;.
This implies that &lsquo;<samp>gammaP(a,inf) = 1</samp>&rsquo; for any &lsquo;<samp>a</samp>&rsquo; (see the
definition of the normal gamma function).
</p>
<p>Several other varieties of incomplete gamma function are defined.
The complement of &lsquo;<samp>P(a,x)</samp>&rsquo;, called &lsquo;<samp>Q(a,x) = 1-P(a,x)</samp>&rsquo; by
some authors, is computed by the <kbd>I f G</kbd> [<code>gammaQ</code>] command.
You can think of this as taking the other half of the integral, from
&lsquo;<samp>x</samp>&rsquo; to infinity.
</p>
<p>The functions corresponding to the integrals that define &lsquo;<samp>P(a,x)</samp>&rsquo;
and &lsquo;<samp>Q(a,x)</samp>&rsquo; but without the normalizing &lsquo;<samp>1/gamma(a)</samp>&rsquo;
factor are called &lsquo;<samp>g(a,x)</samp>&rsquo; and &lsquo;<samp>G(a,x)</samp>&rsquo;, respectively
(where &lsquo;<samp>g</samp>&rsquo; and &lsquo;<samp>G</samp>&rsquo; represent the lower- and upper-case Greek
letter gamma).  You can obtain these using the <kbd>H f G</kbd> [<code>gammag</code>]
and <kbd>H I f G</kbd> [<code>gammaG</code>] commands.
</p>
<a name="index-f-b"></a>
<a name="index-calc_002dbeta"></a>
<a name="index-beta"></a>
<p>The <kbd>f b</kbd> (<code>calc-beta</code>) [<code>beta</code>] command computes the
Euler beta function, which is defined in terms of the gamma function as
&lsquo;<samp>beta(a,b) = gamma(a) gamma(b) / gamma(a+b)</samp>&rsquo;,
or by
&lsquo;<samp>beta(a,b) = integ(t^(a-1) (1-t)^(b-1), t, 0, 1)</samp>&rsquo;.
</p>
<a name="index-f-B"></a>
<a name="index-H-f-B"></a>
<a name="index-calc_002dinc_002dbeta"></a>
<a name="index-betaI"></a>
<a name="index-betaB"></a>
<p>The <kbd>f B</kbd> (<code>calc-inc-beta</code>) [<code>betaI</code>] command computes
the incomplete beta function &lsquo;<samp>I(x,a,b)</samp>&rsquo;.  It is defined by
&lsquo;<samp>betaI(x,a,b) = integ(t^(a-1) (1-t)^(b-1), t, 0, x) / beta(a,b)</samp>&rsquo;.
Once again, the <kbd>H</kbd> (hyperbolic) prefix gives the corresponding
un-normalized version [<code>betaB</code>].
</p>
<a name="index-f-e"></a>
<a name="index-I-f-e"></a>
<a name="index-calc_002derf"></a>
<a name="index-erf"></a>
<a name="index-erfc"></a>
<p>The <kbd>f e</kbd> (<code>calc-erf</code>) [<code>erf</code>] command computes the
error function
&lsquo;<samp>erf(x) = 2 integ(exp(-(t^2)), t, 0, x) / sqrt(pi)</samp>&rsquo;.
The complementary error function <kbd>I f e</kbd> (<code>calc-erfc</code>) [<code>erfc</code>]
is the corresponding integral from &lsquo;<samp>x</samp>&rsquo; to infinity; the sum
&lsquo;<samp>erf(x) + erfc(x) = 1</samp>&rsquo;.
</p>
<a name="index-f-j"></a>
<a name="index-f-y"></a>
<a name="index-calc_002dbessel_002dJ"></a>
<a name="index-calc_002dbessel_002dY"></a>
<a name="index-besJ"></a>
<a name="index-besY"></a>
<p>The <kbd>f j</kbd> (<code>calc-bessel-J</code>) [<code>besJ</code>] and <kbd>f y</kbd>
(<code>calc-bessel-Y</code>) [<code>besY</code>] commands compute the Bessel
functions of the first and second kinds, respectively.
In &lsquo;<samp>besJ(n,x)</samp>&rsquo; and &lsquo;<samp>besY(n,x)</samp>&rsquo; the &ldquo;order&rdquo; parameter
&lsquo;<samp>n</samp>&rsquo; is often an integer, but is not required to be one.
Calc&rsquo;s implementation of the Bessel functions currently limits the
precision to 8 digits, and may not be exact even to that precision.
Use with care!
</p>
<hr>
<a name="Branch-Cuts"></a>
<div class="header">
<p>
Next: <a href="#Random-Numbers" accesskey="n" rel="next">Random Numbers</a>, Previous: <a href="#Advanced-Math-Functions" accesskey="p" rel="prev">Advanced Math Functions</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Branch-Cuts-and-Principal-Values"></a>
<h3 class="section">8.4 Branch Cuts and Principal Values</h3>

<p><a name="index-Branch-cuts"></a>
<a name="index-Principal-values"></a>
All of the logarithmic, trigonometric, and other scientific functions are
defined for complex numbers as well as for reals.
This section describes the values
returned in cases where the general result is a family of possible values.
Calc follows section 12.5.3 of Steele&rsquo;s <em>Common Lisp, the Language</em>,
second edition, in these matters.  This section will describe each
function briefly; for a more detailed discussion (including some nifty
diagrams), consult Steele&rsquo;s book.
</p>
<p>Note that the branch cuts for <code>arctan</code> and <code>arctanh</code> were
changed between the first and second editions of Steele.  Recent
versions of Calc follow the second edition.
</p>
<p>The new branch cuts exactly match those of the HP-28/48 calculators.
They also match those of Mathematica 1.2, except that Mathematica&rsquo;s
<code>arctan</code> cut is always in the right half of the complex plane,
and its <code>arctanh</code> cut is always in the top half of the plane.
Calc&rsquo;s cuts are continuous with quadrants I and III for <code>arctan</code>,
or II and IV for <code>arctanh</code>.
</p>
<p>Note:  The current implementations of these functions with complex arguments
are designed with proper behavior around the branch cuts in mind, <em>not</em>
efficiency or accuracy.  You may need to increase the floating precision
and wait a while to get suitable answers from them.
</p>
<p>For &lsquo;<samp>sqrt(a+bi)</samp>&rsquo;:  When &lsquo;<samp>a&lt;0</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; is small but positive
or zero, the result is close to the &lsquo;<samp>+i</samp>&rsquo; axis.  For &lsquo;<samp>b</samp>&rsquo; small and
negative, the result is close to the &lsquo;<samp>-i</samp>&rsquo; axis.  The result always lies
in the right half of the complex plane.
</p>
<p>For &lsquo;<samp>ln(a+bi)</samp>&rsquo;:  The real part is defined as &lsquo;<samp>ln(abs(a+bi))</samp>&rsquo;.
The imaginary part is defined as &lsquo;<samp>arg(a+bi) = arctan2(b,a)</samp>&rsquo;.
Thus the branch cuts for <code>sqrt</code> and <code>ln</code> both lie on the
negative real axis.
</p>
<p>The following table describes these branch cuts in another way.
If the real and imaginary parts of &lsquo;<samp>z</samp>&rsquo; are as shown, then
the real and imaginary parts of &lsquo;<samp>f(z)</samp>&rsquo; will be as shown.
Here <code>eps</code> stands for a small positive value; each
occurrence of <code>eps</code> may stand for a different small value.
</p>
<div class="smallexample">
<pre class="smallexample">     z           sqrt(z)       ln(z)
----------------------------------------
   +,   0         +,  0       any, 0
   -,   0         0,  +       any, pi
   -, +eps      +eps, +      +eps, +
   -, -eps      +eps, -      +eps, -
</pre></div>

<p>For &lsquo;<samp>z1^z2</samp>&rsquo;:  This is defined by &lsquo;<samp>exp(ln(z1)*z2)</samp>&rsquo;.
One interesting consequence of this is that &lsquo;<samp>(-8)^1:3</samp>&rsquo; does
not evaluate to <i>-2</i> as you might expect, but to the complex
number &lsquo;<samp>(1., 1.732)</samp>&rsquo;.  Both of these are valid cube roots
of <i>-8</i> (as is &lsquo;<samp>(1., -1.732)</samp>&rsquo;); Calc chooses a perhaps
less-obvious root for the sake of mathematical consistency.
</p>
<p>For &lsquo;<samp>arcsin(z)</samp>&rsquo;:  This is defined by &lsquo;<samp>-i*ln(i*z + sqrt(1-z^2))</samp>&rsquo;.
The branch cuts are on the real axis, less than <i>-1</i> and greater than 1.
</p>
<p>For &lsquo;<samp>arccos(z)</samp>&rsquo;:  This is defined by &lsquo;<samp>-i*ln(z + i*sqrt(1-z^2))</samp>&rsquo;,
or equivalently by &lsquo;<samp>pi/2 - arcsin(z)</samp>&rsquo;.  The branch cuts are on
the real axis, less than <i>-1</i> and greater than 1.
</p>
<p>For &lsquo;<samp>arctan(z)</samp>&rsquo;:  This is defined by
&lsquo;<samp>(ln(1+i*z) - ln(1-i*z)) / (2*i)</samp>&rsquo;.  The branch cuts are on the
imaginary axis, below &lsquo;<samp>-i</samp>&rsquo; and above &lsquo;<samp>i</samp>&rsquo;.
</p>
<p>For &lsquo;<samp>arcsinh(z)</samp>&rsquo;:  This is defined by &lsquo;<samp>ln(z + sqrt(1+z^2))</samp>&rsquo;.
The branch cuts are on the imaginary axis, below &lsquo;<samp>-i</samp>&rsquo; and
above &lsquo;<samp>i</samp>&rsquo;.
</p>
<p>For &lsquo;<samp>arccosh(z)</samp>&rsquo;:  This is defined by
&lsquo;<samp>ln(z + (z+1)*sqrt((z-1)/(z+1)))</samp>&rsquo;.  The branch cut is on the
real axis less than 1.
</p>
<p>For &lsquo;<samp>arctanh(z)</samp>&rsquo;:  This is defined by &lsquo;<samp>(ln(1+z) - ln(1-z)) / 2</samp>&rsquo;.
The branch cuts are on the real axis, less than <i>-1</i> and greater than 1.
</p>
<p>The following tables for <code>arcsin</code>, <code>arccos</code>, and
<code>arctan</code> assume the current angular mode is Radians.  The
hyperbolic functions operate independently of the angular mode.
</p>
<div class="smallexample">
<pre class="smallexample">       z             arcsin(z)            arccos(z)
-------------------------------------------------------
 (-1..1),  0      (-pi/2..pi/2), 0       (0..pi), 0
 (-1..1), +eps    (-pi/2..pi/2), +eps    (0..pi), -eps
 (-1..1), -eps    (-pi/2..pi/2), -eps    (0..pi), +eps
   &lt;-1,    0          -pi/2,     +         pi,    -
   &lt;-1,  +eps      -pi/2 + eps,  +      pi - eps, -
   &lt;-1,  -eps      -pi/2 + eps,  -      pi - eps, +
    &gt;1,    0           pi/2,     -          0,    +
    &gt;1,  +eps       pi/2 - eps,  +        +eps,   -
    &gt;1,  -eps       pi/2 - eps,  -        +eps,   +
</pre></div>

<div class="smallexample">
<pre class="smallexample">       z            arccosh(z)         arctanh(z)
-----------------------------------------------------
 (-1..1),  0        0,  (0..pi)       any,     0
 (-1..1), +eps    +eps, (0..pi)       any,    +eps
 (-1..1), -eps    +eps, (-pi..0)      any,    -eps
   &lt;-1,    0        +,    pi           -,     pi/2
   &lt;-1,  +eps       +,  pi - eps       -,  pi/2 - eps
   &lt;-1,  -eps       +, -pi + eps       -, -pi/2 + eps
    &gt;1,    0        +,     0           +,    -pi/2
    &gt;1,  +eps       +,   +eps          +,  pi/2 - eps
    &gt;1,  -eps       +,   -eps          +, -pi/2 + eps
</pre></div>

<div class="smallexample">
<pre class="smallexample">       z           arcsinh(z)           arctan(z)
-----------------------------------------------------
   0, (-1..1)    0, (-pi/2..pi/2)         0,     any
   0,   &lt;-1      -,    -pi/2            -pi/2,    -
 +eps,  &lt;-1      +, -pi/2 + eps       pi/2 - eps, -
 -eps,  &lt;-1      -, -pi/2 + eps      -pi/2 + eps, -
   0,    &gt;1      +,     pi/2             pi/2,    +
 +eps,   &gt;1      +,  pi/2 - eps       pi/2 - eps, +
 -eps,   &gt;1      -,  pi/2 - eps      -pi/2 + eps, +
</pre></div>

<p>Finally, the following identities help to illustrate the relationship
between the complex trigonometric and hyperbolic functions.  They
are valid everywhere, including on the branch cuts.
</p>
<div class="smallexample">
<pre class="smallexample">sin(i*z)  = i*sinh(z)       arcsin(i*z)  = i*arcsinh(z)
cos(i*z)  =   cosh(z)       arcsinh(i*z) = i*arcsin(z)
tan(i*z)  = i*tanh(z)       arctan(i*z)  = i*arctanh(z)
sinh(i*z) = i*sin(z)        cosh(i*z)    =   cos(z)
</pre></div>

<p>The &ldquo;advanced math&rdquo; functions (gamma, Bessel, etc.) are also defined
for general complex arguments, but their branch cuts and principal values
are not rigorously specified at present.
</p>
<hr>
<a name="Random-Numbers"></a>
<div class="header">
<p>
Next: <a href="#Combinatorial-Functions" accesskey="n" rel="next">Combinatorial Functions</a>, Previous: <a href="#Branch-Cuts" accesskey="p" rel="prev">Branch Cuts</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Random-Numbers-1"></a>
<h3 class="section">8.5 Random Numbers</h3>

<p><a name="index-k-r"></a>
<a name="index-calc_002drandom"></a>
<a name="index-random"></a>
The <kbd>k r</kbd> (<code>calc-random</code>) [<code>random</code>] command produces
random numbers of various sorts.
</p>
<p>Given a positive numeric prefix argument &lsquo;<samp>M</samp>&rsquo;, it produces a random
integer &lsquo;<samp>N</samp>&rsquo; in the range
&lsquo;<samp>0 &lt;= N &lt; M</samp>&rsquo;.
Each possible value &lsquo;<samp>N</samp>&rsquo; appears with equal probability.
</p>
<p>With no numeric prefix argument, the <kbd>k r</kbd> command takes its argument
from the stack instead.  Once again, if this is a positive integer &lsquo;<samp>M</samp>&rsquo;
the result is a random integer less than &lsquo;<samp>M</samp>&rsquo;.  However, note that
while numeric prefix arguments are limited to six digits or so, an &lsquo;<samp>M</samp>&rsquo;
taken from the stack can be arbitrarily large.  If &lsquo;<samp>M</samp>&rsquo; is negative,
the result is a random integer in the range
&lsquo;<samp>M &lt; N &lt;= 0</samp>&rsquo;.
</p>
<p>If the value on the stack is a floating-point number &lsquo;<samp>M</samp>&rsquo;, the result
is a random floating-point number &lsquo;<samp>N</samp>&rsquo; in the range
&lsquo;<samp>0 &lt;= N &lt; M</samp>&rsquo;
or
&lsquo;<samp>M &lt; N &lt;= 0</samp>&rsquo;,
according to the sign of &lsquo;<samp>M</samp>&rsquo;.
</p>
<p>If &lsquo;<samp>M</samp>&rsquo; is zero, the result is a Gaussian-distributed random real
number; the distribution has a mean of zero and a standard deviation
of one.  The algorithm used generates random numbers in pairs; thus,
every other call to this function will be especially fast.
</p>
<p>If &lsquo;<samp>M</samp>&rsquo; is an error form
&lsquo;<samp>m +/- s</samp>&rsquo;
where <var>m</var> and
<var>s</var>
are both real numbers, the result uses a Gaussian distribution with mean
<var>m</var> and standard deviation
<var>s</var>.
</p>
<p>If &lsquo;<samp>M</samp>&rsquo; is an interval form, the lower and upper bounds specify the
acceptable limits of the random numbers.  If both bounds are integers,
the result is a random integer in the specified range.  If either bound
is floating-point, the result is a random real number in the specified
range.  If the interval is open at either end, the result will be sure
not to equal that end value.  (This makes a big difference for integer
intervals, but for floating-point intervals it&rsquo;s relatively minor:
with a precision of 6, &lsquo;<samp>random([1.0..2.0))</samp>&rsquo; will return any of one
million numbers from 1.00000 to 1.99999; &lsquo;<samp>random([1.0..2.0])</samp>&rsquo; may
additionally return 2.00000, but the probability of this happening is
extremely small.)
</p>
<p>If &lsquo;<samp>M</samp>&rsquo; is a vector, the result is one element taken at random from
the vector.  All elements of the vector are given equal probabilities.
</p>
<a name="index-RandSeed"></a>
<p>The sequence of numbers produced by <kbd>k r</kbd> is completely random by
default, i.e., the sequence is seeded each time you start Calc using
the current time and other information.  You can get a reproducible
sequence by storing a particular &ldquo;seed value&rdquo; in the Calc variable
<code>RandSeed</code>.  Any integer will do for a seed; integers of from 1
to 12 digits are good.  If you later store a different integer into
<code>RandSeed</code>, Calc will switch to a different pseudo-random
sequence.  If you &ldquo;unstore&rdquo; <code>RandSeed</code>, Calc will re-seed itself
from the current time.  If you store the same integer that you used
before back into <code>RandSeed</code>, you will get the exact same sequence
of random numbers as before.
</p>
<a name="index-calc_002drrandom"></a>
<p>The <code>calc-rrandom</code> command (not on any key) produces a random real
number between zero and one.  It is equivalent to &lsquo;<samp>random(1.0)</samp>&rsquo;.
</p>
<a name="index-k-a"></a>
<a name="index-calc_002drandom_002dagain"></a>
<p>The <kbd>k a</kbd> (<code>calc-random-again</code>) command produces another random
number, re-using the most recent value of &lsquo;<samp>M</samp>&rsquo;.  With a numeric
prefix argument <var>n</var>, it produces <var>n</var> more random numbers using
that value of &lsquo;<samp>M</samp>&rsquo;.
</p>
<a name="index-k-h"></a>
<a name="index-calc_002dshuffle"></a>
<a name="index-shuffle"></a>
<p>The <kbd>k h</kbd> (<code>calc-shuffle</code>) command produces a vector of several
random values with no duplicates.  The value on the top of the stack
specifies the set from which the random values are drawn, and may be any
of the &lsquo;<samp>M</samp>&rsquo; formats described above.  The numeric prefix argument
gives the length of the desired list.  (If you do not provide a numeric
prefix argument, the length of the list is taken from the top of the
stack, and &lsquo;<samp>M</samp>&rsquo; from second-to-top.)
</p>
<p>If &lsquo;<samp>M</samp>&rsquo; is a floating-point number, zero, or an error form (so
that the random values are being drawn from the set of real numbers)
there is little practical difference between using <kbd>k h</kbd> and using
<kbd>k r</kbd> several times.  But if the set of possible values consists
of just a few integers, or the elements of a vector, then there is
a very real chance that multiple <kbd>k r</kbd>&rsquo;s will produce the same
number more than once.  The <kbd>k h</kbd> command produces a vector whose
elements are always distinct.  (Actually, there is a slight exception:
If &lsquo;<samp>M</samp>&rsquo; is a vector, no given vector element will be drawn more
than once, but if several elements of &lsquo;<samp>M</samp>&rsquo; are equal, they may
each make it into the result vector.)
</p>
<p>One use of <kbd>k h</kbd> is to rearrange a list at random.  This happens
if the prefix argument is equal to the number of values in the list:
<kbd>[1, 1.5, 2, 2.5, 3] 5 k h</kbd> might produce the permuted list
&lsquo;<samp>[2.5, 1, 1.5, 3, 2]</samp>&rsquo;.  As a convenient feature, if the argument
<var>n</var> is negative it is replaced by the size of the set represented
by &lsquo;<samp>M</samp>&rsquo;.  Naturally, this is allowed only when &lsquo;<samp>M</samp>&rsquo; specifies
a small discrete set of possibilities.
</p>
<p>To do the equivalent of <kbd>k h</kbd> but with duplications allowed,
given &lsquo;<samp>M</samp>&rsquo; on the stack and with <var>n</var> just entered as a numeric
prefix, use <kbd>v b</kbd> to build a vector of copies of &lsquo;<samp>M</samp>&rsquo;, then use
<kbd>V M k r</kbd> to &ldquo;map&rdquo; the normal <kbd>k r</kbd> function over the
elements of this vector.  See <a href="#Matrix-Functions">Matrix Functions</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Random-Number-Generator" accesskey="1">Random Number Generator</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">(Complete description of Calc&rsquo;s algorithm)
</td></tr>
</table>

<hr>
<a name="Random-Number-Generator"></a>
<div class="header">
<p>
Previous: <a href="#Random-Numbers" accesskey="p" rel="prev">Random Numbers</a>, Up: <a href="#Random-Numbers" accesskey="u" rel="up">Random Numbers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Random-Number-Generator-1"></a>
<h4 class="subsection">8.5.1 Random Number Generator</h4>

<p>Calc&rsquo;s random number generator uses several methods to ensure that
the numbers it produces are highly random.  Knuth&rsquo;s <em>Art of
Computer Programming</em>, Volume II, contains a thorough description
of the theory of random number generators and their measurement and
characterization.
</p>
<p>If <code>RandSeed</code> has no stored value, Calc calls Emacs&rsquo;s built-in
<code>random</code> function to get a stream of random numbers, which it
then treats in various ways to avoid problems inherent in the simple
random number generators that many systems use to implement <code>random</code>.
</p>
<p>When Calc&rsquo;s random number generator is first invoked, it &ldquo;seeds&rdquo;
the low-level random sequence using the time of day, so that the
random number sequence will be different every time you use Calc.
</p>
<p>Since Emacs Lisp doesn&rsquo;t specify the range of values that will be
returned by its <code>random</code> function, Calc exercises the function
several times to estimate the range.  When Calc subsequently uses
the <code>random</code> function, it takes only 10 bits of the result
near the most-significant end.  (It avoids at least the bottom
four bits, preferably more, and also tries to avoid the top two
bits.)  This strategy works well with the linear congruential
generators that are typically used to implement <code>random</code>.
</p>
<p>If <code>RandSeed</code> contains an integer, Calc uses this integer to
seed an &ldquo;additive congruential&rdquo; method (Knuth&rsquo;s algorithm 3.2.2A,
computing
&lsquo;<samp>X_n-55 - X_n-24</samp>&rsquo;).
This method expands the seed
value into a large table which is maintained internally; the variable
<code>RandSeed</code> is changed from, e.g., 42 to the vector &lsquo;<samp>[42]</samp>&rsquo;
to indicate that the seed has been absorbed into this table.  When
<code>RandSeed</code> contains a vector, <kbd>k r</kbd> and related commands
continue to use the same internal table as last time.  There is no
way to extract the complete state of the random number generator
so that you can restart it from any point; you can only restart it
from the same initial seed value.  A simple way to restart from the
same seed is to type <kbd>s r RandSeed</kbd> to get the seed vector,
<kbd>v u</kbd> to unpack it back into a number, then <kbd>s t RandSeed</kbd>
to reseed the generator with that number.
</p>
<p>Calc uses a &ldquo;shuffling&rdquo; method as described in algorithm 3.2.2B
of Knuth.  It fills a table with 13 random 10-bit numbers.  Then,
to generate a new random number, it uses the previous number to
index into the table, picks the value it finds there as the new
random number, then replaces that table entry with a new value
obtained from a call to the base random number generator (either
the additive congruential generator or the <code>random</code> function
supplied by the system).  If there are any flaws in the base
generator, shuffling will tend to even them out.  But if the system
provides an excellent <code>random</code> function, shuffling will not
damage its randomness.
</p>
<p>To create a random integer of a certain number of digits, Calc
builds the integer three decimal digits at a time.  For each group
of three digits, Calc calls its 10-bit shuffling random number generator
(which returns a value from 0 to 1023); if the random value is 1000
or more, Calc throws it out and tries again until it gets a suitable
value.
</p>
<p>To create a random floating-point number with precision <var>p</var>, Calc
simply creates a random <var>p</var>-digit integer and multiplies by
&lsquo;<samp>10^-p</samp>&rsquo;.
The resulting random numbers should be very clean, but note
that relatively small numbers will have few significant random digits.
In other words, with a precision of 12, you will occasionally get
numbers on the order of
&lsquo;<samp>10^-9</samp>&rsquo;
or
&lsquo;<samp>10^-10</samp>&rsquo;,
but those numbers will only have two or three random digits since they
correspond to small integers times
&lsquo;<samp>10^-12</samp>&rsquo;.
</p>
<p>To create a random integer in the interval &lsquo;<samp>[0 .. <var>m</var>)</samp>&rsquo;, Calc
counts the digits in <var>m</var>, creates a random integer with three
additional digits, then reduces modulo <var>m</var>.  Unless <var>m</var> is a
power of ten the resulting values will be very slightly biased toward
the lower numbers, but this bias will be less than 0.1%.  (For example,
if <var>m</var> is 42, Calc will reduce a random integer less than 100000
modulo 42 to get a result less than 42.  It is easy to show that the
numbers 40 and 41 will be only 2380/2381 as likely to result from this
modulo operation as numbers 39 and below.)  If <var>m</var> is a power of
ten, however, the numbers should be completely unbiased.
</p>
<p>The Gaussian random numbers generated by &lsquo;<samp>random(0.0)</samp>&rsquo; use the
&ldquo;polar&rdquo; method described in Knuth section 3.4.1C.  This method
generates a pair of Gaussian random numbers at a time, so only every
other call to &lsquo;<samp>random(0.0)</samp>&rsquo; will require significant calculations.
</p>
<hr>
<a name="Combinatorial-Functions"></a>
<div class="header">
<p>
Next: <a href="#Probability-Distribution-Functions" accesskey="n" rel="next">Probability Distribution Functions</a>, Previous: <a href="#Random-Numbers" accesskey="p" rel="prev">Random Numbers</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Combinatorial-Functions-1"></a>
<h3 class="section">8.6 Combinatorial Functions</h3>

<p>Commands relating to combinatorics and number theory begin with the
<kbd>k</kbd> key prefix.
</p>
<a name="index-k-g"></a>
<a name="index-calc_002dgcd"></a>
<a name="index-gcd"></a>
<p>The <kbd>k g</kbd> (<code>calc-gcd</code>) [<code>gcd</code>] command computes the
Greatest Common Divisor of two integers.  It also accepts fractions;
the GCD of two fractions is defined by taking the GCD of the
numerators, and the LCM of the denominators.  This definition is
consistent with the idea that &lsquo;<samp>a / gcd(a,x)</samp>&rsquo; should yield an
integer for any &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>x</samp>&rsquo;.  For other types of arguments,
the operation is left in symbolic form.
</p>
<a name="index-k-l"></a>
<a name="index-calc_002dlcm"></a>
<a name="index-lcm"></a>
<p>The <kbd>k l</kbd> (<code>calc-lcm</code>) [<code>lcm</code>] command computes the
Least Common Multiple of two integers or fractions.  The product of
the LCM and GCD of two numbers is equal to the absolute value of the
product of the numbers.
</p>
<a name="index-k-E"></a>
<a name="index-calc_002dextended_002dgcd"></a>
<a name="index-egcd"></a>
<p>The <kbd>k E</kbd> (<code>calc-extended-gcd</code>) [<code>egcd</code>] command computes
the GCD of two integers &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; and returns a vector
&lsquo;<samp>[g, a, b]</samp>&rsquo; where
&lsquo;<samp>g = gcd(x,y) = a x + b y</samp>&rsquo;.
</p>
<a name="index-_0021"></a>
<a name="index-calc_002dfactorial"></a>
<a name="index-fact"></a>
<a name="index-_0021-1"></a>
<p>The <kbd>!</kbd> (<code>calc-factorial</code>) [<code>fact</code>] command computes the
factorial of the number at the top of the stack.  If the number is an
integer, the result is an exact integer.  If the number is an
integer-valued float, the result is a floating-point approximation.  If
the number is a non-integral real number, the generalized factorial is used,
as defined by the Euler Gamma function.  Please note that computation of
large factorials can be slow; using floating-point format will help
since fewer digits must be maintained.  The same is true of many of
the commands in this section.
</p>
<a name="index-k-d"></a>
<a name="index-calc_002ddouble_002dfactorial"></a>
<a name="index-dfact"></a>
<a name="index-_0021_0021"></a>
<p>The <kbd>k d</kbd> (<code>calc-double-factorial</code>) [<code>dfact</code>] command
computes the &ldquo;double factorial&rdquo; of an integer.  For an even integer,
this is the product of even integers from 2 to &lsquo;<samp>N</samp>&rsquo;.  For an odd
integer, this is the product of odd integers from 3 to &lsquo;<samp>N</samp>&rsquo;.  If
the argument is an integer-valued float, the result is a floating-point
approximation.  This function is undefined for negative even integers.
The notation &lsquo;<samp>N!!</samp>&rsquo; is also recognized for double factorials.
</p>
<a name="index-k-c"></a>
<a name="index-calc_002dchoose"></a>
<a name="index-choose"></a>
<p>The <kbd>k c</kbd> (<code>calc-choose</code>) [<code>choose</code>] command computes the
binomial coefficient &lsquo;<samp>N</samp>&rsquo;-choose-&lsquo;<samp>M</samp>&rsquo;, where &lsquo;<samp>M</samp>&rsquo; is the number
on the top of the stack and &lsquo;<samp>N</samp>&rsquo; is second-to-top.  If both arguments
are integers, the result is an exact integer.  Otherwise, the result is a
floating-point approximation.  The binomial coefficient is defined for all
real numbers by
&lsquo;<samp>N! / M! (N-M)!</samp>&rsquo;.
</p>
<a name="index-H-k-c"></a>
<a name="index-calc_002dperm"></a>
<a name="index-perm"></a>
<p>The <kbd>H k c</kbd> (<code>calc-perm</code>) [<code>perm</code>] command computes the
number-of-permutations function &lsquo;<samp>N! / (N-M)!</samp>&rsquo;.
</p>
<a name="index-k-b"></a>
<a name="index-H-k-b"></a>
<a name="index-calc_002dbernoulli_002dnumber"></a>
<a name="index-bern"></a>
<p>The <kbd>k b</kbd> (<code>calc-bernoulli-number</code>) [<code>bern</code>] command
computes a given Bernoulli number.  The value at the top of the stack
is a nonnegative integer &lsquo;<samp>n</samp>&rsquo; that specifies which Bernoulli number
is desired.  The <kbd>H k b</kbd> command computes a Bernoulli polynomial,
taking &lsquo;<samp>n</samp>&rsquo; from the second-to-top position and &lsquo;<samp>x</samp>&rsquo; from the
top of the stack.  If &lsquo;<samp>x</samp>&rsquo; is a variable or formula the result is
a polynomial in &lsquo;<samp>x</samp>&rsquo;; if &lsquo;<samp>x</samp>&rsquo; is a number the result is a number.
</p>
<a name="index-k-e"></a>
<a name="index-H-k-e"></a>
<a name="index-calc_002deuler_002dnumber"></a>
<a name="index-euler"></a>
<p>The <kbd>k e</kbd> (<code>calc-euler-number</code>) [<code>euler</code>] command similarly
computes an Euler number, and <kbd>H&nbsp;k&nbsp;e</kbd><!-- /@w --> computes an Euler polynomial.
Bernoulli and Euler numbers occur in the Taylor expansions of several
functions.
</p>
<a name="index-k-s"></a>
<a name="index-H-k-s"></a>
<a name="index-calc_002dstirling_002dnumber"></a>
<a name="index-stir1"></a>
<a name="index-stir2"></a>
<p>The <kbd>k s</kbd> (<code>calc-stirling-number</code>) [<code>stir1</code>] command
computes a Stirling number of the first
kind,
given two integers &lsquo;<samp>n</samp>&rsquo; and &lsquo;<samp>m</samp>&rsquo; on the stack.  The <kbd>H k s</kbd>
[<code>stir2</code>] command computes a Stirling number of the second
kind.
These are the number of &lsquo;<samp>m</samp>&rsquo;-cycle permutations of &lsquo;<samp>n</samp>&rsquo; objects,
and the number of ways to partition &lsquo;<samp>n</samp>&rsquo; objects into &lsquo;<samp>m</samp>&rsquo;
non-empty sets, respectively.
</p>
<a name="index-k-p"></a>
<a name="index-calc_002dprime_002dtest"></a>
<a name="index-Primes"></a>
<p>The <kbd>k p</kbd> (<code>calc-prime-test</code>) command checks if the integer on
the top of the stack is prime.  For integers less than eight million, the
answer is always exact and reasonably fast.  For larger integers, a
probabilistic method is used (see Knuth vol. II, section 4.5.4, algorithm P).
The number is first checked against small prime factors (up to 13).  Then,
any number of iterations of the algorithm are performed.  Each step either
discovers that the number is non-prime, or substantially increases the
certainty that the number is prime.  After a few steps, the chance that
a number was mistakenly described as prime will be less than one percent.
(Indeed, this is a worst-case estimate of the probability; in practice
even a single iteration is quite reliable.)  After the <kbd>k p</kbd> command,
the number will be reported as definitely prime or non-prime if possible,
or otherwise &ldquo;probably&rdquo; prime with a certain probability of error.
</p>
<a name="index-prime"></a>
<p>The normal <kbd>k p</kbd> command performs one iteration of the primality
test.  Pressing <kbd>k p</kbd> repeatedly for the same integer will perform
additional iterations.  Also, <kbd>k p</kbd> with a numeric prefix performs
the specified number of iterations.  There is also an algebraic function
&lsquo;<samp>prime(n)</samp>&rsquo; or &lsquo;<samp>prime(n,iters)</samp>&rsquo; which returns 1 if &lsquo;<samp>n</samp>&rsquo;
is (probably) prime and 0 if not.
</p>
<a name="index-k-f"></a>
<a name="index-calc_002dprime_002dfactors"></a>
<a name="index-prfac"></a>
<p>The <kbd>k f</kbd> (<code>calc-prime-factors</code>) [<code>prfac</code>] command
attempts to decompose an integer into its prime factors.  For numbers up
to 25 million, the answer is exact although it may take some time.  The
result is a vector of the prime factors in increasing order.  For larger
inputs, prime factors above 5000 may not be found, in which case the
last number in the vector will be an unfactored integer greater than 25
million (with a warning message).  For negative integers, the first
element of the list will be <i>-1</i>.  For inputs <i>-1</i>, <i>0</i>, and
<i>1</i>, the result is a list of the same number.
</p>
<a name="index-k-n"></a>
<a name="index-calc_002dnext_002dprime"></a>
<a name="index-nextprime"></a>
<p>The <kbd>k n</kbd> (<code>calc-next-prime</code>) [<code>nextprime</code>] command finds
the next prime above a given number.  Essentially, it searches by calling
<code>calc-prime-test</code> on successive integers until it finds one that
passes the test.  This is quite fast for integers less than eight million,
but once the probabilistic test comes into play the search may be rather
slow.  Ordinarily this command stops for any prime that passes one iteration
of the primality test.  With a numeric prefix argument, a number must pass
the specified number of iterations before the search stops.  (This only
matters when searching above eight million.)  You can always use additional
<kbd>k p</kbd> commands to increase your certainty that the number is indeed
prime.
</p>
<a name="index-I-k-n"></a>
<a name="index-calc_002dprev_002dprime"></a>
<a name="index-prevprime"></a>
<p>The <kbd>I k n</kbd> (<code>calc-prev-prime</code>) [<code>prevprime</code>] command
analogously finds the next prime less than a given number.
</p>
<a name="index-k-t"></a>
<a name="index-calc_002dtotient"></a>
<a name="index-totient"></a>
<p>The <kbd>k t</kbd> (<code>calc-totient</code>) [<code>totient</code>] command computes the
Euler &ldquo;totient&rdquo;
function,
the number of integers less than &lsquo;<samp>n</samp>&rsquo; which
are relatively prime to &lsquo;<samp>n</samp>&rsquo;.
</p>
<a name="index-k-m"></a>
<a name="index-calc_002dmoebius"></a>
<a name="index-moebius"></a>
<p>The <kbd>k m</kbd> (<code>calc-moebius</code>) [<code>moebius</code>] command computes the
Möbius μ function.  If the input number is a product of &lsquo;<samp>k</samp>&rsquo;
distinct factors, this is &lsquo;<samp>(-1)^k</samp>&rsquo;.  If the input number has any
duplicate factors (i.e., can be divided by the same prime more than once),
the result is zero.
</p>
<hr>
<a name="Probability-Distribution-Functions"></a>
<div class="header">
<p>
Previous: <a href="#Combinatorial-Functions" accesskey="p" rel="prev">Combinatorial Functions</a>, Up: <a href="#Scientific-Functions" accesskey="u" rel="up">Scientific Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Probability-Distribution-Functions-1"></a>
<h3 class="section">8.7 Probability Distribution Functions</h3>

<p>The functions in this section compute various probability distributions.
For continuous distributions, this is the integral of the probability
density function from &lsquo;<samp>x</samp>&rsquo; to infinity.  (These are the &ldquo;upper
tail&rdquo; distribution functions; there are also corresponding &ldquo;lower
tail&rdquo; functions which integrate from minus infinity to &lsquo;<samp>x</samp>&rsquo;.)
For discrete distributions, the upper tail function gives the sum
from &lsquo;<samp>x</samp>&rsquo; to infinity; the lower tail function gives the sum
from minus infinity up to, but not including,&nbsp;<!-- /@w -->&lsquo;<samp>x</samp>&rsquo;.
</p>
<p>To integrate from &lsquo;<samp>x</samp>&rsquo; to &lsquo;<samp>y</samp>&rsquo;, just use the distribution
function twice and subtract.  For example, the probability that a
Gaussian random variable with mean 2 and standard deviation 1 will
lie in the range from 2.5 to 2.8 is &lsquo;<samp>utpn(2.5,2,1) - utpn(2.8,2,1)</samp>&rsquo;
(&ldquo;the probability that it is greater than 2.5, but not greater than 2.8&rdquo;),
or equivalently &lsquo;<samp>ltpn(2.8,2,1) - ltpn(2.5,2,1)</samp>&rsquo;.
</p>
<a name="index-k-B"></a>
<a name="index-I-k-B"></a>
<a name="index-calc_002dutpb"></a>
<a name="index-utpb"></a>
<a name="index-ltpb"></a>
<p>The <kbd>k B</kbd> (<code>calc-utpb</code>) [<code>utpb</code>] function uses the
binomial distribution.  Push the parameters <var>n</var>, <var>p</var>, and
then <var>x</var> onto the stack; the result (&lsquo;<samp>utpb(x,n,p)</samp>&rsquo;) is the
probability that an event will occur <var>x</var> or more times out
of <var>n</var> trials, if its probability of occurring in any given
trial is <var>p</var>.  The <kbd>I k B</kbd> [<code>ltpb</code>] function is
the probability that the event will occur fewer than <var>x</var> times.
</p>
<p>The other probability distribution functions similarly take the
form <kbd>k <var>X</var></kbd> (<code>calc-utp<var>x</var></code>) [<code>utp<var>x</var></code>]
and <kbd>I k <var>X</var></kbd> [<code>ltp<var>x</var></code>], for various letters
<var>x</var>.  The arguments to the algebraic functions are the value of
the random variable first, then whatever other parameters define the
distribution.  Note these are among the few Calc functions where the
order of the arguments in algebraic form differs from the order of
arguments as found on the stack.  (The random variable comes last on
the stack, so that you can type, e.g., <kbd>2 <span class="key">RET</span> 1 <span class="key">RET</span> 2.5
k N M-<span class="key">RET</span> <span class="key">DEL</span> 2.8 k N -</kbd>, using <kbd>M-<span class="key">RET</span> <span class="key">DEL</span></kbd> to
recover the original arguments but substitute a new value for &lsquo;<samp>x</samp>&rsquo;.)
</p>
<a name="index-k-C"></a>
<a name="index-calc_002dutpc"></a>
<a name="index-utpc"></a>
<a name="index-I-k-C"></a>
<a name="index-ltpc"></a>
<p>The &lsquo;<samp>utpc(x,v)</samp>&rsquo; function uses the chi-square distribution with
&lsquo;<samp>v</samp>&rsquo;
degrees of freedom.  It is the probability that a model is
correct if its chi-square statistic is &lsquo;<samp>x</samp>&rsquo;.
</p>
<a name="index-k-F"></a>
<a name="index-calc_002dutpf"></a>
<a name="index-utpf"></a>
<a name="index-I-k-F"></a>
<a name="index-ltpf"></a>
<p>The &lsquo;<samp>utpf(F,v1,v2)</samp>&rsquo; function uses the F distribution, used in
various statistical tests.  The parameters
&lsquo;<samp>v1</samp>&rsquo;
and
&lsquo;<samp>v2</samp>&rsquo;
are the degrees of freedom in the numerator and denominator,
respectively, used in computing the statistic &lsquo;<samp>F</samp>&rsquo;.
</p>
<a name="index-k-N"></a>
<a name="index-calc_002dutpn"></a>
<a name="index-utpn"></a>
<a name="index-I-k-N"></a>
<a name="index-ltpn"></a>
<p>The &lsquo;<samp>utpn(x,m,s)</samp>&rsquo; function uses a normal (Gaussian) distribution
with mean &lsquo;<samp>m</samp>&rsquo; and standard deviation
&lsquo;<samp>s</samp>&rsquo;.
It is the probability that such a normal-distributed random variable
would exceed &lsquo;<samp>x</samp>&rsquo;.
</p>
<a name="index-k-P"></a>
<a name="index-calc_002dutpp"></a>
<a name="index-utpp"></a>
<a name="index-I-k-P"></a>
<a name="index-ltpp"></a>
<p>The &lsquo;<samp>utpp(n,x)</samp>&rsquo; function uses a Poisson distribution with
mean &lsquo;<samp>x</samp>&rsquo;.  It is the probability that &lsquo;<samp>n</samp>&rsquo; or more such
Poisson random events will occur.
</p>
<a name="index-k-T"></a>
<a name="index-calc_002dltpt"></a>
<a name="index-utpt"></a>
<a name="index-I-k-T"></a>
<a name="index-ltpt"></a>
<p>The &lsquo;<samp>utpt(t,v)</samp>&rsquo; function uses the Student&rsquo;s &ldquo;t&rdquo; distribution
with
&lsquo;<samp>v</samp>&rsquo;
degrees of freedom.  It is the probability that a
t-distributed random variable will be greater than &lsquo;<samp>t</samp>&rsquo;.
(Note:  This computes the distribution function
&lsquo;<samp>A(t|v)</samp>&rsquo;
where
&lsquo;<samp>A(0|v) = 1</samp>&rsquo;
and
&lsquo;<samp>A(inf|v) -&gt; 0</samp>&rsquo;.
The <code>UTPT</code> operation on the HP-48 uses a different definition which
returns half of Calc&rsquo;s value:  &lsquo;<samp>UTPT(t,v) = .5*utpt(t,v)</samp>&rsquo;.)
</p>
<p>While Calc does not provide inverses of the probability distribution
functions, the <kbd>a R</kbd> command can be used to solve for the inverse.
Since the distribution functions are monotonic, <kbd>a R</kbd> is guaranteed
to be able to find a solution given any initial guess.
See <a href="#Numerical-Solutions">Numerical Solutions</a>.
</p>
<hr>
<a name="Matrix-Functions"></a>
<div class="header">
<p>
Next: <a href="#Algebra" accesskey="n" rel="next">Algebra</a>, Previous: <a href="#Scientific-Functions" accesskey="p" rel="prev">Scientific Functions</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector_002fMatrix-Functions"></a>
<h2 class="chapter">9 Vector/Matrix Functions</h2>

<p>Many of the commands described here begin with the <kbd>v</kbd> prefix.
(For convenience, the shift-<kbd>V</kbd> prefix is equivalent to <kbd>v</kbd>.)
The commands usually apply to both plain vectors and matrices; some
apply only to matrices or only to square matrices.  If the argument
has the wrong dimensions the operation is left in symbolic form.
</p>
<p>Vectors are entered and displayed using &lsquo;<samp>[a,b,c]</samp>&rsquo; notation.
Matrices are vectors of which all elements are vectors of equal length.
(Though none of the standard Calc commands use this concept, a
three-dimensional matrix or rank-3 tensor could be defined as a
vector of matrices, and so on.)
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Packing-and-Unpacking" accesskey="1">Packing and Unpacking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Building-Vectors" accesskey="2">Building Vectors</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Extracting-Elements" accesskey="3">Extracting Elements</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Manipulating-Vectors" accesskey="4">Manipulating Vectors</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector-and-Matrix-Arithmetic" accesskey="5">Vector and Matrix Arithmetic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Set-Operations" accesskey="6">Set Operations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Statistical-Operations" accesskey="7">Statistical Operations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Reducing-and-Mapping" accesskey="8">Reducing and Mapping</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector-and-Matrix-Formats" accesskey="9">Vector and Matrix Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Packing-and-Unpacking"></a>
<div class="header">
<p>
Next: <a href="#Building-Vectors" accesskey="n" rel="next">Building Vectors</a>, Previous: <a href="#Matrix-Functions" accesskey="p" rel="prev">Matrix Functions</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Packing-and-Unpacking-1"></a>
<h3 class="section">9.1 Packing and Unpacking</h3>

<p>Calc&rsquo;s &ldquo;pack&rdquo; and &ldquo;unpack&rdquo; commands collect stack entries to build
composite objects such as vectors and complex numbers.  They are
described in this chapter because they are most often used to build
vectors.
</p>
<a name="index-v-p"></a>
<a name="index-V-p"></a>
<a name="index-calc_002dpack-1"></a>
<p>The <kbd>v p</kbd> (<code>calc-pack</code>) [<code>pack</code>] command collects several
elements from the stack into a matrix, complex number, HMS form, error
form, etc.  It uses a numeric prefix argument to specify the kind of
object to be built; this argument is referred to as the &ldquo;packing mode.&rdquo;
If the packing mode is a nonnegative integer, a vector of that
length is created.  For example, <kbd>C-u 5 v p</kbd> will pop the top
five stack elements and push back a single vector of those five
elements.  (<kbd>C-u 0 v p</kbd> simply creates an empty vector.)
</p>
<p>The same effect can be had by pressing <kbd>[</kbd> to push an incomplete
vector on the stack, using <tt class="key">TAB</tt> (<code>calc-roll-down</code>) to sneak
the incomplete object up past a certain number of elements, and
then pressing <kbd>]</kbd> to complete the vector.
</p>
<p>Negative packing modes create other kinds of composite objects:
</p>
<dl compact="compact">
<dt><cite>-1</cite></dt>
<dd><p>Two values are collected to build a complex number.  For example,
<kbd>5 <span class="key">RET</span> 7 C-u -1 v p</kbd> creates the complex number
&lsquo;<samp>(5, 7)</samp>&rsquo;.  The result is always a rectangular complex
number.  The two input values must both be real numbers,
i.e., integers, fractions, or floats.  If they are not, Calc
will instead build a formula like &lsquo;<samp>a + (0, 1) b</samp>&rsquo;.  (The
other packing modes also create a symbolic answer if the
components are not suitable.)
</p>
</dd>
<dt><cite>-2</cite></dt>
<dd><p>Two values are collected to build a polar complex number.
The first is the magnitude; the second is the phase expressed
in either degrees or radians according to the current angular
mode.
</p>
</dd>
<dt><cite>-3</cite></dt>
<dd><p>Three values are collected into an HMS form.  The first
two values (hours and minutes) must be integers or
integer-valued floats.  The third value may be any real
number.
</p>
</dd>
<dt><cite>-4</cite></dt>
<dd><p>Two values are collected into an error form.  The inputs
may be real numbers or formulas.
</p>
</dd>
<dt><cite>-5</cite></dt>
<dd><p>Two values are collected into a modulo form.  The inputs
must be real numbers.
</p>
</dd>
<dt><cite>-6</cite></dt>
<dd><p>Two values are collected into the interval &lsquo;<samp>[a .. b]</samp>&rsquo;.
The inputs may be real numbers, HMS or date forms, or formulas.
</p>
</dd>
<dt><cite>-7</cite></dt>
<dd><p>Two values are collected into the interval &lsquo;<samp>[a .. b)</samp>&rsquo;.
</p>
</dd>
<dt><cite>-8</cite></dt>
<dd><p>Two values are collected into the interval &lsquo;<samp>(a .. b]</samp>&rsquo;.
</p>
</dd>
<dt><cite>-9</cite></dt>
<dd><p>Two values are collected into the interval &lsquo;<samp>(a .. b)</samp>&rsquo;.
</p>
</dd>
<dt><cite>-10</cite></dt>
<dd><p>Two integer values are collected into a fraction.
</p>
</dd>
<dt><cite>-11</cite></dt>
<dd><p>Two values are collected into a floating-point number.
The first is the mantissa; the second, which must be an
integer, is the exponent.  The result is the mantissa
times ten to the power of the exponent.
</p>
</dd>
<dt><cite>-12</cite></dt>
<dd><p>This is treated the same as <i>-11</i> by the <kbd>v p</kbd> command.
When unpacking, <i>-12</i> specifies that a floating-point mantissa
is desired.
</p>
</dd>
<dt><cite>-13</cite></dt>
<dd><p>A real number is converted into a date form.
</p>
</dd>
<dt><cite>-14</cite></dt>
<dd><p>Three numbers (year, month, day) are packed into a pure date form.
</p>
</dd>
<dt><cite>-15</cite></dt>
<dd><p>Six numbers are packed into a date/time form.
</p></dd>
</dl>

<p>With any of the two-input negative packing modes, either or both
of the inputs may be vectors.  If both are vectors of the same
length, the result is another vector made by packing corresponding
elements of the input vectors.  If one input is a vector and the
other is a plain number, the number is packed along with each vector
element to produce a new vector.  For example, <kbd>C-u -4 v p</kbd>
could be used to convert a vector of numbers and a vector of errors
into a single vector of error forms; <kbd>C-u -5 v p</kbd> could convert
a vector of numbers and a single number <var>M</var> into a vector of
numbers modulo <var>M</var>.
</p>
<p>If you don&rsquo;t give a prefix argument to <kbd>v p</kbd>, it takes
the packing mode from the top of the stack.  The elements to
be packed then begin at stack level 2.  Thus
<kbd>1 <span class="key">RET</span> 2 <span class="key">RET</span> 4 n v p</kbd> is another way to
enter the error form &lsquo;<samp>1 +/- 2</samp>&rsquo;.
</p>
<p>If the packing mode taken from the stack is a vector, the result is a
matrix with the dimensions specified by the elements of the vector,
which must each be integers.  For example, if the packing mode is
&lsquo;<samp>[2, 3]</samp>&rsquo;, then six numbers will be taken from the stack and
returned in the form &lsquo;<samp>[[a,&nbsp;b,&nbsp;c]<!-- /@w -->, [d, e, f]]</samp>&rsquo;.
</p>
<p>If any elements of the vector are negative, other kinds of
packing are done at that level as described above.  For
example, &lsquo;<samp>[2, 3, -4]</samp>&rsquo; takes 12 objects and creates a
2x3
matrix of error forms: &lsquo;<samp>[[a +/- b, c +/- d ... ]]</samp>&rsquo;.
Also, &lsquo;<samp>[-4, -10]</samp>&rsquo; will convert four integers into an
error form consisting of two fractions:  &lsquo;<samp>a:b +/- c:d</samp>&rsquo;.
</p>
<a name="index-pack"></a>
<p>There is an equivalent algebraic function,
&lsquo;<samp>pack(<var>mode</var>, <var>items</var>)</samp>&rsquo; where <var>mode</var> is a
packing mode (an integer or a vector of integers) and <var>items</var>
is a vector of objects to be packed (re-packed, really) according
to that mode.  For example, &lsquo;<samp>pack([3, -4], [a,b,c,d,e,f])</samp>&rsquo;
yields &lsquo;<samp>[a +/- b, c&nbsp;<span class="nolinebreak">+/-</span>&nbsp;d<!-- /@w -->, e +/- f]</samp>&rsquo;.  The function is
left in symbolic form if the packing mode is invalid, or if the
number of data items does not match the number of items required
by the mode.
</p>
<a name="index-v-u"></a>
<a name="index-V-u"></a>
<a name="index-calc_002dunpack-1"></a>
<p>The <kbd>v u</kbd> (<code>calc-unpack</code>) command takes the vector, complex
number, HMS form, or other composite object on the top of the stack and
&ldquo;unpacks&rdquo; it, pushing each of its elements onto the stack as separate
objects.  Thus, it is the &ldquo;inverse&rdquo; of <kbd>v p</kbd>.  If the value
at the top of the stack is a formula, <kbd>v u</kbd> unpacks it by pushing
each of the arguments of the top-level operator onto the stack.
</p>
<p>You can optionally give a numeric prefix argument to <kbd>v u</kbd>
to specify an explicit (un)packing mode.  If the packing mode is
negative and the input is actually a vector or matrix, the result
will be two or more similar vectors or matrices of the elements.
For example, given the vector &lsquo;<samp>[a&nbsp;<span class="nolinebreak">+/-</span>&nbsp;b<!-- /@w -->, c^2, d +/- 7]</samp>&rsquo;,
the result of <kbd>C-u -4 v u</kbd> will be the two vectors
&lsquo;<samp>[a, c^2, d]</samp>&rsquo; and &lsquo;<samp>[b,&nbsp;0,&nbsp;7]</samp>&rsquo;<!-- /@w -->.
</p>
<p>Note that the prefix argument can have an effect even when the input is
not a vector.  For example, if the input is the number <i>-5</i>, then
<kbd>c-u -1 v u</kbd> yields <i>-5</i> and 0 (the components of <i>-5</i>
when viewed as a rectangular complex number); <kbd>C-u -2 v u</kbd> yields 5
and 180 (assuming Degrees mode); and <kbd>C-u -10 v u</kbd> yields <i>-5</i>
and 1 (the numerator and denominator of <i>-5</i>, viewed as a rational
number).  Plain <kbd>v u</kbd> with this input would complain that the input
is not a composite object.
</p>
<p>Unpacking mode <i>-11</i> converts a float into an integer mantissa and
an integer exponent, where the mantissa is not divisible by 10
(except that 0.0 is represented by a mantissa and exponent of 0).
Unpacking mode <i>-12</i> converts a float into a floating-point mantissa
and integer exponent, where the mantissa (for non-zero numbers)
is guaranteed to lie in the range [1 .. 10).  In both cases,
the mantissa is shifted left or right (and the exponent adjusted
to compensate) in order to satisfy these constraints.
</p>
<p>Positive unpacking modes are treated differently than for <kbd>v p</kbd>.
A mode of 1 is much like plain <kbd>v u</kbd> with no prefix argument,
except that in addition to the components of the input object,
a suitable packing mode to re-pack the object is also pushed.
Thus, <kbd>C-u 1 v u</kbd> followed by <kbd>v p</kbd> will re-build the
original object.
</p>
<p>A mode of 2 unpacks two levels of the object; the resulting
re-packing mode will be a vector of length 2.  This might be used
to unpack a matrix, say, or a vector of error forms.  Higher
unpacking modes unpack the input even more deeply.
</p>
<a name="index-unpack"></a>
<p>There are two algebraic functions analogous to <kbd>v u</kbd>.
The &lsquo;<samp>unpack(<var>mode</var>, <var>item</var>)</samp>&rsquo; function unpacks the
<var>item</var> using the given <var>mode</var>, returning the result as
a vector of components.  Here the <var>mode</var> must be an
integer, not a vector.  For example, &lsquo;<samp>unpack(-4, a +/- b)</samp>&rsquo;
returns &lsquo;<samp>[a, b]</samp>&rsquo;, as does &lsquo;<samp>unpack(1, a +/- b)</samp>&rsquo;.
</p>
<a name="index-unpackt"></a>
<p>The <code>unpackt</code> function is like <code>unpack</code> but instead
of returning a simple vector of items, it returns a vector of
two things:  The mode, and the vector of items.  For example,
&lsquo;<samp>unpackt(1, 2:3 +/- 1:4)</samp>&rsquo; returns &lsquo;<samp>[-4, [2:3, 1:4]]</samp>&rsquo;,
and &lsquo;<samp>unpackt(2, 2:3 +/- 1:4)</samp>&rsquo; returns &lsquo;<samp>[[-4, -10], [2, 3, 1, 4]]</samp>&rsquo;.
The identity for re-building the original object is
&lsquo;<samp>apply(pack, unpackt(<var>n</var>, <var>x</var>)) = <var>x</var></samp>&rsquo;.  (The
<code>apply</code> function builds a function call given the function
name and a vector of arguments.)
</p>
<a name="index-Numerator-of-a-fraction_002c-extracting"></a>
<p>Subscript notation is a useful way to extract a particular part
of an object.  For example, to get the numerator of a rational
number, you can use &lsquo;<samp>unpack(-10, <var>x</var>)_1</samp>&rsquo;.
</p>
<hr>
<a name="Building-Vectors"></a>
<div class="header">
<p>
Next: <a href="#Extracting-Elements" accesskey="n" rel="next">Extracting Elements</a>, Previous: <a href="#Packing-and-Unpacking" accesskey="p" rel="prev">Packing and Unpacking</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Vectors-1"></a>
<h3 class="section">9.2 Building Vectors</h3>

<p>Vectors and matrices can be added,
subtracted, multiplied, and divided; see <a href="#Basic-Arithmetic">Basic Arithmetic</a>.
</p>
<a name="index-_007c"></a>
<a name="index-calc_002dconcat"></a>
<a name="index-_007c-1"></a>
<p>The <kbd>|</kbd> (<code>calc-concat</code>) [<code>vconcat</code>] command &ldquo;concatenates&rdquo; two vectors
into one.  For example, after <kbd>[&nbsp;1&nbsp;,&nbsp;2&nbsp;]<!-- /@w --> [ 3 , 4 ] |</kbd>, the stack
will contain the single vector &lsquo;<samp>[1, 2, 3, 4]</samp>&rsquo;.  If the arguments
are matrices, the rows of the first matrix are concatenated with the
rows of the second.  (In other words, two matrices are just two vectors
of row-vectors as far as <kbd>|</kbd> is concerned.)
</p>
<p>If either argument to <kbd>|</kbd> is a scalar (a non-vector), it is treated
like a one-element vector for purposes of concatenation:  <kbd>1 [ 2 , 3 ] |</kbd>
produces the vector &lsquo;<samp>[1, 2, 3]</samp>&rsquo;.  Likewise, if one argument is a
matrix and the other is a plain vector, the vector is treated as a
one-row matrix.
</p>
<a name="index-H-_007c"></a>
<a name="index-append"></a>
<p>The <kbd>H |</kbd> (<code>calc-append</code>) [<code>append</code>] command concatenates
two vectors without any special cases.  Both inputs must be vectors.
Whether or not they are matrices is not taken into account.  If either
argument is a scalar, the <code>append</code> function is left in symbolic form.
See also <code>cons</code> and <code>rcons</code> below.
</p>
<a name="index-I-_007c"></a>
<a name="index-H-I-_007c"></a>
<p>The <kbd>I |</kbd> and <kbd>H I |</kbd> commands are similar, but they use their
two stack arguments in the opposite order.  Thus <kbd>I |</kbd> is equivalent
to <kbd><span class="key">TAB</span> |</kbd>, but possibly more convenient and also a bit faster.
</p>
<a name="index-v-d"></a>
<a name="index-V-d"></a>
<a name="index-calc_002ddiag"></a>
<a name="index-diag"></a>
<p>The <kbd>v d</kbd> (<code>calc-diag</code>) [<code>diag</code>] function builds a diagonal
square matrix.  The optional numeric prefix gives the number of rows
and columns in the matrix.  If the value at the top of the stack is a
vector, the elements of the vector are used as the diagonal elements; the
prefix, if specified, must match the size of the vector.  If the value on
the stack is a scalar, it is used for each element on the diagonal, and
the prefix argument is required.
</p>
<p>To build a constant square matrix, e.g., a
3x3
matrix filled with ones, use <kbd>0 M-3 v d 1 +</kbd>, i.e., build a zero
matrix first and then add a constant value to that matrix.  (Another
alternative would be to use <kbd>v b</kbd> and <kbd>v a</kbd>; see below.)
</p>
<a name="index-v-i"></a>
<a name="index-V-i"></a>
<a name="index-calc_002dident"></a>
<a name="index-idn"></a>
<p>The <kbd>v i</kbd> (<code>calc-ident</code>) [<code>idn</code>] function builds an identity
matrix of the specified size.  It is a convenient form of <kbd>v d</kbd>
where the diagonal element is always one.  If no prefix argument is given,
this command prompts for one.
</p>
<p>In algebraic notation, &lsquo;<samp>idn(a,n)</samp>&rsquo; acts much like &lsquo;<samp>diag(a,n)</samp>&rsquo;,
except that &lsquo;<samp>a</samp>&rsquo; is required to be a scalar (non-vector) quantity.
If &lsquo;<samp>n</samp>&rsquo; is omitted, &lsquo;<samp>idn(a)</samp>&rsquo; represents &lsquo;<samp>a</samp>&rsquo; times an
identity matrix of unknown size.  Calc can operate algebraically on
such generic identity matrices, and if one is combined with a matrix
whose size is known, it is converted automatically to an identity
matrix of a suitable matching size.  The <kbd>v i</kbd> command with an
argument of zero creates a generic identity matrix, &lsquo;<samp>idn(1)</samp>&rsquo;.
Note that in dimensioned Matrix mode (see <a href="#Matrix-Mode">Matrix Mode</a>), generic
identity matrices are immediately expanded to the current default
dimensions.
</p>
<a name="index-v-x"></a>
<a name="index-V-x"></a>
<a name="index-calc_002dindex"></a>
<a name="index-index"></a>
<p>The <kbd>v x</kbd> (<code>calc-index</code>) [<code>index</code>] function builds a vector
of consecutive integers from 1 to <var>n</var>, where <var>n</var> is the numeric
prefix argument.  If you do not provide a prefix argument, you will be
prompted to enter a suitable number.  If <var>n</var> is negative, the result
is a vector of negative integers from <var>n</var> to <i>-1</i>.
</p>
<p>With a prefix argument of just <kbd>C-u</kbd>, the <kbd>v x</kbd> command takes
three values from the stack: <var>n</var>, <var>start</var>, and <var>incr</var> (with
<var>incr</var> at top-of-stack).  Counting starts at <var>start</var> and increases
by <var>incr</var> for successive vector elements.  If <var>start</var> or <var>n</var>
is in floating-point format, the resulting vector elements will also be
floats.  Note that <var>start</var> and <var>incr</var> may in fact be any kind
of numbers or formulas.
</p>
<p>When <var>start</var> and <var>incr</var> are specified, a negative <var>n</var> has a
different interpretation:  It causes a geometric instead of arithmetic
sequence to be generated.  For example, &lsquo;<samp>index(-3, a, b)</samp>&rsquo; produces
&lsquo;<samp>[a, a b, a b^2]</samp>&rsquo;.  If you omit <var>incr</var> in the algebraic form,
&lsquo;<samp>index(<var>n</var>, <var>start</var>)</samp>&rsquo;, the default value for <var>incr</var>
is one for positive <var>n</var> or two for negative <var>n</var>.
</p>
<a name="index-v-b"></a>
<a name="index-V-b"></a>
<a name="index-calc_002dbuild_002dvector"></a>
<a name="index-cvec"></a>
<p>The <kbd>v b</kbd> (<code>calc-build-vector</code>) [<code>cvec</code>] function builds a
vector of <var>n</var> copies of the value on the top of the stack, where <var>n</var>
is the numeric prefix argument.  In algebraic formulas, &lsquo;<samp>cvec(x,n,m)</samp>&rsquo;
can also be used to build an <var>n</var>-by-<var>m</var> matrix of copies of <var>x</var>.
(Interactively, just use <kbd>v b</kbd> twice: once to build a row, then again
to build a matrix of copies of that row.)
</p>
<a name="index-v-h"></a>
<a name="index-V-h"></a>
<a name="index-I-v-h"></a>
<a name="index-I-V-h"></a>
<a name="index-calc_002dhead"></a>
<a name="index-calc_002dtail"></a>
<a name="index-head"></a>
<a name="index-tail"></a>
<p>The <kbd>v h</kbd> (<code>calc-head</code>) [<code>head</code>] function returns the first
element of a vector.  The <kbd>I v h</kbd> (<code>calc-tail</code>) [<code>tail</code>]
function returns the vector with its first element removed.  In both
cases, the argument must be a non-empty vector.
</p>
<a name="index-v-k"></a>
<a name="index-V-k"></a>
<a name="index-calc_002dcons"></a>
<a name="index-cons"></a>
<p>The <kbd>v k</kbd> (<code>calc-cons</code>) [<code>cons</code>] function takes a value <var>h</var>
and a vector <var>t</var> from the stack, and produces the vector whose head is
<var>h</var> and whose tail is <var>t</var>.  This is similar to <kbd>|</kbd>, except
if <var>h</var> is itself a vector, <kbd>|</kbd> will concatenate the two vectors
whereas <code>cons</code> will insert <var>h</var> at the front of the vector <var>t</var>.
</p>
<a name="index-H-v-h"></a>
<a name="index-H-V-h"></a>
<a name="index-rhead"></a>
<a name="index-H-I-v-h"></a>
<a name="index-H-I-V-h"></a>
<a name="index-H-v-k"></a>
<a name="index-H-V-k"></a>
<a name="index-rtail"></a>
<a name="index-rcons"></a>
<p>Each of these three functions also accepts the Hyperbolic flag [<code>rhead</code>,
<code>rtail</code>, <code>rcons</code>] in which case <var>t</var> instead represents
the <em>last</em> single element of the vector, with <var>h</var>
representing the remainder of the vector.  Thus the vector
&lsquo;<samp>[a, b, c, d] = cons(a, [b, c, d]) = rcons([a, b, c], d)</samp>&rsquo;.
Also, &lsquo;<samp>head([a, b, c, d]) = a</samp>&rsquo;, &lsquo;<samp>tail([a, b, c, d]) = [b, c, d]</samp>&rsquo;,
&lsquo;<samp>rhead([a, b, c, d]) = [a, b, c]</samp>&rsquo;, and &lsquo;<samp>rtail([a, b, c, d]) = d</samp>&rsquo;.
</p>
<hr>
<a name="Extracting-Elements"></a>
<div class="header">
<p>
Next: <a href="#Manipulating-Vectors" accesskey="n" rel="next">Manipulating Vectors</a>, Previous: <a href="#Building-Vectors" accesskey="p" rel="prev">Building Vectors</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Extracting-Vector-Elements"></a>
<h3 class="section">9.3 Extracting Vector Elements</h3>

<p><a name="index-v-r"></a>
<a name="index-V-r"></a>
<a name="index-calc_002dmrow"></a>
<a name="index-mrow"></a>
The <kbd>v r</kbd> (<code>calc-mrow</code>) [<code>mrow</code>] command extracts one row of
the matrix on the top of the stack, or one element of the plain vector on
the top of the stack.  The row or element is specified by the numeric
prefix argument; the default is to prompt for the row or element number.
The matrix or vector is replaced by the specified row or element in the
form of a vector or scalar, respectively.
</p>
<a name="index-Permutations_002c-applying"></a>
<p>With a prefix argument of <kbd>C-u</kbd> only, <kbd>v r</kbd> takes the index of
the element or row from the top of the stack, and the vector or matrix
from the second-to-top position.  If the index is itself a vector of
integers, the result is a vector of the corresponding elements of the
input vector, or a matrix of the corresponding rows of the input matrix.
This command can be used to obtain any permutation of a vector.
</p>
<p>With <kbd>C-u</kbd>, if the index is an interval form with integer components,
it is interpreted as a range of indices and the corresponding subvector or
submatrix is returned.
</p>
<a name="index-Subscript-notation"></a>
<a name="index-a-_005f"></a>
<a name="index-calc_002dsubscript"></a>
<a name="index-subscr"></a>
<a name="index-_005f-1"></a>
<p>Subscript notation in algebraic formulas (&lsquo;<samp>a_b</samp>&rsquo;) stands for the
Calc function <code>subscr</code>, which is synonymous with <code>mrow</code>.
Thus, &lsquo;<samp>[x, y, z]_k</samp>&rsquo; produces &lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>y</samp>&rsquo;, or &lsquo;<samp>z</samp>&rsquo; if
&lsquo;<samp>k</samp>&rsquo; is one, two, or three, respectively.  A double subscript
(&lsquo;<samp>M_i_j</samp>&rsquo;, equivalent to &lsquo;<samp>subscr(subscr(M, i), j)</samp>&rsquo;) will
access the element at row &lsquo;<samp>i</samp>&rsquo;, column &lsquo;<samp>j</samp>&rsquo; of a matrix.
The <kbd>a _</kbd> (<code>calc-subscript</code>) command creates a subscript
formula &lsquo;<samp>a_b</samp>&rsquo; out of two stack entries.  (It is on the <kbd>a</kbd>
&ldquo;algebra&rdquo; prefix because subscripted variables are often used
purely as an algebraic notation.)
</p>
<a name="index-mrrow"></a>
<p>Given a negative prefix argument, <kbd>v r</kbd> instead deletes one row or
element from the matrix or vector on the top of the stack.  Thus
<kbd>C-u 2 v r</kbd> replaces a matrix with its second row, but <kbd>C-u -2 v r</kbd>
replaces the matrix with the same matrix with its second row removed.
In algebraic form this function is called <code>mrrow</code>.
</p>
<a name="index-getdiag"></a>
<p>Given a prefix argument of zero, <kbd>v r</kbd> extracts the diagonal elements
of a square matrix in the form of a vector.  In algebraic form this
function is called <code>getdiag</code>.
</p>
<a name="index-v-c"></a>
<a name="index-V-c"></a>
<a name="index-calc_002dmcol"></a>
<a name="index-mcol"></a>
<a name="index-mrcol"></a>
<p>The <kbd>v c</kbd> (<code>calc-mcol</code>) [<code>mcol</code> or <code>mrcol</code>] command is
the analogous operation on columns of a matrix.  Given a plain vector
it extracts (or removes) one element, just like <kbd>v r</kbd>.  If the
index in <kbd>C-u v c</kbd> is an interval or vector and the argument is a
matrix, the result is a submatrix with only the specified columns
retained (and possibly permuted in the case of a vector index).
</p>
<p>To extract a matrix element at a given row and column, use <kbd>v r</kbd> to
extract the row as a vector, then <kbd>v c</kbd> to extract the column element
from that vector.  In algebraic formulas, it is often more convenient to
use subscript notation:  &lsquo;<samp>m_i_j</samp>&rsquo; gives row &lsquo;<samp>i</samp>&rsquo;, column &lsquo;<samp>j</samp>&rsquo;
of matrix &lsquo;<samp>m</samp>&rsquo;.
</p>
<a name="index-v-s"></a>
<a name="index-V-s"></a>
<a name="index-calc_002dsubvector"></a>
<a name="index-subvec"></a>
<p>The <kbd>v s</kbd> (<code>calc-subvector</code>) [<code>subvec</code>] command extracts
a subvector of a vector.  The arguments are the vector, the starting
index, and the ending index, with the ending index in the top-of-stack
position.  The starting index indicates the first element of the vector
to take.  The ending index indicates the first element <em>past</em> the
range to be taken.  Thus, &lsquo;<samp>subvec([a, b, c, d, e], 2, 4)</samp>&rsquo; produces
the subvector &lsquo;<samp>[b, c]</samp>&rsquo;.  You could get the same result using
&lsquo;<samp>mrow([a, b, c, d, e], [2&nbsp;..&nbsp;4)<!-- /@w -->)</samp>&rsquo;.
</p>
<p>If either the start or the end index is zero or negative, it is
interpreted as relative to the end of the vector.  Thus
&lsquo;<samp>subvec([a, b, c, d, e], 2, -2)</samp>&rsquo; also produces &lsquo;<samp>[b, c]</samp>&rsquo;.  In
the algebraic form, the end index can be omitted in which case it
is taken as zero, i.e., elements from the starting element to the
end of the vector are used.  The infinity symbol, <code>inf</code>, also
has this effect when used as the ending index.
</p>
<a name="index-I-v-s"></a>
<a name="index-I-V-s"></a>
<a name="index-rsubvec"></a>
<p>With the Inverse flag, <kbd>I v s</kbd> [<code>rsubvec</code>] removes a subvector
from a vector.  The arguments are interpreted the same as for the
normal <kbd>v s</kbd> command.  Thus, &lsquo;<samp>rsubvec([a, b, c, d, e], 2, 4)</samp>&rsquo;
produces &lsquo;<samp>[a, d, e]</samp>&rsquo;.  It is always true that <code>subvec</code> and
<code>rsubvec</code> return complementary parts of the input vector.
</p>
<p>See <a href="#Selecting-Subformulas">Selecting Subformulas</a>, for an alternative way to operate on
vectors one element at a time.
</p>
<hr>
<a name="Manipulating-Vectors"></a>
<div class="header">
<p>
Next: <a href="#Vector-and-Matrix-Arithmetic" accesskey="n" rel="next">Vector and Matrix Arithmetic</a>, Previous: <a href="#Extracting-Elements" accesskey="p" rel="prev">Extracting Elements</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Manipulating-Vectors-1"></a>
<h3 class="section">9.4 Manipulating Vectors</h3>

<p><a name="index-v-l"></a>
<a name="index-V-l"></a>
<a name="index-calc_002dvlength"></a>
<a name="index-vlen"></a>
The <kbd>v l</kbd> (<code>calc-vlength</code>) [<code>vlen</code>] command computes the
length of a vector.  The length of a non-vector is considered to be zero.
Note that matrices are just vectors of vectors for the purposes of this
command.
</p>
<a name="index-H-v-l"></a>
<a name="index-H-V-l"></a>
<a name="index-mdims"></a>
<p>With the Hyperbolic flag, <kbd>H v l</kbd> [<code>mdims</code>] computes a vector
of the dimensions of a vector, matrix, or higher-order object.  For
example, &lsquo;<samp>mdims([[a,b,c],[d,e,f]])</samp>&rsquo; returns &lsquo;<samp>[2, 3]</samp>&rsquo; since
its argument is a
2x3
matrix.
</p>
<a name="index-v-f"></a>
<a name="index-V-f"></a>
<a name="index-calc_002dvector_002dfind"></a>
<a name="index-find"></a>
<p>The <kbd>v f</kbd> (<code>calc-vector-find</code>) [<code>find</code>] command searches
along a vector for the first element equal to a given target.  The target
is on the top of the stack; the vector is in the second-to-top position.
If a match is found, the result is the index of the matching element.
Otherwise, the result is zero.  The numeric prefix argument, if given,
allows you to select any starting index for the search.
</p>
<a name="index-v-a"></a>
<a name="index-V-a"></a>
<a name="index-calc_002darrange_002dvector"></a>
<a name="index-arrange"></a>
<a name="index-Arranging-a-matrix"></a>
<a name="index-Reshaping-a-matrix"></a>
<a name="index-Flattening-a-matrix"></a>
<p>The <kbd>v a</kbd> (<code>calc-arrange-vector</code>) [<code>arrange</code>] command
rearranges a vector to have a certain number of columns and rows.  The
numeric prefix argument specifies the number of columns; if you do not
provide an argument, you will be prompted for the number of columns.
The vector or matrix on the top of the stack is <em>flattened</em> into a
plain vector.  If the number of columns is nonzero, this vector is
then formed into a matrix by taking successive groups of <var>n</var> elements.
If the number of columns does not evenly divide the number of elements
in the vector, the last row will be short and the result will not be
suitable for use as a matrix.  For example, with the matrix
&lsquo;<samp>[[1, 2], [3,&nbsp;4]<!-- /@w -->]</samp>&rsquo; on the stack, <kbd>v a 4</kbd> produces
&lsquo;<samp>[[1, 2, 3, 4]]</samp>&rsquo; (a
1x4
matrix), <kbd>v a 1</kbd> produces &lsquo;<samp>[[1], [2], [3], [4]]</samp>&rsquo; (a
4x1
matrix), <kbd>v a 2</kbd> produces &lsquo;<samp>[[1, 2], [3, 4]]</samp>&rsquo; (the original
2x2
matrix), <kbd>v&nbsp;a&nbsp;3</kbd><!-- /@w --> produces &lsquo;<samp>[[1, 2, 3], [4]]</samp>&rsquo; (not a
matrix), and <kbd>v a 0</kbd> produces the flattened list
&lsquo;<samp>[1, 2, 3,&nbsp;4<!-- /@w -->]</samp>&rsquo;.
</p>
<a name="index-Sorting-data"></a>
<a name="index-v-S"></a>
<a name="index-V-S"></a>
<a name="index-I-v-S"></a>
<a name="index-I-V-S"></a>
<a name="index-calc_002dsort"></a>
<a name="index-sort"></a>
<a name="index-rsort"></a>
<p>The <kbd>V S</kbd> (<code>calc-sort</code>) [<code>sort</code>] command sorts the elements of
a vector into increasing order.  Real numbers, real infinities, and
constant interval forms come first in this ordering; next come other
kinds of numbers, then variables (in alphabetical order), then finally
come formulas and other kinds of objects; these are sorted according
to a kind of lexicographic ordering with the useful property that
one vector is less or greater than another if the first corresponding
unequal elements are less or greater, respectively.  Since quoted strings
are stored by Calc internally as vectors of ASCII character codes
(see <a href="#Strings">Strings</a>), this means vectors of strings are also sorted into
alphabetical order by this command.
</p>
<p>The <kbd>I V S</kbd> [<code>rsort</code>] command sorts a vector into decreasing order.
</p>
<a name="index-Permutation_002c-inverse-of"></a>
<a name="index-Inverse-of-permutation"></a>
<a name="index-Index-tables"></a>
<a name="index-Rank-tables"></a>
<a name="index-v-G"></a>
<a name="index-V-G"></a>
<a name="index-I-v-G"></a>
<a name="index-I-V-G"></a>
<a name="index-calc_002dgrade"></a>
<a name="index-grade"></a>
<a name="index-rgrade"></a>
<p>The <kbd>V G</kbd> (<code>calc-grade</code>) [<code>grade</code>, <code>rgrade</code>] command
produces an index table or permutation vector which, if applied to the
input vector (as the index of <kbd>C-u v r</kbd>, say), would sort the vector.
A permutation vector is just a vector of integers from 1 to <var>n</var>, where
each integer occurs exactly once.  One application of this is to sort a
matrix of data rows using one column as the sort key; extract that column,
grade it with <kbd>V G</kbd>, then use the result to reorder the original matrix
with <kbd>C-u v r</kbd>.  Another interesting property of the <code>V G</code> command
is that, if the input is itself a permutation vector, the result will
be the inverse of the permutation.  The inverse of an index table is
a rank table, whose <var>k</var>th element says where the <var>k</var>th original
vector element will rest when the vector is sorted.  To get a rank
table, just use <kbd>V G V G</kbd>.
</p>
<p>With the Inverse flag, <kbd>I V G</kbd> produces an index table that would
sort the input into decreasing order.  Note that <kbd>V S</kbd> and <kbd>V G</kbd>
use a &ldquo;stable&rdquo; sorting algorithm, i.e., any two elements which are equal
will not be moved out of their original order.  Generally there is no way
to tell with <kbd>V S</kbd>, since two elements which are equal look the same,
but with <kbd>V G</kbd> this can be an important issue.  In the matrix-of-rows
example, suppose you have names and telephone numbers as two columns and
you wish to sort by phone number primarily, and by name when the numbers
are equal.  You can sort the data matrix by names first, and then again
by phone numbers.  Because the sort is stable, any two rows with equal
phone numbers will remain sorted by name even after the second sort.
</p>
<a name="index-Histograms"></a>
<a name="index-v-H"></a>
<a name="index-V-H"></a>
<a name="index-calc_002dhistogram"></a>
<a name="index-histogram"></a>
<p>The <kbd>V H</kbd> (<code>calc-histogram</code>) [<code>histogram</code>] command builds a
histogram of a vector of numbers.  Vector elements are assumed to be
integers or real numbers in the range [0..<var>n</var>) for some &ldquo;number of
bins&rdquo; <var>n</var>, which is the numeric prefix argument given to the
command.  The result is a vector of <var>n</var> counts of how many times
each value appeared in the original vector.  Non-integers in the input
are rounded down to integers.  Any vector elements outside the specified
range are ignored.  (You can tell if elements have been ignored by noting
that the counts in the result vector don&rsquo;t add up to the length of the
input vector.)
</p>
<p>If no prefix is given, then you will be prompted for a vector which
will be used to determine the bins. (If a positive integer is given at
this prompt, it will be still treated as if it were given as a
prefix.)  Each bin will consist of the interval of numbers closest to
the corresponding number of this new vector; if the vector
&lsquo;<samp>[a, b, c, ...]</samp>&rsquo; is entered at the prompt, the bins will be
&lsquo;<samp>(-inf, (a+b)/2]</samp>&rsquo;, &lsquo;<samp>((a+b)/2, (b+c)/2]</samp>&rsquo;, etc.  The result of
this command will be a vector counting how many elements of the
original vector are in each bin.
</p>
<p>The result will then be a vector with the same length as this new vector;
each element of the new vector will be replaced by the number of
elements of the original vector which are closest to it.
</p>
<a name="index-H-v-H"></a>
<a name="index-H-V-H"></a>
<p>With the Hyperbolic flag, <kbd>H V H</kbd> pulls two vectors from the stack.
The second-to-top vector is the list of numbers as before.  The top
vector is an equal-sized list of &ldquo;weights&rdquo; to attach to the elements
of the data vector.  For example, if the first data element is 4.2 and
the first weight is 10, then 10 will be added to bin 4 of the result
vector.  Without the hyperbolic flag, every element has a weight of one.
</p>
<a name="index-v-t"></a>
<a name="index-V-t"></a>
<a name="index-calc_002dtranspose"></a>
<a name="index-trn"></a>
<p>The <kbd>v t</kbd> (<code>calc-transpose</code>) [<code>trn</code>] command computes
the transpose of the matrix at the top of the stack.  If the argument
is a plain vector, it is treated as a row vector and transposed into
a one-column matrix.
</p>
<a name="index-v-v"></a>
<a name="index-V-v"></a>
<a name="index-calc_002dreverse_002dvector"></a>
<a name="index-rev"></a>
<p>The <kbd>v v</kbd> (<code>calc-reverse-vector</code>) [<code>rev</code>] command reverses
a vector end-for-end.  Given a matrix, it reverses the order of the rows.
(To reverse the columns instead, just use <kbd>v t v v v t</kbd>.  The same
principle can be used to apply other vector commands to the columns of
a matrix.)
</p>
<a name="index-v-m"></a>
<a name="index-V-m"></a>
<a name="index-calc_002dmask_002dvector"></a>
<a name="index-vmask"></a>
<p>The <kbd>v m</kbd> (<code>calc-mask-vector</code>) [<code>vmask</code>] command uses
one vector as a mask to extract elements of another vector.  The mask
is in the second-to-top position; the target vector is on the top of
the stack.  These vectors must have the same length.  The result is
the same as the target vector, but with all elements which correspond
to zeros in the mask vector deleted.  Thus, for example,
&lsquo;<samp>vmask([1, 0, 1, 0, 1], [a, b, c, d, e])</samp>&rsquo; produces &lsquo;<samp>[a, c, e]</samp>&rsquo;.
See <a href="#Logical-Operations">Logical Operations</a>.
</p>
<a name="index-v-e"></a>
<a name="index-V-e"></a>
<a name="index-calc_002dexpand_002dvector"></a>
<a name="index-vexp"></a>
<p>The <kbd>v e</kbd> (<code>calc-expand-vector</code>) [<code>vexp</code>] command
expands a vector according to another mask vector.  The result is a
vector the same length as the mask, but with nonzero elements replaced
by successive elements from the target vector.  The length of the target
vector is normally the number of nonzero elements in the mask.  If the
target vector is longer, its last few elements are lost.  If the target
vector is shorter, the last few nonzero mask elements are left
unreplaced in the result.  Thus &lsquo;<samp>vexp([2, 0, 3, 0, 7], [a, b])</samp>&rsquo;
produces &lsquo;<samp>[a, 0, b, 0, 7]</samp>&rsquo;.
</p>
<a name="index-H-v-e"></a>
<a name="index-H-V-e"></a>
<p>With the Hyperbolic flag, <kbd>H v e</kbd> takes a filler value from the
top of the stack; the mask and target vectors come from the third and
second elements of the stack.  This filler is used where the mask is
zero:  &lsquo;<samp>vexp([2, 0, 3, 0, 7], [a, b], z)</samp>&rsquo; produces
&lsquo;<samp>[a, z, c, z, 7]</samp>&rsquo;.  If the filler value is itself a vector,
then successive values are taken from it, so that the effect is to
interleave two vectors according to the mask:
&lsquo;<samp>vexp([2, 0, 3, 7, 0, 0], [a, b], [x, y])</samp>&rsquo; produces
&lsquo;<samp>[a, x, b, 7, y, 0]</samp>&rsquo;.
</p>
<p>Another variation on the masking idea is to combine &lsquo;<samp>[a, b, c, d, e]</samp>&rsquo;
with the mask &lsquo;<samp>[1, 0, 1, 0, 1]</samp>&rsquo; to produce &lsquo;<samp>[a, 0, c, 0, e]</samp>&rsquo;.
You can accomplish this with <kbd>V M a &amp;</kbd>, mapping the logical &ldquo;and&rdquo;
operation across the two vectors.  See <a href="#Logical-Operations">Logical Operations</a>.  Note that
the <code>? :</code> operation also discussed there allows other types of
masking using vectors.
</p>
<hr>
<a name="Vector-and-Matrix-Arithmetic"></a>
<div class="header">
<p>
Next: <a href="#Set-Operations" accesskey="n" rel="next">Set Operations</a>, Previous: <a href="#Manipulating-Vectors" accesskey="p" rel="prev">Manipulating Vectors</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-and-Matrix-Arithmetic-1"></a>
<h3 class="section">9.5 Vector and Matrix Arithmetic</h3>

<p>Basic arithmetic operations like addition and multiplication are defined
for vectors and matrices as well as for numbers.  Division of matrices, in
the sense of multiplying by the inverse, is supported.  (Division by a
matrix actually uses LU-decomposition for greater accuracy and speed.)
See <a href="#Basic-Arithmetic">Basic Arithmetic</a>.
</p>
<p>The following functions are applied element-wise if their arguments are
vectors or matrices: <code>change-sign</code>, <code>conj</code>, <code>arg</code>,
<code>re</code>, <code>im</code>, <code>polar</code>, <code>rect</code>, <code>clean</code>,
<code>float</code>, <code>frac</code>.  See <a href="#Function-Index">Function Index</a>.
</p>
<a name="index-v-J"></a>
<a name="index-V-J"></a>
<a name="index-calc_002dconj_002dtranspose"></a>
<a name="index-ctrn"></a>
<p>The <kbd>V J</kbd> (<code>calc-conj-transpose</code>) [<code>ctrn</code>] command computes
the conjugate transpose of its argument, i.e., &lsquo;<samp>conj(trn(x))</samp>&rsquo;.
</p>
<a name="index-A-_0028vectors_0029"></a>
<a name="index-calc_002dabs-_0028vectors_0029"></a>
<a name="index-abs-_0028vectors_0029"></a>
<p>The <kbd>A</kbd> (<code>calc-abs</code>) [<code>abs</code>] command computes the
Frobenius norm of a vector or matrix argument.  This is the square
root of the sum of the squares of the absolute values of the
elements of the vector or matrix.  If the vector is interpreted as
a point in two- or three-dimensional space, this is the distance
from that point to the origin.
</p>
<a name="index-v-n"></a>
<a name="index-V-n"></a>
<a name="index-calc_002drnorm"></a>
<a name="index-rnorm"></a>
<p>The <kbd>v n</kbd> (<code>calc-rnorm</code>) [<code>rnorm</code>] command computes the
infinity-norm of a vector, or the row norm of a matrix.  For a plain
vector, this is the maximum of the absolute values of the elements.  For
a matrix, this is the maximum of the row-absolute-value-sums, i.e., of
the sums of the absolute values of the elements along the various rows.
</p>
<a name="index-v-N"></a>
<a name="index-V-N"></a>
<a name="index-calc_002dcnorm"></a>
<a name="index-cnorm"></a>
<p>The <kbd>V N</kbd> (<code>calc-cnorm</code>) [<code>cnorm</code>] command computes
the one-norm of a vector, or column norm of a matrix.  For a plain
vector, this is the sum of the absolute values of the elements.
For a matrix, this is the maximum of the column-absolute-value-sums.
General &lsquo;<samp>k</samp>&rsquo;-norms for &lsquo;<samp>k</samp>&rsquo; other than one or infinity are
not provided.  However, the 2-norm (or Frobenius norm) is provided for
vectors by the <kbd>A</kbd> (<code>calc-abs</code>) command.
</p>
<a name="index-v-C"></a>
<a name="index-V-C"></a>
<a name="index-calc_002dcross"></a>
<a name="index-cross"></a>
<p>The <kbd>V C</kbd> (<code>calc-cross</code>) [<code>cross</code>] command computes the
right-handed cross product of two vectors, each of which must have
exactly three elements.
</p>
<a name="index-_0026-_0028matrices_0029"></a>
<a name="index-calc_002dinv-_0028matrices_0029"></a>
<a name="index-inv-_0028matrices_0029"></a>
<p>The <kbd>&amp;</kbd> (<code>calc-inv</code>) [<code>inv</code>] command computes the
inverse of a square matrix.  If the matrix is singular, the inverse
operation is left in symbolic form.  Matrix inverses are recorded so
that once an inverse (or determinant) of a particular matrix has been
computed, the inverse and determinant of the matrix can be recomputed
quickly in the future.
</p>
<p>If the argument to <kbd>&amp;</kbd> is a plain number &lsquo;<samp>x</samp>&rsquo;, this
command simply computes &lsquo;<samp>1/x</samp>&rsquo;.  This is okay, because the
&lsquo;<samp>/</samp>&rsquo; operator also does a matrix inversion when dividing one
by a matrix.
</p>
<a name="index-v-D"></a>
<a name="index-V-D"></a>
<a name="index-calc_002dmdet"></a>
<a name="index-det"></a>
<p>The <kbd>V D</kbd> (<code>calc-mdet</code>) [<code>det</code>] command computes the
determinant of a square matrix.
</p>
<a name="index-v-L"></a>
<a name="index-V-L"></a>
<a name="index-calc_002dmlud"></a>
<a name="index-lud"></a>
<p>The <kbd>V L</kbd> (<code>calc-mlud</code>) [<code>lud</code>] command computes the
LU decomposition of a matrix.  The result is a list of three matrices
which, when multiplied together left-to-right, form the original matrix.
The first is a permutation matrix that arises from pivoting in the
algorithm, the second is lower-triangular with ones on the diagonal,
and the third is upper-triangular.
</p>
<a name="index-v-T"></a>
<a name="index-V-T"></a>
<a name="index-calc_002dmtrace"></a>
<a name="index-tr"></a>
<p>The <kbd>V T</kbd> (<code>calc-mtrace</code>) [<code>tr</code>] command computes the
trace of a square matrix.  This is defined as the sum of the diagonal
elements of the matrix.
</p>
<a name="index-v-K"></a>
<a name="index-V-K"></a>
<a name="index-calc_002dkron"></a>
<a name="index-kron"></a>
<p>The <kbd>V K</kbd> (<code>calc-kron</code>) [<code>kron</code>] command computes
the Kronecker product of two matrices.
</p>
<hr>
<a name="Set-Operations"></a>
<div class="header">
<p>
Next: <a href="#Statistical-Operations" accesskey="n" rel="next">Statistical Operations</a>, Previous: <a href="#Vector-and-Matrix-Arithmetic" accesskey="p" rel="prev">Vector and Matrix Arithmetic</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Set-Operations-using-Vectors"></a>
<h3 class="section">9.6 Set Operations using Vectors</h3>

<p><a name="index-Sets_002c-as-vectors"></a>
Calc includes several commands which interpret vectors as <em>sets</em> of
objects.  A set is a collection of objects; any given object can appear
only once in the set.  Calc stores sets as vectors of objects in
sorted order.  Objects in a Calc set can be any of the usual things,
such as numbers, variables, or formulas.  Two set elements are considered
equal if they are identical, except that numerically equal numbers like
the integer 4 and the float 4.0 are considered equal even though they
are not &ldquo;identical.&rdquo;  Variables are treated like plain symbols without
attached values by the set operations; subtracting the set &lsquo;<samp>[b]</samp>&rsquo;
from &lsquo;<samp>[a, b]</samp>&rsquo; always yields the set &lsquo;<samp>[a]</samp>&rsquo; even though if
the variables &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; both equaled 17, you might
expect the answer &lsquo;<samp>[]</samp>&rsquo;.
</p>
<p>If a set contains interval forms, then it is assumed to be a set of
real numbers.  In this case, all set operations require the elements
of the set to be only things that are allowed in intervals:  Real
numbers, plus and minus infinity, HMS forms, and date forms.  If
there are variables or other non-real objects present in a real set,
all set operations on it will be left in unevaluated form.
</p>
<p>If the input to a set operation is a plain number or interval form
<var>a</var>, it is treated like the one-element vector &lsquo;<samp>[<var>a</var>]</samp>&rsquo;.
The result is always a vector, except that if the set consists of a
single interval, the interval itself is returned instead.
</p>
<p>See <a href="#Logical-Operations">Logical Operations</a>, for the <code>in</code> function which tests if
a certain value is a member of a given set.  To test if the set &lsquo;<samp>A</samp>&rsquo;
is a subset of the set &lsquo;<samp>B</samp>&rsquo;, use &lsquo;<samp>vdiff(A, B) = []</samp>&rsquo;.
</p>
<a name="index-v-_002b"></a>
<a name="index-V-_002b"></a>
<a name="index-calc_002dremove_002dduplicates"></a>
<a name="index-rdup"></a>
<p>The <kbd>V +</kbd> (<code>calc-remove-duplicates</code>) [<code>rdup</code>] command
converts an arbitrary vector into set notation.  It works by sorting
the vector as if by <kbd>V S</kbd>, then removing duplicates.  (For example,
<kbd>[a, 5, 4, a, 4.0]</kbd> is sorted to &lsquo;<samp>[4, 4.0, 5, a, a]</samp>&rsquo; and then
reduced to &lsquo;<samp>[4, 5, a]</samp>&rsquo;).  Overlapping intervals are merged as
necessary.  You rarely need to use <kbd>V +</kbd> explicitly, since all the
other set-based commands apply <kbd>V +</kbd> to their inputs before using
them.
</p>
<a name="index-v-V"></a>
<a name="index-V-V"></a>
<a name="index-calc_002dset_002dunion"></a>
<a name="index-vunion"></a>
<p>The <kbd>V V</kbd> (<code>calc-set-union</code>) [<code>vunion</code>] command computes
the union of two sets.  An object is in the union of two sets if and
only if it is in either (or both) of the input sets.  (You could
accomplish the same thing by concatenating the sets with <kbd>|</kbd>,
then using <kbd>V +</kbd>.)
</p>
<a name="index-v-_005e"></a>
<a name="index-V-_005e"></a>
<a name="index-calc_002dset_002dintersect"></a>
<a name="index-vint"></a>
<p>The <kbd>V ^</kbd> (<code>calc-set-intersect</code>) [<code>vint</code>] command computes
the intersection of two sets.  An object is in the intersection if
and only if it is in both of the input sets.  Thus if the input
sets are disjoint, i.e., if they share no common elements, the result
will be the empty vector &lsquo;<samp>[]</samp>&rsquo;.  Note that the characters <kbd>V</kbd>
and <kbd>^</kbd> were chosen to be close to the conventional mathematical
notation for set
union
and
intersection.
</p>
<a name="index-v-_002d"></a>
<a name="index-V-_002d"></a>
<a name="index-calc_002dset_002ddifference"></a>
<a name="index-vdiff"></a>
<p>The <kbd>V -</kbd> (<code>calc-set-difference</code>) [<code>vdiff</code>] command computes
the difference between two sets.  An object is in the difference
&lsquo;<samp>A - B</samp>&rsquo; if and only if it is in &lsquo;<samp>A</samp>&rsquo; but not in &lsquo;<samp>B</samp>&rsquo;.
Thus subtracting &lsquo;<samp>[y,z]</samp>&rsquo; from a set will remove the elements
&lsquo;<samp>y</samp>&rsquo; and &lsquo;<samp>z</samp>&rsquo; if they are present.  You can also think of this
as a general <em>set complement</em> operator; if &lsquo;<samp>A</samp>&rsquo; is the set of
all possible values, then &lsquo;<samp>A - B</samp>&rsquo; is the &ldquo;complement&rdquo; of &lsquo;<samp>B</samp>&rsquo;.
Obviously this is only practical if the set of all possible values in
your problem is small enough to list in a Calc vector (or simple
enough to express in a few intervals).
</p>
<a name="index-v-X"></a>
<a name="index-V-X"></a>
<a name="index-calc_002dset_002dxor"></a>
<a name="index-vxor"></a>
<p>The <kbd>V X</kbd> (<code>calc-set-xor</code>) [<code>vxor</code>] command computes
the &ldquo;exclusive-or,&rdquo; or &ldquo;symmetric difference&rdquo; of two sets.
An object is in the symmetric difference of two sets if and only
if it is in one, but <em>not</em> both, of the sets.  Objects that
occur in both sets &ldquo;cancel out.&rdquo;
</p>
<a name="index-v-_007e"></a>
<a name="index-V-_007e"></a>
<a name="index-calc_002dset_002dcomplement"></a>
<a name="index-vcompl"></a>
<p>The <kbd>V ~</kbd> (<code>calc-set-complement</code>) [<code>vcompl</code>] command
computes the complement of a set with respect to the real numbers.
Thus &lsquo;<samp>vcompl(x)</samp>&rsquo; is equivalent to &lsquo;<samp>vdiff([-inf .. inf], x)</samp>&rsquo;.
For example, &lsquo;<samp>vcompl([2, (3 .. 4]])</samp>&rsquo; evaluates to
&lsquo;<samp>[[-inf .. 2), (2 .. 3], (4 .. inf]]</samp>&rsquo;.
</p>
<a name="index-v-F"></a>
<a name="index-V-F"></a>
<a name="index-calc_002dset_002dfloor"></a>
<a name="index-vfloor"></a>
<p>The <kbd>V F</kbd> (<code>calc-set-floor</code>) [<code>vfloor</code>] command
reinterprets a set as a set of integers.  Any non-integer values,
and intervals that do not enclose any integers, are removed.  Open
intervals are converted to equivalent closed intervals.  Successive
integers are converted into intervals of integers.  For example, the
complement of the set &lsquo;<samp>[2, 6, 7, 8]</samp>&rsquo; is messy, but if you wanted
the complement with respect to the set of integers you could type
<kbd>V ~ V F</kbd> to get &lsquo;<samp>[[-inf .. 1], [3 .. 5], [9 .. inf]]</samp>&rsquo;.
</p>
<a name="index-v-E"></a>
<a name="index-V-E"></a>
<a name="index-calc_002dset_002denumerate"></a>
<a name="index-venum"></a>
<p>The <kbd>V E</kbd> (<code>calc-set-enumerate</code>) [<code>venum</code>] command
converts a set of integers into an explicit vector.  Intervals in
the set are expanded out to lists of all integers encompassed by
the intervals.  This only works for finite sets (i.e., sets which
do not involve &lsquo;<samp>-inf</samp>&rsquo; or &lsquo;<samp>inf</samp>&rsquo;).
</p>
<a name="index-v-_003a"></a>
<a name="index-V-_003a"></a>
<a name="index-calc_002dset_002dspan"></a>
<a name="index-vspan"></a>
<p>The <kbd>V :</kbd> (<code>calc-set-span</code>) [<code>vspan</code>] command converts any
set of reals into an interval form that encompasses all its elements.
The lower limit will be the smallest element in the set; the upper
limit will be the largest element.  For an empty set, &lsquo;<samp>vspan([])</samp>&rsquo;
returns the empty interval &lsquo;<samp>[0&nbsp;..&nbsp;0)</samp>&rsquo;<!-- /@w -->.
</p>
<a name="index-v-_0023"></a>
<a name="index-V-_0023"></a>
<a name="index-calc_002dset_002dcardinality"></a>
<a name="index-vcard"></a>
<p>The <kbd>V #</kbd> (<code>calc-set-cardinality</code>) [<code>vcard</code>] command counts
the number of integers in a set.  The result is the length of the vector
that would be produced by <kbd>V E</kbd>, although the computation is much
more efficient than actually producing that vector.
</p>
<a name="index-Sets_002c-as-binary-numbers"></a>
<p>Another representation for sets that may be more appropriate in some
cases is binary numbers.  If you are dealing with sets of integers
in the range 0 to 49, you can use a 50-bit binary number where a
particular bit is 1 if the corresponding element is in the set.
See <a href="#Binary-Functions">Binary Functions</a>, for a list of commands that operate on
binary numbers.  Note that many of the above set operations have
direct equivalents in binary arithmetic:  <kbd>b o</kbd> (<code>calc-or</code>),
<kbd>b a</kbd> (<code>calc-and</code>), <kbd>b d</kbd> (<code>calc-diff</code>),
<kbd>b x</kbd> (<code>calc-xor</code>), and <kbd>b n</kbd> (<code>calc-not</code>),
respectively.  You can use whatever representation for sets is most
convenient to you.
</p>
<a name="index-b-p"></a>
<a name="index-b-u"></a>
<a name="index-calc_002dpack_002dbits"></a>
<a name="index-calc_002dunpack_002dbits"></a>
<a name="index-vpack"></a>
<a name="index-vunpack"></a>
<p>The <kbd>b u</kbd> (<code>calc-unpack-bits</code>) [<code>vunpack</code>] command
converts an integer that represents a set in binary into a set
in vector/interval notation.  For example, &lsquo;<samp>vunpack(67)</samp>&rsquo;
returns &lsquo;<samp>[[0 .. 1], 6]</samp>&rsquo;.  If the input is negative, the set
it represents is semi-infinite: &lsquo;<samp>vunpack(-4) = [2 .. inf)</samp>&rsquo;.
Use <kbd>V E</kbd> afterwards to expand intervals to individual
values if you wish.  Note that this command uses the <kbd>b</kbd>
(binary) prefix key.
</p>
<p>The <kbd>b p</kbd> (<code>calc-pack-bits</code>) [<code>vpack</code>] command
converts the other way, from a vector or interval representing
a set of nonnegative integers into a binary integer describing
the same set.  The set may include positive infinity, but must
not include any negative numbers.  The input is interpreted as a
set of integers in the sense of <kbd>V F</kbd> (<code>vfloor</code>).  Beware
that a simple input like &lsquo;<samp>[100]</samp>&rsquo; can result in a huge integer
representation
(&lsquo;<samp>2^100</samp>&rsquo;, a 31-digit integer, in this case).
</p>
<hr>
<a name="Statistical-Operations"></a>
<div class="header">
<p>
Next: <a href="#Reducing-and-Mapping" accesskey="n" rel="next">Reducing and Mapping</a>, Previous: <a href="#Set-Operations" accesskey="p" rel="prev">Set Operations</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Statistical-Operations-on-Vectors"></a>
<h3 class="section">9.7 Statistical Operations on Vectors</h3>

<p><a name="index-Statistical-functions"></a>
The commands in this section take vectors as arguments and compute
various statistical measures on the data stored in the vectors.  The
references used in the definitions of these functions are Bevington&rsquo;s
<em>Data Reduction and Error Analysis for the Physical Sciences</em>,
and <em>Numerical Recipes</em> by Press, Flannery, Teukolsky and
Vetterling.
</p>
<p>The statistical commands use the <kbd>u</kbd> prefix key followed by
a shifted letter or other character.
</p>
<p>See <a href="#Manipulating-Vectors">Manipulating Vectors</a>, for a description of <kbd>V H</kbd>
(<code>calc-histogram</code>).
</p>
<p>See <a href="#Curve-Fitting">Curve Fitting</a>, for the <kbd>a F</kbd> command for doing
least-squares fits to statistical data.
</p>
<p>See <a href="#Probability-Distribution-Functions">Probability Distribution Functions</a>, for several common
probability distribution functions.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Single_002dVariable-Statistics" accesskey="1">Single-Variable Statistics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Paired_002dSample-Statistics" accesskey="2">Paired-Sample Statistics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Single_002dVariable-Statistics"></a>
<div class="header">
<p>
Next: <a href="#Paired_002dSample-Statistics" accesskey="n" rel="next">Paired-Sample Statistics</a>, Previous: <a href="#Statistical-Operations" accesskey="p" rel="prev">Statistical Operations</a>, Up: <a href="#Statistical-Operations" accesskey="u" rel="up">Statistical Operations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Single_002dVariable-Statistics-1"></a>
<h4 class="subsection">9.7.1 Single-Variable Statistics</h4>

<p>These functions do various statistical computations on single
vectors.  Given a numeric prefix argument, they actually pop
<var>n</var> objects from the stack and combine them into a data
vector.  Each object may be either a number or a vector; if a
vector, any sub-vectors inside it are &ldquo;flattened&rdquo; as if by
<kbd>v a 0</kbd>; see <a href="#Manipulating-Vectors">Manipulating Vectors</a>.  By default one object
is popped, which (in order to be useful) is usually a vector.
</p>
<p>If an argument is a variable name, and the value stored in that
variable is a vector, then the stored vector is used.  This method
has the advantage that if your data vector is large, you can avoid
the slow process of manipulating it directly on the stack.
</p>
<p>These functions are left in symbolic form if any of their arguments
are not numbers or vectors, e.g., if an argument is a formula, or
a non-vector variable.  However, formulas embedded within vector
arguments are accepted; the result is a symbolic representation
of the computation, based on the assumption that the formula does
not itself represent a vector.  All varieties of numbers such as
error forms and interval forms are acceptable.
</p>
<p>Some of the functions in this section also accept a single error form
or interval as an argument.  They then describe a property of the
normal or uniform (respectively) statistical distribution described
by the argument.  The arguments are interpreted in the same way as
the <var>M</var> argument of the random number function <kbd>k r</kbd>.  In
particular, an interval with integer limits is considered an integer
distribution, so that &lsquo;<samp>[2 .. 6)</samp>&rsquo; is the same as &lsquo;<samp>[2 .. 5]</samp>&rsquo;.
An interval with at least one floating-point limit is a continuous
distribution:  &lsquo;<samp>[2.0 .. 6.0)</samp>&rsquo; is <em>not</em> the same as
&lsquo;<samp>[2.0 .. 5.0]</samp>&rsquo;!
</p>
<a name="index-u-_0023"></a>
<a name="index-calc_002dvector_002dcount"></a>
<a name="index-vcount"></a>
<p>The <kbd>u #</kbd> (<code>calc-vector-count</code>) [<code>vcount</code>] command
computes the number of data values represented by the inputs.
For example, &lsquo;<samp>vcount(1, [2, 3], [[4, 5], [], x, y])</samp>&rsquo; returns 7.
If the argument is a single vector with no sub-vectors, this
simply computes the length of the vector.
</p>
<a name="index-u-_002b"></a>
<a name="index-u-_002a"></a>
<a name="index-calc_002dvector_002dsum"></a>
<a name="index-calc_002dvector_002dprod"></a>
<a name="index-vsum"></a>
<a name="index-vprod"></a>
<a name="index-Summations-_0028statistical_0029"></a>
<p>The <kbd>u +</kbd> (<code>calc-vector-sum</code>) [<code>vsum</code>] command
computes the sum of the data values.  The <kbd>u *</kbd>
(<code>calc-vector-prod</code>) [<code>vprod</code>] command computes the
product of the data values.  If the input is a single flat vector,
these are the same as <kbd>V R +</kbd> and <kbd>V R *</kbd>
(see <a href="#Reducing-and-Mapping">Reducing and Mapping</a>).
</p>
<a name="index-u-X"></a>
<a name="index-u-N"></a>
<a name="index-calc_002dvector_002dmax"></a>
<a name="index-calc_002dvector_002dmin"></a>
<a name="index-vmax"></a>
<a name="index-vmin"></a>
<p>The <kbd>u X</kbd> (<code>calc-vector-max</code>) [<code>vmax</code>] command
computes the maximum of the data values, and the <kbd>u N</kbd>
(<code>calc-vector-min</code>) [<code>vmin</code>] command computes the minimum.
If the argument is an interval, this finds the minimum or maximum
value in the interval.  (Note that &lsquo;<samp>vmax([2..6)) = 5</samp>&rsquo; as
described above.)  If the argument is an error form, this returns
plus or minus infinity.
</p>
<a name="index-u-M"></a>
<a name="index-calc_002dvector_002dmean"></a>
<a name="index-vmean"></a>
<a name="index-Mean-of-data-values"></a>
<p>The <kbd>u M</kbd> (<code>calc-vector-mean</code>) [<code>vmean</code>] command
computes the average (arithmetic mean) of the data values.
If the inputs are error forms
&lsquo;<samp>x +/- s</samp>&rsquo;,
this is the weighted mean of the &lsquo;<samp>x</samp>&rsquo; values with weights
&lsquo;<samp>1 / s^2</samp>&rsquo;.
If the inputs are not error forms, this is simply the sum of the
values divided by the count of the values.
</p>
<p>Note that a plain number can be considered an error form with
error
&lsquo;<samp>s = 0</samp>&rsquo;.
If the input to <kbd>u M</kbd> is a mixture of
plain numbers and error forms, the result is the mean of the
plain numbers, ignoring all values with non-zero errors.  (By the
above definitions it&rsquo;s clear that a plain number effectively
has an infinite weight, next to which an error form with a finite
weight is completely negligible.)
</p>
<p>This function also works for distributions (error forms or
intervals).  The mean of an error form &lsquo;<var>a</var> <tt>+/-</tt> <var>b</var>&rsquo; is simply
&lsquo;<samp>a</samp>&rsquo;.  The mean of an interval is the mean of the minimum
and maximum values of the interval.
</p>
<a name="index-I-u-M"></a>
<a name="index-calc_002dvector_002dmean_002derror"></a>
<a name="index-vmeane"></a>
<p>The <kbd>I u M</kbd> (<code>calc-vector-mean-error</code>) [<code>vmeane</code>]
command computes the mean of the data points expressed as an
error form.  This includes the estimated error associated with
the mean.  If the inputs are error forms, the error is the square
root of the reciprocal of the sum of the reciprocals of the squares
of the input errors.  (I.e., the variance is the reciprocal of the
sum of the reciprocals of the variances.)
If the inputs are plain
numbers, the error is equal to the standard deviation of the values
divided by the square root of the number of values.  (This works
out to be equivalent to calculating the standard deviation and
then assuming each value&rsquo;s error is equal to this standard
deviation.)
</p>
<a name="index-H-u-M"></a>
<a name="index-calc_002dvector_002dmedian"></a>
<a name="index-vmedian"></a>
<a name="index-Median-of-data-values"></a>
<p>The <kbd>H u M</kbd> (<code>calc-vector-median</code>) [<code>vmedian</code>]
command computes the median of the data values.  The values are
first sorted into numerical order; the median is the middle
value after sorting.  (If the number of data values is even,
the median is taken to be the average of the two middle values.)
The median function is different from the other functions in
this section in that the arguments must all be real numbers;
variables are not accepted even when nested inside vectors.
(Otherwise it is not possible to sort the data values.)  If
any of the input values are error forms, their error parts are
ignored.
</p>
<p>The median function also accepts distributions.  For both normal
(error form) and uniform (interval) distributions, the median is
the same as the mean.
</p>
<a name="index-H-I-u-M"></a>
<a name="index-calc_002dvector_002dharmonic_002dmean"></a>
<a name="index-vhmean"></a>
<a name="index-Harmonic-mean"></a>
<p>The <kbd>H I u M</kbd> (<code>calc-vector-harmonic-mean</code>) [<code>vhmean</code>]
command computes the harmonic mean of the data values.  This is
defined as the reciprocal of the arithmetic mean of the reciprocals
of the values.
</p>
<a name="index-u-G"></a>
<a name="index-calc_002dvector_002dgeometric_002dmean"></a>
<a name="index-vgmean"></a>
<a name="index-Geometric-mean-1"></a>
<p>The <kbd>u G</kbd> (<code>calc-vector-geometric-mean</code>) [<code>vgmean</code>]
command computes the geometric mean of the data values.  This
is the <var>n</var>th root of the product of the values.  This is also
equal to the <code>exp</code> of the arithmetic mean of the logarithms
of the data values.
</p>
<a name="index-H-u-G"></a>
<a name="index-agmean"></a>
<p>The <kbd>H u G</kbd> [<code>agmean</code>] command computes the &ldquo;arithmetic-geometric
mean&rdquo; of two numbers taken from the stack.  This is computed by
replacing the two numbers with their arithmetic mean and geometric
mean, then repeating until the two values converge.
</p>
<a name="index-u-R"></a>
<a name="index-Root_002dmean_002dsquare"></a>
<a name="index-rms"></a>
<p>The <kbd>u R</kbd> (<code>calc-vector-rms</code>) [<code>rms</code>]
command computes the RMS (root-mean-square) of the data values.
As its name suggests, this is the square root of the mean of the
squares of the data values.
</p>
<a name="index-u-S"></a>
<a name="index-calc_002dvector_002dsdev"></a>
<a name="index-vsdev"></a>
<a name="index-Standard-deviation"></a>
<a name="index-Sample-statistics"></a>
<p>The <kbd>u S</kbd> (<code>calc-vector-sdev</code>) [<code>vsdev</code>] command
computes the standard
deviation
of the data values.  If the values are error forms, the errors are used
as weights just as for <kbd>u M</kbd>.  This is the <em>sample</em> standard
deviation, whose value is the square root of the sum of the squares of
the differences between the values and the mean of the &lsquo;<samp>N</samp>&rsquo; values,
divided by &lsquo;<samp>N-1</samp>&rsquo;.
</p>
<p>This function also applies to distributions.  The standard deviation
of a single error form is simply the error part.  The standard deviation
of a continuous interval happens to equal the difference between the
limits, divided by
&lsquo;<samp>sqrt(12)</samp>&rsquo;.
The standard deviation of an integer interval is the same as the
standard deviation of a vector of those integers.
</p>
<a name="index-I-u-S"></a>
<a name="index-calc_002dvector_002dpop_002dsdev"></a>
<a name="index-vpsdev"></a>
<a name="index-Population-statistics"></a>
<p>The <kbd>I u S</kbd> (<code>calc-vector-pop-sdev</code>) [<code>vpsdev</code>]
command computes the <em>population</em> standard deviation.
It is defined by the same formula as above but dividing
by &lsquo;<samp>N</samp>&rsquo; instead of by &lsquo;<samp>N-1</samp>&rsquo;.  The population standard
deviation is used when the input represents the entire set of
data values in the distribution; the sample standard deviation
is used when the input represents a sample of the set of all
data values, so that the mean computed from the input is itself
only an estimate of the true mean.
</p>
<p>For error forms and continuous intervals, <code>vpsdev</code> works
exactly like <code>vsdev</code>.  For integer intervals, it computes the
population standard deviation of the equivalent vector of integers.
</p>
<a name="index-H-u-S"></a>
<a name="index-H-I-u-S"></a>
<a name="index-calc_002dvector_002dvariance"></a>
<a name="index-calc_002dvector_002dpop_002dvariance"></a>
<a name="index-vvar"></a>
<a name="index-vpvar"></a>
<a name="index-Variance-of-data-values"></a>
<p>The <kbd>H u S</kbd> (<code>calc-vector-variance</code>) [<code>vvar</code>] and
<kbd>H I u S</kbd> (<code>calc-vector-pop-variance</code>) [<code>vpvar</code>]
commands compute the variance of the data values.  The variance
is the
square
of the standard deviation, i.e., the sum of the
squares of the deviations of the data values from the mean.
(This definition also applies when the argument is a distribution.)
</p>
<a name="index-vflat"></a>
<p>The <code>vflat</code> algebraic function returns a vector of its
arguments, interpreted in the same way as the other functions
in this section.  For example, &lsquo;<samp>vflat(1, [2, [3, 4]], 5)</samp>&rsquo;
returns &lsquo;<samp>[1, 2, 3, 4, 5]</samp>&rsquo;.
</p>
<hr>
<a name="Paired_002dSample-Statistics"></a>
<div class="header">
<p>
Previous: <a href="#Single_002dVariable-Statistics" accesskey="p" rel="prev">Single-Variable Statistics</a>, Up: <a href="#Statistical-Operations" accesskey="u" rel="up">Statistical Operations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Paired_002dSample-Statistics-1"></a>
<h4 class="subsection">9.7.2 Paired-Sample Statistics</h4>

<p>The functions in this section take two arguments, which must be
vectors of equal size.  The vectors are each flattened in the same
way as by the single-variable statistical functions.  Given a numeric
prefix argument of 1, these functions instead take one object from
the stack, which must be an
Nx2
matrix of data values.  Once again, variable names can be used in place
of actual vectors and matrices.
</p>
<a name="index-u-C"></a>
<a name="index-calc_002dvector_002dcovariance"></a>
<a name="index-vcov"></a>
<a name="index-Covariance"></a>
<p>The <kbd>u C</kbd> (<code>calc-vector-covariance</code>) [<code>vcov</code>] command
computes the sample covariance of two vectors.  The covariance
of vectors <var>x</var> and <var>y</var> is the sum of the products of the
differences between the elements of <var>x</var> and the mean of <var>x</var>
times the differences between the corresponding elements of <var>y</var>
and the mean of <var>y</var>, all divided by &lsquo;<samp>N-1</samp>&rsquo;.  Note that
the variance of a vector is just the covariance of the vector
with itself.  Once again, if the inputs are error forms the
errors are used as weight factors.  If both <var>x</var> and <var>y</var>
are composed of error forms, the error for a given data point
is taken as the square root of the sum of the squares of the two
input errors.
</p>
<a name="index-I-u-C"></a>
<a name="index-calc_002dvector_002dpop_002dcovariance"></a>
<a name="index-vpcov"></a>
<p>The <kbd>I u C</kbd> (<code>calc-vector-pop-covariance</code>) [<code>vpcov</code>]
command computes the population covariance, which is the same as the
sample covariance computed by <kbd>u C</kbd> except dividing by &lsquo;<samp>N</samp>&rsquo;
instead of &lsquo;<samp>N-1</samp>&rsquo;.
</p>
<a name="index-H-u-C"></a>
<a name="index-calc_002dvector_002dcorrelation"></a>
<a name="index-vcorr"></a>
<a name="index-Correlation-coefficient"></a>
<a name="index-Linear-correlation"></a>
<p>The <kbd>H u C</kbd> (<code>calc-vector-correlation</code>) [<code>vcorr</code>]
command computes the linear correlation coefficient of two vectors.
This is defined by the covariance of the vectors divided by the
product of their standard deviations.  (There is no difference
between sample or population statistics here.)
</p>
<hr>
<a name="Reducing-and-Mapping"></a>
<div class="header">
<p>
Next: <a href="#Vector-and-Matrix-Formats" accesskey="n" rel="next">Vector and Matrix Formats</a>, Previous: <a href="#Statistical-Operations" accesskey="p" rel="prev">Statistical Operations</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Reducing-and-Mapping-Vectors"></a>
<h3 class="section">9.8 Reducing and Mapping Vectors</h3>

<p>The commands in this section allow for more general operations on the
elements of vectors.
</p>
<a name="index-v-A"></a>
<a name="index-V-A"></a>
<a name="index-calc_002dapply"></a>
<a name="index-apply"></a>
<p>The simplest of these operations is <kbd>V A</kbd> (<code>calc-apply</code>)
[<code>apply</code>], which applies a given operator to the elements of a vector.
For example, applying the hypothetical function <code>f</code> to the vector
&lsquo;<samp>[1,&nbsp;2,&nbsp;3]</samp>&rsquo;<!-- /@w --> would produce the function call &lsquo;<samp>f(1, 2, 3)</samp>&rsquo;.
Applying the <code>+</code> function to the vector &lsquo;<samp>[a, b]</samp>&rsquo; gives
&lsquo;<samp>a + b</samp>&rsquo;.  Applying <code>+</code> to the vector &lsquo;<samp>[a, b, c]</samp>&rsquo; is an
error, since the <code>+</code> function expects exactly two arguments.
</p>
<p>While <kbd>V A</kbd> is useful in some cases, you will usually find that either
<kbd>V R</kbd> or <kbd>V M</kbd>, described below, is closer to what you want.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Specifying-Operators" accesskey="1">Specifying Operators</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mapping" accesskey="2">Mapping</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Reducing" accesskey="3">Reducing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Nesting-and-Fixed-Points" accesskey="4">Nesting and Fixed Points</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Generalized-Products" accesskey="5">Generalized Products</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Specifying-Operators"></a>
<div class="header">
<p>
Next: <a href="#Mapping" accesskey="n" rel="next">Mapping</a>, Previous: <a href="#Reducing-and-Mapping" accesskey="p" rel="prev">Reducing and Mapping</a>, Up: <a href="#Reducing-and-Mapping" accesskey="u" rel="up">Reducing and Mapping</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Specifying-Operators-1"></a>
<h4 class="subsection">9.8.1 Specifying Operators</h4>

<p>Commands in this section (like <kbd>V A</kbd>) prompt you to press the key
corresponding to the desired operator.  Press <kbd>?</kbd> for a partial
list of the available operators.  Generally, an operator is any key or
sequence of keys that would normally take one or more arguments from
the stack and replace them with a result.  For example, <kbd>V A H C</kbd>
uses the hyperbolic cosine operator, <code>cosh</code>.  (Since <code>cosh</code>
expects one argument, <kbd>V A H C</kbd> requires a vector with a single
element as its argument.)
</p>
<p>You can press <kbd>x</kbd> at the operator prompt to select any algebraic
function by name to use as the operator.  This includes functions you
have defined yourself using the <kbd>Z F</kbd> command.  (See <a href="#Algebraic-Definitions">Algebraic Definitions</a>.)  If you give a name for which no function has been
defined, the result is left in symbolic form, as in &lsquo;<samp>f(1, 2, 3)</samp>&rsquo;.
Calc will prompt for the number of arguments the function takes if it
can&rsquo;t figure it out on its own (say, because you named a function that
is currently undefined).  It is also possible to type a digit key before
the function name to specify the number of arguments, e.g.,
<kbd>V M 3 x f <span class="key">RET</span></kbd> calls <code>f</code> with three arguments even if it
looks like it ought to have only two.  This technique may be necessary
if the function allows a variable number of arguments.  For example,
the <kbd>v e</kbd> [<code>vexp</code>] function accepts two or three arguments;
if you want to map with the three-argument version, you will have to
type <kbd>V M 3 v e</kbd>.
</p>
<p>It is also possible to apply any formula to a vector by treating that
formula as a function.  When prompted for the operator to use, press
<kbd>'</kbd> (the apostrophe) and type your formula as an algebraic entry.
You will then be prompted for the argument list, which defaults to a
list of all variables that appear in the formula, sorted into alphabetic
order.  For example, suppose you enter the formula &lsquo;<samp>x&nbsp;+&nbsp;2y^x</samp>&rsquo;<!-- /@w -->.
The default argument list would be &lsquo;<samp>(x y)</samp>&rsquo;, which means that if
this function is applied to the arguments &lsquo;<samp>[3, 10]</samp>&rsquo; the result will
be &lsquo;<samp>3 + 2*10^3</samp>&rsquo;.  (If you plan to use a certain formula in this
way often, you might consider defining it as a function with <kbd>Z F</kbd>.)
</p>
<p>Another way to specify the arguments to the formula you enter is with
<kbd>$</kbd>, <kbd>$$</kbd>, and so on.  For example, <kbd>V A ' $$ + 2$^$$</kbd>
has the same effect as the previous example.  The argument list is
automatically taken to be &lsquo;<samp>($$ $)</samp>&rsquo;.  (The order of the arguments
may seem backwards, but it is analogous to the way normal algebraic
entry interacts with the stack.)
</p>
<p>If you press <kbd>$</kbd> at the operator prompt, the effect is similar to
the apostrophe except that the relevant formula is taken from top-of-stack
instead.  The actual vector arguments of the <kbd>V A $</kbd> or related command
then start at the second-to-top stack position.  You will still be
prompted for an argument list.
</p>
<a name="index-Nameless-functions"></a>
<a name="index-Generic-functions"></a>
<p>A function can be written without a name using the notation &lsquo;<samp>&lt;#1 - #2&gt;</samp>&rsquo;,
which means &ldquo;a function of two arguments that computes the first
argument minus the second argument.&rdquo;  The symbols &lsquo;<samp>#1</samp>&rsquo; and &lsquo;<samp>#2</samp>&rsquo;
are placeholders for the arguments.  You can use any names for these
placeholders if you wish, by including an argument list followed by a
colon:  &lsquo;<samp>&lt;x, y : x - y&gt;</samp>&rsquo;.  When you type <kbd>V A ' $$ + 2$^$$ <span class="key">RET</span></kbd>,
Calc builds the nameless function &lsquo;<samp>&lt;#1 + 2 #2^#1&gt;</samp>&rsquo; as the function
to map across the vectors.  When you type <kbd>V A ' x + 2y^x <span class="key">RET</span> <span class="key">RET</span></kbd>,
Calc builds the nameless function &lsquo;<samp>&lt;x,&nbsp;y&nbsp;:&nbsp;x&nbsp;+&nbsp;2&nbsp;y^x&gt;</samp>&rsquo;<!-- /@w -->.  In both
cases, Calc also writes the nameless function to the Trail so that you
can get it back later if you wish.
</p>
<p>If there is only one argument, you can write &lsquo;<samp>#</samp>&rsquo; in place of &lsquo;<samp>#1</samp>&rsquo;.
(Note that &lsquo;<samp>&lt; &gt;</samp>&rsquo; notation is also used for date forms.  Calc tells
that &lsquo;<samp>&lt;<var>stuff</var>&gt;</samp>&rsquo; is a nameless function by the presence of
&lsquo;<samp>#</samp>&rsquo; signs inside <var>stuff</var>, or by the fact that <var>stuff</var>
begins with a list of variables followed by a colon.)
</p>
<p>You can type a nameless function directly to <kbd>V A '</kbd>, or put one on
the stack and use it with <kbd>V&nbsp;A&nbsp;$</kbd><!-- /@w -->.  Calc will not prompt for an
argument list in this case, since the nameless function specifies the
argument list as well as the function itself.  In <kbd>V A '</kbd>, you can
omit the &lsquo;<samp>&lt; &gt;</samp>&rsquo; marks if you use &lsquo;<samp>#</samp>&rsquo; notation for the arguments,
so that <kbd>V A ' #1+#2 <span class="key">RET</span></kbd> is the same as <kbd>V A ' &lt;#1+#2&gt; <span class="key">RET</span></kbd>,
which in turn is the same as <kbd>V A ' $$+$ <span class="key">RET</span></kbd>.
</p>
<a name="index-Lambda-expressions"></a>
<a name="index-lambda"></a>
<p>The internal format for &lsquo;<samp>&lt;x, y : x + y&gt;</samp>&rsquo; is &lsquo;<samp>lambda(x, y, x + y)</samp>&rsquo;.
(The word <code>lambda</code> derives from Lisp notation and the theory of
functions.)  The internal format for &lsquo;<samp>&lt;#1 + #2&gt;</samp>&rsquo; is &lsquo;<samp>lambda(ArgA,
ArgB, ArgA + ArgB)</samp>&rsquo;.  Note that there is no actual Calc function called
<code>lambda</code>; the whole point is that the <code>lambda</code> expression is
used in its symbolic form, not evaluated for an answer until it is applied
to specific arguments by a command like <kbd>V A</kbd> or <kbd>V M</kbd>.
</p>
<p>(Actually, <code>lambda</code> does have one special property:  Its arguments
are never evaluated; for example, putting &lsquo;<samp>&lt;(2/3) #&gt;</samp>&rsquo; on the stack
will not simplify the &lsquo;<samp>2/3</samp>&rsquo; until the nameless function is actually
called.)
</p>
<a name="index-add"></a>
<a name="index-sub"></a>
<a name="index-mul"></a>
<a name="index-div"></a>
<a name="index-pow-1"></a>
<a name="index-neg"></a>
<a name="index-mod"></a>
<a name="index-vconcat"></a>
<p>As usual, commands like <kbd>V A</kbd> have algebraic function name equivalents.
For example, <kbd>V A k g</kbd> with an argument of &lsquo;<samp>v</samp>&rsquo; is equivalent to
&lsquo;<samp>apply(gcd, v)</samp>&rsquo;.  The first argument specifies the operator name,
and is either a variable whose name is the same as the function name,
or a nameless function like &lsquo;<samp>&lt;#^3+1&gt;</samp>&rsquo;.  Operators that are normally
written as algebraic symbols have the names <code>add</code>, <code>sub</code>,
<code>mul</code>, <code>div</code>, <code>pow</code>, <code>neg</code>, <code>mod</code>, and
<code>vconcat</code>.
</p>
<a name="index-call"></a>
<p>The <code>call</code> function builds a function call out of several arguments:
&lsquo;<samp>call(gcd, x, y)</samp>&rsquo; is the same as &lsquo;<samp>apply(gcd, [x, y])</samp>&rsquo;, which
in turn is the same as &lsquo;<samp>gcd(x, y)</samp>&rsquo;.  The first argument of <code>call</code>,
like the other functions described here, may be either a variable naming a
function, or a nameless function (&lsquo;<samp>call(&lt;#1+2#2&gt;, x, y)</samp>&rsquo; is the same
as &lsquo;<samp>x + 2y</samp>&rsquo;).
</p>
<p>(Experts will notice that it&rsquo;s not quite proper to use a variable to name
a function, since the name <code>gcd</code> corresponds to the Lisp variable
<code>var-gcd</code> but to the Lisp function <code>calcFunc-gcd</code>.  Calc
automatically makes this translation, so you don&rsquo;t have to worry
about it.)
</p>
<hr>
<a name="Mapping"></a>
<div class="header">
<p>
Next: <a href="#Reducing" accesskey="n" rel="next">Reducing</a>, Previous: <a href="#Specifying-Operators" accesskey="p" rel="prev">Specifying Operators</a>, Up: <a href="#Reducing-and-Mapping" accesskey="u" rel="up">Reducing and Mapping</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mapping-1"></a>
<h4 class="subsection">9.8.2 Mapping</h4>

<p><a name="index-v-M"></a>
<a name="index-V-M"></a>
<a name="index-calc_002dmap"></a>
<a name="index-map"></a>
The <kbd>V M</kbd> (<code>calc-map</code>) [<code>map</code>] command applies a given
operator elementwise to one or more vectors.  For example, mapping
<code>A</code> [<code>abs</code>] produces a vector of the absolute values of the
elements in the input vector.  Mapping <code>+</code> pops two vectors from
the stack, which must be of equal length, and produces a vector of the
pairwise sums of the elements.  If either argument is a non-vector, it
is duplicated for each element of the other vector.  For example,
<kbd>[1,2,3] 2 V M ^</kbd> squares the elements of the specified vector.
With the 2 listed first, it would have computed a vector of powers of
two.  Mapping a user-defined function pops as many arguments from the
stack as the function requires.  If you give an undefined name, you will
be prompted for the number of arguments to use.
</p>
<p>If any argument to <kbd>V M</kbd> is a matrix, the operator is normally mapped
across all elements of the matrix.  For example, given the matrix
&lsquo;<samp>[[1, -2, 3], [-4, 5, -6]]</samp>&rsquo;, <kbd>V M A</kbd> takes six absolute values to
produce another
3x2
matrix, &lsquo;<samp>[[1, 2, 3], [4, 5, 6]]</samp>&rsquo;.
</p>
<a name="index-mapr"></a>
<p>The command <kbd>V M _</kbd> [<code>mapr</code>] (i.e., type an underscore at the
operator prompt) maps by rows instead.  For example, <kbd>V M _ A</kbd> views
the above matrix as a vector of two 3-element row vectors.  It produces
a new vector which contains the absolute values of those row vectors,
namely &lsquo;<samp>[3.74, 8.77]</samp>&rsquo;.  (Recall, the absolute value of a vector is
defined as the square root of the sum of the squares of the elements.)
Some operators accept vectors and return new vectors; for example,
<kbd>v v</kbd> reverses a vector, so <kbd>V M _ v v</kbd> would reverse each row
of the matrix to get a new matrix, &lsquo;<samp>[[3, -2, 1], [-6, 5, -4]]</samp>&rsquo;.
</p>
<p>Sometimes a vector of vectors (representing, say, strings, sets, or lists)
happens to look like a matrix.  If so, remember to use <kbd>V M _</kbd> if you
want to map a function across the whole strings or sets rather than across
their individual elements.
</p>
<a name="index-mapc"></a>
<p>The command <kbd>V M :</kbd> [<code>mapc</code>] maps by columns.  Basically, it
transposes the input matrix, maps by rows, and then, if the result is a
matrix, transposes again.  For example, <kbd>V M : A</kbd> takes the absolute
values of the three columns of the matrix, treating each as a 2-vector,
and <kbd>V M : v v</kbd> reverses the columns to get the matrix
&lsquo;<samp>[[-4, 5, -6], [1, -2, 3]]</samp>&rsquo;.
</p>
<p>(The symbols <kbd>_</kbd> and <kbd>:</kbd> were chosen because they had row-like
and column-like appearances, and were not already taken by useful
operators.  Also, they appear shifted on most keyboards so they are easy
to type after <kbd>V M</kbd>.)
</p>
<p>The <kbd>_</kbd> and <kbd>:</kbd> modifiers have no effect on arguments that are
not matrices (so if none of the arguments are matrices, they have no
effect at all).  If some of the arguments are matrices and others are
plain numbers, the plain numbers are held constant for all rows of the
matrix (so that <kbd>2 V M _ ^</kbd> squares every row of a matrix; squaring
a vector takes a dot product of the vector with itself).
</p>
<p>If some of the arguments are vectors with the same lengths as the
rows (for <kbd>V M _</kbd>) or columns (for <kbd>V M :</kbd>) of the matrix
arguments, those vectors are also held constant for every row or
column.
</p>
<p>Sometimes it is useful to specify another mapping command as the operator
to use with <kbd>V M</kbd>.  For example, <kbd>V M _ V A +</kbd> applies <kbd>V A +</kbd>
to each row of the input matrix, which in turn adds the two values on that
row.  If you give another vector-operator command as the operator for
<kbd>V M</kbd>, it automatically uses map-by-rows mode if you don&rsquo;t specify
otherwise; thus <kbd>V M V A +</kbd> is equivalent to <kbd>V M _ V A +</kbd>.  (If
you really want to map-by-elements another mapping command, you can use
a triple-nested mapping command:  <kbd>V M V M V A +</kbd> means to map
<kbd>V M V A +</kbd> over the rows of the matrix; in turn, <kbd>V A +</kbd> is
mapped over the elements of each row.)
</p>
<a name="index-mapa"></a>
<a name="index-mapd"></a>
<p>Previous versions of Calc had &ldquo;map across&rdquo; and &ldquo;map down&rdquo; modes
that are now considered obsolete; the old &ldquo;map across&rdquo; is now simply
<kbd>V M V A</kbd>, and &ldquo;map down&rdquo; is now <kbd>V M : V A</kbd>.  The algebraic
functions <code>mapa</code> and <code>mapd</code> are still supported, though.
Note also that, while the old mapping modes were persistent (once you
set the mode, it would apply to later mapping commands until you reset
it), the new <kbd>:</kbd> and <kbd>_</kbd> modifiers apply only to the current
mapping command.  The default <kbd>V M</kbd> always means map-by-elements.
</p>
<p>See <a href="#Algebraic-Manipulation">Algebraic Manipulation</a>, for the <kbd>a M</kbd> command, which is like
<kbd>V M</kbd> but for equations and inequalities instead of vectors.
See <a href="#Storing-Variables">Storing Variables</a>, for the <kbd>s m</kbd> command which modifies a
variable&rsquo;s stored value using a <kbd>V M</kbd>-like operator.
</p>
<hr>
<a name="Reducing"></a>
<div class="header">
<p>
Next: <a href="#Nesting-and-Fixed-Points" accesskey="n" rel="next">Nesting and Fixed Points</a>, Previous: <a href="#Mapping" accesskey="p" rel="prev">Mapping</a>, Up: <a href="#Reducing-and-Mapping" accesskey="u" rel="up">Reducing and Mapping</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Reducing-1"></a>
<h4 class="subsection">9.8.3 Reducing</h4>

<p><a name="index-v-R"></a>
<a name="index-V-R"></a>
<a name="index-calc_002dreduce"></a>
<a name="index-reduce"></a>
The <kbd>V R</kbd> (<code>calc-reduce</code>) [<code>reduce</code>] command applies a given
binary operator across all the elements of a vector.  A binary operator is
a function such as <code>+</code> or <code>max</code> which takes two arguments.  For
example, reducing <code>+</code> over a vector computes the sum of the elements
of the vector.  Reducing <code>-</code> computes the first element minus each of
the remaining elements.  Reducing <code>max</code> computes the maximum element
and so on.  In general, reducing <code>f</code> over the vector &lsquo;<samp>[a, b, c, d]</samp>&rsquo;
produces &lsquo;<samp>f(f(f(a, b), c), d)</samp>&rsquo;.
</p>
<a name="index-I-v-R"></a>
<a name="index-I-V-R"></a>
<a name="index-rreduce"></a>
<p>The <kbd>I V R</kbd> [<code>rreduce</code>] command is similar to <kbd>V R</kbd> except
that works from right to left through the vector.  For example, plain
<kbd>V R -</kbd> on the vector &lsquo;<samp>[a, b, c, d]</samp>&rsquo; produces &lsquo;<samp>a - b - c - d</samp>&rsquo;
but <kbd>I V R -</kbd> on the same vector produces &lsquo;<samp>a - (b - (c - d))</samp>&rsquo;,
or &lsquo;<samp>a - b + c - d</samp>&rsquo;.  This &ldquo;alternating sum&rdquo; occurs frequently
in power series expansions.
</p>
<a name="index-v-U"></a>
<a name="index-V-U"></a>
<a name="index-accum"></a>
<p>The <kbd>V U</kbd> (<code>calc-accumulate</code>) [<code>accum</code>] command does an
accumulation operation.  Here Calc does the corresponding reduction
operation, but instead of producing only the final result, it produces
a vector of all the intermediate results.  Accumulating <code>+</code> over
the vector &lsquo;<samp>[a, b, c, d]</samp>&rsquo; produces the vector
&lsquo;<samp>[a, a + b, a + b + c, a + b + c + d]</samp>&rsquo;.
</p>
<a name="index-I-v-U"></a>
<a name="index-I-V-U"></a>
<a name="index-raccum"></a>
<p>The <kbd>I V U</kbd> [<code>raccum</code>] command does a right-to-left accumulation.
For example, <kbd>I V U -</kbd> on the vector &lsquo;<samp>[a, b, c, d]</samp>&rsquo; produces the
vector &lsquo;<samp>[a - b + c - d, b - c + d, c - d, d]</samp>&rsquo;.
</p>
<a name="index-reducea"></a>
<a name="index-rreducea"></a>
<a name="index-reduced"></a>
<a name="index-rreduced"></a>
<p>As for <kbd>V M</kbd>, <kbd>V R</kbd> normally reduces a matrix elementwise.  For
example, given the matrix &lsquo;<samp>[[a, b, c], [d, e, f]]</samp>&rsquo;, <kbd>V R +</kbd> will
compute &lsquo;<samp>a + b + c + d + e + f</samp>&rsquo;.  You can type <kbd>V R _</kbd> or
<kbd>V R :</kbd> to modify this behavior.  The <kbd>V R _</kbd> [<code>reducea</code>]
command reduces &ldquo;across&rdquo; the matrix; it reduces each row of the matrix
as a vector, then collects the results.  Thus <kbd>V R _ +</kbd> of this
matrix would produce &lsquo;<samp>[a + b + c, d + e + f]</samp>&rsquo;.  Similarly, <kbd>V R :</kbd>
[<code>reduced</code>] reduces down; <kbd>V R : +</kbd> would produce &lsquo;<samp>[a + d,
b + e, c + f]</samp>&rsquo;.
</p>
<a name="index-reducer"></a>
<a name="index-rreducer"></a>
<p>There is a third &ldquo;by rows&rdquo; mode for reduction that is occasionally
useful; <kbd>V R =</kbd> [<code>reducer</code>] simply reduces the operator over
the rows of the matrix themselves.  Thus <kbd>V R = +</kbd> on the above
matrix would get the same result as <kbd>V R : +</kbd>, since adding two
row vectors is equivalent to adding their elements.  But <kbd>V R = *</kbd>
would multiply the two rows (to get a single number, their dot product),
while <kbd>V R : *</kbd> would produce a vector of the products of the columns.
</p>
<p>These three matrix reduction modes work with <kbd>V R</kbd> and <kbd>I V R</kbd>,
but they are not currently supported with <kbd>V U</kbd> or <kbd>I V U</kbd>.
</p>
<a name="index-reducec"></a>
<a name="index-rreducec"></a>
<p>The obsolete reduce-by-columns function, <code>reducec</code>, is still
supported but there is no way to get it through the <kbd>V R</kbd> command.
</p>
<p>The commands <kbd>C-x * :</kbd> and <kbd>C-x * _</kbd> are equivalent to typing
<kbd>C-x * r</kbd> to grab a rectangle of data into Calc, and then typing
<kbd>V R : +</kbd> or <kbd>V R _ +</kbd>, respectively, to sum the columns or
rows of the matrix.  See <a href="#Grabbing-From-Buffers">Grabbing From Buffers</a>.
</p>
<hr>
<a name="Nesting-and-Fixed-Points"></a>
<div class="header">
<p>
Next: <a href="#Generalized-Products" accesskey="n" rel="next">Generalized Products</a>, Previous: <a href="#Reducing" accesskey="p" rel="prev">Reducing</a>, Up: <a href="#Reducing-and-Mapping" accesskey="u" rel="up">Reducing and Mapping</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Nesting-and-Fixed-Points-1"></a>
<h4 class="subsection">9.8.4 Nesting and Fixed Points</h4>

<p><a name="index-H-v-R"></a>
<a name="index-H-V-R"></a>
<a name="index-nest"></a>
The <kbd>H V R</kbd> [<code>nest</code>] command applies a function to a given
argument repeatedly.  It takes two values, &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>n</samp>&rsquo;, from
the stack, where &lsquo;<samp>n</samp>&rsquo; must be an integer.  It then applies the
function nested &lsquo;<samp>n</samp>&rsquo; times; if the function is &lsquo;<samp>f</samp>&rsquo; and &lsquo;<samp>n</samp>&rsquo;
is 3, the result is &lsquo;<samp>f(f(f(a)))</samp>&rsquo;.  The number &lsquo;<samp>n</samp>&rsquo; may be
negative if Calc knows an inverse for the function &lsquo;<samp>f</samp>&rsquo;; for
example, &lsquo;<samp>nest(sin, a, -2)</samp>&rsquo; returns &lsquo;<samp>arcsin(arcsin(a))</samp>&rsquo;.
</p>
<a name="index-H-v-U"></a>
<a name="index-H-V-U"></a>
<a name="index-anest"></a>
<p>The <kbd>H V U</kbd> [<code>anest</code>] command is an accumulating version of
<code>nest</code>:  It returns a vector of &lsquo;<samp>n+1</samp>&rsquo; values, e.g.,
&lsquo;<samp>[a, f(a), f(f(a)), f(f(f(a)))]</samp>&rsquo;.  If &lsquo;<samp>n</samp>&rsquo; is negative and
&lsquo;<samp>F</samp>&rsquo; is the inverse of &lsquo;<samp>f</samp>&rsquo;, then the result is of the
form &lsquo;<samp>[a, F(a), F(F(a)), F(F(F(a)))]</samp>&rsquo;.
</p>
<a name="index-H-I-v-R"></a>
<a name="index-H-I-V-R"></a>
<a name="index-fixp"></a>
<a name="index-Fixed-points"></a>
<p>The <kbd>H I V R</kbd> [<code>fixp</code>] command is like <kbd>H V R</kbd>, except
that it takes only an &lsquo;<samp>a</samp>&rsquo; value from the stack; the function is
applied until it reaches a &ldquo;fixed point,&rdquo; i.e., until the result
no longer changes.
</p>
<a name="index-H-I-v-U"></a>
<a name="index-H-I-V-U"></a>
<a name="index-afixp"></a>
<p>The <kbd>H I V U</kbd> [<code>afixp</code>] command is an accumulating <code>fixp</code>.
The first element of the return vector will be the initial value &lsquo;<samp>a</samp>&rsquo;;
the last element will be the final result that would have been returned
by <code>fixp</code>.
</p>
<p>For example, 0.739085 is a fixed point of the cosine function (in radians):
&lsquo;<samp>cos(0.739085) = 0.739085</samp>&rsquo;.  You can find this value by putting, say,
1.0 on the stack and typing <kbd>H I V U C</kbd>.  (We use the accumulating
version so we can see the intermediate results:  &lsquo;<samp>[1, 0.540302, 0.857553,
0.65329, ...]</samp>&rsquo;.  With a precision of six, this command will take 36 steps
to converge to 0.739085.)
</p>
<p>Newton&rsquo;s method for finding roots is a classic example of iteration
to a fixed point.  To find the square root of five starting with an
initial guess, Newton&rsquo;s method would look for a fixed point of the
function &lsquo;<samp>(x + 5/x) / 2</samp>&rsquo;.  Putting a guess of 1 on the stack
and typing <kbd>H I V R ' ($ + 5/$)/2 <span class="key">RET</span></kbd> quickly yields the result
2.23607.  This is equivalent to using the <kbd>a R</kbd> (<code>calc-find-root</code>)
command to find a root of the equation &lsquo;<samp>x^2 = 5</samp>&rsquo;.
</p>
<p>These examples used numbers for &lsquo;<samp>a</samp>&rsquo; values.  Calc keeps applying
the function until two successive results are equal to within the
current precision.  For complex numbers, both the real parts and the
imaginary parts must be equal to within the current precision.  If
&lsquo;<samp>a</samp>&rsquo; is a formula (say, a variable name), then the function is
applied until two successive results are exactly the same formula.
It is up to you to ensure that the function will eventually converge;
if it doesn&rsquo;t, you may have to press <kbd>C-g</kbd> to stop the Calculator.
</p>
<p>The algebraic <code>fixp</code> function takes two optional arguments, &lsquo;<samp>n</samp>&rsquo;
and &lsquo;<samp>tol</samp>&rsquo;.  The first is the maximum number of steps to be allowed,
and must be either an integer or the symbol &lsquo;<samp>inf</samp>&rsquo; (infinity, the
default).  The second is a convergence tolerance.  If a tolerance is
specified, all results during the calculation must be numbers, not
formulas, and the iteration stops when the magnitude of the difference
between two successive results is less than or equal to the tolerance.
(This implies that a tolerance of zero iterates until the results are
exactly equal.)
</p>
<p>Putting it all together, &lsquo;<samp>fixp(&lt;(# + A/#)/2&gt;, B, 20, 1e-10)</samp>&rsquo;
computes the square root of &lsquo;<samp>A</samp>&rsquo; given the initial guess &lsquo;<samp>B</samp>&rsquo;,
stopping when the result is correct within the specified tolerance, or
when 20 steps have been taken, whichever is sooner.
</p>
<hr>
<a name="Generalized-Products"></a>
<div class="header">
<p>
Previous: <a href="#Nesting-and-Fixed-Points" accesskey="p" rel="prev">Nesting and Fixed Points</a>, Up: <a href="#Reducing-and-Mapping" accesskey="u" rel="up">Reducing and Mapping</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Generalized-Products-1"></a>
<h4 class="subsection">9.8.5 Generalized Products</h4>

<a name="index-v-O"></a>
<a name="index-V-O"></a>
<a name="index-calc_002douter_002dproduct"></a>
<a name="index-outer"></a>
<p>The <kbd>V O</kbd> (<code>calc-outer-product</code>) [<code>outer</code>] command applies
a given binary operator to all possible pairs of elements from two
vectors, to produce a matrix.  For example, <kbd>V O *</kbd> with &lsquo;<samp>[a, b]</samp>&rsquo;
and &lsquo;<samp>[x, y, z]</samp>&rsquo; on the stack produces a multiplication table:
&lsquo;<samp>[[a x, a y, a z], [b x, b y, b z]]</samp>&rsquo;.  Element <var>r</var>,<var>c</var> of
the result matrix is obtained by applying the operator to element <var>r</var>
of the lefthand vector and element <var>c</var> of the righthand vector.
</p>
<a name="index-v-I"></a>
<a name="index-V-I"></a>
<a name="index-calc_002dinner_002dproduct"></a>
<a name="index-inner"></a>
<p>The <kbd>V I</kbd> (<code>calc-inner-product</code>) [<code>inner</code>] command computes
the generalized inner product of two vectors or matrices, given a
&ldquo;multiplicative&rdquo; operator and an &ldquo;additive&rdquo; operator.  These can each
actually be any binary operators; if they are &lsquo;<samp>*</samp>&rsquo; and &lsquo;<samp>+</samp>&rsquo;,
respectively, the result is a standard matrix multiplication.  Element
<var>r</var>,<var>c</var> of the result matrix is obtained by mapping the
multiplicative operator across row <var>r</var> of the lefthand matrix and
column <var>c</var> of the righthand matrix, and then reducing with the additive
operator.  Just as for the standard <kbd>*</kbd> command, this can also do a
vector-matrix or matrix-vector inner product, or a vector-vector
generalized dot product.
</p>
<p>Since <kbd>V I</kbd> requires two operators, it prompts twice.  In each case,
you can use any of the usual methods for entering the operator.  If you
use <kbd>$</kbd> twice to take both operator formulas from the stack, the
first (multiplicative) operator is taken from the top of the stack
and the second (additive) operator is taken from second-to-top.
</p>
<hr>
<a name="Vector-and-Matrix-Formats"></a>
<div class="header">
<p>
Previous: <a href="#Reducing-and-Mapping" accesskey="p" rel="prev">Reducing and Mapping</a>, Up: <a href="#Matrix-Functions" accesskey="u" rel="up">Matrix Functions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-and-Matrix-Display-Formats"></a>
<h3 class="section">9.9 Vector and Matrix Display Formats</h3>

<p>Commands for controlling vector and matrix display use the <kbd>v</kbd> prefix
instead of the usual <kbd>d</kbd> prefix.  But they are display modes; in
particular, they are influenced by the <kbd>I</kbd> and <kbd>H</kbd> prefix keys
in the same way (see <a href="#Display-Modes">Display Modes</a>).  Matrix display is also
influenced by the <kbd>d O</kbd> (<code>calc-flat-language</code>) mode;
see <a href="#Normal-Language-Modes">Normal Language Modes</a>.
</p>
<a name="index-v-_003c"></a>
<a name="index-V-_003c"></a>
<a name="index-calc_002dmatrix_002dleft_002djustify"></a>
<a name="index-v-_003d"></a>
<a name="index-V-_003d"></a>
<a name="index-calc_002dmatrix_002dcenter_002djustify"></a>
<a name="index-v-_003e"></a>
<a name="index-V-_003e"></a>
<a name="index-calc_002dmatrix_002dright_002djustify"></a>
<p>The commands <kbd>v &lt;</kbd> (<code>calc-matrix-left-justify</code>), <kbd>v &gt;</kbd>
(<code>calc-matrix-right-justify</code>), and <kbd>v&nbsp;=</kbd><!-- /@w -->
(<code>calc-matrix-center-justify</code>) control whether matrix elements
are justified to the left, right, or center of their columns.
</p>
<a name="index-v-_005b"></a>
<a name="index-V-_005b"></a>
<a name="index-calc_002dvector_002dbrackets"></a>
<a name="index-v-_007b"></a>
<a name="index-V-_007b"></a>
<a name="index-calc_002dvector_002dbraces"></a>
<a name="index-v-_0028"></a>
<a name="index-V-_0028"></a>
<a name="index-calc_002dvector_002dparens"></a>
<p>The <kbd>v [</kbd> (<code>calc-vector-brackets</code>) command turns the square
brackets that surround vectors and matrices displayed in the stack on
and off.  The <kbd>v {</kbd> (<code>calc-vector-braces</code>) and <kbd>v (</kbd>
(<code>calc-vector-parens</code>) commands use curly braces or parentheses,
respectively, instead of square brackets.  For example, <kbd>v {</kbd> might
be used in preparation for yanking a matrix into a buffer running
Mathematica.  (In fact, the Mathematica language mode uses this mode;
see <a href="#Mathematica-Language-Mode">Mathematica Language Mode</a>.)  Note that, regardless of the
display mode, either brackets or braces may be used to enter vectors,
and parentheses may never be used for this purpose.
</p>
<a name="index-V-_005d"></a>
<a name="index-v-_005d"></a>
<a name="index-V-_0029"></a>
<a name="index-v-_0029"></a>
<a name="index-V-_007d"></a>
<a name="index-v-_007d"></a>
<a name="index-calc_002dmatrix_002dbrackets"></a>
<p>The <kbd>v ]</kbd> (<code>calc-matrix-brackets</code>) command controls the
&ldquo;big&rdquo; style display of matrices, for matrices which have more than
one row.  It prompts for a string of code letters; currently
implemented letters are <code>R</code>, which enables brackets on each row
of the matrix; <code>O</code>, which enables outer brackets in opposite
corners of the matrix; and <code>C</code>, which enables commas or
semicolons at the ends of all rows but the last.  The default format
is &lsquo;<samp>RO</samp>&rsquo;.  (Before Calc 2.00, the format was fixed at &lsquo;<samp>ROC</samp>&rsquo;.)
Here are some example matrices:
</p>
<div class="example">
<pre class="example">[ [ 123,  0,   0  ]       [ [ 123,  0,   0  ],
  [  0,  123,  0  ]         [  0,  123,  0  ],
  [  0,   0,  123 ] ]       [  0,   0,  123 ] ]

         RO                        ROC

</pre></div>
<div class="example">
<pre class="example">  [ 123,  0,   0            [ 123,  0,   0 ;
     0,  123,  0               0,  123,  0 ;
     0,   0,  123 ]            0,   0,  123 ]

          O                        OC

</pre></div>
<div class="example">
<pre class="example">  [ 123,  0,   0  ]           123,  0,   0
  [  0,  123,  0  ]            0,  123,  0
  [  0,   0,  123 ]            0,   0,  123

          R                       <span class="roman">blank</span>
</pre></div>

<p>Note that of the formats shown here, &lsquo;<samp>RO</samp>&rsquo;, &lsquo;<samp>ROC</samp>&rsquo;, and
&lsquo;<samp>OC</samp>&rsquo; are all recognized as matrices during reading, while
the others are useful for display only.
</p>
<a name="index-v-_002c"></a>
<a name="index-V-_002c"></a>
<a name="index-calc_002dvector_002dcommas"></a>
<p>The <kbd>v ,</kbd> (<code>calc-vector-commas</code>) command turns commas on and
off in vector and matrix display.
</p>
<p>In vectors of length one, and in all vectors when commas have been
turned off, Calc adds extra parentheses around formulas that might
otherwise be ambiguous.  For example, &lsquo;<samp>[a b]</samp>&rsquo; could be a vector
of the one formula &lsquo;<samp>a b</samp>&rsquo;, or it could be a vector of two
variables with commas turned off.  Calc will display the former
case as &lsquo;<samp>[(a b)]</samp>&rsquo;.  You can disable these extra parentheses
(to make the output less cluttered at the expense of allowing some
ambiguity) by adding the letter <code>P</code> to the control string you
give to <kbd>v ]</kbd> (as described above).
</p>
<a name="index-v-_002e"></a>
<a name="index-V-_002e"></a>
<a name="index-calc_002dfull_002dvectors"></a>
<p>The <kbd>v .</kbd> (<code>calc-full-vectors</code>) command turns abbreviated
display of long vectors on and off.  In this mode, vectors of six
or more elements, or matrices of six or more rows or columns, will
be displayed in an abbreviated form that displays only the first
three elements and the last element:  &lsquo;<samp>[a, b, c, ..., z]</samp>&rsquo;.
When very large vectors are involved this will substantially
improve Calc&rsquo;s display speed.
</p>
<a name="index-t-_002e"></a>
<a name="index-calc_002dfull_002dtrail_002dvectors"></a>
<p>The <kbd>t .</kbd> (<code>calc-full-trail-vectors</code>) command controls a
similar mode for recording vectors in the Trail.  If you turn on
this mode, vectors of six or more elements and matrices of six or
more rows or columns will be abbreviated when they are put in the
Trail.  The <kbd>t y</kbd> (<code>calc-trail-yank</code>) command will be
unable to recover those vectors.  If you are working with very
large vectors, this mode will improve the speed of all operations
that involve the trail.
</p>
<a name="index-v-_002f"></a>
<a name="index-V-_002f"></a>
<a name="index-calc_002dbreak_002dvectors"></a>
<p>The <kbd>v /</kbd> (<code>calc-break-vectors</code>) command turns multi-line
vector display on and off.  Normally, matrices are displayed with one
row per line but all other types of vectors are displayed in a single
line.  This mode causes all vectors, whether matrices or not, to be
displayed with a single element per line.  Sub-vectors within the
vectors will still use the normal linear form.
</p>
<hr>
<a name="Algebra"></a>
<div class="header">
<p>
Next: <a href="#Units" accesskey="n" rel="next">Units</a>, Previous: <a href="#Matrix-Functions" accesskey="p" rel="prev">Matrix Functions</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebra-1"></a>
<h2 class="chapter">10 Algebra</h2>

<p>This section covers the Calc features that help you work with
algebraic formulas.  First, the general sub-formula selection
mechanism is described; this works in conjunction with any Calc
commands.  Then, commands for specific algebraic operations are
described.  Finally, the flexible <em>rewrite rule</em> mechanism
is discussed.
</p>
<p>The algebraic commands use the <kbd>a</kbd> key prefix; selection
commands use the <kbd>j</kbd> (for &ldquo;just a letter that wasn&rsquo;t used
for anything else&rdquo;) prefix.
</p>
<p>See <a href="#Editing-Stack-Entries">Editing Stack Entries</a>, to see how to manipulate formulas
using regular Emacs editing commands.
</p>
<p>When doing algebraic work, you may find several of the Calculator&rsquo;s
modes to be helpful, including Algebraic Simplification mode (<kbd>m A</kbd>)
or No-Simplification mode (<kbd>m O</kbd>),
Algebraic entry mode (<kbd>m a</kbd>), Fraction mode (<kbd>m f</kbd>), and
Symbolic mode (<kbd>m s</kbd>).  See <a href="#Mode-Settings">Mode Settings</a>, for discussions
of these modes.  You may also wish to select Big display mode (<kbd>d B</kbd>).
See <a href="#Normal-Language-Modes">Normal Language Modes</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Selecting-Subformulas" accesskey="1">Selecting Subformulas</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Manipulation" accesskey="2">Algebraic Manipulation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Simplifying-Formulas" accesskey="3">Simplifying Formulas</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Polynomials" accesskey="4">Polynomials</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Calculus" accesskey="5">Calculus</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Solving-Equations" accesskey="6">Solving Equations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Numerical-Solutions" accesskey="7">Numerical Solutions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Curve-Fitting" accesskey="8">Curve Fitting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Summations" accesskey="9">Summations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Logical-Operations">Logical Operations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rewrite-Rules">Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Selecting-Subformulas"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Manipulation" accesskey="n" rel="next">Algebraic Manipulation</a>, Previous: <a href="#Algebra" accesskey="p" rel="prev">Algebra</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Selecting-Sub_002dFormulas"></a>
<h3 class="section">10.1 Selecting Sub-Formulas</h3>

<p><a name="index-Selections"></a>
<a name="index-Sub_002dformulas"></a>
<a name="index-Parts-of-formulas"></a>
When working with an algebraic formula it is often necessary to
manipulate a portion of the formula rather than the formula as a
whole.  Calc allows you to &ldquo;select&rdquo; a portion of any formula on
the stack.  Commands which would normally operate on that stack
entry will now operate only on the sub-formula, leaving the
surrounding part of the stack entry alone.
</p>
<p>One common non-algebraic use for selection involves vectors.  To work
on one element of a vector in-place, simply select that element as a
&ldquo;sub-formula&rdquo; of the vector.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Making-Selections" accesskey="1">Making Selections</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Changing-Selections" accesskey="2">Changing Selections</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Displaying-Selections" accesskey="3">Displaying Selections</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Operating-on-Selections" accesskey="4">Operating on Selections</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rearranging-with-Selections" accesskey="5">Rearranging with Selections</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Making-Selections"></a>
<div class="header">
<p>
Next: <a href="#Changing-Selections" accesskey="n" rel="next">Changing Selections</a>, Previous: <a href="#Selecting-Subformulas" accesskey="p" rel="prev">Selecting Subformulas</a>, Up: <a href="#Selecting-Subformulas" accesskey="u" rel="up">Selecting Subformulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Making-Selections-1"></a>
<h4 class="subsection">10.1.1 Making Selections</h4>

<p><a name="index-j-s"></a>
<a name="index-calc_002dselect_002dhere"></a>
To select a sub-formula, move the Emacs cursor to any character in that
sub-formula, and press <kbd>j&nbsp;s</kbd><!-- /@w --> (<code>calc-select-here</code>).  Calc will
highlight the smallest portion of the formula that contains that
character.  By default the sub-formula is highlighted by blanking out
all of the rest of the formula with dots.  Selection works in any
display mode but is perhaps easiest in Big mode (<kbd>d B</kbd>).
Suppose you enter the following formula:
</p>
<div class="smallexample">
<pre class="smallexample">           3    ___
    (a + b)  + V c
1:  ---------------
        2 x + 1
</pre></div>

<p>(by typing <kbd>' ((a+b)^3 + sqrt(c)) / (2x+1)</kbd>).  If you move the
cursor to the letter &lsquo;<samp>b</samp>&rsquo; and press <kbd>j&nbsp;s</kbd><!-- /@w -->, the display changes
to
</p>
<div class="smallexample">
<pre class="smallexample">           .    ...
    .. . b.  . . .
1*  ...............
        . . . .
</pre></div>

<p>Every character not part of the sub-formula &lsquo;<samp>b</samp>&rsquo; has been changed
to a dot. (If the customizable variable
<code>calc-highlight-selections-with-faces</code> is non-<code>nil</code>, then the characters
not part of the sub-formula are de-emphasized by using a less
noticeable face instead of using dots. see <a href="#Displaying-Selections">Displaying Selections</a>.)
The &lsquo;<samp>*</samp>&rsquo; next to the line number is to remind you that
the formula has a portion of it selected.  (In this case, it&rsquo;s very
obvious, but it might not always be.  If Embedded mode is enabled,
the word &lsquo;<samp>Sel</samp>&rsquo; also appears in the mode line because the stack
may not be visible.  see <a href="#Embedded-Mode">Embedded Mode</a>.)
</p>
<p>If you had instead placed the cursor on the parenthesis immediately to
the right of the &lsquo;<samp>b</samp>&rsquo;, the selection would have been:
</p>
<div class="smallexample">
<pre class="smallexample">           .    ...
    (a + b)  . . .
1*  ...............
        . . . .
</pre></div>

<p>The portion selected is always large enough to be considered a complete
formula all by itself, so selecting the parenthesis selects the whole
formula that it encloses.  Putting the cursor on the &lsquo;<samp>+</samp>&rsquo; sign
would have had the same effect.
</p>
<p>(Strictly speaking, the Emacs cursor is really the manifestation of
the Emacs &ldquo;point,&rdquo; which is a position <em>between</em> two characters
in the buffer.  So purists would say that Calc selects the smallest
sub-formula which contains the character to the right of &ldquo;point.&rdquo;)
</p>
<p>If you supply a numeric prefix argument <var>n</var>, the selection is
expanded to the <var>n</var>th enclosing sub-formula.  Thus, positioning
the cursor on the &lsquo;<samp>b</samp>&rsquo; and typing <kbd>C-u 1 j s</kbd> will select
&lsquo;<samp>a + b</samp>&rsquo;; typing <kbd>C-u 2 j s</kbd> will select &lsquo;<samp>(a + b)^3</samp>&rsquo;,
and so on.
</p>
<p>If the cursor is not on any part of the formula, or if you give a
numeric prefix that is too large, the entire formula is selected.
</p>
<p>If the cursor is on the &lsquo;<samp>.</samp>&rsquo; line that marks the top of the stack
(i.e., its normal &ldquo;rest position&rdquo;), this command selects the entire
formula at stack level 1.  Most selection commands similarly operate
on the formula at the top of the stack if you haven&rsquo;t positioned the
cursor on any stack entry.
</p>
<a name="index-j-a"></a>
<a name="index-calc_002dselect_002dadditional"></a>
<p>The <kbd>j a</kbd> (<code>calc-select-additional</code>) command enlarges the
current selection to encompass the cursor.  To select the smallest
sub-formula defined by two different points, move to the first and
press <kbd>j s</kbd>, then move to the other and press <kbd>j a</kbd>.  This
is roughly analogous to using <kbd>C-@</kbd> (<code>set-mark-command</code>) to
select the two ends of a region of text during normal Emacs editing.
</p>
<a name="index-j-o"></a>
<a name="index-calc_002dselect_002donce"></a>
<p>The <kbd>j o</kbd> (<code>calc-select-once</code>) command selects a formula in
exactly the same way as <kbd>j s</kbd>, except that the selection will
last only as long as the next command that uses it.  For example,
<kbd>j o 1 +</kbd> is a handy way to add one to the sub-formula indicated
by the cursor.
</p>
<p>(A somewhat more precise definition: The <kbd>j o</kbd> command sets a flag
such that the next command involving selected stack entries will clear
the selections on those stack entries afterwards.  All other selection
commands except <kbd>j a</kbd> and <kbd>j O</kbd> clear this flag.)
</p>
<a name="index-j-S"></a>
<a name="index-j-O"></a>
<a name="index-calc_002dselect_002dhere_002dmaybe"></a>
<a name="index-calc_002dselect_002donce_002dmaybe"></a>
<p>The <kbd>j S</kbd> (<code>calc-select-here-maybe</code>) and <kbd>j O</kbd>
(<code>calc-select-once-maybe</code>) commands are equivalent to <kbd>j s</kbd>
and <kbd>j o</kbd>, respectively, except that if the formula already
has a selection they have no effect.  This is analogous to the
behavior of some commands such as <kbd>j r</kbd> (<code>calc-rewrite-selection</code>;
see <a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a>) and is mainly intended to be
used in keyboard macros that implement your own selection-oriented
commands.
</p>
<p>Selection of sub-formulas normally treats associative terms like
&lsquo;<samp>a + b - c + d</samp>&rsquo; and &lsquo;<samp>x * y * z</samp>&rsquo; as single levels of the formula.
If you place the cursor anywhere inside &lsquo;<samp>a + b - c + d</samp>&rsquo; except
on one of the variable names and use <kbd>j s</kbd>, you will select the
entire four-term sum.
</p>
<a name="index-j-b"></a>
<a name="index-calc_002dbreak_002dselections"></a>
<p>The <kbd>j b</kbd> (<code>calc-break-selections</code>) command controls a mode
in which the &ldquo;deep structure&rdquo; of these associative formulas shows
through.  Calc actually stores the above formulas as
&lsquo;<samp>((a + b) - c) + d</samp>&rsquo; and &lsquo;<samp>x * (y * z)</samp>&rsquo;.  (Note that for certain
obscure reasons, by default Calc treats multiplication as
right-associative.)  Once you have enabled <kbd>j b</kbd> mode, selecting
with the cursor on the &lsquo;<samp>-</samp>&rsquo; sign would only select the &lsquo;<samp>a + b -
c</samp>&rsquo; portion, which makes sense when the deep structure of the sum is
considered.  There is no way to select the &lsquo;<samp>b - c + d</samp>&rsquo; portion;
although this might initially look like just as legitimate a sub-formula
as &lsquo;<samp>a + b - c</samp>&rsquo;, the deep structure shows that it isn&rsquo;t.  The <kbd>d
U</kbd> command can be used to view the deep structure of any formula
(see <a href="#Normal-Language-Modes">Normal Language Modes</a>).
</p>
<p>When <kbd>j b</kbd> mode has not been enabled, the deep structure is
generally hidden by the selection commands&mdash;what you see is what
you get.
</p>
<a name="index-j-u"></a>
<a name="index-calc_002dunselect"></a>
<p>The <kbd>j u</kbd> (<code>calc-unselect</code>) command unselects the formula
that the cursor is on.  If there was no selection in the formula,
this command has no effect.  With a numeric prefix argument, it
unselects the <var>n</var>th stack element rather than using the cursor
position.
</p>
<a name="index-j-c"></a>
<a name="index-calc_002dclear_002dselections"></a>
<p>The <kbd>j c</kbd> (<code>calc-clear-selections</code>) command unselects all
stack elements.
</p>
<hr>
<a name="Changing-Selections"></a>
<div class="header">
<p>
Next: <a href="#Displaying-Selections" accesskey="n" rel="next">Displaying Selections</a>, Previous: <a href="#Making-Selections" accesskey="p" rel="prev">Making Selections</a>, Up: <a href="#Selecting-Subformulas" accesskey="u" rel="up">Selecting Subformulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Changing-Selections-1"></a>
<h4 class="subsection">10.1.2 Changing Selections</h4>

<p><a name="index-j-m"></a>
<a name="index-calc_002dselect_002dmore"></a>
Once you have selected a sub-formula, you can expand it using the
<kbd>j&nbsp;m</kbd><!-- /@w --> (<code>calc-select-more</code>) command.  If &lsquo;<samp>a + b</samp>&rsquo; is
selected, pressing <kbd>j&nbsp;m</kbd><!-- /@w --> repeatedly works as follows:
</p>
<div class="smallexample">
<pre class="smallexample">           3    ...                3    ___                3    ___
    (a + b)  . . .          (a + b)  + V c          (a + b)  + V c
1*  ...............     1*  ...............     1*  ---------------
        . . . .                 . . . .                 2 x + 1
</pre></div>

<p>In the last example, the entire formula is selected.  This is roughly
the same as having no selection at all, but because there are subtle
differences the &lsquo;<samp>*</samp>&rsquo; character is still there on the line number.
</p>
<p>With a numeric prefix argument <var>n</var>, <kbd>j m</kbd> expands <var>n</var>
times (or until the entire formula is selected).  Note that <kbd>j s</kbd>
with argument <var>n</var> is equivalent to plain <kbd>j s</kbd> followed by
<kbd>j m</kbd> with argument <var>n</var>.  If <kbd>j&nbsp;m</kbd><!-- /@w --> is used when there
is no current selection, it is equivalent to <kbd>j&nbsp;s</kbd><!-- /@w -->.
</p>
<p>Even though <kbd>j m</kbd> does not explicitly use the location of the
cursor within the formula, it nevertheless uses the cursor to determine
which stack element to operate on.  As usual, <kbd>j m</kbd> when the cursor
is not on any stack element operates on the top stack element.
</p>
<a name="index-j-l"></a>
<a name="index-calc_002dselect_002dless"></a>
<p>The <kbd>j l</kbd> (<code>calc-select-less</code>) command reduces the current
selection around the cursor position.  That is, it selects the
immediate sub-formula of the current selection which contains the
cursor, the opposite of <kbd>j m</kbd>.  If the cursor is not inside the
current selection, the command de-selects the formula.
</p>
<a name="index-j-1_002d9"></a>
<a name="index-calc_002dselect_002dpart"></a>
<p>The <kbd>j 1</kbd> through <kbd>j 9</kbd> (<code>calc-select-part</code>) commands
select the <var>n</var>th sub-formula of the current selection.  They are
like <kbd>j l</kbd> (<code>calc-select-less</code>) except they use counting
rather than the cursor position to decide which sub-formula to select.
For example, if the current selection is <kbd>a + b + c</kbd> or
<kbd>f(a, b, c)</kbd> or <kbd>[a, b, c]</kbd>, then <kbd>j 1</kbd> selects &lsquo;<samp>a</samp>&rsquo;,
<kbd>j 2</kbd> selects &lsquo;<samp>b</samp>&rsquo;, and <kbd>j 3</kbd> selects &lsquo;<samp>c</samp>&rsquo;; in each of
these cases, <kbd>j 4</kbd> through <kbd>j 9</kbd> would be errors.
</p>
<p>If there is no current selection, <kbd>j 1</kbd> through <kbd>j 9</kbd> select
the <var>n</var>th top-level sub-formula.  (In other words, they act as if
the entire stack entry were selected first.)  To select the <var>n</var>th
sub-formula where <var>n</var> is greater than nine, you must instead invoke
<kbd>j&nbsp;1</kbd><!-- /@w --> with <var>n</var> as a numeric prefix argument.
</p>
<a name="index-j-n"></a>
<a name="index-j-p"></a>
<a name="index-calc_002dselect_002dnext"></a>
<a name="index-calc_002dselect_002dprevious"></a>
<p>The <kbd>j n</kbd> (<code>calc-select-next</code>) and <kbd>j p</kbd>
(<code>calc-select-previous</code>) commands change the current selection
to the next or previous sub-formula at the same level.  For example,
if &lsquo;<samp>b</samp>&rsquo; is selected in &lsquo;<samp>2&nbsp;+&nbsp;a*b*c&nbsp;+&nbsp;x</samp>&rsquo;<!-- /@w -->, then <kbd>j n</kbd>
selects &lsquo;<samp>c</samp>&rsquo;.  Further <kbd>j n</kbd> commands would be in error because,
even though there is something to the right of &lsquo;<samp>c</samp>&rsquo; (namely, &lsquo;<samp>x</samp>&rsquo;),
it is not at the same level; in this case, it is not a term of the
same product as &lsquo;<samp>b</samp>&rsquo; and &lsquo;<samp>c</samp>&rsquo;.  However, <kbd>j m</kbd> (to select
the whole product &lsquo;<samp>a*b*c</samp>&rsquo; as a term of the sum) followed by
<kbd>j&nbsp;n</kbd><!-- /@w --> would successfully select the &lsquo;<samp>x</samp>&rsquo;.
</p>
<p>Similarly, <kbd>j p</kbd> moves the selection from the &lsquo;<samp>b</samp>&rsquo; in this
sample formula to the &lsquo;<samp>a</samp>&rsquo;.  Both commands accept numeric prefix
arguments to move several steps at a time.
</p>
<p>It is interesting to compare Calc&rsquo;s selection commands with the
Emacs Info system&rsquo;s commands for navigating through hierarchically
organized documentation.  Calc&rsquo;s <kbd>j n</kbd> command is completely
analogous to Info&rsquo;s <kbd>n</kbd> command.  Likewise, <kbd>j p</kbd> maps to
<kbd>p</kbd>, <kbd>j 2</kbd> maps to <kbd>2</kbd>, and Info&rsquo;s <kbd>u</kbd> is like <kbd>j m</kbd>.
(Note that <kbd>j u</kbd> stands for <code>calc-unselect</code>, not &ldquo;up&rdquo;.)
The Info <kbd>m</kbd> command is somewhat similar to Calc&rsquo;s <kbd>j s</kbd> and
<kbd>j l</kbd>; in each case, you can jump directly to a sub-component
of the hierarchy simply by pointing to it with the cursor.
</p>
<hr>
<a name="Displaying-Selections"></a>
<div class="header">
<p>
Next: <a href="#Operating-on-Selections" accesskey="n" rel="next">Operating on Selections</a>, Previous: <a href="#Changing-Selections" accesskey="p" rel="prev">Changing Selections</a>, Up: <a href="#Selecting-Subformulas" accesskey="u" rel="up">Selecting Subformulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Displaying-Selections-1"></a>
<h4 class="subsection">10.1.3 Displaying Selections</h4>

<p><a name="index-j-d"></a>
<a name="index-calc_002dshow_002dselections"></a>
<a name="index-calc_002dhighlight_002dselections_002dwith_002dfaces"></a>
<a name="index-calc_002dselected_002dface"></a>
<a name="index-calc_002dnonselected_002dface"></a>
The <kbd>j d</kbd> (<code>calc-show-selections</code>) command controls how
selected sub-formulas are displayed.  One of the alternatives is
illustrated in the above examples; if we press <kbd>j d</kbd> we switch
to the other style in which the selected portion itself is obscured
by &lsquo;<samp>#</samp>&rsquo; signs:
</p>
<div class="smallexample">
<pre class="smallexample">           3    ...                  #    ___
    (a + b)  . . .            ## # ##  + V c
1*  ...............       1*  ---------------
        . . . .                   2 x + 1
</pre></div>
<p>If the customizable variable
<code>calc-highlight-selections-with-faces</code> is non-<code>nil</code>, then the
non-selected portion of the formula will be de-emphasized by using a
less noticeable face (<code>calc-nonselected-face</code>) instead of dots
and the selected sub-formula will be highlighted by using a more
noticeable face (<code>calc-selected-face</code>) instead of &lsquo;<samp>#</samp>&rsquo;
signs. (see <a href="#Customizing-Calc">Customizing Calc</a>.)
</p>
<hr>
<a name="Operating-on-Selections"></a>
<div class="header">
<p>
Next: <a href="#Rearranging-with-Selections" accesskey="n" rel="next">Rearranging with Selections</a>, Previous: <a href="#Displaying-Selections" accesskey="p" rel="prev">Displaying Selections</a>, Up: <a href="#Selecting-Subformulas" accesskey="u" rel="up">Selecting Subformulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Operating-on-Selections-1"></a>
<h4 class="subsection">10.1.4 Operating on Selections</h4>

<p>Once a selection is made, all Calc commands that manipulate items
on the stack will operate on the selected portions of the items
instead.  (Note that several stack elements may have selections
at once, though there can be only one selection at a time in any
given stack element.)
</p>
<a name="index-j-e"></a>
<a name="index-calc_002denable_002dselections"></a>
<p>The <kbd>j e</kbd> (<code>calc-enable-selections</code>) command disables the
effect that selections have on Calc commands.  The current selections
still exist, but Calc commands operate on whole stack elements anyway.
This mode can be identified by the fact that the &lsquo;<samp>*</samp>&rsquo; markers on
the line numbers are gone, even though selections are visible.  To
reactivate the selections, press <kbd>j e</kbd> again.
</p>
<p>To extract a sub-formula as a new formula, simply select the
sub-formula and press <tt class="key">RET</tt>.  This normally duplicates the top
stack element; here it duplicates only the selected portion of that
element.
</p>
<p>To replace a sub-formula with something different, you can enter the
new value onto the stack and press <tt class="key">TAB</tt>.  This normally exchanges
the top two stack elements; here it swaps the value you entered into
the selected portion of the formula, returning the old selected
portion to the top of the stack.
</p>
<div class="smallexample">
<pre class="smallexample">           3    ...                    ...                    ___
    (a + b)  . . .           17 x y . . .           17 x y + V c
2*  ...............      2*  .............      2:  -------------
        . . . .                 . . . .                2 x + 1

                                    3                      3
1:  17 x y               1:  (a + b)            1:  (a + b)
</pre></div>

<p>In this example we select a sub-formula of our original example,
enter a new formula, <tt class="key">TAB</tt> it into place, then deselect to see
the complete, edited formula.
</p>
<p>If you want to swap whole formulas around even though they contain
selections, just use <kbd>j e</kbd> before and after.
</p>
<a name="index-j-_0027"></a>
<a name="index-calc_002denter_002dselection"></a>
<p>The <kbd>j '</kbd> (<code>calc-enter-selection</code>) command is another way
to replace a selected sub-formula.  This command does an algebraic
entry just like the regular <kbd>'</kbd> key.  When you press <tt class="key">RET</tt>,
the formula you type replaces the original selection.  You can use
the &lsquo;<samp>$</samp>&rsquo; symbol in the formula to refer to the original
selection.  If there is no selection in the formula under the cursor,
the cursor is used to make a temporary selection for the purposes of
the command.  Thus, to change a term of a formula, all you have to
do is move the Emacs cursor to that term and press <kbd>j '</kbd>.
</p>
<a name="index-j-_0060"></a>
<a name="index-calc_002dedit_002dselection"></a>
<p>The <kbd>j `</kbd> (<code>calc-edit-selection</code>) command is a similar
analogue of the <kbd>`</kbd> (<code>calc-edit</code>) command.  It edits the
selected sub-formula in a separate buffer.  If there is no
selection, it edits the sub-formula indicated by the cursor.
</p>
<p>To delete a sub-formula, press <tt class="key">DEL</tt>.  This generally replaces
the sub-formula with the constant zero, but in a few suitable contexts
it uses the constant one instead.  The <tt class="key">DEL</tt> key automatically
deselects and re-simplifies the entire formula afterwards.  Thus:
</p>
<div class="smallexample">
<pre class="smallexample">              ###
    17 x y + # #          17 x y         17 # y          17 y
1*  -------------     1:  -------    1*  -------    1:  -------
       2 x + 1            2 x + 1        2 x + 1        2 x + 1
</pre></div>

<p>In this example, we first delete the &lsquo;<samp>sqrt(c)</samp>&rsquo; term; Calc
accomplishes this by replacing &lsquo;<samp>sqrt(c)</samp>&rsquo; with zero and
resimplifying.  We then delete the <kbd>x</kbd> in the numerator;
since this is part of a product, Calc replaces it with &lsquo;<samp>1</samp>&rsquo;
and resimplifies.
</p>
<p>If you select an element of a vector and press <tt class="key">DEL</tt>, that
element is deleted from the vector.  If you delete one side of
an equation or inequality, only the opposite side remains.
</p>
<a name="index-j-DEL"></a>
<a name="index-calc_002ddel_002dselection"></a>
<p>The <kbd>j <span class="key">DEL</span></kbd> (<code>calc-del-selection</code>) command is like
<tt class="key">DEL</tt> but with the auto-selecting behavior of <kbd>j '</kbd> and
<kbd>j `</kbd>.  It deletes the selected portion of the formula
indicated by the cursor, or, in the absence of a selection, it
deletes the sub-formula indicated by the cursor position.
</p>
<a name="index-j-RET"></a>
<a name="index-calc_002dgrab_002dselection"></a>
<p>(There is also an auto-selecting <kbd>j <span class="key">RET</span></kbd> (<code>calc-copy-selection</code>)
command.)
</p>
<p>Normal arithmetic operations also apply to sub-formulas.  Here we
select the denominator, press <kbd>5 -</kbd> to subtract five from the
denominator, press <kbd>n</kbd> to negate the denominator, then
press <kbd>Q</kbd> to take the square root.
</p>
<div class="smallexample">
<pre class="smallexample">     .. .           .. .           .. .             .. .
1*  .......    1*  .......    1*  .......    1*  ..........
    2 x + 1        2 x - 4        4 - 2 x         _________
                                                 V 4 - 2 x
</pre></div>

<p>Certain types of operations on selections are not allowed.  For
example, for an arithmetic function like <kbd>-</kbd> no more than one of
the arguments may be a selected sub-formula.  (As the above example
shows, the result of the subtraction is spliced back into the argument
which had the selection; if there were more than one selection involved,
this would not be well-defined.)  If you try to subtract two selections,
the command will abort with an error message.
</p>
<p>Operations on sub-formulas sometimes leave the formula as a whole
in an &ldquo;un-natural&rdquo; state.  Consider negating the &lsquo;<samp>2 x</samp>&rsquo; term
of our sample formula by selecting it and pressing <kbd>n</kbd>
(<code>calc-change-sign</code>).
</p>
<div class="smallexample">
<pre class="smallexample">       .. .                .. .
1*  ..........      1*  ...........
     .........           ..........
    . . . 2 x           . . . -2 x
</pre></div>

<p>Unselecting the sub-formula reveals that the minus sign, which would
normally have canceled out with the subtraction automatically, has
not been able to do so because the subtraction was not part of the
selected portion.  Pressing <kbd>=</kbd> (<code>calc-evaluate</code>) or doing
any other mathematical operation on the whole formula will cause it
to be simplified.
</p>
<div class="smallexample">
<pre class="smallexample">       17 y                17 y
1:  -----------     1:  ----------
     __________          _________
    V 4 - -2 x          V 4 + 2 x
</pre></div>

<hr>
<a name="Rearranging-with-Selections"></a>
<div class="header">
<p>
Previous: <a href="#Operating-on-Selections" accesskey="p" rel="prev">Operating on Selections</a>, Up: <a href="#Selecting-Subformulas" accesskey="u" rel="up">Selecting Subformulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rearranging-Formulas-using-Selections"></a>
<h4 class="subsection">10.1.5 Rearranging Formulas using Selections</h4>

<p><a name="index-j-R"></a>
<a name="index-calc_002dcommute_002dright"></a>
The <kbd>j R</kbd> (<code>calc-commute-right</code>) command moves the selected
sub-formula to the right in its surrounding formula.  Generally the
selection is one term of a sum or product; the sum or product is
rearranged according to the commutative laws of algebra.
</p>
<p>As with <kbd>j '</kbd> and <kbd>j <span class="key">DEL</span></kbd>, the term under the cursor is used
if there is no selection in the current formula.  All commands described
in this section share this property.  In this example, we place the
cursor on the &lsquo;<samp>a</samp>&rsquo; and type <kbd>j R</kbd>, then repeat.
</p>
<div class="smallexample">
<pre class="smallexample">1:  a + b - c          1:  b + a - c          1:  b - c + a
</pre></div>

<p>Note that in the final step above, the &lsquo;<samp>a</samp>&rsquo; is switched with
the &lsquo;<samp>c</samp>&rsquo; but the signs are adjusted accordingly.  When moving
terms of sums and products, <kbd>j R</kbd> will never change the
mathematical meaning of the formula.
</p>
<p>The selected term may also be an element of a vector or an argument
of a function.  The term is exchanged with the one to its right.
In this case, the &ldquo;meaning&rdquo; of the vector or function may of
course be drastically changed.
</p>
<div class="smallexample">
<pre class="smallexample">1:  [a, b, c]          1:  [b, a, c]          1:  [b, c, a]

1:  f(a, b, c)         1:  f(b, a, c)         1:  f(b, c, a)
</pre></div>

<a name="index-j-L"></a>
<a name="index-calc_002dcommute_002dleft"></a>
<p>The <kbd>j L</kbd> (<code>calc-commute-left</code>) command is like <kbd>j R</kbd>
except that it swaps the selected term with the one to its left.
</p>
<p>With numeric prefix arguments, these commands move the selected
term several steps at a time.  It is an error to try to move a
term left or right past the end of its enclosing formula.
With numeric prefix arguments of zero, these commands move the
selected term as far as possible in the given direction.
</p>
<a name="index-j-D"></a>
<a name="index-calc_002dsel_002ddistribute"></a>
<p>The <kbd>j D</kbd> (<code>calc-sel-distribute</code>) command mixes the selected
sum or product into the surrounding formula using the distributive
law.  For example, in &lsquo;<samp>a * (b - c)</samp>&rsquo; with the &lsquo;<samp>b - c</samp>&rsquo;
selected, the result is &lsquo;<samp>a b - a c</samp>&rsquo;.  This also distributes
products or quotients into surrounding powers, and can also do
transformations like &lsquo;<samp>exp(a + b)</samp>&rsquo; to &lsquo;<samp>exp(a) exp(b)</samp>&rsquo;,
where &lsquo;<samp>a + b</samp>&rsquo; is the selected term, and &lsquo;<samp>ln(a ^ b)</samp>&rsquo;
to &lsquo;<samp>ln(a) b</samp>&rsquo;, where &lsquo;<samp>a ^ b</samp>&rsquo; is the selected term.
</p>
<p>For multiple-term sums or products, <kbd>j D</kbd> takes off one term
at a time:  &lsquo;<samp>a * (b + c - d)</samp>&rsquo; goes to &lsquo;<samp>a * (c - d) + a b</samp>&rsquo;
with the &lsquo;<samp>c - d</samp>&rsquo; selected so that you can type <kbd>j D</kbd>
repeatedly to expand completely.  The <kbd>j D</kbd> command allows a
numeric prefix argument which specifies the maximum number of
times to expand at once; the default is one time only.
</p>
<a name="index-DistribRules"></a>
<p>The <kbd>j D</kbd> command is implemented using rewrite rules.
See <a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a>.  The rules are stored in
the Calc variable <code>DistribRules</code>.  A convenient way to view
these rules is to use <kbd>s e</kbd> (<code>calc-edit-variable</code>) which
displays and edits the stored value of a variable.  Press <kbd>C-c C-c</kbd>
to return from editing mode; be careful not to make any actual changes
or else you will affect the behavior of future <kbd>j D</kbd> commands!
</p>
<p>To extend <kbd>j D</kbd> to handle new cases, just edit <code>DistribRules</code>
as described above.  You can then use the <kbd>s p</kbd> command to save
this variable&rsquo;s value permanently for future Calc sessions.
See <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<a name="index-j-M"></a>
<a name="index-calc_002dsel_002dmerge"></a>
<a name="index-MergeRules"></a>
<p>The <kbd>j M</kbd> (<code>calc-sel-merge</code>) command is the complement
of <kbd>j D</kbd>; given &lsquo;<samp>a b - a c</samp>&rsquo; with either &lsquo;<samp>a b</samp>&rsquo; or
&lsquo;<samp>a c</samp>&rsquo; selected, the result is &lsquo;<samp>a * (b - c)</samp>&rsquo;.  Once
again, <kbd>j M</kbd> can also merge calls to functions like <code>exp</code>
and <code>ln</code>; examine the variable <code>MergeRules</code> to see all
the relevant rules.
</p>
<a name="index-j-C"></a>
<a name="index-calc_002dsel_002dcommute"></a>
<a name="index-CommuteRules"></a>
<p>The <kbd>j C</kbd> (<code>calc-sel-commute</code>) command swaps the arguments
of the selected sum, product, or equation.  It always behaves as
if <kbd>j b</kbd> mode were in effect, i.e., the sum &lsquo;<samp>a + b + c</samp>&rsquo; is
treated as the nested sums &lsquo;<samp>(a + b) + c</samp>&rsquo; by this command.
If you put the cursor on the first &lsquo;<samp>+</samp>&rsquo;, the result is
&lsquo;<samp>(b + a) + c</samp>&rsquo;; if you put the cursor on the second &lsquo;<samp>+</samp>&rsquo;, the
result is &lsquo;<samp>c + (a + b)</samp>&rsquo; (which the default simplifications
will rearrange to &lsquo;<samp>(c + a) + b</samp>&rsquo;).  The relevant rules are stored
in the variable <code>CommuteRules</code>.
</p>
<p>You may need to turn default simplifications off (with the <kbd>m O</kbd>
command) in order to get the full benefit of <kbd>j C</kbd>.  For example,
commuting &lsquo;<samp>a - b</samp>&rsquo; produces &lsquo;<samp>-b + a</samp>&rsquo;, but the default
simplifications will &ldquo;simplify&rdquo; this right back to &lsquo;<samp>a - b</samp>&rsquo; if
you don&rsquo;t turn them off.  The same is true of some of the other
manipulations described in this section.
</p>
<a name="index-j-N"></a>
<a name="index-calc_002dsel_002dnegate"></a>
<a name="index-NegateRules"></a>
<p>The <kbd>j N</kbd> (<code>calc-sel-negate</code>) command replaces the selected
term with the negative of that term, then adjusts the surrounding
formula in order to preserve the meaning.  For example, given
&lsquo;<samp>exp(a - b)</samp>&rsquo; where &lsquo;<samp>a - b</samp>&rsquo; is selected, the result is
&lsquo;<samp>1 / exp(b - a)</samp>&rsquo;.  By contrast, selecting a term and using the
regular <kbd>n</kbd> (<code>calc-change-sign</code>) command negates the
term without adjusting the surroundings, thus changing the meaning
of the formula as a whole.  The rules variable is <code>NegateRules</code>.
</p>
<a name="index-j-_0026"></a>
<a name="index-calc_002dsel_002dinvert"></a>
<a name="index-InvertRules"></a>
<p>The <kbd>j &amp;</kbd> (<code>calc-sel-invert</code>) command is similar to <kbd>j N</kbd>
except it takes the reciprocal of the selected term.  For example,
given &lsquo;<samp>a - ln(b)</samp>&rsquo; with &lsquo;<samp>b</samp>&rsquo; selected, the result is
&lsquo;<samp>a + ln(1/b)</samp>&rsquo;.  The rules variable is <code>InvertRules</code>.
</p>
<a name="index-j-E"></a>
<a name="index-calc_002dsel_002djump_002dequals"></a>
<a name="index-JumpRules"></a>
<p>The <kbd>j E</kbd> (<code>calc-sel-jump-equals</code>) command moves the
selected term from one side of an equation to the other.  Given
&lsquo;<samp>a + b = c + d</samp>&rsquo; with &lsquo;<samp>c</samp>&rsquo; selected, the result is
&lsquo;<samp>a + b - c = d</samp>&rsquo;.  This command also works if the selected
term is part of a &lsquo;<samp>*</samp>&rsquo;, &lsquo;<samp>/</samp>&rsquo;, or &lsquo;<samp>^</samp>&rsquo; formula.  The
relevant rules variable is <code>JumpRules</code>.
</p>
<a name="index-j-I"></a>
<a name="index-H-j-I"></a>
<a name="index-calc_002dsel_002disolate"></a>
<p>The <kbd>j I</kbd> (<code>calc-sel-isolate</code>) command isolates the
selected term on its side of an equation.  It uses the <kbd>a S</kbd>
(<code>calc-solve-for</code>) command to solve the equation, and the
Hyperbolic flag affects it in the same way.  See <a href="#Solving-Equations">Solving Equations</a>.
When it applies, <kbd>j I</kbd> is often easier to use than <kbd>j E</kbd>.
It understands more rules of algebra, and works for inequalities
as well as equations.
</p>
<a name="index-j-_002a"></a>
<a name="index-j-_002f"></a>
<a name="index-calc_002dsel_002dmult_002dboth_002dsides"></a>
<a name="index-calc_002dsel_002ddiv_002dboth_002dsides"></a>
<p>The <kbd>j *</kbd> (<code>calc-sel-mult-both-sides</code>) command prompts for a
formula using algebraic entry, then multiplies both sides of the
selected quotient or equation by that formula.  It performs the
default algebraic simplifications  before re-forming the
quotient or equation.  You can suppress this simplification by
providing a prefix argument: <kbd>C-u j *</kbd>.  There is also a <kbd>j /</kbd>
(<code>calc-sel-div-both-sides</code>) which is similar to <kbd>j *</kbd> but
dividing instead of multiplying by the factor you enter.
</p>
<p>If the selection is a quotient with numerator 1, then Calc&rsquo;s default
simplifications would normally cancel the new factors.  To prevent
this, when the <kbd>j *</kbd> command is used on a selection whose numerator is
1 or -1, the denominator is expanded at the top level using the
distributive law (as if using the <kbd>C-u 1 a x</kbd> command).  Suppose the
formula on the stack is &lsquo;<samp>1 / (a + 1)</samp>&rsquo; and you wish to multiplying the
top and bottom by &lsquo;<samp>a - 1</samp>&rsquo;.  Calc&rsquo;s default simplifications would
normally change the result &lsquo;<samp>(a - 1) /(a + 1) (a - 1)</samp>&rsquo; back
to the original form by cancellation; when <kbd>j *</kbd> is used, Calc
expands the denominator to  &lsquo;<samp>a (a - 1) + a - 1</samp>&rsquo; to prevent this.
</p>
<p>If you wish the <kbd>j *</kbd> command to completely expand the denominator
of a quotient you can call it with a zero prefix: <kbd>C-u 0 j *</kbd>.  For
example, if the formula on the stack is &lsquo;<samp>1 / (sqrt(a) + 1)</samp>&rsquo;, you may
wish to eliminate the square root in the denominator by multiplying
the top and bottom by &lsquo;<samp>sqrt(a) - 1</samp>&rsquo;.  If you did this simply by using
a simple <kbd>j *</kbd> command, you would get
&lsquo;<samp>(sqrt(a)-1)/ (sqrt(a) (sqrt(a) - 1) + sqrt(a) - 1)</samp>&rsquo;.  Instead,
you would probably want to use <kbd>C-u 0 j *</kbd>, which would expand the
bottom and give you the desired result &lsquo;<samp>(sqrt(a)-1)/(a-1)</samp>&rsquo;.  More
generally, if <kbd>j *</kbd> is called with an argument of a positive
integer <var>n</var>, then the denominator of the expression will be
expanded <var>n</var> times (as if with the <kbd>C-u <var>n</var> a x</kbd> command).
</p>
<p>If the selection is an inequality, <kbd>j *</kbd> and <kbd>j /</kbd> will
accept any factor, but will warn unless they can prove the factor
is either positive or negative.  (In the latter case the direction
of the inequality will be switched appropriately.)  See <a href="#Declarations">Declarations</a>,
for ways to inform Calc that a given variable is positive or
negative.  If Calc can&rsquo;t tell for sure what the sign of the factor
will be, it will assume it is positive and display a warning
message.
</p>
<p>For selections that are not quotients, equations, or inequalities,
these commands pull out a multiplicative factor:  They divide (or
multiply) by the entered formula, simplify, then multiply (or divide)
back by the formula.
</p>
<a name="index-j-_002b"></a>
<a name="index-j-_002d"></a>
<a name="index-calc_002dsel_002dadd_002dboth_002dsides"></a>
<a name="index-calc_002dsel_002dsub_002dboth_002dsides"></a>
<p>The <kbd>j +</kbd> (<code>calc-sel-add-both-sides</code>) and <kbd>j -</kbd>
(<code>calc-sel-sub-both-sides</code>) commands analogously add to or
subtract from both sides of an equation or inequality.  For other
types of selections, they extract an additive factor.  A numeric
prefix argument suppresses simplification of the intermediate
results.
</p>
<a name="index-j-U"></a>
<a name="index-calc_002dsel_002dunpack"></a>
<p>The <kbd>j U</kbd> (<code>calc-sel-unpack</code>) command replaces the
selected function call with its argument.  For example, given
&lsquo;<samp>a + sin(x^2)</samp>&rsquo; with &lsquo;<samp>sin(x^2)</samp>&rsquo; selected, the result
is &lsquo;<samp>a + x^2</samp>&rsquo;.  (The &lsquo;<samp>x^2</samp>&rsquo; will remain selected; if you
wanted to change the <code>sin</code> to <code>cos</code>, just press <kbd>C</kbd>
now to take the cosine of the selected part.)
</p>
<a name="index-j-v"></a>
<a name="index-calc_002dsel_002devaluate"></a>
<p>The <kbd>j v</kbd> (<code>calc-sel-evaluate</code>) command performs the
basic simplifications on the selected sub-formula.
These simplifications would normally be done automatically
on all results, but may have been partially inhibited by
previous selection-related operations, or turned off altogether
by the <kbd>m O</kbd> command.  This command is just an auto-selecting
version of the <kbd>a&nbsp;v</kbd><!-- /@w --> command (see <a href="#Algebraic-Manipulation">Algebraic Manipulation</a>).
</p>
<p>With a numeric prefix argument of 2, <kbd>C-u 2 j v</kbd> applies
the default algebraic simplifications to the selected
sub-formula.  With a prefix argument of 3 or more, e.g., <kbd>C-u j v</kbd>
applies the <kbd>a e</kbd> (<code>calc-simplify-extended</code>) command.
See <a href="#Simplifying-Formulas">Simplifying Formulas</a>.  With a negative prefix argument
it simplifies at the top level only, just as with <kbd>a v</kbd>.
Here the &ldquo;top&rdquo; level refers to the top level of the selected
sub-formula.
</p>
<a name="index-j-_0022"></a>
<a name="index-calc_002dsel_002dexpand_002dformula"></a>
<p>The <kbd>j &quot;</kbd> (<code>calc-sel-expand-formula</code>) command is to <kbd>a &quot;</kbd>
(see <a href="#Algebraic-Manipulation">Algebraic Manipulation</a>) what <kbd>j v</kbd> is to <kbd>a v</kbd>.
</p>
<p>You can use the <kbd>j r</kbd> (<code>calc-rewrite-selection</code>) command
to define other algebraic operations on sub-formulas.  See <a href="#Rewrite-Rules">Rewrite Rules</a>.
</p>
<hr>
<a name="Algebraic-Manipulation"></a>
<div class="header">
<p>
Next: <a href="#Simplifying-Formulas" accesskey="n" rel="next">Simplifying Formulas</a>, Previous: <a href="#Selecting-Subformulas" accesskey="p" rel="prev">Selecting Subformulas</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Manipulation-1"></a>
<h3 class="section">10.2 Algebraic Manipulation</h3>

<p>The commands in this section perform general-purpose algebraic
manipulations.  They work on the whole formula at the top of the
stack (unless, of course, you have made a selection in that
formula).
</p>
<p>Many algebra commands prompt for a variable name or formula.  If you
answer the prompt with a blank line, the variable or formula is taken
from top-of-stack, and the normal argument for the command is taken
from the second-to-top stack level.
</p>
<a name="index-a-v"></a>
<a name="index-calc_002dalg_002devaluate"></a>
<p>The <kbd>a v</kbd> (<code>calc-alg-evaluate</code>) command performs the normal
default simplifications on a formula; for example, &lsquo;<samp>a - -b</samp>&rsquo; is
changed to &lsquo;<samp>a + b</samp>&rsquo;.  These simplifications are normally done
automatically on all Calc results, so this command is useful only if
you have turned default simplifications off with an <kbd>m O</kbd>
command.  See <a href="#Simplification-Modes">Simplification Modes</a>.
</p>
<p>It is often more convenient to type <kbd>=</kbd>, which is like <kbd>a v</kbd>
but which also substitutes stored values for variables in the formula.
Use <kbd>a v</kbd> if you want the variables to ignore their stored values.
</p>
<p>If you give a numeric prefix argument of 2 to <kbd>a v</kbd>, it simplifies
using Calc&rsquo;s algebraic simplifications; see <a href="#Simplifying-Formulas">Simplifying Formulas</a>.
If you give a numeric prefix of 3 or more, it uses Extended
Simplification mode (<kbd>a e</kbd>).
</p>
<p>If you give a negative prefix argument <i>-1</i>, <i>-2</i>, or <i>-3</i>,
it simplifies in the corresponding mode but only works on the top-level
function call of the formula.  For example, &lsquo;<samp>(2 + 3) * (2 + 3)</samp>&rsquo; will
simplify to &lsquo;<samp>(2 + 3)^2</samp>&rsquo;, without simplifying the sub-formulas
&lsquo;<samp>2 + 3</samp>&rsquo;.  As another example, typing <kbd>V R +</kbd> to sum the vector
&lsquo;<samp>[1, 2, 3, 4]</samp>&rsquo; produces the formula &lsquo;<samp>reduce(add, [1, 2, 3, 4])</samp>&rsquo;
in No-Simplify mode.  Using <kbd>a v</kbd> will evaluate this all the way to
10; using <kbd>C-u - a v</kbd> will evaluate it only to &lsquo;<samp>1 + 2 + 3 + 4</samp>&rsquo;.
(See <a href="#Reducing-and-Mapping">Reducing and Mapping</a>.)
</p>
<a name="index-evalv"></a>
<a name="index-evalvn"></a>
<p>The <kbd>=</kbd> command corresponds to the <code>evalv</code> function, and
the related <kbd>N</kbd> command, which is like <kbd>=</kbd> but temporarily
disables Symbolic mode (<kbd>m s</kbd>) during the evaluation, corresponds
to the <code>evalvn</code> function.  (These commands interpret their prefix
arguments differently than <kbd>a v</kbd>; <kbd>=</kbd> treats the prefix as
the number of stack elements to evaluate at once, and <kbd>N</kbd> treats
it as a temporary different working precision.)
</p>
<p>The <code>evalvn</code> function can take an alternate working precision
as an optional second argument.  This argument can be either an
integer, to set the precision absolutely, or a vector containing
a single integer, to adjust the precision relative to the current
precision.  Note that <code>evalvn</code> with a larger than current
precision will do the calculation at this higher precision, but the
result will as usual be rounded back down to the current precision
afterward.  For example, &lsquo;<samp>evalvn(pi - 3.1415)</samp>&rsquo; at a precision
of 12 will return &lsquo;<samp>9.265359e-5</samp>&rsquo;; &lsquo;<samp>evalvn(pi - 3.1415, 30)</samp>&rsquo;
will return &lsquo;<samp>9.26535897932e-5</samp>&rsquo; (computing a 25-digit result which
is then rounded down to 12); and &lsquo;<samp>evalvn(pi - 3.1415, [-2])</samp>&rsquo;
will return &lsquo;<samp>9.2654e-5</samp>&rsquo;.
</p>
<a name="index-a-_0022"></a>
<a name="index-calc_002dexpand_002dformula"></a>
<p>The <kbd>a &quot;</kbd> (<code>calc-expand-formula</code>) command expands functions
into their defining formulas wherever possible.  For example,
&lsquo;<samp>deg(x^2)</samp>&rsquo; is changed to &lsquo;<samp>180 x^2 / pi</samp>&rsquo;.  Most functions,
like <code>sin</code> and <code>gcd</code>, are not defined by simple formulas
and so are unaffected by this command.  One important class of
functions which <em>can</em> be expanded is the user-defined functions
created by the <kbd>Z F</kbd> command.  See <a href="#Algebraic-Definitions">Algebraic Definitions</a>.
Other functions which <kbd>a &quot;</kbd> can expand include the probability
distribution functions, most of the financial functions, and the
hyperbolic and inverse hyperbolic functions.  A numeric prefix argument
affects <kbd>a &quot;</kbd> in the same way as it does <kbd>a v</kbd>:  A positive
argument expands all functions in the formula and then simplifies in
various ways; a negative argument expands and simplifies only the
top-level function call.
</p>
<a name="index-a-M"></a>
<a name="index-calc_002dmap_002dequation"></a>
<a name="index-mapeq"></a>
<p>The <kbd>a M</kbd> (<code>calc-map-equation</code>) [<code>mapeq</code>] command applies
a given function or operator to one or more equations.  It is analogous
to <kbd>V M</kbd>, which operates on vectors instead of equations.
see <a href="#Reducing-and-Mapping">Reducing and Mapping</a>.  For example, <kbd>a M S</kbd> changes
&lsquo;<samp>x = y+1</samp>&rsquo; to &lsquo;<samp>sin(x) = sin(y+1)</samp>&rsquo;, and <kbd>a M +</kbd> with
&lsquo;<samp>x = y+1</samp>&rsquo; and &lsquo;<samp>6</samp>&rsquo; on the stack produces &lsquo;<samp>x+6 = y+7</samp>&rsquo;.
With two equations on the stack, <kbd>a M +</kbd> would add the lefthand
sides together and the righthand sides together to get the two
respective sides of a new equation.
</p>
<p>Mapping also works on inequalities.  Mapping two similar inequalities
produces another inequality of the same type.  Mapping an inequality
with an equation produces an inequality of the same type.  Mapping a
&lsquo;<samp>&lt;=</samp>&rsquo; with a &lsquo;<samp>&lt;</samp>&rsquo; or &lsquo;<samp>!=</samp>&rsquo; (not-equal) produces a &lsquo;<samp>&lt;</samp>&rsquo;.
If inequalities with opposite direction (e.g., &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&gt;</samp>&rsquo;)
are mapped, the direction of the second inequality is reversed to
match the first:  Using <kbd>a M +</kbd> on &lsquo;<samp>a &lt; b</samp>&rsquo; and &lsquo;<samp>a &gt; 2</samp>&rsquo;
reverses the latter to get &lsquo;<samp>2 &lt; a</samp>&rsquo;, which then allows the
combination &lsquo;<samp>a + 2 &lt; b + a</samp>&rsquo;, which the algebraic simplifications
can reduce to &lsquo;<samp>2 &lt; b</samp>&rsquo;.
</p>
<p>Using <kbd>a M *</kbd>, <kbd>a M /</kbd>, <kbd>a M n</kbd>, or <kbd>a M &amp;</kbd> to negate
or invert an inequality will reverse the direction of the inequality.
Other adjustments to inequalities are <em>not</em> done automatically;
<kbd>a M S</kbd> will change &lsquo;<samp>x&nbsp;&lt;&nbsp;y</samp>&rsquo;<!-- /@w --> to &lsquo;<samp>sin(x) &lt; sin(y)</samp>&rsquo; even
though this is not true for all values of the variables.
</p>
<a name="index-H-a-M"></a>
<a name="index-mapeqp"></a>
<p>With the Hyperbolic flag, <kbd>H a M</kbd> [<code>mapeqp</code>] does a plain
mapping operation without reversing the direction of any inequalities.
Thus, <kbd>H a M &amp;</kbd> would change <kbd>x &gt; 2</kbd> to <kbd>1/x &gt; 0.5</kbd>.
(This change is mathematically incorrect, but perhaps you were
fixing an inequality which was already incorrect.)
</p>
<a name="index-I-a-M"></a>
<a name="index-mapeqr"></a>
<p>With the Inverse flag, <kbd>I a M</kbd> [<code>mapeqr</code>] always reverses
the direction of the inequality.  You might use <kbd>I a M C</kbd> to
change &lsquo;<samp>x &lt; y</samp>&rsquo; to &lsquo;<samp>cos(x) &gt; cos(y)</samp>&rsquo; if you know you are
working with small positive angles.
</p>
<a name="index-a-b"></a>
<a name="index-calc_002dsubstitute"></a>
<a name="index-subst"></a>
<p>The <kbd>a b</kbd> (<code>calc-substitute</code>) [<code>subst</code>] command substitutes
all occurrences
of some variable or sub-expression of an expression with a new
sub-expression.  For example, substituting &lsquo;<samp>sin(x)</samp>&rsquo; with &lsquo;<samp>cos(y)</samp>&rsquo;
in &lsquo;<samp>2 sin(x)^2 + x sin(x) + sin(2 x)</samp>&rsquo; produces
&lsquo;<samp>2 cos(y)^2 + x cos(y) + sin(2&nbsp;x)<!-- /@w --></samp>&rsquo;.
Note that this is a purely structural substitution; the lone &lsquo;<samp>x</samp>&rsquo; and
the &lsquo;<samp>sin(2 x)</samp>&rsquo; stayed the same because they did not look like
&lsquo;<samp>sin(x)</samp>&rsquo;.  See <a href="#Rewrite-Rules">Rewrite Rules</a>, for a more general method for
doing substitutions.
</p>
<p>The <kbd>a b</kbd> command normally prompts for two formulas, the old
one and the new one.  If you enter a blank line for the first
prompt, all three arguments are taken from the stack (new, then old,
then target expression).  If you type an old formula but then enter a
blank line for the new one, the new formula is taken from top-of-stack
and the target from second-to-top.  If you answer both prompts, the
target is taken from top-of-stack as usual.
</p>
<p>Note that <kbd>a b</kbd> has no understanding of commutativity or
associativity.  The pattern &lsquo;<samp>x+y</samp>&rsquo; will not match the formula
&lsquo;<samp>y+x</samp>&rsquo;.  Also, &lsquo;<samp>y+z</samp>&rsquo; will not match inside the formula &lsquo;<samp>x+y+z</samp>&rsquo;
because the &lsquo;<samp>+</samp>&rsquo; operator is left-associative, so the &ldquo;deep
structure&rdquo; of that formula is &lsquo;<samp>(x+y) + z</samp>&rsquo;.  Use <kbd>d U</kbd>
(<code>calc-unformatted-language</code>) mode to see the true structure of
a formula.  The rewrite rule mechanism, discussed later, does not have
these limitations.
</p>
<p>As an algebraic function, <code>subst</code> takes three arguments:
Target expression, old, new.  Note that <code>subst</code> is always
evaluated immediately, even if its arguments are variables, so if
you wish to put a call to <code>subst</code> onto the stack you must
turn the default simplifications off first (with <kbd>m O</kbd>).
</p>
<hr>
<a name="Simplifying-Formulas"></a>
<div class="header">
<p>
Next: <a href="#Polynomials" accesskey="n" rel="next">Polynomials</a>, Previous: <a href="#Algebraic-Manipulation" accesskey="p" rel="prev">Algebraic Manipulation</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Simplifying-Formulas-1"></a>
<h3 class="section">10.3 Simplifying Formulas</h3>

<p><a name="index-a-s"></a>
<a name="index-I-a-s"></a>
<a name="index-H-a-s"></a>
<a name="index-calc_002dsimplify"></a>
<a name="index-simplify-1"></a>
</p>
<p>The sections below describe all the various kinds of
simplifications Calc provides in full detail.  None of Calc&rsquo;s
simplification commands are designed to pull rabbits out of hats;
they simply apply certain specific rules to put formulas into
less redundant or more pleasing forms.  Serious algebra in Calc
must be done manually, usually with a combination of selections
and rewrite rules.  See <a href="#Rearranging-with-Selections">Rearranging with Selections</a>.
See <a href="#Rewrite-Rules">Rewrite Rules</a>.
</p>
<p>See <a href="#Simplification-Modes">Simplification Modes</a>, for commands to control what level of
simplification occurs automatically.  Normally the algebraic
simplifications described below occur.  If you have turned on a
simplification mode which does not do these algebraic simplifications,
you can still apply them to a formula with the <kbd>a s</kbd>
(<code>calc-simplify</code>) [<code>simplify</code>] command.
</p>
<p>There are some simplifications that, while sometimes useful, are never
done automatically.  For example, the <kbd>I</kbd> prefix can be given to
<kbd>a s</kbd>; the <kbd>I a s</kbd> command will change any trigonometric
function to the appropriate combination of &lsquo;<samp>sin</samp>&rsquo;s and &lsquo;<samp>cos</samp>&rsquo;s
before simplifying.  This can be useful in simplifying even mildly
complicated trigonometric expressions.  For example, while the algebraic
simplifications can reduce &lsquo;<samp>sin(x) csc(x)</samp>&rsquo; to &lsquo;<samp>1</samp>&rsquo;, they will not
simplify &lsquo;<samp>sin(x)^2 csc(x)</samp>&rsquo;.  The command <kbd>I a s</kbd> can be used to
simplify this latter expression; it will transform &lsquo;<samp>sin(x)^2
csc(x)</samp>&rsquo; into &lsquo;<samp>sin(x)</samp>&rsquo;.  However, <kbd>I a s</kbd> will also perform
some &ldquo;simplifications&rdquo; which may not be desired; for example, it
will transform &lsquo;<samp>tan(x)^2</samp>&rsquo; into &lsquo;<samp>sin(x)^2 / cos(x)^2</samp>&rsquo;.  The
Hyperbolic prefix <kbd>H</kbd> can be used similarly; the <kbd>H a s</kbd> will
replace any hyperbolic functions in the formula with the appropriate
combinations of &lsquo;<samp>sinh</samp>&rsquo;s and &lsquo;<samp>cosh</samp>&rsquo;s before simplifying.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Simplifications" accesskey="1">Basic Simplifications</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Simplifications" accesskey="2">Algebraic Simplifications</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Unsafe-Simplifications" accesskey="3">Unsafe Simplifications</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Simplification-of-Units" accesskey="4">Simplification of Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Simplifications"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Simplifications" accesskey="n" rel="next">Algebraic Simplifications</a>, Previous: <a href="#Simplifying-Formulas" accesskey="p" rel="prev">Simplifying Formulas</a>, Up: <a href="#Simplifying-Formulas" accesskey="u" rel="up">Simplifying Formulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Simplifications-1"></a>
<h4 class="subsection">10.3.1 Basic Simplifications</h4>

<p><a name="index-Basic-simplifications"></a>
This section describes basic simplifications which Calc performs in many
situations.  For example, both binary simplifications and algebraic
simplifications begin by performing these basic simplifications.  You
can type <kbd>m I</kbd> to restrict the simplifications done on the stack to
these simplifications.
</p>
<p>The most basic simplification is the evaluation of functions.
For example, &lsquo;<samp>2 + 3</samp>&rsquo; is evaluated to &lsquo;<samp>5</samp>&rsquo;, and &lsquo;<samp><tt>sqrt</tt>(9)</samp>&rsquo;
is evaluated to &lsquo;<samp>3</samp>&rsquo;.  Evaluation does not occur if the arguments
to a function are somehow of the wrong type &lsquo;<samp><tt>tan</tt>([2,3,4])</samp>&rsquo;),
range (&lsquo;<samp><tt>tan</tt>(90)</samp>&rsquo;), or number (&lsquo;<samp><tt>tan</tt>(3,5)</samp>&rsquo;),
or if the function name is not recognized (&lsquo;<samp><tt>f</tt>(5)</samp>&rsquo;), or if
Symbolic mode (see <a href="#Symbolic-Mode">Symbolic Mode</a>) prevents evaluation
(&lsquo;<samp><tt>sqrt</tt>(2)</samp>&rsquo;).
</p>
<p>Calc simplifies (evaluates) the arguments to a function before it
simplifies the function itself.  Thus &lsquo;<samp><tt>sqrt</tt>(5+4)</samp>&rsquo; is
simplified to &lsquo;<samp><tt>sqrt</tt>(9)</samp>&rsquo; before the <code>sqrt</code> function
itself is applied.  There are very few exceptions to this rule:
<code>quote</code>, <code>lambda</code>, and <code>condition</code> (the <code>::</code>
operator) do not evaluate their arguments, <code>if</code> (the <code>? :</code>
operator) does not evaluate all of its arguments, and <code>evalto</code>
does not evaluate its lefthand argument.
</p>
<p>Most commands apply at least these basic simplifications to all
arguments they take from the stack, perform a particular operation,
then simplify the result before pushing it back on the stack.  In the
common special case of regular arithmetic commands like <kbd>+</kbd> and
<kbd>Q</kbd> [<code>sqrt</code>], the arguments are simply popped from the stack
and collected into a suitable function call, which is then simplified
(the arguments being simplified first as part of the process, as
described above).
</p>
<p>Even the basic set of simplifications are too numerous to describe
completely here, but this section will describe the ones that apply to the
major arithmetic operators.  This list will be rather technical in
nature, and will probably be interesting to you only if you are
a serious user of Calc&rsquo;s algebra facilities.
</p>

<p>As well as the simplifications described here, if you have stored
any rewrite rules in the variable <code>EvalRules</code> then these rules
will also be applied before any of the basic simplifications.
See <a href="#Automatic-Rewrites">Automatic Rewrites</a>, for details.
</p>

<p>And now, on with the basic simplifications:
</p>
<p>Arithmetic operators like <kbd>+</kbd> and <kbd>*</kbd> always take two
arguments in Calc&rsquo;s internal form.  Sums and products of three or
more terms are arranged by the associative law of algebra into
a left-associative form for sums, &lsquo;<samp>((a + b) + c) + d</samp>&rsquo;, and
(by default) a right-associative form for products,
&lsquo;<samp>a * (b * (c * d))</samp>&rsquo;.  Formulas like &lsquo;<samp>(a + b) + (c + d)</samp>&rsquo; are
rearranged to left-associative form, though this rarely matters since
Calc&rsquo;s algebra commands are designed to hide the inner structure of sums
and products as much as possible.  Sums and products in their proper
associative form will be written without parentheses in the examples
below.
</p>
<p>Sums and products are <em>not</em> rearranged according to the
commutative law (&lsquo;<samp>a + b</samp>&rsquo; to &lsquo;<samp>b + a</samp>&rsquo;) except in a few
special cases described below.  Some algebra programs always
rearrange terms into a canonical order, which enables them to
see that &lsquo;<samp>a b + b a</samp>&rsquo; can be simplified to &lsquo;<samp>2 a b</samp>&rsquo;.
If you are using Basic Simplification mode, Calc assumes you have put
the terms into the order you want and generally leaves that order alone,
with the consequence that formulas like the above will only be
simplified if you explicitly give the <kbd>a s</kbd> command.
See <a href="#Algebraic-Simplifications">Algebraic Simplifications</a>.
</p>
<p>Differences &lsquo;<samp>a - b</samp>&rsquo; are treated like sums &lsquo;<samp>a + (-b)</samp>&rsquo;
for purposes of simplification; one of the default simplifications
is to rewrite &lsquo;<samp>a + (-b)</samp>&rsquo; or &lsquo;<samp>(-b) + a</samp>&rsquo;, where &lsquo;<samp>-b</samp>&rsquo;
represents a &ldquo;negative-looking&rdquo; term, into &lsquo;<samp>a - b</samp>&rsquo; form.
&ldquo;Negative-looking&rdquo; means negative numbers, negated formulas like
&lsquo;<samp>-x</samp>&rsquo;, and products or quotients in which either term is
negative-looking.
</p>
<p>Other simplifications involving negation are &lsquo;<samp>-(-x)</samp>&rsquo; to &lsquo;<samp>x</samp>&rsquo;;
&lsquo;<samp>-(a b)</samp>&rsquo; or &lsquo;<samp>-(a/b)</samp>&rsquo; where either &lsquo;<samp>a</samp>&rsquo; or &lsquo;<samp>b</samp>&rsquo; is
negative-looking, simplified by negating that term, or else where
&lsquo;<samp>a</samp>&rsquo; or &lsquo;<samp>b</samp>&rsquo; is any number, by negating that number;
&lsquo;<samp>-(a + b)</samp>&rsquo; to &lsquo;<samp>-a - b</samp>&rsquo;, and &lsquo;<samp>-(b - a)</samp>&rsquo; to &lsquo;<samp>a - b</samp>&rsquo;.
(This, and rewriting &lsquo;<samp>(-b) + a</samp>&rsquo; to &lsquo;<samp>a - b</samp>&rsquo;, are the only
cases where the order of terms in a sum is changed by the default
simplifications.)
</p>
<p>The distributive law is used to simplify sums in some cases:
&lsquo;<samp>a x + b x</samp>&rsquo; to &lsquo;<samp>(a + b) x</samp>&rsquo;, where &lsquo;<samp>a</samp>&rsquo; represents
a number or an implicit 1 or <i>-1</i> (as in &lsquo;<samp>x</samp>&rsquo; or &lsquo;<samp>-x</samp>&rsquo;)
and similarly for &lsquo;<samp>b</samp>&rsquo;.  Use the <kbd>a c</kbd>, <kbd>a&nbsp;f</kbd><!-- /@w -->, or
<kbd>j M</kbd> commands to merge sums with non-numeric coefficients
using the distributive law.
</p>
<p>The distributive law is only used for sums of two terms, or
for adjacent terms in a larger sum.  Thus &lsquo;<samp>a + b + b + c</samp>&rsquo;
is simplified to &lsquo;<samp>a + 2 b + c</samp>&rsquo;, but &lsquo;<samp>a + b + c + b</samp>&rsquo;
is not simplified.  The reason is that comparing all terms of a
sum with one another would require time proportional to the
square of the number of terms; Calc omits potentially slow
operations like this in basic simplification mode.
</p>
<p>Finally, &lsquo;<samp>a + 0</samp>&rsquo; and &lsquo;<samp>0 + a</samp>&rsquo; are simplified to &lsquo;<samp>a</samp>&rsquo;.
A consequence of the above rules is that &lsquo;<samp>0 - a</samp>&rsquo; is simplified
to &lsquo;<samp>-a</samp>&rsquo;.
</p>

<p>The products &lsquo;<samp>1 a</samp>&rsquo; and &lsquo;<samp>a 1</samp>&rsquo; are simplified to &lsquo;<samp>a</samp>&rsquo;;
&lsquo;<samp>(-1) a</samp>&rsquo; and &lsquo;<samp>a (-1)</samp>&rsquo; are simplified to &lsquo;<samp>-a</samp>&rsquo;;
&lsquo;<samp>0 a</samp>&rsquo; and &lsquo;<samp>a 0</samp>&rsquo; are simplified to &lsquo;<samp>0</samp>&rsquo;, except that
in Matrix mode where &lsquo;<samp>a</samp>&rsquo; is not provably scalar the result
is the generic zero matrix &lsquo;<samp>idn(0)</samp>&rsquo;, and that if &lsquo;<samp>a</samp>&rsquo; is
infinite the result is &lsquo;<samp>nan</samp>&rsquo;.
</p>
<p>Also, &lsquo;<samp>(-a) b</samp>&rsquo; and &lsquo;<samp>a (-b)</samp>&rsquo; are simplified to &lsquo;<samp>-(a b)</samp>&rsquo;,
where this occurs for negated formulas but not for regular negative
numbers.
</p>
<p>Products are commuted only to move numbers to the front:
&lsquo;<samp>a b 2</samp>&rsquo; is commuted to &lsquo;<samp>2 a b</samp>&rsquo;.
</p>
<p>The product &lsquo;<samp>a (b + c)</samp>&rsquo; is distributed over the sum only if
&lsquo;<samp>a</samp>&rsquo; and at least one of &lsquo;<samp>b</samp>&rsquo; and &lsquo;<samp>c</samp>&rsquo; are numbers:
&lsquo;<samp>2 (x + 3)</samp>&rsquo; goes to &lsquo;<samp>2 x + 6</samp>&rsquo;.  The formula
&lsquo;<samp>(-a) (b - c)</samp>&rsquo;, where &lsquo;<samp>-a</samp>&rsquo; is a negative number, is
rewritten to &lsquo;<samp>a (c - b)</samp>&rsquo;.
</p>
<p>The distributive law of products and powers is used for adjacent
terms of the product: &lsquo;<samp>x^a x^b</samp>&rsquo; goes to
&lsquo;<samp>x^(a+b)</samp>&rsquo;
where &lsquo;<samp>a</samp>&rsquo; is a number, or an implicit 1 (as in &lsquo;<samp>x</samp>&rsquo;),
or the implicit one-half of &lsquo;<samp><tt>sqrt</tt>(x)</samp>&rsquo;, and similarly for
&lsquo;<samp>b</samp>&rsquo;.  The result is written using &lsquo;<samp>sqrt</samp>&rsquo; or &lsquo;<samp>1/sqrt</samp>&rsquo;
if the sum of the powers is &lsquo;<samp>1/2</samp>&rsquo; or &lsquo;<samp>-1/2</samp>&rsquo;, respectively.
If the sum of the powers is zero, the product is simplified to
&lsquo;<samp>1</samp>&rsquo; or to &lsquo;<samp>idn(1)</samp>&rsquo; if Matrix mode is enabled.
</p>
<p>The product of a negative power times anything but another negative
power is changed to use division:
&lsquo;<samp>x^(-2) y</samp>&rsquo;
goes to &lsquo;<samp>y / x^2</samp>&rsquo; unless Matrix mode is
in effect and neither &lsquo;<samp>x</samp>&rsquo; nor &lsquo;<samp>y</samp>&rsquo; are scalar (in which
case it is considered unsafe to rearrange the order of the terms).
</p>
<p>Finally, &lsquo;<samp>a (b/c)</samp>&rsquo; is rewritten to &lsquo;<samp>(a b)/c</samp>&rsquo;, and also
&lsquo;<samp>(a/b) c</samp>&rsquo; is changed to &lsquo;<samp>(a c)/b</samp>&rsquo; unless in Matrix mode.
</p>

<p>Simplifications for quotients are analogous to those for products.
The quotient &lsquo;<samp>0 / x</samp>&rsquo; is simplified to &lsquo;<samp>0</samp>&rsquo;, with the same
exceptions that were noted for &lsquo;<samp>0 x</samp>&rsquo;.  Likewise, &lsquo;<samp>x / 1</samp>&rsquo;
and &lsquo;<samp>x / (-1)</samp>&rsquo; are simplified to &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>-x</samp>&rsquo;,
respectively.
</p>
<p>The quotient &lsquo;<samp>x / 0</samp>&rsquo; is left unsimplified or changed to an
infinite quantity, as directed by the current infinite mode.
See <a href="#Infinite-Mode">Infinite Mode</a>.
</p>
<p>The expression
&lsquo;<samp>a / b^(-c)</samp>&rsquo;
is changed to &lsquo;<samp>a b^c</samp>&rsquo;, where &lsquo;<samp>-c</samp>&rsquo; is any negative-looking
power.  Also, &lsquo;<samp>1 / b^c</samp>&rsquo; is changed to
&lsquo;<samp>b^(-c)</samp>&rsquo;
for any power &lsquo;<samp>c</samp>&rsquo;.
</p>
<p>Also, &lsquo;<samp>(-a) / b</samp>&rsquo; and &lsquo;<samp>a / (-b)</samp>&rsquo; go to &lsquo;<samp>-(a/b)</samp>&rsquo;;
&lsquo;<samp>(a/b) / c</samp>&rsquo; goes to &lsquo;<samp>a / (b c)</samp>&rsquo;; and &lsquo;<samp>a / (b/c)</samp>&rsquo;
goes to &lsquo;<samp>(a c) / b</samp>&rsquo; unless Matrix mode prevents this
rearrangement.  Similarly, &lsquo;<samp>a / (b:c)</samp>&rsquo; is simplified to
&lsquo;<samp>(c:b) a</samp>&rsquo; for any fraction &lsquo;<samp>b:c</samp>&rsquo;.
</p>
<p>The distributive law is applied to &lsquo;<samp>(a + b) / c</samp>&rsquo; only if
&lsquo;<samp>c</samp>&rsquo; and at least one of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are numbers.
Quotients of powers and square roots are distributed just as
described for multiplication.
</p>
<p>Quotients of products cancel only in the leading terms of the
numerator and denominator.  In other words, &lsquo;<samp>a x b / a y b</samp>&rsquo;
is canceled to &lsquo;<samp>x b / y b</samp>&rsquo; but not to &lsquo;<samp>x / y</samp>&rsquo;.  Once
again this is because full cancellation can be slow; use <kbd>a s</kbd>
to cancel all terms of the quotient.
</p>
<p>Quotients of negative-looking values are simplified according
to &lsquo;<samp>(-a) / (-b)</samp>&rsquo; to &lsquo;<samp>a / b</samp>&rsquo;, &lsquo;<samp>(-a) / (b - c)</samp>&rsquo;
to &lsquo;<samp>a / (c - b)</samp>&rsquo;, and &lsquo;<samp>(a - b) / (-c)</samp>&rsquo; to &lsquo;<samp>(b - a) / c</samp>&rsquo;.
</p>

<p>The formula &lsquo;<samp>x^0</samp>&rsquo; is simplified to &lsquo;<samp>1</samp>&rsquo;, or to &lsquo;<samp>idn(1)</samp>&rsquo;
in Matrix mode.  The formula &lsquo;<samp>0^x</samp>&rsquo; is simplified to &lsquo;<samp>0</samp>&rsquo;
unless &lsquo;<samp>x</samp>&rsquo; is a negative number, complex number or zero.
If &lsquo;<samp>x</samp>&rsquo; is negative, complex or &lsquo;<samp>0.0</samp>&rsquo;, &lsquo;<samp>0^x</samp>&rsquo; is an
infinity or an unsimplified formula according to the current infinite
mode.  The expression &lsquo;<samp>0^0</samp>&rsquo; is simplified to &lsquo;<samp>1</samp>&rsquo;.
</p>
<p>Powers of products or quotients &lsquo;<samp>(a b)^c</samp>&rsquo;, &lsquo;<samp>(a/b)^c</samp>&rsquo;
are distributed to &lsquo;<samp>a^c b^c</samp>&rsquo;, &lsquo;<samp>a^c / b^c</samp>&rsquo; only if &lsquo;<samp>c</samp>&rsquo;
is an integer, or if either &lsquo;<samp>a</samp>&rsquo; or &lsquo;<samp>b</samp>&rsquo; are nonnegative
real numbers.  Powers of powers &lsquo;<samp>(a^b)^c</samp>&rsquo; are simplified to
&lsquo;<samp>a^(b c)</samp>&rsquo;
only when &lsquo;<samp>c</samp>&rsquo; is an integer and &lsquo;<samp>b c</samp>&rsquo; also
evaluates to an integer.  Without these restrictions these simplifications
would not be safe because of problems with principal values.
(In other words,
&lsquo;<samp>((-3)^1:2)^2</samp>&rsquo;
is safe to simplify, but
&lsquo;<samp>((-3)^2)^1:2</samp>&rsquo;
is not.)  See <a href="#Declarations">Declarations</a>, for ways to inform Calc that your
variables satisfy these requirements.
</p>
<p>As a special case of this rule, &lsquo;<samp><tt>sqrt</tt>(x)^n</samp>&rsquo; is simplified to
&lsquo;<samp>x^(n/2)</samp>&rsquo;
only for even integers &lsquo;<samp>n</samp>&rsquo;.
</p>
<p>If &lsquo;<samp>a</samp>&rsquo; is known to be real, &lsquo;<samp>b</samp>&rsquo; is an even integer, and
&lsquo;<samp>c</samp>&rsquo; is a half- or quarter-integer, then &lsquo;<samp>(a^b)^c</samp>&rsquo; is
simplified to &lsquo;<samp><tt>abs</tt>(a^(b c))</samp>&rsquo;.
</p>
<p>Also, &lsquo;<samp>(-a)^b</samp>&rsquo; is simplified to &lsquo;<samp>a^b</samp>&rsquo; if &lsquo;<samp>b</samp>&rsquo; is an
even integer, or to &lsquo;<samp>-(a^b)</samp>&rsquo; if &lsquo;<samp>b</samp>&rsquo; is an odd integer,
for any negative-looking expression &lsquo;<samp>-a</samp>&rsquo;.
</p>
<p>Square roots &lsquo;<samp><tt>sqrt</tt>(x)</samp>&rsquo; generally act like one-half powers
&lsquo;<samp>x^1:2</samp>&rsquo;
for the purposes of the above-listed simplifications.
</p>
<p>Also, note that
&lsquo;<samp>1 / x^1:2</samp>&rsquo;
is changed to
&lsquo;<samp>x^(-1:2)</samp>&rsquo;,
but &lsquo;<samp>1 / <tt>sqrt</tt>(x)</samp>&rsquo; is left alone.
</p>

<p>Generic identity matrices (see <a href="#Matrix-Mode">Matrix Mode</a>) are simplified by the
following rules:  &lsquo;<samp><tt>idn</tt>(a) + b</samp>&rsquo; to &lsquo;<samp>a + b</samp>&rsquo; if &lsquo;<samp>b</samp>&rsquo;
is provably scalar, or expanded out if &lsquo;<samp>b</samp>&rsquo; is a matrix;
&lsquo;<samp><tt>idn</tt>(a) + <tt>idn</tt>(b)</samp>&rsquo; to &lsquo;<samp><tt>idn</tt>(a + b)</samp>&rsquo;;
&lsquo;<samp>-<tt>idn</tt>(a)</samp>&rsquo; to &lsquo;<samp><tt>idn</tt>(-a)</samp>&rsquo;; &lsquo;<samp>a <tt>idn</tt>(b)</samp>&rsquo; to
&lsquo;<samp><tt>idn</tt>(a b)</samp>&rsquo; if &lsquo;<samp>a</samp>&rsquo; is provably scalar, or to &lsquo;<samp>a b</samp>&rsquo;
if &lsquo;<samp>a</samp>&rsquo; is provably non-scalar;  &lsquo;<samp><tt>idn</tt>(a) <tt>idn</tt>(b)</samp>&rsquo; to
&lsquo;<samp><tt>idn</tt>(a b)</samp>&rsquo;; analogous simplifications for quotients involving
<code>idn</code>; and &lsquo;<samp><tt>idn</tt>(a)^n</samp>&rsquo; to &lsquo;<samp><tt>idn</tt>(a^n)</samp>&rsquo; where
&lsquo;<samp>n</samp>&rsquo; is an integer.
</p>

<p>The <code>floor</code> function and other integer truncation functions
vanish if the argument is provably integer-valued, so that
&lsquo;<samp><tt>floor</tt>(<tt>round</tt>(x))</samp>&rsquo; simplifies to &lsquo;<samp><tt>round</tt>(x)</samp>&rsquo;.
Also, combinations of <code>float</code>, <code>floor</code> and its friends,
and <code>ffloor</code> and its friends, are simplified in appropriate
ways.  See <a href="#Integer-Truncation">Integer Truncation</a>.
</p>
<p>The expression &lsquo;<samp><tt>abs</tt>(-x)</samp>&rsquo; changes to &lsquo;<samp><tt>abs</tt>(x)</samp>&rsquo;.
The expression &lsquo;<samp><tt>abs</tt>(<tt>abs</tt>(x))</samp>&rsquo; changes to
&lsquo;<samp><tt>abs</tt>(x)</samp>&rsquo;;  in fact, &lsquo;<samp><tt>abs</tt>(x)</samp>&rsquo; changes to &lsquo;<samp>x</samp>&rsquo; or
&lsquo;<samp>-x</samp>&rsquo; if &lsquo;<samp>x</samp>&rsquo; is provably nonnegative or nonpositive
(see <a href="#Declarations">Declarations</a>).
</p>
<p>While most functions do not recognize the variable <code>i</code> as an
imaginary number, the <code>arg</code> function does handle the two cases
&lsquo;<samp><tt>arg</tt>(<tt>i</tt>)</samp>&rsquo; and &lsquo;<samp><tt>arg</tt>(-<tt>i</tt>)</samp>&rsquo; just for convenience.
</p>
<p>The expression &lsquo;<samp><tt>conj</tt>(<tt>conj</tt>(x))</samp>&rsquo; simplifies to &lsquo;<samp>x</samp>&rsquo;.
Various other expressions involving <code>conj</code>, <code>re</code>, and
<code>im</code> are simplified, especially if some of the arguments are
provably real or involve the constant <code>i</code>.  For example,
&lsquo;<samp><tt>conj</tt>(a + b i)</samp>&rsquo; is changed to
&lsquo;<samp><tt>conj</tt>(a) - <tt>conj</tt>(b) i</samp>&rsquo;,  or to &lsquo;<samp>a - b i</samp>&rsquo; if &lsquo;<samp>a</samp>&rsquo;
and &lsquo;<samp>b</samp>&rsquo; are known to be real.
</p>
<p>Functions like <code>sin</code> and <code>arctan</code> generally don&rsquo;t have
any default simplifications beyond simply evaluating the functions
for suitable numeric arguments and infinity.  The algebraic
simplifications described in the next section do provide some
simplifications for these functions, though.
</p>
<p>One important simplification that does occur is that
&lsquo;<samp><tt>ln</tt>(<tt>e</tt>)</samp>&rsquo; is simplified to 1, and &lsquo;<samp><tt>ln</tt>(<tt>e</tt>^x)</samp>&rsquo; is
simplified to &lsquo;<samp>x</samp>&rsquo; for any &lsquo;<samp>x</samp>&rsquo;.  This occurs even if you have
stored a different value in the Calc variable &lsquo;<samp>e</samp>&rsquo;; but this would
be a bad idea in any case if you were also using natural logarithms!
</p>
<p>Among the logical functions, <tt>!(<var>a</var> &lt;= <var>b</var>)</tt> changes to
<tt><var>a</var> &gt; <var>b</var></tt> and so on.  Equations and inequalities where both sides
are either negative-looking or zero are simplified by negating both sides
and reversing the inequality.  While it might seem reasonable to simplify
&lsquo;<samp>!!x</samp>&rsquo; to &lsquo;<samp>x</samp>&rsquo;, this would not be valid in general because
&lsquo;<samp>!!2</samp>&rsquo; is 1, not 2.
</p>
<p>Most other Calc functions have few if any basic simplifications
defined, aside of course from evaluation when the arguments are
suitable numbers.
</p>
<hr>
<a name="Algebraic-Simplifications"></a>
<div class="header">
<p>
Next: <a href="#Unsafe-Simplifications" accesskey="n" rel="next">Unsafe Simplifications</a>, Previous: <a href="#Basic-Simplifications" accesskey="p" rel="prev">Basic Simplifications</a>, Up: <a href="#Simplifying-Formulas" accesskey="u" rel="up">Simplifying Formulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Simplifications-1"></a>
<h4 class="subsection">10.3.2 Algebraic Simplifications</h4>

<p><a name="index-Algebraic-simplifications"></a>
<a name="index-a-s-1"></a>
<a name="index-m-A-1"></a>
This section describes all simplifications that are performed by
the algebraic simplification mode, which is the default simplification
mode.  If you have switched to a different simplification mode, you can
switch back with the <kbd>m A</kbd> command. Even in other simplification
modes, the <kbd>a s</kbd> command will use these algebraic simplifications to
simplify the formula.
</p>
<p>There is a variable, <code>AlgSimpRules</code>, in which you can put rewrites
to be applied. Its use is analogous to <code>EvalRules</code>,
but without the special restrictions.  Basically, the simplifier does
&lsquo;<samp>a&nbsp;r<!-- /@w --> AlgSimpRules</samp>&rsquo; with an infinite repeat count on the whole
expression being simplified, then it traverses the expression applying
the built-in rules described below.  If the result is different from
the original expression, the process repeats with the basic
simplifications (including <code>EvalRules</code>), then <code>AlgSimpRules</code>,
then the built-in simplifications, and so on.
</p>

<p>Sums are simplified in two ways.  Constant terms are commuted to the
end of the sum, so that &lsquo;<samp>a + 2 + b</samp>&rsquo; changes to &lsquo;<samp>a + b + 2</samp>&rsquo;.
The only exception is that a constant will not be commuted away
from the first position of a difference, i.e., &lsquo;<samp>2 - x</samp>&rsquo; is not
commuted to &lsquo;<samp>-x + 2</samp>&rsquo;.
</p>
<p>Also, terms of sums are combined by the distributive law, as in
&lsquo;<samp>x + y + 2 x</samp>&rsquo; to &lsquo;<samp>y + 3 x</samp>&rsquo;.  This always occurs for
adjacent terms, but Calc&rsquo;s algebraic simplifications compare all pairs
of terms including non-adjacent ones.
</p>

<p>Products are sorted into a canonical order using the commutative
law.  For example, &lsquo;<samp>b c a</samp>&rsquo; is commuted to &lsquo;<samp>a b c</samp>&rsquo;.
This allows easier comparison of products; for example, the basic
simplifications will not change &lsquo;<samp>x y + y x</samp>&rsquo; to &lsquo;<samp>2 x y</samp>&rsquo;,
but the algebraic simplifications; it first rewrites the sum to
&lsquo;<samp>x y + x y</samp>&rsquo; which can then be recognized as a sum of identical
terms.
</p>
<p>The canonical ordering used to sort terms of products has the
property that real-valued numbers, interval forms and infinities
come first, and are sorted into increasing order.  The <kbd>V S</kbd>
command uses the same ordering when sorting a vector.
</p>
<p>Sorting of terms of products is inhibited when Matrix mode is
turned on; in this case, Calc will never exchange the order of
two terms unless it knows at least one of the terms is a scalar.
</p>
<p>Products of powers are distributed by comparing all pairs of
terms, using the same method that the default simplifications
use for adjacent terms of products.
</p>
<p>Even though sums are not sorted, the commutative law is still
taken into account when terms of a product are being compared.
Thus &lsquo;<samp>(x + y) (y + x)</samp>&rsquo; will be simplified to &lsquo;<samp>(x + y)^2</samp>&rsquo;.
A subtle point is that &lsquo;<samp>(x - y) (y - x)</samp>&rsquo; will <em>not</em>
be simplified to &lsquo;<samp>-(x - y)^2</samp>&rsquo;; Calc does not notice that
one term can be written as a constant times the other, even if
that constant is <i>-1</i>.
</p>
<p>A fraction times any expression, &lsquo;<samp>(a:b) x</samp>&rsquo;, is changed to
a quotient involving integers:  &lsquo;<samp>a x / b</samp>&rsquo;.  This is not
done for floating-point numbers like &lsquo;<samp>0.5</samp>&rsquo;, however.  This
is one reason why you may find it convenient to turn Fraction mode
on while doing algebra; see <a href="#Fraction-Mode">Fraction Mode</a>.
</p>

<p>Quotients are simplified by comparing all terms in the numerator
with all terms in the denominator for possible cancellation using
the distributive law.  For example, &lsquo;<samp>a x^2 b / c x^3 d</samp>&rsquo; will
cancel &lsquo;<samp>x^2</samp>&rsquo; from the top and bottom to get &lsquo;<samp>a b / c x d</samp>&rsquo;.
(The terms in the denominator will then be rearranged to &lsquo;<samp>c d x</samp>&rsquo;
as described above.)  If there is any common integer or fractional
factor in the numerator and denominator, it is canceled out;
for example, &lsquo;<samp>(4 x + 6) / 8 x</samp>&rsquo; simplifies to &lsquo;<samp>(2 x + 3) / 4 x</samp>&rsquo;.
</p>
<p>Non-constant common factors are not found even by algebraic
simplifications.  To cancel the factor &lsquo;<samp>a</samp>&rsquo; in
&lsquo;<samp>(a x + a) / a^2</samp>&rsquo; you could first use <kbd>j M</kbd> on the product
&lsquo;<samp>a x</samp>&rsquo; to Merge the numerator to &lsquo;<samp>a (1+x)</samp>&rsquo;, which can then be
simplified successfully.
</p>

<p>Integer powers of the variable <code>i</code> are simplified according
to the identity &lsquo;<samp>i^2 = -1</samp>&rsquo;.  If you store a new value other
than the complex number &lsquo;<samp>(0,1)</samp>&rsquo; in <code>i</code>, this simplification
will no longer occur.  This is not done by the basic
simplifications; in case someone (unwisely) wants to use the name
<code>i</code> for a variable unrelated to complex numbers, they can use
basic simplification mode.
</p>
<p>Square roots of integer or rational arguments are simplified in
several ways.  (Note that these will be left unevaluated only in
Symbolic mode.)  First, square integer or rational factors are
pulled out so that &lsquo;<samp><tt>sqrt</tt>(8)</samp>&rsquo; is rewritten as
&lsquo;<samp>2 sqrt(2)</samp>&rsquo;.
Conceptually speaking this implies factoring the argument into primes
and moving pairs of primes out of the square root, but for reasons of
efficiency Calc only looks for primes up to 29.
</p>
<p>Square roots in the denominator of a quotient are moved to the
numerator:  &lsquo;<samp>1 / <tt>sqrt</tt>(3)</samp>&rsquo; changes to &lsquo;<samp><tt>sqrt</tt>(3) / 3</samp>&rsquo;.
The same effect occurs for the square root of a fraction:
&lsquo;<samp><tt>sqrt</tt>(2:3)</samp>&rsquo; changes to &lsquo;<samp><tt>sqrt</tt>(6) / 3</samp>&rsquo;.
</p>

<p>The <code>%</code> (modulo) operator is simplified in several ways
when the modulus &lsquo;<samp>M</samp>&rsquo; is a positive real number.  First, if
the argument is of the form &lsquo;<samp>x + n</samp>&rsquo; for some real number
&lsquo;<samp>n</samp>&rsquo;, then &lsquo;<samp>n</samp>&rsquo; is itself reduced modulo &lsquo;<samp>M</samp>&rsquo;.  For
example, &lsquo;<samp>(x - 23) % 10</samp>&rsquo; is simplified to &lsquo;<samp>(x + 7) % 10</samp>&rsquo;.
</p>
<p>If the argument is multiplied by a constant, and this constant
has a common integer divisor with the modulus, then this factor is
canceled out.  For example, &lsquo;<samp>12 x % 15</samp>&rsquo; is changed to
&lsquo;<samp>3 (4 x % 5)</samp>&rsquo; by factoring out 3.  Also, &lsquo;<samp>(12 x + 1) % 15</samp>&rsquo;
is changed to &lsquo;<samp>3 ((4 x + 1:3) % 5)</samp>&rsquo;.  While these forms may
not seem &ldquo;simpler,&rdquo; they allow Calc to discover useful information
about modulo forms in the presence of declarations.
</p>
<p>If the modulus is 1, then Calc can use <code>int</code> declarations to
evaluate the expression.  For example, the idiom &lsquo;<samp>x % 2</samp>&rsquo; is
often used to check whether a number is odd or even.  As described
above, &lsquo;<samp>2&nbsp;n&nbsp;%&nbsp;2</samp>&rsquo;<!-- /@w --> and &lsquo;<samp>(2 n + 1) % 2</samp>&rsquo; are simplified to
&lsquo;<samp>2 (n % 1)</samp>&rsquo; and &lsquo;<samp>2 ((n + 1:2) % 1)</samp>&rsquo;, respectively; Calc
can simplify these to 0 and 1 (respectively) if <code>n</code> has been
declared to be an integer.
</p>

<p>Trigonometric functions are simplified in several ways.  Whenever a
products of two trigonometric functions can be replaced by a single
function, the replacement is made; for example,
&lsquo;<samp><tt>tan</tt>(x) <tt>cos</tt>(x)</samp>&rsquo; is simplified to &lsquo;<samp><tt>sin</tt>(x)</samp>&rsquo;.
Reciprocals of trigonometric functions are replaced by their reciprocal
function; for example, &lsquo;<samp>1/<tt>sec</tt>(x)</samp>&rsquo; is simplified to
&lsquo;<samp><tt>cos</tt>(x)</samp>&rsquo;.  The corresponding simplifications for the
hyperbolic functions are also handled.
</p>
<p>Trigonometric functions of their inverse functions are
simplified. The expression &lsquo;<samp><tt>sin</tt>(<tt>arcsin</tt>(x))</samp>&rsquo; is
simplified to &lsquo;<samp>x</samp>&rsquo;, and similarly for <code>cos</code> and <code>tan</code>.
Trigonometric functions of inverses of different trigonometric
functions can also be simplified, as in &lsquo;<samp><tt>sin</tt>(<tt>arccos</tt>(x))</samp>&rsquo;
to &lsquo;<samp><tt>sqrt</tt>(1 - x^2)</samp>&rsquo;.
</p>
<p>If the argument to <code>sin</code> is negative-looking, it is simplified to
&lsquo;<samp>-<tt>sin</tt>(x)</samp>&rsquo;, and similarly for <code>cos</code> and <code>tan</code>.
Finally, certain special values of the argument are recognized;
see <a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a>.
</p>
<p>Hyperbolic functions of their inverses and of negative-looking
arguments are also handled, as are exponentials of inverse
hyperbolic functions.
</p>
<p>No simplifications for inverse trigonometric and hyperbolic
functions are known, except for negative arguments of <code>arcsin</code>,
<code>arctan</code>, <code>arcsinh</code>, and <code>arctanh</code>.  Note that
&lsquo;<samp><tt>arcsin</tt>(<tt>sin</tt>(x))</samp>&rsquo; can <em>not</em> safely change to
&lsquo;<samp>x</samp>&rsquo;, since this only correct within an integer multiple of
&lsquo;<samp>2 pi</samp>&rsquo;
radians or 360 degrees.  However, &lsquo;<samp><tt>arcsinh</tt>(<tt>sinh</tt>(x))</samp>&rsquo; is
simplified to &lsquo;<samp>x</samp>&rsquo; if &lsquo;<samp>x</samp>&rsquo; is known to be real.
</p>
<p>Several simplifications that apply to logarithms and exponentials
are that &lsquo;<samp><tt>exp</tt>(<tt>ln</tt>(x))</samp>&rsquo;,
&lsquo;<samp>e^<tt>ln</tt>(x)</samp>&rsquo;,
and
&lsquo;<samp>10^<tt>log10</tt>(x)</samp>&rsquo;
all reduce to &lsquo;<samp>x</samp>&rsquo;.  Also, &lsquo;<samp><tt>ln</tt>(<tt>exp</tt>(x))</samp>&rsquo;, etc., can
reduce to &lsquo;<samp>x</samp>&rsquo; if &lsquo;<samp>x</samp>&rsquo; is provably real.  The form
&lsquo;<samp><tt>exp</tt>(x)^y</samp>&rsquo; is simplified to &lsquo;<samp><tt>exp</tt>(x y)</samp>&rsquo;.  If &lsquo;<samp>x</samp>&rsquo;
is a suitable multiple of
&lsquo;<samp>pi i</samp>&rsquo;
(as described above for the trigonometric functions), then
&lsquo;<samp><tt>exp</tt>(x)</samp>&rsquo; or &lsquo;<samp>e^x</samp>&rsquo; will be expanded.  Finally,
&lsquo;<samp><tt>ln</tt>(x)</samp>&rsquo; is simplified to a form involving <code>pi</code> and
<code>i</code> where &lsquo;<samp>x</samp>&rsquo; is provably negative, positive imaginary, or
negative imaginary.
</p>
<p>The error functions <code>erf</code> and <code>erfc</code> are simplified when
their arguments are negative-looking or are calls to the <code>conj</code>
function.
</p>

<p>Equations and inequalities are simplified by canceling factors
of products, quotients, or sums on both sides.  Inequalities
change sign if a negative multiplicative factor is canceled.
Non-constant multiplicative factors as in &lsquo;<samp>a b = a c</samp>&rsquo; are
canceled from equations only if they are provably nonzero (generally
because they were declared so; see <a href="#Declarations">Declarations</a>).  Factors
are canceled from inequalities only if they are nonzero and their
sign is known.
</p>
<p>Simplification also replaces an equation or inequality with
1 or 0 (&ldquo;true&rdquo; or &ldquo;false&rdquo;) if it can through the use of
declarations.  If &lsquo;<samp>x</samp>&rsquo; is declared to be an integer greater
than 5, then &lsquo;<samp>x &lt; 3</samp>&rsquo;, &lsquo;<samp>x = 3</samp>&rsquo;, and &lsquo;<samp>x = 7.5</samp>&rsquo; are
all simplified to 0, but &lsquo;<samp>x &gt; 3</samp>&rsquo; is simplified to 1.
By a similar analysis, &lsquo;<samp>abs(x) &gt;= 0</samp>&rsquo; is simplified to 1,
as is &lsquo;<samp>x^2 &gt;= 0</samp>&rsquo; if &lsquo;<samp>x</samp>&rsquo; is known to be real.
</p>
<hr>
<a name="Unsafe-Simplifications"></a>
<div class="header">
<p>
Next: <a href="#Simplification-of-Units" accesskey="n" rel="next">Simplification of Units</a>, Previous: <a href="#Algebraic-Simplifications" accesskey="p" rel="prev">Algebraic Simplifications</a>, Up: <a href="#Simplifying-Formulas" accesskey="u" rel="up">Simplifying Formulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="g_t_0060_0060Unsafe_0027_0027-Simplifications"></a>
<h4 class="subsection">10.3.3 &ldquo;Unsafe&rdquo; Simplifications</h4>

<p><a name="index-Unsafe-simplifications"></a>
<a name="index-Extended-simplification"></a>
<a name="index-a-e"></a>
<a name="index-m-E-1"></a>
<a name="index-calc_002dsimplify_002dextended"></a>
<a name="index-esimplify"></a>
Calc is capable of performing some simplifications which may sometimes
be desired but which are not &ldquo;safe&rdquo; in all cases.  The <kbd>a e</kbd>
(<code>calc-simplify-extended</code>) [<code>esimplify</code>] command
applies the algebraic simplifications as well as these extended, or
&ldquo;unsafe&rdquo;, simplifications.  Use this only if you know the values in
your formula lie in the restricted ranges for which these
simplifications are valid.  You can use Extended Simplification mode
(<kbd>m E</kbd>) to have these simplifications done automatically.
</p>
<p>The symbolic integrator uses these extended simplifications; one effect
of this is that the integrator&rsquo;s results must be used with caution.
Where an integral table will often attach conditions like &ldquo;for positive
&lsquo;<samp>a</samp>&rsquo; only,&rdquo; Calc (like most other symbolic integration programs)
will simply produce an unqualified result.
</p>
<p>Because <kbd>a e</kbd>&rsquo;s simplifications are unsafe, it is sometimes better
to type <kbd>C-u -3 a v</kbd>, which does extended simplification only
on the top level of the formula without affecting the sub-formulas.
In fact, <kbd>C-u -3 j v</kbd> allows you to target extended simplification
to any specific part of a formula.
</p>
<p>The variable <code>ExtSimpRules</code> contains rewrites to be applied when
the extended simplifications are used.  These are applied in addition to
<code>EvalRules</code> and <code>AlgSimpRules</code>.  (The <kbd>a r AlgSimpRules</kbd>
step described above is simply followed by an <kbd>a r ExtSimpRules</kbd> step.)
</p>
<p>Following is a complete list of the &ldquo;unsafe&rdquo; simplifications.
</p>

<p>Inverse trigonometric or hyperbolic functions, called with their
corresponding non-inverse functions as arguments, are simplified.
For example, &lsquo;<samp><tt>arcsin</tt>(<tt>sin</tt>(x))</samp>&rsquo; changes
to &lsquo;<samp>x</samp>&rsquo;.  Also, &lsquo;<samp><tt>arcsin</tt>(<tt>cos</tt>(x))</samp>&rsquo; and
&lsquo;<samp><tt>arccos</tt>(<tt>sin</tt>(x))</samp>&rsquo; both change to &lsquo;<samp><tt>pi</tt>/2 - x</samp>&rsquo;.
These simplifications are unsafe because they are valid only for
values of &lsquo;<samp>x</samp>&rsquo; in a certain range; outside that range, values
are folded down to the 360-degree range that the inverse trigonometric
functions always produce.
</p>
<p>Powers of powers &lsquo;<samp>(x^a)^b</samp>&rsquo; are simplified to
&lsquo;<samp>x^(a b)</samp>&rsquo;
for all &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;.  These results will be valid only
in a restricted range of &lsquo;<samp>x</samp>&rsquo;; for example, in
&lsquo;<samp>(x^2)^1:2</samp>&rsquo;
the powers cancel to get &lsquo;<samp>x</samp>&rsquo;, which is valid for positive values
of &lsquo;<samp>x</samp>&rsquo; but not for negative or complex values.
</p>
<p>Similarly, &lsquo;<samp><tt>sqrt</tt>(x^a)</samp>&rsquo; and &lsquo;<samp><tt>sqrt</tt>(x)^a</samp>&rsquo; are both
simplified (possibly unsafely) to
&lsquo;<samp>x^(a/2)</samp>&rsquo;.
</p>
<p>Forms like &lsquo;<samp><tt>sqrt</tt>(1 - sin(x)^2)</samp>&rsquo; are simplified to, e.g.,
&lsquo;<samp><tt>cos</tt>(x)</samp>&rsquo;.  Calc has identities of this sort for <code>sin</code>,
<code>cos</code>, <code>tan</code>, <code>sinh</code>, and <code>cosh</code>.
</p>
<p>Arguments of square roots are partially factored to look for
squared terms that can be extracted.  For example,
&lsquo;<samp><tt>sqrt</tt>(a^2 b^3 + a^3 b^2)</samp>&rsquo; simplifies to
&lsquo;<samp>a b <tt>sqrt</tt>(a+b)</samp>&rsquo;.
</p>
<p>The simplifications of &lsquo;<samp><tt>ln</tt>(<tt>exp</tt>(x))</samp>&rsquo;,
&lsquo;<samp><tt>ln</tt>(<tt>e</tt>^x)</samp>&rsquo;, and &lsquo;<samp><tt>log10</tt>(10^x)</samp>&rsquo; to &lsquo;<samp>x</samp>&rsquo; are also
unsafe because of problems with principal values (although these
simplifications are safe if &lsquo;<samp>x</samp>&rsquo; is known to be real).
</p>
<p>Common factors are canceled from products on both sides of an
equation, even if those factors may be zero:  &lsquo;<samp>a x / b x</samp>&rsquo;
to &lsquo;<samp>a / b</samp>&rsquo;.  Such factors are never canceled from
inequalities:  Even the extended simplifications are not bold enough to
reduce &lsquo;<samp>a x &lt; b x</samp>&rsquo; to &lsquo;<samp>a &lt; b</samp>&rsquo; (or &lsquo;<samp>a &gt; b</samp>&rsquo;, depending
on whether you believe &lsquo;<samp>x</samp>&rsquo; is positive or negative).
The <kbd>a M /</kbd> command can be used to divide a factor out of
both sides of an inequality.
</p>
<hr>
<a name="Simplification-of-Units"></a>
<div class="header">
<p>
Previous: <a href="#Unsafe-Simplifications" accesskey="p" rel="prev">Unsafe Simplifications</a>, Up: <a href="#Simplifying-Formulas" accesskey="u" rel="up">Simplifying Formulas</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Simplification-of-Units-1"></a>
<h4 class="subsection">10.3.4 Simplification of Units</h4>

<p>The simplifications described in this section (as well as the algebraic
simplifications) are applied when units need to be simplified.  They can
be applied using the <kbd>u s</kbd> (<code>calc-simplify-units</code>) command, or
will be done automatically in Units Simplification mode (<kbd>m U</kbd>).
See <a href="#Basic-Operations-on-Units">Basic Operations on Units</a>.
</p>
<p>The variable <code>UnitSimpRules</code> contains rewrites to be applied by
units simplifications.  These are applied in addition to <code>EvalRules</code>
and <code>AlgSimpRules</code>.
</p>
<p>Scalar mode is automatically put into effect when simplifying units.
See <a href="#Matrix-Mode">Matrix Mode</a>.
</p>
<p>Sums &lsquo;<samp>a + b</samp>&rsquo; involving units are simplified by extracting the
units of &lsquo;<samp>a</samp>&rsquo; as if by the <kbd>u x</kbd> command (call the result
&lsquo;<samp>u_a</samp>&rsquo;), then simplifying the expression &lsquo;<samp>b / u_a</samp>&rsquo;
using <kbd>u b</kbd> and <kbd>u s</kbd>.  If the result has units then the sum
is inconsistent and is left alone.  Otherwise, it is rewritten
in terms of the units &lsquo;<samp>u_a</samp>&rsquo;.
</p>
<p>If units auto-ranging mode is enabled, products or quotients in
which the first argument is a number which is out of range for the
leading unit are modified accordingly.
</p>
<p>When canceling and combining units in products and quotients,
Calc accounts for unit names that differ only in the prefix letter.
For example, &lsquo;<samp>2 km m</samp>&rsquo; is simplified to &lsquo;<samp>2000 m^2</samp>&rsquo;.
However, compatible but different units like <code>ft</code> and <code>in</code>
are not combined in this way.
</p>
<p>Quotients &lsquo;<samp>a / b</samp>&rsquo; are simplified in three additional ways.  First,
if &lsquo;<samp>b</samp>&rsquo; is a number or a product beginning with a number, Calc
computes the reciprocal of this number and moves it to the numerator.
</p>
<p>Second, for each pair of unit names from the numerator and denominator
of a quotient, if the units are compatible (e.g., they are both
units of area) then they are replaced by the ratio between those
units.  For example, in &lsquo;<samp>3 s in N / kg cm</samp>&rsquo; the units
&lsquo;<samp>in / cm</samp>&rsquo; will be replaced by &lsquo;<samp>2.54</samp>&rsquo;.
</p>
<p>Third, if the units in the quotient exactly cancel out, so that
a <kbd>u b</kbd> command on the quotient would produce a dimensionless
number for an answer, then the quotient simplifies to that number.
</p>
<p>For powers and square roots, the &ldquo;unsafe&rdquo; simplifications
&lsquo;<samp>(a b)^c</samp>&rsquo; to &lsquo;<samp>a^c b^c</samp>&rsquo;, &lsquo;<samp>(a/b)^c</samp>&rsquo; to &lsquo;<samp>a^c / b^c</samp>&rsquo;,
and &lsquo;<samp>(a^b)^c</samp>&rsquo; to
&lsquo;<samp>a^(b c)</samp>&rsquo;
are done if the powers are real numbers.  (These are safe in the context
of units because all numbers involved can reasonably be assumed to be
real.)
</p>
<p>Also, if a unit name is raised to a fractional power, and the
base units in that unit name all occur to powers which are a
multiple of the denominator of the power, then the unit name
is expanded out into its base units, which can then be simplified
according to the previous paragraph.  For example, &lsquo;<samp>acre^1.5</samp>&rsquo;
is simplified by noting that &lsquo;<samp>1.5 = 3:2</samp>&rsquo;, that &lsquo;<samp>acre</samp>&rsquo;
is defined in terms of &lsquo;<samp>m^2</samp>&rsquo;, and that the 2 in the power of
<code>m</code> is a multiple of 2 in &lsquo;<samp>3:2</samp>&rsquo;.  Thus, <code>acre^1.5</code> is
replaced by approximately
&lsquo;<samp>(4046 m^2)^1.5</samp>&rsquo;,
which is then changed to
&lsquo;<samp>4046^1.5 (m^2)^1.5</samp>&rsquo;,
then to &lsquo;<samp>257440 m^3</samp>&rsquo;.
</p>
<p>The functions <code>float</code>, <code>frac</code>, <code>clean</code>, <code>abs</code>,
as well as <code>floor</code> and the other integer truncation functions,
applied to unit names or products or quotients involving units, are
simplified.  For example, &lsquo;<samp>round(1.6 in)</samp>&rsquo; is changed to
&lsquo;<samp>round(1.6) round(in)</samp>&rsquo;; the lefthand term evaluates to 2,
and the righthand term simplifies to <code>in</code>.
</p>
<p>The functions <code>sin</code>, <code>cos</code>, and <code>tan</code> with arguments
that have angular units like <code>rad</code> or <code>arcmin</code> are
simplified by converting to base units (radians), then evaluating
with the angular mode temporarily set to radians.
</p>
<hr>
<a name="Polynomials"></a>
<div class="header">
<p>
Next: <a href="#Calculus" accesskey="n" rel="next">Calculus</a>, Previous: <a href="#Simplifying-Formulas" accesskey="p" rel="prev">Simplifying Formulas</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Polynomials-1"></a>
<h3 class="section">10.4 Polynomials</h3>

<p>A <em>polynomial</em> is a sum of terms which are coefficients times
various powers of a &ldquo;base&rdquo; variable.  For example, &lsquo;<samp>2 x^2 + 3 x - 4</samp>&rsquo;
is a polynomial in &lsquo;<samp>x</samp>&rsquo;.  Some formulas can be considered
polynomials in several different variables:  &lsquo;<samp>1 + 2 x + 3 y + 4 x y^2</samp>&rsquo;
is a polynomial in both &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo;.  Polynomial coefficients
are often numbers, but they may in general be any formulas not
involving the base variable.
</p>
<a name="index-a-f"></a>
<a name="index-calc_002dfactor"></a>
<a name="index-factor"></a>
<p>The <kbd>a f</kbd> (<code>calc-factor</code>) [<code>factor</code>] command factors a
polynomial into a product of terms.  For example, the polynomial
&lsquo;<samp>x^3 + 2 x^2 + x</samp>&rsquo; is factored into &lsquo;<samp>x*(x+1)^2</samp>&rsquo;.  As another
example, &lsquo;<samp>a c + b d + b c + a d</samp>&rsquo; is factored into the product
&lsquo;<samp>(a + b) (c + d)</samp>&rsquo;.
</p>
<p>Calc currently has three algorithms for factoring.  Formulas which are
linear in several variables, such as the second example above, are
merged according to the distributive law.  Formulas which are
polynomials in a single variable, with constant integer or fractional
coefficients, are factored into irreducible linear and/or quadratic
terms.  The first example above factors into three linear terms
(&lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>x+1</samp>&rsquo;, and &lsquo;<samp>x+1</samp>&rsquo; again).  Finally, formulas
which do not fit the above criteria are handled by the algebraic
rewrite mechanism.
</p>
<p>Calc&rsquo;s polynomial factorization algorithm works by using the general
root-finding command (<kbd>a&nbsp;P</kbd><!-- /@w -->) to solve for the roots of the
polynomial.  It then looks for roots which are rational numbers
or complex-conjugate pairs, and converts these into linear and
quadratic terms, respectively.  Because it uses floating-point
arithmetic, it may be unable to find terms that involve large
integers (whose number of digits approaches the current precision).
Also, irreducible factors of degree higher than quadratic are not
found, and polynomials in more than one variable are not treated.
(A more robust factorization algorithm may be included in a future
version of Calc.)
</p>
<a name="index-FactorRules"></a>
<a name="index-thecoefs"></a>
<a name="index-thefactors"></a>
<p>The rewrite-based factorization method uses rules stored in the variable
<code>FactorRules</code>.  See <a href="#Rewrite-Rules">Rewrite Rules</a>, for a discussion of the
operation of rewrite rules.  The default <code>FactorRules</code> are able
to factor quadratic forms symbolically into two linear terms,
&lsquo;<samp>(a x + b) (c x + d)</samp>&rsquo;.  You can edit these rules to include other
cases if you wish.  To use the rules, Calc builds the formula
&lsquo;<samp>thecoefs(x, [a, b, c, ...])</samp>&rsquo; where <code>x</code> is the polynomial
base variable and <code>a</code>, <code>b</code>, etc., are polynomial coefficients
(which may be numbers or formulas).  The constant term is written first,
i.e., in the <code>a</code> position.  When the rules complete, they should have
changed the formula into the form &lsquo;<samp>thefactors(x, [f1, f2, f3, ...])</samp>&rsquo;
where each <code>fi</code> should be a factored term, e.g., &lsquo;<samp>x - ai</samp>&rsquo;.
Calc then multiplies these terms together to get the complete
factored form of the polynomial.  If the rules do not change the
<code>thecoefs</code> call to a <code>thefactors</code> call, <kbd>a f</kbd> leaves the
polynomial alone on the assumption that it is unfactorable.  (Note that
the function names <code>thecoefs</code> and <code>thefactors</code> are used only
as placeholders; there are no actual Calc functions by those names.)
</p>
<a name="index-H-a-f"></a>
<a name="index-factors"></a>
<p>The <kbd>H a f</kbd> [<code>factors</code>] command also factors a polynomial,
but it returns a list of factors instead of an expression which is the
product of the factors.  Each factor is represented by a sub-vector
of the factor, and the power with which it appears.  For example,
&lsquo;<samp>x^5 + x^4 - 33 x^3 + 63 x^2</samp>&rsquo; factors to &lsquo;<samp>(x + 7) x^2 (x - 3)^2</samp>&rsquo;
in <kbd>a f</kbd>, or to &lsquo;<samp>[ [x, 2], [x+7, 1], [x-3, 2] ]</samp>&rsquo; in <kbd>H a f</kbd>.
If there is an overall numeric factor, it always comes first in the list.
The functions <code>factor</code> and <code>factors</code> allow a second argument
when written in algebraic form; &lsquo;<samp>factor(x,v)</samp>&rsquo; factors &lsquo;<samp>x</samp>&rsquo; with
respect to the specific variable &lsquo;<samp>v</samp>&rsquo;.  The default is to factor with
respect to all the variables that appear in &lsquo;<samp>x</samp>&rsquo;.
</p>
<a name="index-a-c"></a>
<a name="index-calc_002dcollect"></a>
<a name="index-collect"></a>
<p>The <kbd>a c</kbd> (<code>calc-collect</code>) [<code>collect</code>] command rearranges a
formula as a
polynomial in a given variable, ordered in decreasing powers of that
variable.  For example, given &lsquo;<samp>1 + 2 x + 3 y + 4 x y^2</samp>&rsquo; on
the stack, <kbd>a c x</kbd> would produce &lsquo;<samp>(2 + 4 y^2) x + (1 + 3 y)</samp>&rsquo;,
and <kbd>a c y</kbd> would produce &lsquo;<samp>(4 x) y^2 + 3 y + (1 + 2 x)</samp>&rsquo;.
The polynomial will be expanded out using the distributive law as
necessary:  Collecting &lsquo;<samp>x</samp>&rsquo; in &lsquo;<samp>(x - 1)^3</samp>&rsquo; produces
&lsquo;<samp>x^3 - 3 x^2 + 3 x - 1</samp>&rsquo;.  Terms not involving &lsquo;<samp>x</samp>&rsquo; will
not be expanded.
</p>
<p>The &ldquo;variable&rdquo; you specify at the prompt can actually be any
expression: <kbd>a c ln(x+1)</kbd> will collect together all terms multiplied
by &lsquo;<samp>ln(x+1)</samp>&rsquo; or integer powers thereof.  If &lsquo;<samp>x</samp>&rsquo; also appears
in the formula in a context other than &lsquo;<samp>ln(x+1)</samp>&rsquo;, <kbd>a c</kbd> will
treat those occurrences as unrelated to &lsquo;<samp>ln(x+1)</samp>&rsquo;, i.e., as constants.
</p>
<a name="index-a-x"></a>
<a name="index-calc_002dexpand"></a>
<a name="index-expand"></a>
<p>The <kbd>a x</kbd> (<code>calc-expand</code>) [<code>expand</code>] command expands an
expression by applying the distributive law everywhere.  It applies to
products, quotients, and powers involving sums.  By default, it fully
distributes all parts of the expression.  With a numeric prefix argument,
the distributive law is applied only the specified number of times, then
the partially expanded expression is left on the stack.
</p>
<p>The <kbd>a x</kbd> and <kbd>j D</kbd> commands are somewhat redundant.  Use
<kbd>a x</kbd> if you want to expand all products of sums in your formula.
Use <kbd>j D</kbd> if you want to expand a particular specified term of
the formula.  There is an exactly analogous correspondence between
<kbd>a f</kbd> and <kbd>j M</kbd>.  (The <kbd>j D</kbd> and <kbd>j M</kbd> commands
also know many other kinds of expansions, such as
&lsquo;<samp>exp(a + b) = exp(a) exp(b)</samp>&rsquo;, which <kbd>a x</kbd> and <kbd>a f</kbd>
do not do.)
</p>
<p>Calc&rsquo;s automatic simplifications will sometimes reverse a partial
expansion.  For example, the first step in expanding &lsquo;<samp>(x+1)^3</samp>&rsquo; is
to write &lsquo;<samp>(x+1) (x+1)^2</samp>&rsquo;.  If <kbd>a x</kbd> stops there and tries
to put this formula onto the stack, though, Calc will automatically
simplify it back to &lsquo;<samp>(x+1)^3</samp>&rsquo; form.  The solution is to turn
simplification off first (see <a href="#Simplification-Modes">Simplification Modes</a>), or to run
<kbd>a x</kbd> without a numeric prefix argument so that it expands all
the way in one step.
</p>
<a name="index-a-a"></a>
<a name="index-calc_002dapart"></a>
<a name="index-apart"></a>
<p>The <kbd>a a</kbd> (<code>calc-apart</code>) [<code>apart</code>] command expands a
rational function by partial fractions.  A rational function is the
quotient of two polynomials; <code>apart</code> pulls this apart into a
sum of rational functions with simple denominators.  In algebraic
notation, the <code>apart</code> function allows a second argument that
specifies which variable to use as the &ldquo;base&rdquo;; by default, Calc
chooses the base variable automatically.
</p>
<a name="index-a-n"></a>
<a name="index-calc_002dnormalize_002drat"></a>
<a name="index-nrat"></a>
<p>The <kbd>a n</kbd> (<code>calc-normalize-rat</code>) [<code>nrat</code>] command
attempts to arrange a formula into a quotient of two polynomials.
For example, given &lsquo;<samp>1 + (a + b/c) / d</samp>&rsquo;, the result would be
&lsquo;<samp>(b + a c + c d) / c d</samp>&rsquo;.  The quotient is reduced, so that
<kbd>a n</kbd> will simplify &lsquo;<samp>(x^2 + 2x + 1) / (x^2 - 1)</samp>&rsquo; by dividing
out the common factor &lsquo;<samp>x + 1</samp>&rsquo;, yielding &lsquo;<samp>(x + 1) / (x - 1)</samp>&rsquo;.
</p>
<a name="index-a-_005c"></a>
<a name="index-calc_002dpoly_002ddiv"></a>
<a name="index-pdiv"></a>
<p>The <kbd>a \</kbd> (<code>calc-poly-div</code>) [<code>pdiv</code>] command divides
two polynomials &lsquo;<samp>u</samp>&rsquo; and &lsquo;<samp>v</samp>&rsquo;, yielding a new polynomial
&lsquo;<samp>q</samp>&rsquo;.  If several variables occur in the inputs, the inputs are
considered multivariate polynomials.  (Calc divides by the variable
with the largest power in &lsquo;<samp>u</samp>&rsquo; first, or, in the case of equal
powers, chooses the variables in alphabetical order.)  For example,
dividing &lsquo;<samp>x^2 + 3 x + 2</samp>&rsquo; by &lsquo;<samp>x + 2</samp>&rsquo; yields &lsquo;<samp>x + 1</samp>&rsquo;.
The remainder from the division, if any, is reported at the bottom
of the screen and is also placed in the Trail along with the quotient.
</p>
<p>Using <code>pdiv</code> in algebraic notation, you can specify the particular
variable to be used as the base: <code>pdiv(<var>a</var>,<var>b</var>,<var>x</var>)</code>.
If <code>pdiv</code> is given only two arguments (as is always the case with
the <kbd>a \</kbd> command), then it does a multivariate division as outlined
above.
</p>
<a name="index-a-_0025"></a>
<a name="index-calc_002dpoly_002drem"></a>
<a name="index-prem"></a>
<p>The <kbd>a %</kbd> (<code>calc-poly-rem</code>) [<code>prem</code>] command divides
two polynomials and keeps the remainder &lsquo;<samp>r</samp>&rsquo;.  The quotient
&lsquo;<samp>q</samp>&rsquo; is discarded.  For any formulas &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;, the
results of <kbd>a \</kbd> and <kbd>a %</kbd> satisfy &lsquo;<samp>a = q b + r</samp>&rsquo;.
(This is analogous to plain <kbd>\</kbd> and <kbd>%</kbd>, which compute the
integer quotient and remainder from dividing two numbers.)
</p>
<a name="index-a-_002f"></a>
<a name="index-H-a-_002f"></a>
<a name="index-calc_002dpoly_002ddiv_002drem"></a>
<a name="index-pdivrem"></a>
<a name="index-pdivide"></a>
<p>The <kbd>a /</kbd> (<code>calc-poly-div-rem</code>) [<code>pdivrem</code>] command
divides two polynomials and reports both the quotient and the
remainder as a vector &lsquo;<samp>[q, r]</samp>&rsquo;.  The <kbd>H a /</kbd> [<code>pdivide</code>]
command divides two polynomials and constructs the formula
&lsquo;<samp>q + r/b</samp>&rsquo; on the stack.  (Naturally if the remainder is zero,
this will immediately simplify to &lsquo;<samp>q</samp>&rsquo;.)
</p>
<a name="index-a-g"></a>
<a name="index-calc_002dpoly_002dgcd"></a>
<a name="index-pgcd"></a>
<p>The <kbd>a g</kbd> (<code>calc-poly-gcd</code>) [<code>pgcd</code>] command computes
the greatest common divisor of two polynomials.  (The GCD actually
is unique only to within a constant multiplier; Calc attempts to
choose a GCD which will be unsurprising.)  For example, the <kbd>a n</kbd>
command uses <kbd>a g</kbd> to take the GCD of the numerator and denominator
of a quotient, then divides each by the result using <kbd>a \</kbd>.  (The
definition of GCD ensures that this division can take place without
leaving a remainder.)
</p>
<p>While the polynomials used in operations like <kbd>a /</kbd> and <kbd>a g</kbd>
often have integer coefficients, this is not required.  Calc can also
deal with polynomials over the rationals or floating-point reals.
Polynomials with modulo-form coefficients are also useful in many
applications; if you enter &lsquo;<samp>(x^2 + 3 x - 1) mod 5</samp>&rsquo;, Calc
automatically transforms this into a polynomial over the field of
integers mod 5:  &lsquo;<samp>(1 mod 5) x^2 + (3 mod 5) x + (4 mod 5)</samp>&rsquo;.
</p>
<p>Congratulations and thanks go to Ove Ewerlid
(<code>ewerlid@mizar.DoCS.UU.SE</code>), who contributed many of the
polynomial routines used in the above commands.
</p>
<p>See <a href="#Decomposing-Polynomials">Decomposing Polynomials</a>, for several useful functions for
extracting the individual coefficients of a polynomial.
</p>
<hr>
<a name="Calculus"></a>
<div class="header">
<p>
Next: <a href="#Solving-Equations" accesskey="n" rel="next">Solving Equations</a>, Previous: <a href="#Polynomials" accesskey="p" rel="prev">Polynomials</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Calculus-1"></a>
<h3 class="section">10.5 Calculus</h3>

<p>The following calculus commands do not automatically simplify their
inputs or outputs using <code>calc-simplify</code>.  You may find it helps
to do this by hand by typing <kbd>a s</kbd> or <kbd>a e</kbd>.  It may also help
to use <kbd>a x</kbd> and/or <kbd>a c</kbd> to arrange a result in the most
readable way.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Differentiation" accesskey="1">Differentiation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Integration" accesskey="2">Integration</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Customizing-the-Integrator" accesskey="3">Customizing the Integrator</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Numerical-Integration" accesskey="4">Numerical Integration</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Taylor-Series" accesskey="5">Taylor Series</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Differentiation"></a>
<div class="header">
<p>
Next: <a href="#Integration" accesskey="n" rel="next">Integration</a>, Previous: <a href="#Calculus" accesskey="p" rel="prev">Calculus</a>, Up: <a href="#Calculus" accesskey="u" rel="up">Calculus</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Differentiation-1"></a>
<h4 class="subsection">10.5.1 Differentiation</h4>

<p><a name="index-a-d"></a>
<a name="index-H-a-d"></a>
<a name="index-calc_002dderivative"></a>
<a name="index-deriv-1"></a>
<a name="index-tderiv-1"></a>
The <kbd>a d</kbd> (<code>calc-derivative</code>) [<code>deriv</code>] command computes
the derivative of the expression on the top of the stack with respect to
some variable, which it will prompt you to enter.  Normally, variables
in the formula other than the specified differentiation variable are
considered constant, i.e., &lsquo;<samp>deriv(y,x)</samp>&rsquo; is reduced to zero.  With
the Hyperbolic flag, the <code>tderiv</code> (total derivative) operation is used
instead, in which derivatives of variables are not reduced to zero
unless those variables are known to be &ldquo;constant,&rdquo; i.e., independent
of any other variables.  (The built-in special variables like <code>pi</code>
are considered constant, as are variables that have been declared
<code>const</code>; see <a href="#Declarations">Declarations</a>.)
</p>
<p>With a numeric prefix argument <var>n</var>, this command computes the
<var>n</var>th derivative.
</p>
<p>When working with trigonometric functions, it is best to switch to
Radians mode first (with <kbd>m&nbsp;r</kbd><!-- /@w -->).  The derivative of &lsquo;<samp>sin(x)</samp>&rsquo;
in degrees is &lsquo;<samp>(pi/180) cos(x)</samp>&rsquo;, probably not the expected
answer!
</p>
<p>If you use the <code>deriv</code> function directly in an algebraic formula,
you can write &lsquo;<samp>deriv(f,x,x0)</samp>&rsquo; which represents the derivative
of &lsquo;<samp>f</samp>&rsquo; with respect to &lsquo;<samp>x</samp>&rsquo;, evaluated at the point
&lsquo;<samp>x=x0</samp>&rsquo;.
</p>
<p>If the formula being differentiated contains functions which Calc does
not know, the derivatives of those functions are produced by adding
primes (apostrophe characters).  For example, &lsquo;<samp>deriv(f(2x), x)</samp>&rsquo;
produces &lsquo;<samp>2 f'(2 x)</samp>&rsquo;, where the function <code>f'</code> represents the
derivative of <code>f</code>.
</p>
<p>For functions you have defined with the <kbd>Z F</kbd> command, Calc expands
the functions according to their defining formulas unless you have
also defined <code>f'</code> suitably.  For example, suppose we define
&lsquo;<samp>sinc(x) = sin(x)/x</samp>&rsquo; using <kbd>Z F</kbd>.  If we then differentiate
the formula &lsquo;<samp>sinc(2 x)</samp>&rsquo;, the formula will be expanded to
&lsquo;<samp>sin(2 x) / (2 x)</samp>&rsquo; and differentiated.  However, if we also
define &lsquo;<samp>sinc'(x) = dsinc(x)</samp>&rsquo;, say, then Calc will write the
result as &lsquo;<samp>2 dsinc(2 x)</samp>&rsquo;.  See <a href="#Algebraic-Definitions">Algebraic Definitions</a>.
</p>
<p>For multi-argument functions &lsquo;<samp>f(x,y,z)</samp>&rsquo;, the derivative with respect
to the first argument is written &lsquo;<samp>f'(x,y,z)</samp>&rsquo;; derivatives with
respect to the other arguments are &lsquo;<samp>f'2(x,y,z)</samp>&rsquo; and &lsquo;<samp>f'3(x,y,z)</samp>&rsquo;.
Various higher-order derivatives can be formed in the obvious way, e.g.,
&lsquo;<samp>f'<var></var>'(x)</samp>&rsquo; (the second derivative of <code>f</code>) or
&lsquo;<samp>f'<var></var>'2'3(x,y,z)</samp>&rsquo; (<code>f</code> differentiated with respect to each
argument once).
</p>
<hr>
<a name="Integration"></a>
<div class="header">
<p>
Next: <a href="#Customizing-the-Integrator" accesskey="n" rel="next">Customizing the Integrator</a>, Previous: <a href="#Differentiation" accesskey="p" rel="prev">Differentiation</a>, Up: <a href="#Calculus" accesskey="u" rel="up">Calculus</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Integration-1"></a>
<h4 class="subsection">10.5.2 Integration</h4>

<p><a name="index-a-i"></a>
<a name="index-calc_002dintegral"></a>
<a name="index-integ-1"></a>
The <kbd>a i</kbd> (<code>calc-integral</code>) [<code>integ</code>] command computes the
indefinite integral of the expression on the top of the stack with
respect to a prompted-for variable.  The integrator is not guaranteed to
work for all integrable functions, but it is able to integrate several
large classes of formulas.  In particular, any polynomial or rational
function (a polynomial divided by a polynomial) is acceptable.
(Rational functions don&rsquo;t have to be in explicit quotient form, however;
&lsquo;<samp>x/(1+x^-2)</samp>&rsquo;
is not strictly a quotient of polynomials, but it is equivalent to
&lsquo;<samp>x^3/(x^2+1)</samp>&rsquo;, which is.)  Also, square roots of terms involving
&lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>x^2</samp>&rsquo; may appear in rational functions being
integrated.  Finally, rational functions involving trigonometric or
hyperbolic functions can be integrated.
</p>
<p>With an argument (<kbd>C-u a i</kbd>), this command will compute the definite
integral of the expression on top of the stack.  In this case, the
command will again prompt for an integration variable, then prompt for a
lower limit and an upper limit.
</p>
<p>If you use the <code>integ</code> function directly in an algebraic formula,
you can also write &lsquo;<samp>integ(f,x,v)</samp>&rsquo; which expresses the resulting
indefinite integral in terms of variable <code>v</code> instead of <code>x</code>.
With four arguments, &lsquo;<samp>integ(f(x),x,a,b)</samp>&rsquo; represents a definite
integral from <code>a</code> to <code>b</code>.
</p>
<p>Please note that the current implementation of Calc&rsquo;s integrator sometimes
produces results that are significantly more complex than they need to
be.  For example, the integral Calc finds for
&lsquo;<samp>1/(x+sqrt(x^2+1))</samp>&rsquo;
is several times more complicated than the answer Mathematica
returns for the same input, although the two forms are numerically
equivalent.  Also, any indefinite integral should be considered to have
an arbitrary constant of integration added to it, although Calc does not
write an explicit constant of integration in its result.  For example,
Calc&rsquo;s solution for
&lsquo;<samp>1/(1+tan(x))</samp>&rsquo;
differs from the solution given in the <em>CRC Math Tables</em> by a
constant factor of
&lsquo;<samp>pi i / 2</samp>&rsquo;,
due to a different choice of constant of integration.
</p>
<p>The Calculator remembers all the integrals it has done.  If conditions
change in a way that would invalidate the old integrals, say, a switch
from Degrees to Radians mode, then they will be thrown out.  If you
suspect this is not happening when it should, use the
<code>calc-flush-caches</code> command; see <a href="#Caches">Caches</a>.
</p>
<a name="index-IntegLimit"></a>
<p>Calc normally will pursue integration by substitution or integration by
parts up to 3 nested times before abandoning an approach as fruitless.
If the integrator is taking too long, you can lower this limit by storing
a number (like 2) in the variable <code>IntegLimit</code>.  (The <kbd>s I</kbd>
command is a convenient way to edit <code>IntegLimit</code>.)  If this variable
has no stored value or does not contain a nonnegative integer, a limit
of 3 is used.  The lower this limit is, the greater the chance that Calc
will be unable to integrate a function it could otherwise handle.  Raising
this limit allows the Calculator to solve more integrals, though the time
it takes may grow exponentially.  You can monitor the integrator&rsquo;s actions
by creating an Emacs buffer called <samp>*Trace*</samp>.  If such a buffer
exists, the <kbd>a i</kbd> command will write a log of its actions there.
</p>
<p>If you want to manipulate integrals in a purely symbolic way, you can
set the integration nesting limit to 0 to prevent all but fast
table-lookup solutions of integrals.  You might then wish to define
rewrite rules for integration by parts, various kinds of substitutions,
and so on.  See <a href="#Rewrite-Rules">Rewrite Rules</a>.
</p>
<hr>
<a name="Customizing-the-Integrator"></a>
<div class="header">
<p>
Next: <a href="#Numerical-Integration" accesskey="n" rel="next">Numerical Integration</a>, Previous: <a href="#Integration" accesskey="p" rel="prev">Integration</a>, Up: <a href="#Calculus" accesskey="u" rel="up">Calculus</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Customizing-the-Integrator-1"></a>
<h4 class="subsection">10.5.3 Customizing the Integrator</h4>

<p><a name="index-IntegRules"></a>
Calc has two built-in rewrite rules called <code>IntegRules</code> and
<code>IntegAfterRules</code> which you can edit to define new integration
methods.  See <a href="#Rewrite-Rules">Rewrite Rules</a>.  At each step of the integration process,
Calc wraps the current integrand in a call to the fictitious function
&lsquo;<samp>integtry(<var>expr</var>,<var>var</var>)</samp>&rsquo;, where <var>expr</var> is the
integrand and <var>var</var> is the integration variable.  If your rules
rewrite this to be a plain formula (not a call to <code>integtry</code>), then
Calc will use this formula as the integral of <var>expr</var>.  For example,
the rule &lsquo;<samp>integtry(mysin(x),x) := -mycos(x)</samp>&rsquo; would define a rule to
integrate a function <code>mysin</code> that acts like the sine function.
Then, putting &lsquo;<samp>4 mysin(2y+1)</samp>&rsquo; on the stack and typing <kbd>a i y</kbd>
will produce the integral &lsquo;<samp>-2 mycos(2y+1)</samp>&rsquo;.  Note that Calc has
automatically made various transformations on the integral to allow it
to use your rule; integral tables generally give rules for
&lsquo;<samp>mysin(a x + b)</samp>&rsquo;, but you don&rsquo;t need to use this much generality
in your <code>IntegRules</code>.
</p>
<a name="index-Exponential-integral-Ei_0028x_0029"></a>
<a name="index-Ei"></a>
<p>As a more serious example, the expression &lsquo;<samp>exp(x)/x</samp>&rsquo; cannot be
integrated in terms of the standard functions, so the &ldquo;exponential
integral&rdquo; function
&lsquo;<samp>Ei(x)</samp>&rsquo;
was invented to describe it.
We can get Calc to do this integral in terms of a made-up <code>Ei</code>
function by adding the rule &lsquo;<samp>[integtry(exp(x)/x, x) := Ei(x)]</samp>&rsquo;
to <code>IntegRules</code>.  Now entering &lsquo;<samp>exp(2x)/x</samp>&rsquo; on the stack
and typing <kbd>a i x</kbd> yields &lsquo;<samp>Ei(2 x)</samp>&rsquo;.  This new rule will
work with Calc&rsquo;s various built-in integration methods (such as
integration by substitution) to solve a variety of other problems
involving <code>Ei</code>:  For example, now Calc will also be able to
integrate &lsquo;<samp>exp(exp(x))</samp>&rsquo; and &lsquo;<samp>ln(ln(x))</samp>&rsquo; (to get &lsquo;<samp>Ei(exp(x))</samp>&rsquo;
and &lsquo;<samp>x ln(ln(x)) - Ei(ln(x))</samp>&rsquo;, respectively).
</p>
<p>Your rule may do further integration by calling <code>integ</code>.  For
example, &lsquo;<samp>integtry(twice(u),x) := twice(integ(u))</samp>&rsquo; allows Calc
to integrate &lsquo;<samp>twice(sin(x))</samp>&rsquo; to get &lsquo;<samp>twice(-cos(x))</samp>&rsquo;.
Note that <code>integ</code> was called with only one argument.  This notation
is allowed only within <code>IntegRules</code>; it means &ldquo;integrate this
with respect to the same integration variable.&rdquo;  If Calc is unable
to integrate <code>u</code>, the integration that invoked <code>IntegRules</code>
also fails.  Thus integrating &lsquo;<samp>twice(f(x))</samp>&rsquo; fails, returning the
unevaluated integral &lsquo;<samp>integ(twice(f(x)), x)</samp>&rsquo;.  It is still valid
to call <code>integ</code> with two or more arguments, however; in this case,
if <code>u</code> is not integrable, <code>twice</code> itself will still be
integrated:  If the above rule is changed to &lsquo;<samp>... := twice(integ(u,x))</samp>&rsquo;,
then integrating &lsquo;<samp>twice(f(x))</samp>&rsquo; will yield &lsquo;<samp>twice(integ(f(x),x))</samp>&rsquo;.
</p>
<p>If a rule instead produces the formula &lsquo;<samp>integsubst(<var>sexpr</var>,
<var>svar</var>)</samp>&rsquo;, either replacing the top-level <code>integtry</code> call or
nested anywhere inside the expression, then Calc will apply the
substitution &lsquo;<samp><var>u</var> = <var>sexpr</var>(<var>svar</var>)</samp>&rsquo; to try to
integrate the original <var>expr</var>.  For example, the rule
&lsquo;<samp>sqrt(a) := integsubst(sqrt(x),x)</samp>&rsquo; says that if Calc ever finds
a square root in the integrand, it should attempt the substitution
&lsquo;<samp>u = sqrt(x)</samp>&rsquo;.  (This particular rule is unnecessary because
Calc always tries &ldquo;obvious&rdquo; substitutions where <var>sexpr</var> actually
appears in the integrand.)  The variable <var>svar</var> may be the same
as the <var>var</var> that appeared in the call to <code>integtry</code>, but
it need not be.
</p>
<p>When integrating according to an <code>integsubst</code>, Calc uses the
equation solver to find the inverse of <var>sexpr</var> (if the integrand
refers to <var>var</var> anywhere except in subexpressions that exactly
match <var>sexpr</var>).  It uses the differentiator to find the derivative
of <var>sexpr</var> and/or its inverse (it has two methods that use one
derivative or the other).  You can also specify these items by adding
extra arguments to the <code>integsubst</code> your rules construct; the
general form is &lsquo;<samp>integsubst(<var>sexpr</var>, <var>svar</var>, <var>sinv</var>,
<var>sprime</var>)</samp>&rsquo;, where <var>sinv</var> is the inverse of <var>sexpr</var> (still
written as a function of <var>svar</var>), and <var>sprime</var> is the
derivative of <var>sexpr</var> with respect to <var>svar</var>.  If you don&rsquo;t
specify these things, and Calc is not able to work them out on its
own with the information it knows, then your substitution rule will
work only in very specific, simple cases.
</p>
<p>Calc applies <code>IntegRules</code> as if by <kbd>C-u 1 a r IntegRules</kbd>;
in other words, Calc stops rewriting as soon as any rule in your rule
set succeeds.  (If it weren&rsquo;t for this, the &lsquo;<samp>integsubst(sqrt(x),x)</samp>&rsquo;
example above would keep on adding layers of <code>integsubst</code> calls
forever!)
</p>
<a name="index-IntegSimpRules"></a>
<p>Another set of rules, stored in <code>IntegSimpRules</code>, are applied
every time the integrator uses algebraic simplifications to simplify an
intermediate result.  For example, putting the rule
&lsquo;<samp>twice(x) := 2 x</samp>&rsquo; into  <code>IntegSimpRules</code> would tell Calc to
convert the <code>twice</code> function into a form it knows whenever
integration is attempted.
</p>
<p>One more way to influence the integrator is to define a function with
the <kbd>Z F</kbd> command (see <a href="#Algebraic-Definitions">Algebraic Definitions</a>).  Calc&rsquo;s
integrator automatically expands such functions according to their
defining formulas, even if you originally asked for the function to
be left unevaluated for symbolic arguments.  (Certain other Calc
systems, such as the differentiator and the equation solver, also
do this.)
</p>
<a name="index-IntegAfterRules"></a>
<p>Sometimes Calc is able to find a solution to your integral, but it
expresses the result in a way that is unnecessarily complicated.  If
this happens, you can either use <code>integsubst</code> as described
above to try to hint at a more direct path to the desired result, or
you can use <code>IntegAfterRules</code>.  This is an extra rule set that
runs after the main integrator returns its result; basically, Calc does
an <kbd>a r IntegAfterRules</kbd> on the result before showing it to you.
(It also does algebraic simplifications, without <code>IntegSimpRules</code>,
after that to further simplify the result.)  For example, Calc&rsquo;s integrator
sometimes produces expressions of the form &lsquo;<samp>ln(1+x) - ln(1-x)</samp>&rsquo;;
the default <code>IntegAfterRules</code> rewrite this into the more readable
form &lsquo;<samp>2 arctanh(x)</samp>&rsquo;.  Note that, unlike <code>IntegRules</code>,
<code>IntegSimpRules</code> and <code>IntegAfterRules</code> are applied any number
of times until no further changes are possible.  Rewriting by
<code>IntegAfterRules</code> occurs only after the main integrator has
finished, not at every step as for <code>IntegRules</code> and
<code>IntegSimpRules</code>.
</p>
<hr>
<a name="Numerical-Integration"></a>
<div class="header">
<p>
Next: <a href="#Taylor-Series" accesskey="n" rel="next">Taylor Series</a>, Previous: <a href="#Customizing-the-Integrator" accesskey="p" rel="prev">Customizing the Integrator</a>, Up: <a href="#Calculus" accesskey="u" rel="up">Calculus</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Numerical-Integration-1"></a>
<h4 class="subsection">10.5.4 Numerical Integration</h4>

<p><a name="index-a-I"></a>
<a name="index-calc_002dnum_002dintegral"></a>
<a name="index-ninteg"></a>
If you want a purely numerical answer to an integration problem, you can
use the <kbd>a I</kbd> (<code>calc-num-integral</code>) [<code>ninteg</code>] command.  This
command prompts for an integration variable, a lower limit, and an
upper limit.  Except for the integration variable, all other variables
that appear in the integrand formula must have stored values.  (A stored
value, if any, for the integration variable itself is ignored.)
</p>
<p>Numerical integration works by evaluating your formula at many points in
the specified interval.  Calc uses an &ldquo;open Romberg&rdquo; method; this means
that it does not evaluate the formula actually at the endpoints (so that
it is safe to integrate &lsquo;<samp>sin(x)/x</samp>&rsquo; from zero, for example).  Also,
the Romberg method works especially well when the function being
integrated is fairly smooth.  If the function is not smooth, Calc will
have to evaluate it at quite a few points before it can accurately
determine the value of the integral.
</p>
<p>Integration is much faster when the current precision is small.  It is
best to set the precision to the smallest acceptable number of digits
before you use <kbd>a I</kbd>.  If Calc appears to be taking too long, press
<kbd>C-g</kbd> to halt it and try a lower precision.  If Calc still appears
to need hundreds of evaluations, check to make sure your function is
well-behaved in the specified interval.
</p>
<p>It is possible for the lower integration limit to be &lsquo;<samp>-inf</samp>&rsquo; (minus
infinity).  Likewise, the upper limit may be plus infinity.  Calc
internally transforms the integral into an equivalent one with finite
limits.  However, integration to or across singularities is not supported:
The integral of &lsquo;<samp>1/sqrt(x)</samp>&rsquo; from 0 to 1 exists (it can be found
by Calc&rsquo;s symbolic integrator, for example), but <kbd>a I</kbd> will fail
because the integrand goes to infinity at one of the endpoints.
</p>
<hr>
<a name="Taylor-Series"></a>
<div class="header">
<p>
Previous: <a href="#Numerical-Integration" accesskey="p" rel="prev">Numerical Integration</a>, Up: <a href="#Calculus" accesskey="u" rel="up">Calculus</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Taylor-Series-1"></a>
<h4 class="subsection">10.5.5 Taylor Series</h4>

<p><a name="index-a-t"></a>
<a name="index-calc_002dtaylor"></a>
<a name="index-taylor"></a>
The <kbd>a t</kbd> (<code>calc-taylor</code>) [<code>taylor</code>] command computes a
power series expansion or Taylor series of a function.  You specify the
variable and the desired number of terms.  You may give an expression of
the form &lsquo;<samp><var>var</var> = <var>a</var></samp>&rsquo; or &lsquo;<samp><var>var</var> - <var>a</var></samp>&rsquo; instead
of just a variable to produce a Taylor expansion about the point <var>a</var>.
You may specify the number of terms with a numeric prefix argument;
otherwise the command will prompt you for the number of terms.  Note that
many series expansions have coefficients of zero for some terms, so you
may appear to get fewer terms than you asked for.
</p>
<p>If the <kbd>a i</kbd> command is unable to find a symbolic integral for a
function, you can get an approximation by integrating the function&rsquo;s
Taylor series.
</p>
<hr>
<a name="Solving-Equations"></a>
<div class="header">
<p>
Next: <a href="#Numerical-Solutions" accesskey="n" rel="next">Numerical Solutions</a>, Previous: <a href="#Calculus" accesskey="p" rel="prev">Calculus</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Solving-Equations-1"></a>
<h3 class="section">10.6 Solving Equations</h3>

<p><a name="index-a-S"></a>
<a name="index-calc_002dsolve_002dfor"></a>
<a name="index-solve"></a>
<a name="index-Equations_002c-solving"></a>
<a name="index-Solving-equations"></a>
The <kbd>a S</kbd> (<code>calc-solve-for</code>) [<code>solve</code>] command rearranges
an equation to solve for a specific variable.  An equation is an
expression of the form &lsquo;<samp>L = R</samp>&rsquo;.  For example, the command <kbd>a S x</kbd>
will rearrange &lsquo;<samp>y = 3x + 6</samp>&rsquo; to the form, &lsquo;<samp>x = y/3 - 2</samp>&rsquo;.  If the
input is not an equation, it is treated like an equation of the
form &lsquo;<samp>X = 0</samp>&rsquo;.
</p>
<p>This command also works for inequalities, as in &lsquo;<samp>y &lt; 3x + 6</samp>&rsquo;.
Some inequalities cannot be solved where the analogous equation could
be; for example, solving
&lsquo;<samp>a &lt; b c</samp>&rsquo;
for &lsquo;<samp>b</samp>&rsquo; is impossible
without knowing the sign of &lsquo;<samp>c</samp>&rsquo;.  In this case, <kbd>a S</kbd> will
produce the result
&lsquo;<samp>b != a/c</samp>&rsquo;
(using the not-equal-to operator) to signify that the direction of the
inequality is now unknown.  The inequality
&lsquo;<samp>a &lt;= b c</samp>&rsquo;
is not even partially solved.  See <a href="#Declarations">Declarations</a>, for a way to tell
Calc that the signs of the variables in a formula are in fact known.
</p>
<p>Two useful commands for working with the result of <kbd>a S</kbd> are
<kbd>a .</kbd> (see <a href="#Logical-Operations">Logical Operations</a>), which converts &lsquo;<samp>x = y/3 - 2</samp>&rsquo;
to &lsquo;<samp>y/3 - 2</samp>&rsquo;, and <kbd>s l</kbd> (see <a href="#Let-Command">Let Command</a>) which evaluates
another formula with &lsquo;<samp>x</samp>&rsquo; set equal to &lsquo;<samp>y/3 - 2</samp>&rsquo;.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Multiple-Solutions" accesskey="1">Multiple Solutions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Solving-Systems-of-Equations" accesskey="2">Solving Systems of Equations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Decomposing-Polynomials" accesskey="3">Decomposing Polynomials</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Multiple-Solutions"></a>
<div class="header">
<p>
Next: <a href="#Solving-Systems-of-Equations" accesskey="n" rel="next">Solving Systems of Equations</a>, Previous: <a href="#Solving-Equations" accesskey="p" rel="prev">Solving Equations</a>, Up: <a href="#Solving-Equations" accesskey="u" rel="up">Solving Equations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Multiple-Solutions-1"></a>
<h4 class="subsection">10.6.1 Multiple Solutions</h4>

<p><a name="index-H-a-S"></a>
<a name="index-fsolve"></a>
Some equations have more than one solution.  The Hyperbolic flag
(<code>H a S</code>) [<code>fsolve</code>] tells the solver to report the fully
general family of solutions.  It will invent variables <code>n1</code>,
<code>n2</code>, &hellip;, which represent independent arbitrary integers, and
<code>s1</code>, <code>s2</code>, &hellip;, which represent independent arbitrary
signs (either <i>+1</i> or <i>-1</i>).  If you don&rsquo;t use the Hyperbolic
flag, Calc will use zero in place of all arbitrary integers, and plus
one in place of all arbitrary signs.  Note that variables like <code>n1</code>
and <code>s1</code> are not given any special interpretation in Calc except by
the equation solver itself.  As usual, you can use the <kbd>s&nbsp;l</kbd><!-- /@w -->
(<code>calc-let</code>) command to obtain solutions for various actual values
of these variables.
</p>
<p>For example, <kbd>' x^2 = y <span class="key">RET</span> H a S x <span class="key">RET</span></kbd> solves to
get &lsquo;<samp>x = s1 sqrt(y)</samp>&rsquo;, indicating that the two solutions to the
equation are &lsquo;<samp>sqrt(y)</samp>&rsquo; and &lsquo;<samp>-sqrt(y)</samp>&rsquo;.  Another way to
think about it is that the square-root operation is really a
two-valued function; since every Calc function must return a
single result, <code>sqrt</code> chooses to return the positive result.
Then <kbd>H a S</kbd> doctors this result using <code>s1</code> to indicate
the full set of possible values of the mathematical square-root.
</p>
<p>There is a similar phenomenon going the other direction:  Suppose
we solve &lsquo;<samp>sqrt(y) = x</samp>&rsquo; for <code>y</code>.  Calc squares both sides
to get &lsquo;<samp>y = x^2</samp>&rsquo;.  This is correct, except that it introduces
some dubious solutions.  Consider solving &lsquo;<samp>sqrt(y) = -3</samp>&rsquo;:
Calc will report &lsquo;<samp>y = 9</samp>&rsquo; as a valid solution, which is true
in the mathematical sense of square-root, but false (there is no
solution) for the actual Calc positive-valued <code>sqrt</code>.  This
happens for both <kbd>a S</kbd> and <kbd>H a S</kbd>.
</p>
<a name="index-GenCount-variable"></a>
<a name="index-GenCount"></a>
<a name="index-an"></a>
<a name="index-as"></a>
<p>If you store a positive integer in the Calc variable <code>GenCount</code>,
then Calc will generate formulas of the form &lsquo;<samp>as(<var>n</var>)</samp>&rsquo; for
arbitrary signs, and &lsquo;<samp>an(<var>n</var>)</samp>&rsquo; for arbitrary integers,
where <var>n</var> represents successive values taken by incrementing
<code>GenCount</code> by one.  While the normal arbitrary sign and
integer symbols start over at <code>s1</code> and <code>n1</code> with each
new Calc command, the <code>GenCount</code> approach will give each
arbitrary value a name that is unique throughout the entire Calc
session.  Also, the arbitrary values are function calls instead
of variables, which is advantageous in some cases.  For example,
you can make a rewrite rule that recognizes all arbitrary signs
using a pattern like &lsquo;<samp>as(n)</samp>&rsquo;.  The <kbd>s l</kbd> command only works
on variables, but you can use the <kbd>a b</kbd> (<code>calc-substitute</code>)
command to substitute actual values for function calls like &lsquo;<samp>as(3)</samp>&rsquo;.
</p>
<p>The <kbd>s G</kbd> (<code>calc-edit-GenCount</code>) command is a convenient
way to create or edit this variable.  Press <kbd>C-c C-c</kbd> to finish.
</p>
<p>If you have not stored a value in <code>GenCount</code>, or if the value
in that variable is not a positive integer, the regular
<code>s1</code>/<code>n1</code> notation is used.
</p>
<a name="index-I-a-S"></a>
<a name="index-H-I-a-S"></a>
<a name="index-finv"></a>
<a name="index-ffinv"></a>
<p>With the Inverse flag, <kbd>I a S</kbd> [<code>finv</code>] treats the expression
on top of the stack as a function of the specified variable and solves
to find the inverse function, written in terms of the same variable.
For example, <kbd>I a S x</kbd> inverts &lsquo;<samp>2x + 6</samp>&rsquo; to &lsquo;<samp>x/2 - 3</samp>&rsquo;.
You can use both Inverse and Hyperbolic [<code>ffinv</code>] to obtain a
fully general inverse, as described above.
</p>
<a name="index-a-P"></a>
<a name="index-calc_002dpoly_002droots"></a>
<a name="index-roots"></a>
<p>Some equations, specifically polynomials, have a known, finite number
of solutions.  The <kbd>a P</kbd> (<code>calc-poly-roots</code>) [<code>roots</code>]
command uses <kbd>H a S</kbd> to solve an equation in general form, then, for
all arbitrary-sign variables like <code>s1</code>, and all arbitrary-integer
variables like <code>n1</code> for which <code>n1</code> only usefully varies over
a finite range, it expands these variables out to all their possible
values.  The results are collected into a vector, which is returned.
For example, &lsquo;<samp>roots(x^4 = 1, x)</samp>&rsquo; returns the four solutions
&lsquo;<samp>[1, -1, (0, 1), (0, -1)]</samp>&rsquo;.  Generally an <var>n</var>th degree
polynomial will always have <var>n</var> roots on the complex plane.
(If you have given a <code>real</code> declaration for the solution
variable, then only the real-valued solutions, if any, will be
reported; see <a href="#Declarations">Declarations</a>.)
</p>
<p>Note that because <kbd>a P</kbd> uses <kbd>H a S</kbd>, it is able to deliver
symbolic solutions if the polynomial has symbolic coefficients.  Also
note that Calc&rsquo;s solver is not able to get exact symbolic solutions
to all polynomials.  Polynomials containing powers up to &lsquo;<samp>x^4</samp>&rsquo;
can always be solved exactly; polynomials of higher degree sometimes
can be:  &lsquo;<samp>x^6 + x^3 + 1</samp>&rsquo; is converted to &lsquo;<samp>(x^3)^2 + (x^3) + 1</samp>&rsquo;,
which can be solved for &lsquo;<samp>x^3</samp>&rsquo; using the quadratic equation, and then
for &lsquo;<samp>x</samp>&rsquo; by taking cube roots.  But in many cases, like
&lsquo;<samp>x^6 + x + 1</samp>&rsquo;, Calc does not know how to rewrite the polynomial
into a form it can solve.  The <kbd>a P</kbd> command can still deliver a
list of numerical roots, however, provided that Symbolic mode (<kbd>m s</kbd>)
is not turned on.  (If you work with Symbolic mode on, recall that the
<kbd>N</kbd> (<code>calc-eval-num</code>) key is a handy way to reevaluate the
formula on the stack with Symbolic mode temporarily off.)  Naturally,
<kbd>a P</kbd> can only provide numerical roots if the polynomial coefficients
are all numbers (real or complex).
</p>
<hr>
<a name="Solving-Systems-of-Equations"></a>
<div class="header">
<p>
Next: <a href="#Decomposing-Polynomials" accesskey="n" rel="next">Decomposing Polynomials</a>, Previous: <a href="#Multiple-Solutions" accesskey="p" rel="prev">Multiple Solutions</a>, Up: <a href="#Solving-Equations" accesskey="u" rel="up">Solving Equations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Solving-Systems-of-Equations-1"></a>
<h4 class="subsection">10.6.2 Solving Systems of Equations</h4>

<p><a name="index-Systems-of-equations_002c-symbolic"></a>
You can also use the commands described above to solve systems of
simultaneous equations.  Just create a vector of equations, then
specify a vector of variables for which to solve.  (You can omit
the surrounding brackets when entering the vector of variables
at the prompt.)
</p>
<p>For example, putting &lsquo;<samp>[x + y = a, x - y = b]</samp>&rsquo; on the stack
and typing <kbd>a S x,y <span class="key">RET</span></kbd> produces the vector of solutions
&lsquo;<samp>[x = a - (a-b)/2, y = (a-b)/2]</samp>&rsquo;.  The result vector will
have the same length as the variables vector, and the variables
will be listed in the same order there.  Note that the solutions
are not always simplified as far as possible; the solution for
&lsquo;<samp>x</samp>&rsquo; here could be improved by an application of the <kbd>a n</kbd>
command.
</p>
<p>Calc&rsquo;s algorithm works by trying to eliminate one variable at a
time by solving one of the equations for that variable and then
substituting into the other equations.  Calc will try all the
possibilities, but you can speed things up by noting that Calc
first tries to eliminate the first variable with the first
equation, then the second variable with the second equation,
and so on.  It also helps to put the simpler (e.g., more linear)
equations toward the front of the list.  Calc&rsquo;s algorithm will
solve any system of linear equations, and also many kinds of
nonlinear systems.
</p>
<a name="index-elim"></a>
<p>Normally there will be as many variables as equations.  If you
give fewer variables than equations (an &ldquo;over-determined&rdquo; system
of equations), Calc will find a partial solution.  For example,
typing <kbd>a S y <span class="key">RET</span></kbd> with the above system of equations
would produce &lsquo;<samp>[y = a - x]</samp>&rsquo;.  There are now several ways to
express this solution in terms of the original variables; Calc uses
the first one that it finds.  You can control the choice by adding
variable specifiers of the form &lsquo;<samp>elim(<var>v</var>)</samp>&rsquo; to the
variables list.  This says that <var>v</var> should be eliminated from
the equations; the variable will not appear at all in the solution.
For example, typing <kbd>a S y,elim(x)</kbd> would yield
&lsquo;<samp>[y = a - (b+a)/2]</samp>&rsquo;.
</p>
<p>If the variables list contains only <code>elim</code> specifiers,
Calc simply eliminates those variables from the equations
and then returns the resulting set of equations.  For example,
<kbd>a S elim(x)</kbd> produces &lsquo;<samp>[a - 2 y = b]</samp>&rsquo;.  Every variable
eliminated will reduce the number of equations in the system
by one.
</p>
<p>Again, <kbd>a S</kbd> gives you one solution to the system of
equations.  If there are several solutions, you can use <kbd>H a S</kbd>
to get a general family of solutions, or, if there is a finite
number of solutions, you can use <kbd>a P</kbd> to get a list.  (In
the latter case, the result will take the form of a matrix where
the rows are different solutions and the columns correspond to the
variables you requested.)
</p>
<p>Another way to deal with certain kinds of overdetermined systems of
equations is the <kbd>a F</kbd> command, which does least-squares fitting
to satisfy the equations.  See <a href="#Curve-Fitting">Curve Fitting</a>.
</p>
<hr>
<a name="Decomposing-Polynomials"></a>
<div class="header">
<p>
Previous: <a href="#Solving-Systems-of-Equations" accesskey="p" rel="prev">Solving Systems of Equations</a>, Up: <a href="#Solving-Equations" accesskey="u" rel="up">Solving Equations</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Decomposing-Polynomials-1"></a>
<h4 class="subsection">10.6.3 Decomposing Polynomials</h4>

<p><a name="index-poly"></a>
The <code>poly</code> function takes a polynomial and a variable as
arguments, and returns a vector of polynomial coefficients (constant
coefficient first).  For example, &lsquo;<samp>poly(x^3 + 2 x, x)</samp>&rsquo; returns
&lsquo;<samp>[0, 2, 0, 1]</samp>&rsquo;.  If the input is not a polynomial in &lsquo;<samp>x</samp>&rsquo;,
the call to <code>poly</code> is left in symbolic form.  If the input does
not involve the variable &lsquo;<samp>x</samp>&rsquo;, the input is returned in a list
of length one, representing a polynomial with only a constant
coefficient.  The call &lsquo;<samp>poly(x, x)</samp>&rsquo; returns the vector &lsquo;<samp>[0, 1]</samp>&rsquo;.
The last element of the returned vector is guaranteed to be nonzero;
note that &lsquo;<samp>poly(0, x)</samp>&rsquo; returns the empty vector &lsquo;<samp>[]</samp>&rsquo;.
Note also that &lsquo;<samp>x</samp>&rsquo; may actually be any formula; for example,
&lsquo;<samp>poly(sin(x)^2 - sin(x) + 3, sin(x))</samp>&rsquo; returns &lsquo;<samp>[3, -1, 1]</samp>&rsquo;.
</p>
<a name="index-Coefficients-of-polynomial"></a>
<a name="index-Degree-of-polynomial"></a>
<p>To get the &lsquo;<samp>x^k</samp>&rsquo; coefficient of polynomial &lsquo;<samp>p</samp>&rsquo;, use
&lsquo;<samp>poly(p, x)_(k+1)</samp>&rsquo;.  To get the degree of polynomial &lsquo;<samp>p</samp>&rsquo;,
use &lsquo;<samp>vlen(poly(p, x)) - 1</samp>&rsquo;.  For example, &lsquo;<samp>poly((x+1)^4, x)</samp>&rsquo;
returns &lsquo;<samp>[1, 4, 6, 4, 1]</samp>&rsquo;, so &lsquo;<samp>poly((x+1)^4, x)_(2+1)</samp>&rsquo;
gives the &lsquo;<samp>x^2</samp>&rsquo; coefficient of this polynomial, 6.
</p>
<a name="index-gpoly"></a>
<p>One important feature of the solver is its ability to recognize
formulas which are &ldquo;essentially&rdquo; polynomials.  This ability is
made available to the user through the <code>gpoly</code> function, which
is used just like <code>poly</code>:  &lsquo;<samp>gpoly(<var>expr</var>, <var>var</var>)</samp>&rsquo;.
If <var>expr</var> is a polynomial in some term which includes <var>var</var>, then
this function will return a vector &lsquo;<samp>[<var>x</var>, <var>c</var>, <var>a</var>]</samp>&rsquo;
where <var>x</var> is the term that depends on <var>var</var>, <var>c</var> is a
vector of polynomial coefficients (like the one returned by <code>poly</code>),
and <var>a</var> is a multiplier which is usually 1.  Basically,
&lsquo;<samp><var>expr</var> = <var>a</var>*(<var>c</var>_1 + <var>c</var>_2 <var>x</var> +
<var>c</var>_3 <var>x</var>^2 + ...)</samp>&rsquo;.  The last element of <var>c</var> is
guaranteed to be non-zero, and <var>c</var> will not equal &lsquo;<samp>[1]</samp>&rsquo;
(i.e., the trivial decomposition <var>expr</var> = <var>x</var> is not
considered a polynomial).  One side effect is that &lsquo;<samp>gpoly(x, x)</samp>&rsquo;
and &lsquo;<samp>gpoly(6, x)</samp>&rsquo;, both of which might be expected to recognize
their arguments as polynomials, will not because the decomposition
is considered trivial.
</p>
<p>For example, &lsquo;<samp>gpoly((x-2)^2, x)</samp>&rsquo; returns &lsquo;<samp>[x, [4, -4, 1], 1]</samp>&rsquo;,
since the expanded form of this polynomial is &lsquo;<samp>4 - 4 x + x^2</samp>&rsquo;.
</p>
<p>The term <var>x</var> may itself be a polynomial in <var>var</var>.  This is
done to reduce the size of the <var>c</var> vector.  For example,
&lsquo;<samp>gpoly(x^4 + x^2 - 1, x)</samp>&rsquo; returns &lsquo;<samp>[x^2, [-1, 1, 1], 1]</samp>&rsquo;,
since a quadratic polynomial in &lsquo;<samp>x^2</samp>&rsquo; is easier to solve than
a quartic polynomial in &lsquo;<samp>x</samp>&rsquo;.
</p>
<p>A few more examples of the kinds of polynomials <code>gpoly</code> can
discover:
</p>
<div class="smallexample">
<pre class="smallexample">sin(x) - 1               [sin(x), [-1, 1], 1]
x + 1/x - 1              [x, [1, -1, 1], 1/x]
x + 1/x                  [x^2, [1, 1], 1/x]
x^3 + 2 x                [x^2, [2, 1], x]
x + x^2:3 + sqrt(x)      [x^1:6, [1, 1, 0, 1], x^1:2]
x^(2a) + 2 x^a + 5       [x^a, [5, 2, 1], 1]
(exp(-x) + exp(x)) / 2   [e^(2 x), [0.5, 0.5], e^-x]
</pre></div>

<p>The <code>poly</code> and <code>gpoly</code> functions accept a third integer argument
which specifies the largest degree of polynomial that is acceptable.
If this is &lsquo;<samp>n</samp>&rsquo;, then only <var>c</var> vectors of length &lsquo;<samp>n+1</samp>&rsquo;
or less will be returned.  Otherwise, the <code>poly</code> or <code>gpoly</code>
call will remain in symbolic form.  For example, the equation solver
can handle quartics and smaller polynomials, so it calls
&lsquo;<samp>gpoly(<var>expr</var>, <var>var</var>, 4)</samp>&rsquo; to discover whether <var>expr</var>
can be treated by its linear, quadratic, cubic, or quartic formulas.
</p>
<a name="index-pdeg"></a>
<p>The <code>pdeg</code> function computes the degree of a polynomial;
&lsquo;<samp>pdeg(p,x)</samp>&rsquo; is the highest power of <code>x</code> that appears in
<code>p</code>.  This is the same as &lsquo;<samp>vlen(poly(p,x))-1</samp>&rsquo;, but is
much more efficient.  If <code>p</code> is constant with respect to <code>x</code>,
then &lsquo;<samp>pdeg(p,x) = 0</samp>&rsquo;.  If <code>p</code> is not a polynomial in <code>x</code>
(e.g., &lsquo;<samp>pdeg(2 cos(x), x)</samp>&rsquo;, the function remains unevaluated.
It is possible to omit the second argument <code>x</code>, in which case
&lsquo;<samp>pdeg(p)</samp>&rsquo; returns the highest total degree of any term of the
polynomial, counting all variables that appear in <code>p</code>.  Note
that <code>pdeg(c) = pdeg(c,x) = 0</code> for any nonzero constant <code>c</code>;
the degree of the constant zero is considered to be <code>-inf</code>
(minus infinity).
</p>
<a name="index-plead"></a>
<p>The <code>plead</code> function finds the leading term of a polynomial.
Thus &lsquo;<samp>plead(p,x)</samp>&rsquo; is equivalent to &lsquo;<samp>poly(p,x)_vlen(poly(p,x))</samp>&rsquo;,
though again more efficient.  In particular, &lsquo;<samp>plead((2x+1)^10, x)</samp>&rsquo;
returns 1024 without expanding out the list of coefficients.  The
value of <code>plead(p,x)</code> will be zero only if &lsquo;<samp>p = 0</samp>&rsquo;.
</p>
<a name="index-pcont"></a>
<p>The <code>pcont</code> function finds the <em>content</em> of a polynomial.  This
is the greatest common divisor of all the coefficients of the polynomial.
With two arguments, <code>pcont(p,x)</code> effectively uses &lsquo;<samp>poly(p,x)</samp>&rsquo;
to get a list of coefficients, then uses <code>pgcd</code> (the polynomial
GCD function) to combine these into an answer.  For example,
&lsquo;<samp>pcont(4 x y^2 + 6 x^2 y, x)</samp>&rsquo; is &lsquo;<samp>2 y</samp>&rsquo;.  The content is
basically the &ldquo;biggest&rdquo; polynomial that can be divided into <code>p</code>
exactly.  The sign of the content is the same as the sign of the leading
coefficient.
</p>
<p>With only one argument, &lsquo;<samp>pcont(p)</samp>&rsquo; computes the numerical
content of the polynomial, i.e., the <code>gcd</code> of the numerical
coefficients of all the terms in the formula.  Note that <code>gcd</code>
is defined on rational numbers as well as integers; it computes
the <code>gcd</code> of the numerators and the <code>lcm</code> of the
denominators.  Thus &lsquo;<samp>pcont(4:3 x y^2 + 6 x^2 y)</samp>&rsquo; returns 2:3.
Dividing the polynomial by this number will clear all the
denominators, as well as dividing by any common content in the
numerators.  The numerical content of a polynomial is negative only
if all the coefficients in the polynomial are negative.
</p>
<a name="index-pprim"></a>
<p>The <code>pprim</code> function finds the <em>primitive part</em> of a
polynomial, which is simply the polynomial divided (using <code>pdiv</code>
if necessary) by its content.  If the input polynomial has rational
coefficients, the result will have integer coefficients in simplest
terms.
</p>
<hr>
<a name="Numerical-Solutions"></a>
<div class="header">
<p>
Next: <a href="#Curve-Fitting" accesskey="n" rel="next">Curve Fitting</a>, Previous: <a href="#Solving-Equations" accesskey="p" rel="prev">Solving Equations</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Numerical-Solutions-1"></a>
<h3 class="section">10.7 Numerical Solutions</h3>

<p>Not all equations can be solved symbolically.  The commands in this
section use numerical algorithms that can find a solution to a specific
instance of an equation to any desired accuracy.  Note that the
numerical commands are slower than their algebraic cousins; it is a
good idea to try <kbd>a S</kbd> before resorting to these commands.
</p>
<p>(See <a href="#Curve-Fitting">Curve Fitting</a>, for some other, more specialized, operations
on numerical data.)
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Root-Finding" accesskey="1">Root Finding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Minimization" accesskey="2">Minimization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Numerical-Systems-of-Equations" accesskey="3">Numerical Systems of Equations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Root-Finding"></a>
<div class="header">
<p>
Next: <a href="#Minimization" accesskey="n" rel="next">Minimization</a>, Previous: <a href="#Numerical-Solutions" accesskey="p" rel="prev">Numerical Solutions</a>, Up: <a href="#Numerical-Solutions" accesskey="u" rel="up">Numerical Solutions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Root-Finding-1"></a>
<h4 class="subsection">10.7.1 Root Finding</h4>

<p><a name="index-a-R"></a>
<a name="index-calc_002dfind_002droot"></a>
<a name="index-root"></a>
<a name="index-Newton_0027s-method"></a>
<a name="index-Roots-of-equations"></a>
<a name="index-Numerical-root_002dfinding"></a>
The <kbd>a R</kbd> (<code>calc-find-root</code>) [<code>root</code>] command finds a
numerical solution (or <em>root</em>) of an equation.  (This command treats
inequalities the same as equations.  If the input is any other kind
of formula, it is interpreted as an equation of the form &lsquo;<samp>X = 0</samp>&rsquo;.)
</p>
<p>The <kbd>a R</kbd> command requires an initial guess on the top of the
stack, and a formula in the second-to-top position.  It prompts for a
solution variable, which must appear in the formula.  All other variables
that appear in the formula must have assigned values, i.e., when
a value is assigned to the solution variable and the formula is
evaluated with <kbd>=</kbd>, it should evaluate to a number.  Any assigned
value for the solution variable itself is ignored and unaffected by
this command.
</p>
<p>When the command completes, the initial guess is replaced on the stack
by a vector of two numbers:  The value of the solution variable that
solves the equation, and the difference between the lefthand and
righthand sides of the equation at that value.  Ordinarily, the second
number will be zero or very nearly zero.  (Note that Calc uses a
slightly higher precision while finding the root, and thus the second
number may be slightly different from the value you would compute from
the equation yourself.)
</p>
<p>The <kbd>v h</kbd> (<code>calc-head</code>) command is a handy way to extract
the first element of the result vector, discarding the error term.
</p>
<p>The initial guess can be a real number, in which case Calc searches
for a real solution near that number, or a complex number, in which
case Calc searches the whole complex plane near that number for a
solution, or it can be an interval form which restricts the search
to real numbers inside that interval.
</p>
<p>Calc tries to use <kbd>a d</kbd> to take the derivative of the equation.
If this succeeds, it uses Newton&rsquo;s method.  If the equation is not
differentiable Calc uses a bisection method.  (If Newton&rsquo;s method
appears to be going astray, Calc switches over to bisection if it
can, or otherwise gives up.  In this case it may help to try again
with a slightly different initial guess.)  If the initial guess is a
complex number, the function must be differentiable.
</p>
<p>If the formula (or the difference between the sides of an equation)
is negative at one end of the interval you specify and positive at
the other end, the root finder is guaranteed to find a root.
Otherwise, Calc subdivides the interval into small parts looking for
positive and negative values to bracket the root.  When your guess is
an interval, Calc will not look outside that interval for a root.
</p>
<a name="index-H-a-R"></a>
<a name="index-wroot"></a>
<p>The <kbd>H a R</kbd> [<code>wroot</code>] command is similar to <kbd>a R</kbd>, except
that if the initial guess is an interval for which the function has
the same sign at both ends, then rather than subdividing the interval
Calc attempts to widen it to enclose a root.  Use this mode if
you are not sure if the function has a root in your interval.
</p>
<p>If the function is not differentiable, and you give a simple number
instead of an interval as your initial guess, Calc uses this widening
process even if you did not type the Hyperbolic flag.  (If the function
<em>is</em> differentiable, Calc uses Newton&rsquo;s method which does not
require a bounding interval in order to work.)
</p>
<p>If Calc leaves the <code>root</code> or <code>wroot</code> function in symbolic
form on the stack, it will normally display an explanation for why
no root was found.  If you miss this explanation, press <kbd>w</kbd>
(<code>calc-why</code>) to get it back.
</p>
<hr>
<a name="Minimization"></a>
<div class="header">
<p>
Next: <a href="#Numerical-Systems-of-Equations" accesskey="n" rel="next">Numerical Systems of Equations</a>, Previous: <a href="#Root-Finding" accesskey="p" rel="prev">Root Finding</a>, Up: <a href="#Numerical-Solutions" accesskey="u" rel="up">Numerical Solutions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Minimization-1"></a>
<h4 class="subsection">10.7.2 Minimization</h4>

<p><a name="index-a-N"></a>
<a name="index-H-a-N"></a>
<a name="index-a-X"></a>
<a name="index-H-a-X"></a>
<a name="index-calc_002dfind_002dminimum"></a>
<a name="index-calc_002dfind_002dmaximum"></a>
<a name="index-minimize"></a>
<a name="index-maximize"></a>
<a name="index-Minimization_002c-numerical"></a>
The <kbd>a N</kbd> (<code>calc-find-minimum</code>) [<code>minimize</code>] command
finds a minimum value for a formula.  It is very similar in operation
to <kbd>a R</kbd> (<code>calc-find-root</code>):  You give the formula and an initial
guess on the stack, and are prompted for the name of a variable.  The guess
may be either a number near the desired minimum, or an interval enclosing
the desired minimum.  The function returns a vector containing the
value of the variable which minimizes the formula&rsquo;s value, along
with the minimum value itself.
</p>
<p>Note that this command looks for a <em>local</em> minimum.  Many functions
have more than one minimum; some, like
&lsquo;<samp>x sin(x)</samp>&rsquo;,
have infinitely many.  In fact, there is no easy way to define the
&ldquo;global&rdquo; minimum of
&lsquo;<samp>x sin(x)</samp>&rsquo;
but Calc can still locate any particular local minimum
for you.  Calc basically goes downhill from the initial guess until it
finds a point at which the function&rsquo;s value is greater both to the left
and to the right.  Calc does not use derivatives when minimizing a function.
</p>
<p>If your initial guess is an interval and it looks like the minimum
occurs at one or the other endpoint of the interval, Calc will return
that endpoint only if that endpoint is closed; thus, minimizing &lsquo;<samp>17 x</samp>&rsquo;
over &lsquo;<samp>[2..3]</samp>&rsquo; will return &lsquo;<samp>[2, 38]</samp>&rsquo;, but minimizing over
&lsquo;<samp>(2..3]</samp>&rsquo; would report no minimum found.  In general, you should
use closed intervals to find literally the minimum value in that
range of &lsquo;<samp>x</samp>&rsquo;, or open intervals to find the local minimum, if
any, that happens to lie in that range.
</p>
<p>Most functions are smooth and flat near their minimum values.  Because
of this flatness, if the current precision is, say, 12 digits, the
variable can only be determined meaningfully to about six digits.  Thus
you should set the precision to twice as many digits as you need in your
answer.
</p>
<a name="index-wminimize"></a>
<a name="index-wmaximize"></a>
<p>The <kbd>H a N</kbd> [<code>wminimize</code>] command, analogously to <kbd>H a R</kbd>,
expands the guess interval to enclose a minimum rather than requiring
that the minimum lie inside the interval you supply.
</p>
<p>The <kbd>a X</kbd> (<code>calc-find-maximum</code>) [<code>maximize</code>] and
<kbd>H a X</kbd> [<code>wmaximize</code>] commands effectively minimize the
negative of the formula you supply.
</p>
<p>The formula must evaluate to a real number at all points inside the
interval (or near the initial guess if the guess is a number).  If
the initial guess is a complex number the variable will be minimized
over the complex numbers; if it is real or an interval it will
be minimized over the reals.
</p>
<hr>
<a name="Numerical-Systems-of-Equations"></a>
<div class="header">
<p>
Previous: <a href="#Minimization" accesskey="p" rel="prev">Minimization</a>, Up: <a href="#Numerical-Solutions" accesskey="u" rel="up">Numerical Solutions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Systems-of-Equations"></a>
<h4 class="subsection">10.7.3 Systems of Equations</h4>

<p><a name="index-Systems-of-equations_002c-numerical"></a>
The <kbd>a R</kbd> command can also solve systems of equations.  In this
case, the equation should instead be a vector of equations, the
guess should instead be a vector of numbers (intervals are not
supported), and the variable should be a vector of variables.  You
can omit the brackets while entering the list of variables.  Each
equation must be differentiable by each variable for this mode to
work.  The result will be a vector of two vectors:  The variable
values that solved the system of equations, and the differences
between the sides of the equations with those variable values.
There must be the same number of equations as variables.  Since
only plain numbers are allowed as guesses, the Hyperbolic flag has
no effect when solving a system of equations.
</p>
<p>It is also possible to minimize over many variables with <kbd>a N</kbd>
(or maximize with <kbd>a X</kbd>).  Once again the variable name should
be replaced by a vector of variables, and the initial guess should
be an equal-sized vector of initial guesses.  But, unlike the case of
multidimensional <kbd>a R</kbd>, the formula being minimized should
still be a single formula, <em>not</em> a vector.  Beware that
multidimensional minimization is currently <em>very</em> slow.
</p>
<hr>
<a name="Curve-Fitting"></a>
<div class="header">
<p>
Next: <a href="#Summations" accesskey="n" rel="next">Summations</a>, Previous: <a href="#Numerical-Solutions" accesskey="p" rel="prev">Numerical Solutions</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Curve-Fitting-1"></a>
<h3 class="section">10.8 Curve Fitting</h3>

<p>The <kbd>a F</kbd> command fits a set of data to a <em>model formula</em>,
such as &lsquo;<samp>y = m x + b</samp>&rsquo; where &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are parameters
to be determined.  For a typical set of measured data there will be
no single &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; that exactly fit the data; in this
case, Calc chooses values of the parameters that provide the closest
possible fit.  The model formula can be entered in various ways after
the key sequence <kbd>a F</kbd> is pressed.
</p>
<p>If the letter <kbd>P</kbd> is pressed after <kbd>a F</kbd> but before the model
description is entered, the data as well as the model formula will be
plotted after the formula is determined.  This will be indicated by a
&ldquo;P&rdquo; in the minibuffer after the help message.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Linear-Fits" accesskey="1">Linear Fits</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Polynomial-and-Multilinear-Fits" accesskey="2">Polynomial and Multilinear Fits</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Error-Estimates-for-Fits" accesskey="3">Error Estimates for Fits</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Nonlinear-Models" accesskey="4">Standard Nonlinear Models</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Curve-Fitting-Details" accesskey="5">Curve Fitting Details</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Interpolation" accesskey="6">Interpolation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Linear-Fits"></a>
<div class="header">
<p>
Next: <a href="#Polynomial-and-Multilinear-Fits" accesskey="n" rel="next">Polynomial and Multilinear Fits</a>, Previous: <a href="#Curve-Fitting" accesskey="p" rel="prev">Curve Fitting</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Linear-Fits-1"></a>
<h4 class="subsection">10.8.1 Linear Fits</h4>

<p><a name="index-a-F"></a>
<a name="index-calc_002dcurve_002dfit"></a>
<a name="index-fit"></a>
<a name="index-Linear-regression"></a>
<a name="index-Least_002dsquares-fits"></a>
The <kbd>a F</kbd> (<code>calc-curve-fit</code>) [<code>fit</code>] command attempts
to fit a set of data (&lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; vectors of numbers) to a
straight line, polynomial, or other function of &lsquo;<samp>x</samp>&rsquo;.  For the
moment we will consider only the case of fitting to a line, and we
will ignore the issue of whether or not the model was in fact a good
fit for the data.
</p>
<p>In a standard linear least-squares fit, we have a set of &lsquo;<samp>(x,y)</samp>&rsquo;
data points that we wish to fit to the model &lsquo;<samp>y = m x + b</samp>&rsquo;
by adjusting the parameters &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; to make the &lsquo;<samp>y</samp>&rsquo;
values calculated from the formula be as close as possible to the actual
&lsquo;<samp>y</samp>&rsquo; values in the data set.  (In a polynomial fit, the model is
instead, say, &lsquo;<samp>y = a x^3 + b x^2 + c x + d</samp>&rsquo;.  In a multilinear fit,
we have data points of the form &lsquo;<samp>(x_1,x_2,x_3,y)</samp>&rsquo; and our model is
&lsquo;<samp>y = a x_1 + b x_2 + c x_3 + d</samp>&rsquo;.  These will be discussed later.)
</p>
<p>In the model formula, variables like &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>x_2</samp>&rsquo; are called
the <em>independent variables</em>, and &lsquo;<samp>y</samp>&rsquo; is the <em>dependent
variable</em>.  Variables like &lsquo;<samp>m</samp>&rsquo;, &lsquo;<samp>a</samp>&rsquo;, and &lsquo;<samp>b</samp>&rsquo; are called
the <em>parameters</em> of the model.
</p>
<p>The <kbd>a F</kbd> command takes the data set to be fitted from the stack.
By default, it expects the data in the form of a matrix.  For example,
for a linear or polynomial fit, this would be a
2xN
matrix where the first row is a list of &lsquo;<samp>x</samp>&rsquo; values and the second
row has the corresponding &lsquo;<samp>y</samp>&rsquo; values.  For the multilinear fit
shown above, the matrix would have four rows (&lsquo;<samp>x_1</samp>&rsquo;, &lsquo;<samp>x_2</samp>&rsquo;,
&lsquo;<samp>x_3</samp>&rsquo;, and &lsquo;<samp>y</samp>&rsquo;, respectively).
</p>
<p>If you happen to have an
Nx2
matrix instead of a
2xN
matrix, just press <kbd>v t</kbd> first to transpose the matrix.
</p>
<p>After you type <kbd>a F</kbd>, Calc prompts you to select a model.  For a
linear fit, press the digit <kbd>1</kbd>.
</p>
<p>Calc then prompts for you to name the variables.  By default it chooses
high letters like &lsquo;<samp>x</samp>&rsquo; and &lsquo;<samp>y</samp>&rsquo; for independent variables and
low letters like &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; for parameters.  (The dependent
variable doesn&rsquo;t need a name.)  The two kinds of variables are separated
by a semicolon.  Since you generally care more about the names of the
independent variables than of the parameters, Calc also allows you to
name only those and let the parameters use default names.
</p>
<p>For example, suppose the data matrix
</p>
<div class="example">
<pre class="example">[ [ 1, 2, 3, 4,  5  ]
  [ 5, 7, 9, 11, 13 ] ]
</pre></div>

<p>is on the stack and we wish to do a simple linear fit.  Type
<kbd>a F</kbd>, then <kbd>1</kbd> for the model, then <tt class="key">RET</tt> to use
the default names.  The result will be the formula &lsquo;<samp>3. + 2. x</samp>&rsquo;
on the stack.  Calc has created the model expression <kbd>a + b x</kbd>,
then found the optimal values of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; to fit the
data.  (In this case, it was able to find an exact fit.)  Calc then
substituted those values for &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; in the model
formula.
</p>
<p>The <kbd>a F</kbd> command puts two entries in the trail.  One is, as
always, a copy of the result that went to the stack; the other is
a vector of the actual parameter values, written as equations:
&lsquo;<samp>[a = 3, b = 2]</samp>&rsquo;, in case you&rsquo;d rather read them in a list
than pick them out of the formula.  (You can type <kbd>t y</kbd>
to move this vector to the stack; see <a href="#Trail-Commands">Trail Commands</a>.
</p>
<p>Specifying a different independent variable name will affect the
resulting formula: <kbd>a F 1 k <span class="key">RET</span></kbd> produces <kbd>3 + 2 k</kbd>.
Changing the parameter names (say, <kbd>a F 1 k;b,m <span class="key">RET</span></kbd>) will affect
the equations that go into the trail.
</p>

<p>To see what happens when the fit is not exact, we could change
the number 13 in the data matrix to 14 and try the fit again.
The result is:
</p>
<div class="example">
<pre class="example">2.6 + 2.2 x
</pre></div>

<p>Evaluating this formula, say with <kbd>v x 5 <span class="key">RET</span> <span class="key">TAB</span> V M $ <span class="key">RET</span></kbd>, shows
a reasonably close match to the y-values in the data.
</p>
<div class="example">
<pre class="example">[4.8, 7., 9.2, 11.4, 13.6]
</pre></div>

<p>Since there is no line which passes through all the <var>n</var> data points,
Calc has chosen a line that best approximates the data points using
the method of least squares.  The idea is to define the <em>chi-square</em>
error measure
</p>
<div class="example">
<pre class="example">chi^2 = sum((y_i - (a + b x_i))^2, i, 1, N)
</pre></div>

<p>which is clearly zero if &lsquo;<samp>a + b x</samp>&rsquo; exactly fits all data points,
and increases as various &lsquo;<samp>a + b x_i</samp>&rsquo; values fail to match the
corresponding &lsquo;<samp>y_i</samp>&rsquo; values.  There are several reasons why the
summand is squared, one of them being to ensure that
&lsquo;<samp>chi^2 &gt;= 0</samp>&rsquo;.
Least-squares fitting simply chooses the values of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;
for which the error
&lsquo;<samp>chi^2</samp>&rsquo;
is as small as possible.
</p>
<p>Other kinds of models do the same thing but with a different model
formula in place of &lsquo;<samp>a + b x_i</samp>&rsquo;.
</p>

<p>A numeric prefix argument causes the <kbd>a F</kbd> command to take the
data in some other form than one big matrix.  A positive argument <var>n</var>
will take <var>N</var> items from the stack, corresponding to the <var>n</var> rows
of a data matrix.  In the linear case, <var>n</var> must be 2 since there
is always one independent variable and one dependent variable.
</p>
<p>A prefix of zero or plain <kbd>C-u</kbd> is a compromise; Calc takes two
items from the stack, an <var>n</var>-row matrix of &lsquo;<samp>x</samp>&rsquo; values, and a
vector of &lsquo;<samp>y</samp>&rsquo; values.  If there is only one independent variable,
the &lsquo;<samp>x</samp>&rsquo; values can be either a one-row matrix or a plain vector,
in which case the <kbd>C-u</kbd> prefix is the same as a <kbd><span class="nolinebreak">C-u</span>&nbsp;2</kbd><!-- /@w --> prefix.
</p>
<hr>
<a name="Polynomial-and-Multilinear-Fits"></a>
<div class="header">
<p>
Next: <a href="#Error-Estimates-for-Fits" accesskey="n" rel="next">Error Estimates for Fits</a>, Previous: <a href="#Linear-Fits" accesskey="p" rel="prev">Linear Fits</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Polynomial-and-Multilinear-Fits-1"></a>
<h4 class="subsection">10.8.2 Polynomial and Multilinear Fits</h4>

<p>To fit the data to higher-order polynomials, just type one of the
digits <kbd>2</kbd> through <kbd>9</kbd> when prompted for a model.  For example,
we could fit the original data matrix from the previous section
(with 13, not 14) to a parabola instead of a line by typing
<kbd>a F 2 <span class="key">RET</span></kbd>.
</p>
<div class="example">
<pre class="example">2.00000000001 x - 1.5e-12 x^2 + 2.99999999999
</pre></div>

<p>Note that since the constant and linear terms are enough to fit the
data exactly, it&rsquo;s no surprise that Calc chose a tiny contribution
for &lsquo;<samp>x^2</samp>&rsquo;.  (The fact that it&rsquo;s not exactly zero is due only
to roundoff error.  Since our data are exact integers, we could get
an exact answer by typing <kbd>m f</kbd> first to get Fraction mode.
Then the &lsquo;<samp>x^2</samp>&rsquo; term would vanish altogether.  Usually, though,
the data being fitted will be approximate floats so Fraction mode
won&rsquo;t help.)
</p>
<p>Doing the <kbd>a F 2</kbd> fit on the data set with 14 instead of 13
gives a much larger &lsquo;<samp>x^2</samp>&rsquo; contribution, as Calc bends the
line slightly to improve the fit.
</p>
<div class="example">
<pre class="example">0.142857142855 x^2 + 1.34285714287 x + 3.59999999998
</pre></div>

<p>An important result from the theory of polynomial fitting is that it
is always possible to fit <var>n</var> data points exactly using a polynomial
of degree <i><var>n</var>-1</i>, sometimes called an <em>interpolating polynomial</em>.
Using the modified (14) data matrix, a model number of 4 gives
a polynomial that exactly matches all five data points:
</p>
<div class="example">
<pre class="example">0.04167 x^4 - 0.4167 x^3 + 1.458 x^2 - 0.08333 x + 4.
</pre></div>

<p>The actual coefficients we get with a precision of 12, like
&lsquo;<samp>0.0416666663588</samp>&rsquo;, clearly suffer from loss of precision.
It is a good idea to increase the working precision to several
digits beyond what you need when you do a fitting operation.
Or, if your data are exact, use Fraction mode to get exact
results.
</p>
<p>You can type <kbd>i</kbd> instead of a digit at the model prompt to fit
the data exactly to a polynomial.  This just counts the number of
columns of the data matrix to choose the degree of the polynomial
automatically.
</p>
<p>Fitting data &ldquo;exactly&rdquo; to high-degree polynomials is not always
a good idea, though.  High-degree polynomials have a tendency to
wiggle uncontrollably in between the fitting data points.  Also,
if the exact-fit polynomial is going to be used to interpolate or
extrapolate the data, it is numerically better to use the <kbd>a p</kbd>
command described below.  See <a href="#Interpolation">Interpolation</a>.
</p>

<p>Another generalization of the linear model is to assume the
&lsquo;<samp>y</samp>&rsquo; values are a sum of linear contributions from several
&lsquo;<samp>x</samp>&rsquo; values.  This is a <em>multilinear</em> fit, and it is also
selected by the <kbd>1</kbd> digit key.  (Calc decides whether the fit
is linear or multilinear by counting the rows in the data matrix.)
</p>
<p>Given the data matrix,
</p>
<div class="example">
<pre class="example">[ [  1,   2,   3,    4,   5  ]
  [  7,   2,   3,    5,   2  ]
  [ 14.5, 15, 18.5, 22.5, 24 ] ]
</pre></div>

<p>the command <kbd>a F 1 <span class="key">RET</span></kbd> will call the first row &lsquo;<samp>x</samp>&rsquo; and the
second row &lsquo;<samp>y</samp>&rsquo;, and will fit the values in the third row to the
model &lsquo;<samp>a + b x + c y</samp>&rsquo;.
</p>
<div class="example">
<pre class="example">8. + 3. x + 0.5 y
</pre></div>

<p>Calc can do multilinear fits with any number of independent variables
(i.e., with any number of data rows).
</p>

<p>Yet another variation is <em>homogeneous</em> linear models, in which
the constant term is known to be zero.  In the linear case, this
means the model formula is simply &lsquo;<samp>a x</samp>&rsquo;; in the multilinear
case, the model might be &lsquo;<samp>a x + b y + c z</samp>&rsquo;; and in the polynomial
case, the model could be &lsquo;<samp>a x + b x^2 + c x^3</samp>&rsquo;.  You can get
a homogeneous linear or multilinear model by pressing the letter
<kbd>h</kbd> followed by a regular model key, like <kbd>1</kbd> or <kbd>2</kbd>.
This will be indicated by an &ldquo;h&rdquo; in the minibuffer after the help
message.
</p>
<p>It is certainly possible to have other constrained linear models,
like &lsquo;<samp>2.3 + a x</samp>&rsquo; or &lsquo;<samp>a - 4 x</samp>&rsquo;.  While there is no single
key to select models like these, a later section shows how to enter
any desired model by hand.  In the first case, for example, you
would enter <kbd>a F ' 2.3 + a x</kbd>.
</p>
<p>Another class of models that will work but must be entered by hand
are multinomial fits, e.g., &lsquo;<samp>a + b x + c y + d x^2 + e y^2 + f x y</samp>&rsquo;.
</p>
<hr>
<a name="Error-Estimates-for-Fits"></a>
<div class="header">
<p>
Next: <a href="#Standard-Nonlinear-Models" accesskey="n" rel="next">Standard Nonlinear Models</a>, Previous: <a href="#Polynomial-and-Multilinear-Fits" accesskey="p" rel="prev">Polynomial and Multilinear Fits</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Error-Estimates-for-Fits-1"></a>
<h4 class="subsection">10.8.3 Error Estimates for Fits</h4>

<p><a name="index-H-a-F"></a>
<a name="index-efit"></a>
With the Hyperbolic flag, <kbd>H a F</kbd> [<code>efit</code>] performs the same
fitting operation as <kbd>a F</kbd>, but reports the coefficients as error
forms instead of plain numbers.  Fitting our two data matrices (first
with 13, then with 14) to a line with <kbd>H a F</kbd> gives the results,
</p>
<div class="example">
<pre class="example">3. + 2. x
2.6 +/- 0.382970843103 + 2.2 +/- 0.115470053838 x
</pre></div>

<p>In the first case the estimated errors are zero because the linear
fit is perfect.  In the second case, the errors are nonzero but
moderately small, because the data are still very close to linear.
</p>
<p>It is also possible for the <em>input</em> to a fitting operation to
contain error forms.  The data values must either all include errors
or all be plain numbers.  Error forms can go anywhere but generally
go on the numbers in the last row of the data matrix.  If the last
row contains error forms
&lsquo;<var>y_i</var>&nbsp;<tt><span class="nolinebreak">+/-</span></tt>&nbsp;<!-- /@w --><var>sigma_i</var>&rsquo;,
then the
&lsquo;<samp>chi^2</samp>&rsquo;
statistic is now,
</p>
<div class="example">
<pre class="example">chi^2 = sum(((y_i - (a + b x_i)) / sigma_i)^2, i, 1, N)
</pre></div>

<p>so that data points with larger error estimates contribute less to
the fitting operation.
</p>
<p>If there are error forms on other rows of the data matrix, all the
errors for a given data point are combined; the square root of the
sum of the squares of the errors forms the
&lsquo;<samp>sigma_i</samp>&rsquo;
used for the data point.
</p>
<p>Both <kbd>a F</kbd> and <kbd>H a F</kbd> can accept error forms in the input
matrix, although if you are concerned about error analysis you will
probably use <kbd>H a F</kbd> so that the output also contains error
estimates.
</p>
<p>If the input contains error forms but all the
&lsquo;<samp>sigma_i</samp>&rsquo;
values are the same, it is easy to see that the resulting fitted model
will be the same as if the input did not have error forms at all
(&lsquo;<samp>chi^2</samp>&rsquo;
is simply scaled uniformly by
&lsquo;<samp>1 / sigma^2</samp>&rsquo;,
which doesn&rsquo;t affect where it has a minimum).  But there <em>will</em> be
a difference in the estimated errors of the coefficients reported by
<kbd>H a F</kbd>.
</p>
<p>Consult any text on statistical modeling of data for a discussion
of where these error estimates come from and how they should be
interpreted.
</p>

<a name="index-I-a-F"></a>
<a name="index-xfit"></a>
<p>With the Inverse flag, <kbd>I a F</kbd> [<code>xfit</code>] produces even more
information.  The result is a vector of six items:
</p>
<ol>
<li> The model formula with error forms for its coefficients or
parameters.  This is the result that <kbd>H a F</kbd> would have
produced.

</li><li> A vector of &ldquo;raw&rdquo; parameter values for the model.  These are the
polynomial coefficients or other parameters as plain numbers, in the
same order as the parameters appeared in the final prompt of the
<kbd>I a F</kbd> command.  For polynomials of degree &lsquo;<samp>d</samp>&rsquo;, this vector
will have length &lsquo;<samp>M = d+1</samp>&rsquo; with the constant term first.

</li><li> The covariance matrix &lsquo;<samp>C</samp>&rsquo; computed from the fit.  This is
an <var>m</var>x<var>m</var> symmetric matrix; the diagonal elements
&lsquo;<samp>C_j_j</samp>&rsquo;
are the variances
&lsquo;<samp>sigma_j^2</samp>&rsquo;
of the parameters.  The other elements are covariances
&lsquo;<samp>sigma_i_j^2</samp>&rsquo;
that describe the correlation between pairs of parameters.  (A related
set of numbers, the <em>linear correlation coefficients</em>
&lsquo;<samp>r_i_j</samp>&rsquo;,
are defined as
&lsquo;<samp>sigma_i_j^2 / sigma_i sigma_j</samp>&rsquo;.)

</li><li> A vector of &lsquo;<samp>M</samp>&rsquo; &ldquo;parameter filter&rdquo; functions whose
meanings are described below.  If no filters are necessary this
will instead be an empty vector; this is always the case for the
polynomial and multilinear fits described so far.

</li><li> The value of
&lsquo;<samp>chi^2</samp>&rsquo;
for the fit, calculated by the formulas shown above.  This gives a
measure of the quality of the fit; statisticians consider
&lsquo;<samp>chi^2 = N - M</samp>&rsquo;
to indicate a moderately good fit (where again &lsquo;<samp>N</samp>&rsquo; is the number of
data points and &lsquo;<samp>M</samp>&rsquo; is the number of parameters).

</li><li> A measure of goodness of fit expressed as a probability &lsquo;<samp>Q</samp>&rsquo;.
This is computed from the <code>utpc</code> probability distribution
function using
&lsquo;<samp>chi^2</samp>&rsquo;
with &lsquo;<samp>N - M</samp>&rsquo; degrees of freedom.  A
value of 0.5 implies a good fit; some texts recommend that often
&lsquo;<samp>Q = 0.1</samp>&rsquo; or even 0.001 can signify an acceptable fit.  In
particular,
&lsquo;<samp>chi^2</samp>&rsquo;
statistics assume the errors in your inputs
follow a normal (Gaussian) distribution; if they don&rsquo;t, you may
have to accept smaller values of &lsquo;<samp>Q</samp>&rsquo;.

<p>The &lsquo;<samp>Q</samp>&rsquo; value is computed only if the input included error
estimates.  Otherwise, Calc will report the symbol <code>nan</code>
for &lsquo;<samp>Q</samp>&rsquo;.  The reason is that in this case the
&lsquo;<samp>chi^2</samp>&rsquo;
value has effectively been used to estimate the original errors
in the input, and thus there is no redundant information left
over to use for a confidence test.
</p></li></ol>

<hr>
<a name="Standard-Nonlinear-Models"></a>
<div class="header">
<p>
Next: <a href="#Curve-Fitting-Details" accesskey="n" rel="next">Curve Fitting Details</a>, Previous: <a href="#Error-Estimates-for-Fits" accesskey="p" rel="prev">Error Estimates for Fits</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-Nonlinear-Models-1"></a>
<h4 class="subsection">10.8.4 Standard Nonlinear Models</h4>

<p>The <kbd>a F</kbd> command also accepts other kinds of models besides
lines and polynomials.  Some common models have quick single-key
abbreviations; others must be entered by hand as algebraic formulas.
</p>
<p>Here is a complete list of the standard models recognized by <kbd>a F</kbd>:
</p>
<dl compact="compact">
<dt><kbd>1</kbd></dt>
<dd><p>Linear or multilinear.  <i>a + b x + c y + d z</i>.
</p></dd>
<dt><kbd>2-9</kbd></dt>
<dd><p>Polynomials.  <i>a + b x + c x^2 + d x^3</i>.
</p></dd>
<dt><kbd>e</kbd></dt>
<dd><p>Exponential.  <i>a</i> <tt>exp</tt><i>(b x)</i> <tt>exp</tt><i>(c y)</i>.
</p></dd>
<dt><kbd>E</kbd></dt>
<dd><p>Base-10 exponential.  <i>a</i> <tt>10^</tt><i>(b x)</i> <tt>10^</tt><i>(c y)</i>.
</p></dd>
<dt><kbd>x</kbd></dt>
<dd><p>Exponential (alternate notation).  <tt>exp</tt><i>(a + b x + c y)</i>.
</p></dd>
<dt><kbd>X</kbd></dt>
<dd><p>Base-10 exponential (alternate).  <tt>10^</tt><i>(a + b x + c y)</i>.
</p></dd>
<dt><kbd>l</kbd></dt>
<dd><p>Logarithmic.  <i>a + b</i> <tt>ln</tt><i>(x) + c</i> <tt>ln</tt><i>(y)</i>.
</p></dd>
<dt><kbd>L</kbd></dt>
<dd><p>Base-10 logarithmic.  <i>a + b</i> <tt>log10</tt><i>(x) + c</i> <tt>log10</tt><i>(y)</i>.
</p></dd>
<dt><kbd>^</kbd></dt>
<dd><p>General exponential.  <i>a b^x c^y</i>.
</p></dd>
<dt><kbd>p</kbd></dt>
<dd><p>Power law.  <i>a x^b y^c</i>.
</p></dd>
<dt><kbd>q</kbd></dt>
<dd><p>Quadratic.  <i>a + b (x-c)^2 + d (x-e)^2</i>.
</p></dd>
<dt><kbd>g</kbd></dt>
<dd><p>Gaussian.
<i>(a / b sqrt(2 pi)) exp(-0.5*((x-c)/b)^2)</i>.
</p></dd>
<dt><kbd>s</kbd></dt>
<dd><p>Logistic <em>s</em> curve.
<i>a/(1 + exp(b (x - c)))</i>.
</p></dd>
<dt><kbd>b</kbd></dt>
<dd><p>Logistic bell curve.
<i>a exp(b (x - c))/(1 + exp(b (x - c)))^2</i>.
</p></dd>
<dt><kbd>o</kbd></dt>
<dd><p>Hubbert linearization.
<i>(y/x) = a (1 - x/b)</i>.
</p></dd>
</dl>

<p>All of these models are used in the usual way; just press the appropriate
letter at the model prompt, and choose variable names if you wish.  The
result will be a formula as shown in the above table, with the best-fit
values of the parameters substituted.  (You may find it easier to read
the parameter values from the vector that is placed in the trail.)
</p>
<p>All models except Gaussian, logistics, Hubbert and polynomials can
generalize as shown to any number of independent variables.  Also, all
the built-in models except for the logistic and Hubbert curves have an
additive or multiplicative parameter shown as &lsquo;<samp>a</samp>&rsquo; in the above table
which can be replaced by zero or one, as appropriate, by typing <kbd>h</kbd>
before the model key.
</p>
<p>Note that many of these models are essentially equivalent, but express
the parameters slightly differently.  For example, &lsquo;<samp>a b^x</samp>&rsquo; and
the other two exponential models are all algebraic rearrangements of
each other.  Also, the &ldquo;quadratic&rdquo; model is just a degree-2 polynomial
with the parameters expressed differently.  Use whichever form best
matches the problem.
</p>
<p>The HP-28/48 calculators support four different models for curve
fitting, called <code>LIN</code>, <code>LOG</code>, <code>EXP</code>, and <code>PWR</code>.
These correspond to Calc models &lsquo;<samp>a + b x</samp>&rsquo;, &lsquo;<samp>a + b ln(x)</samp>&rsquo;,
&lsquo;<samp>a exp(b x)</samp>&rsquo;, and &lsquo;<samp>a x^b</samp>&rsquo;, respectively.  In each case,
&lsquo;<samp>a</samp>&rsquo; is what the HP-48 identifies as the &ldquo;intercept,&rdquo; and
&lsquo;<samp>b</samp>&rsquo; is what it calls the &ldquo;slope.&rdquo;
</p>

<p>If the model you want doesn&rsquo;t appear on this list, press <kbd>'</kbd>
(the apostrophe key) at the model prompt to enter any algebraic
formula, such as <kbd>m x - b</kbd>, as the model.  (Not all models
will work, though&mdash;see the next section for details.)
</p>
<p>The model can also be an equation like &lsquo;<samp>y = m x + b</samp>&rsquo;.
In this case, Calc thinks of all the rows of the data matrix on
equal terms; this model effectively has two parameters
(&lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;) and two independent variables (&lsquo;<samp>x</samp>&rsquo;
and &lsquo;<samp>y</samp>&rsquo;), with no &ldquo;dependent&rdquo; variables.  Model equations
do not need to take this &lsquo;<samp>y =</samp>&rsquo; form.  For example, the
implicit line equation &lsquo;<samp>a x + b y = 1</samp>&rsquo; works fine as a
model.
</p>
<p>When you enter a model, Calc makes an alphabetical list of all
the variables that appear in the model.  These are used for the
default parameters, independent variables, and dependent variable
(in that order).  If you enter a plain formula (not an equation),
Calc assumes the dependent variable does not appear in the formula
and thus does not need a name.
</p>
<p>For example, if the model formula has the variables &lsquo;<samp>a,mu,sigma,t,x</samp>&rsquo;,
and the data matrix has three rows (meaning two independent variables),
Calc will use &lsquo;<samp>a,mu,sigma</samp>&rsquo; as the default parameters, and the
data rows will be named &lsquo;<samp>t</samp>&rsquo; and &lsquo;<samp>x</samp>&rsquo;, respectively.  If you
enter an equation instead of a plain formula, Calc will use &lsquo;<samp>a,mu</samp>&rsquo;
as the parameters, and &lsquo;<samp>sigma,t,x</samp>&rsquo; as the three independent
variables.
</p>
<p>You can, of course, override these choices by entering something
different at the prompt.  If you leave some variables out of the list,
those variables must have stored values and those stored values will
be used as constants in the model.  (Stored values for the parameters
and independent variables are ignored by the <kbd>a F</kbd> command.)
If you list only independent variables, all the remaining variables
in the model formula will become parameters.
</p>
<p>If there are <kbd>$</kbd> signs in the model you type, they will stand
for parameters and all other variables (in alphabetical order)
will be independent.  Use <kbd>$</kbd> for one parameter, <kbd>$$</kbd> for
another, and so on.  Thus <kbd>$ x + $$</kbd> is another way to describe
a linear model.
</p>
<p>If you type a <kbd>$</kbd> instead of <kbd>'</kbd> at the model prompt itself,
Calc will take the model formula from the stack.  (The data must then
appear at the second stack level.)  The same conventions are used to
choose which variables in the formula are independent by default and
which are parameters.
</p>
<p>Models taken from the stack can also be expressed as vectors of
two or three elements, &lsquo;<samp>[<var>model</var>, <var>vars</var>]</samp>&rsquo; or
&lsquo;<samp>[<var>model</var>, <var>vars</var>, <var>params</var>]</samp>&rsquo;.  Each of <var>vars</var>
and <var>params</var> may be either a variable or a vector of variables.
(If <var>params</var> is omitted, all variables in <var>model</var> except
those listed as <var>vars</var> are parameters.)
</p>
<p>When you enter a model manually with <kbd>'</kbd>, Calc puts a 3-vector
describing the model in the trail so you can get it back if you wish.
</p>

<a name="index-Model1"></a>
<a name="index-Model2"></a>
<p>Finally, you can store a model in one of the Calc variables
<code>Model1</code> or <code>Model2</code>, then use this model by typing
<kbd>a F u</kbd> or <kbd>a F U</kbd> (respectively).  The value stored in
the variable can be any of the formats that <kbd>a F $</kbd> would
accept for a model on the stack.
</p>

<p>Calc uses the principal values of inverse functions like <code>ln</code>
and <code>arcsin</code> when doing fits.  For example, when you enter
the model &lsquo;<samp>y = sin(a t + b)</samp>&rsquo; Calc actually uses the easier
form &lsquo;<samp>arcsin(y) = a t + b</samp>&rsquo;.  The <code>arcsin</code> function always
returns results in the range from <i>-90</i> to 90 degrees (or the
equivalent range in radians).  Suppose you had data that you
believed to represent roughly three oscillations of a sine wave,
so that the argument of the sine might go from zero to
<i>3*360</i>
degrees.
The above model would appear to be a good way to determine the
true frequency and phase of the sine wave, but in practice it
would fail utterly.  The righthand side of the actual model
&lsquo;<samp>arcsin(y) = a t + b</samp>&rsquo; will grow smoothly with &lsquo;<samp>t</samp>&rsquo;, but
the lefthand side will bounce back and forth between <i>-90</i> and 90.
No values of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; can make the two sides match,
even approximately.
</p>
<p>There is no good solution to this problem at present.  You could
restrict your data to small enough ranges so that the above problem
doesn&rsquo;t occur (i.e., not straddling any peaks in the sine wave).
Or, in this case, you could use a totally different method such as
Fourier analysis, which is beyond the scope of the <kbd>a F</kbd> command.
(Unfortunately, Calc does not currently have any facilities for
taking Fourier and related transforms.)
</p>
<hr>
<a name="Curve-Fitting-Details"></a>
<div class="header">
<p>
Next: <a href="#Interpolation" accesskey="n" rel="next">Interpolation</a>, Previous: <a href="#Standard-Nonlinear-Models" accesskey="p" rel="prev">Standard Nonlinear Models</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Curve-Fitting-Details-1"></a>
<h4 class="subsection">10.8.5 Curve Fitting Details</h4>

<p>Calc&rsquo;s internal least-squares fitter can only handle multilinear
models.  More precisely, it can handle any model of the form
&lsquo;<samp>a f(x,y,z) + b g(x,y,z) + c h(x,y,z)</samp>&rsquo;, where &lsquo;<samp>a,b,c</samp>&rsquo;
are the parameters and &lsquo;<samp>x,y,z</samp>&rsquo; are the independent variables
(of course there can be any number of each, not just three).
</p>
<p>In a simple multilinear or polynomial fit, it is easy to see how
to convert the model into this form.  For example, if the model
is &lsquo;<samp>a + b x + c x^2</samp>&rsquo;, then &lsquo;<samp>f(x) = 1</samp>&rsquo;, &lsquo;<samp>g(x) = x</samp>&rsquo;,
and &lsquo;<samp>h(x) = x^2</samp>&rsquo; are suitable functions.
</p>
<p>For most other models, Calc uses a variety of algebraic manipulations
to try to put the problem into the form
</p>
<div class="smallexample">
<pre class="smallexample">Y(x,y,z) = A(a,b,c) F(x,y,z) + B(a,b,c) G(x,y,z) + C(a,b,c) H(x,y,z)
</pre></div>

<p>where &lsquo;<samp>Y,A,B,C,F,G,H</samp>&rsquo; are arbitrary functions.  It computes
&lsquo;<samp>Y</samp>&rsquo;, &lsquo;<samp>F</samp>&rsquo;, &lsquo;<samp>G</samp>&rsquo;, and &lsquo;<samp>H</samp>&rsquo; for all the data points,
does a standard linear fit to find the values of &lsquo;<samp>A</samp>&rsquo;, &lsquo;<samp>B</samp>&rsquo;,
and &lsquo;<samp>C</samp>&rsquo;, then uses the equation solver to solve for &lsquo;<samp>a,b,c</samp>&rsquo;
in terms of &lsquo;<samp>A,B,C</samp>&rsquo;.
</p>
<p>A remarkable number of models can be cast into this general form.
We&rsquo;ll look at two examples here to see how it works.  The power-law
model &lsquo;<samp>y = a x^b</samp>&rsquo; with two independent variables and two parameters
can be rewritten as follows:
</p>
<div class="example">
<pre class="example">y = a x^b
y = a exp(b ln(x))
y = exp(ln(a) + b ln(x))
ln(y) = ln(a) + b ln(x)
</pre></div>

<p>which matches the desired form with
&lsquo;<samp>Y = ln(y)</samp>&rsquo;,
&lsquo;<samp>A = ln(a)</samp>&rsquo;,
&lsquo;<samp>F = 1</samp>&rsquo;, &lsquo;<samp>B = b</samp>&rsquo;, and
&lsquo;<samp>G = ln(x)</samp>&rsquo;.
Calc thus computes the logarithms of your &lsquo;<samp>y</samp>&rsquo; and &lsquo;<samp>x</samp>&rsquo; values,
does a linear fit for &lsquo;<samp>A</samp>&rsquo; and &lsquo;<samp>B</samp>&rsquo;, then solves to get
&lsquo;<samp>a = exp(A)</samp>&rsquo;
and &lsquo;<samp>b = B</samp>&rsquo;.
</p>
<p>Another interesting example is the &ldquo;quadratic&rdquo; model, which can
be handled by expanding according to the distributive law.
</p>
<div class="example">
<pre class="example">y = a + b*(x - c)^2
y = a + b c^2 - 2 b c x + b x^2
</pre></div>

<p>which matches with &lsquo;<samp>Y = y</samp>&rsquo;, &lsquo;<samp>A = a + b c^2</samp>&rsquo;, &lsquo;<samp>F = 1</samp>&rsquo;,
&lsquo;<samp>B = -2 b c</samp>&rsquo;, &lsquo;<samp>G = x</samp>&rsquo; (the <i>-2</i> factor could just as easily
have been put into &lsquo;<samp>G</samp>&rsquo; instead of &lsquo;<samp>B</samp>&rsquo;), &lsquo;<samp>C = b</samp>&rsquo;, and
&lsquo;<samp>H = x^2</samp>&rsquo;.
</p>
<p>The Gaussian model looks quite complicated, but a closer examination
shows that it&rsquo;s actually similar to the quadratic model but with an
exponential that can be brought to the top and moved into &lsquo;<samp>Y</samp>&rsquo;.
</p>
<p>The logistic models cannot be put into general linear form.  For these
models, and the Hubbert linearization, Calc computes a rough
approximation for the parameters, then uses the Levenberg-Marquardt
iterative method to refine the approximations.
</p>
<p>Another model that cannot be put into general linear
form is a Gaussian with a constant background added on, i.e.,
&lsquo;<samp>d</samp>&rsquo; + the regular Gaussian formula.  If you have a model like
this, your best bet is to replace enough of your parameters with
constants to make the model linearizable, then adjust the constants
manually by doing a series of fits.  You can compare the fits by
graphing them, by examining the goodness-of-fit measures returned by
<kbd>I a F</kbd>, or by some other method suitable to your application.
Note that some models can be linearized in several ways.  The
Gaussian-plus-<var>d</var> model can be linearized by setting &lsquo;<samp>d</samp>&rsquo;
(the background) to a constant, or by setting &lsquo;<samp>b</samp>&rsquo; (the standard
deviation) and &lsquo;<samp>c</samp>&rsquo; (the mean) to constants.
</p>
<p>To fit a model with constants substituted for some parameters, just
store suitable values in those parameter variables, then omit them
from the list of parameters when you answer the variables prompt.
</p>

<p>A last desperate step would be to use the general-purpose
<code>minimize</code> function rather than <code>fit</code>.  After all, both
functions solve the problem of minimizing an expression (the
&lsquo;<samp>chi^2</samp>&rsquo;
sum) by adjusting certain parameters in the expression.  The <kbd>a F</kbd>
command is able to use a vastly more efficient algorithm due to its
special knowledge about linear chi-square sums, but the <kbd>a N</kbd>
command can do the same thing by brute force.
</p>
<p>A compromise would be to pick out a few parameters without which the
fit is linearizable, and use <code>minimize</code> on a call to <code>fit</code>
which efficiently takes care of the rest of the parameters.  The thing
to be minimized would be the value of
&lsquo;<samp>chi^2</samp>&rsquo;
returned as the fifth result of the <code>xfit</code> function:
</p>
<div class="smallexample">
<pre class="smallexample">minimize(xfit(gaus(a,b,c,d,x), x, [a,b,c], data)_5, d, guess)
</pre></div>

<p>where <code>gaus</code> represents the Gaussian model with background,
<code>data</code> represents the data matrix, and <code>guess</code> represents
the initial guess for &lsquo;<samp>d</samp>&rsquo; that <code>minimize</code> requires.
This operation will only be, shall we say, extraordinarily slow
rather than astronomically slow (as would be the case if <code>minimize</code>
were used by itself to solve the problem).
</p>

<p>The <kbd>I a F</kbd> [<code>xfit</code>] command is somewhat trickier when
nonlinear models are used.  The second item in the result is the
vector of &ldquo;raw&rdquo; parameters &lsquo;<samp>A</samp>&rsquo;, &lsquo;<samp>B</samp>&rsquo;, &lsquo;<samp>C</samp>&rsquo;.  The
covariance matrix is written in terms of those raw parameters.
The fifth item is a vector of <em>filter</em> expressions.  This
is the empty vector &lsquo;<samp>[]</samp>&rsquo; if the raw parameters were the same
as the requested parameters, i.e., if &lsquo;<samp>A = a</samp>&rsquo;, &lsquo;<samp>B = b</samp>&rsquo;,
and so on (which is always true if the model is already linear
in the parameters as written, e.g., for polynomial fits).  If the
parameters had to be rearranged, the fifth item is instead a vector
of one formula per parameter in the original model.  The raw
parameters are expressed in these &ldquo;filter&rdquo; formulas as
&lsquo;<samp>fitdummy(1)</samp>&rsquo; for &lsquo;<samp>A</samp>&rsquo;, &lsquo;<samp>fitdummy(2)</samp>&rsquo; for &lsquo;<samp>B</samp>&rsquo;,
and so on.
</p>
<p>When Calc needs to modify the model to return the result, it replaces
&lsquo;<samp>fitdummy(1)</samp>&rsquo; in all the filters with the first item in the raw
parameters list, and so on for the other raw parameters, then
evaluates the resulting filter formulas to get the actual parameter
values to be substituted into the original model.  In the case of
<kbd>H a F</kbd> and <kbd>I a F</kbd> where the parameters must be error forms,
Calc uses the square roots of the diagonal entries of the covariance
matrix as error values for the raw parameters, then lets Calc&rsquo;s
standard error-form arithmetic take it from there.
</p>
<p>If you use <kbd>I a F</kbd> with a nonlinear model, be sure to remember
that the covariance matrix is in terms of the raw parameters,
<em>not</em> the actual requested parameters.  It&rsquo;s up to you to
figure out how to interpret the covariances in the presence of
nontrivial filter functions.
</p>
<p>Things are also complicated when the input contains error forms.
Suppose there are three independent and dependent variables, &lsquo;<samp>x</samp>&rsquo;,
&lsquo;<samp>y</samp>&rsquo;, and &lsquo;<samp>z</samp>&rsquo;, one or more of which are error forms in the
data.  Calc combines all the error values by taking the square root
of the sum of the squares of the errors.  It then changes &lsquo;<samp>x</samp>&rsquo;
and &lsquo;<samp>y</samp>&rsquo; to be plain numbers, and makes &lsquo;<samp>z</samp>&rsquo; into an error
form with this combined error.  The &lsquo;<samp>Y(x,y,z)</samp>&rsquo; part of the
linearized model is evaluated, and the result should be an error
form.  The error part of that result is used for
&lsquo;<samp>sigma_i</samp>&rsquo;
for the data point.  If for some reason &lsquo;<samp>Y(x,y,z)</samp>&rsquo; does not return
an error form, the combined error from &lsquo;<samp>z</samp>&rsquo; is used directly for
&lsquo;<samp>sigma_i</samp>&rsquo;.
Finally, &lsquo;<samp>z</samp>&rsquo; is also stripped of its error
for use in computing &lsquo;<samp>F(x,y,z)</samp>&rsquo;, &lsquo;<samp>G(x,y,z)</samp>&rsquo; and so on;
the righthand side of the linearized model is computed in regular
arithmetic with no error forms.
</p>
<p>(While these rules may seem complicated, they are designed to do
the most reasonable thing in the typical case that &lsquo;<samp>Y(x,y,z)</samp>&rsquo;
depends only on the dependent variable &lsquo;<samp>z</samp>&rsquo;, and in fact is
often simply equal to &lsquo;<samp>z</samp>&rsquo;.  For common cases like polynomials
and multilinear models, the combined error is simply used as the
&lsquo;<samp>sigma</samp>&rsquo;
for the data point with no further ado.)
</p>

<a name="index-FitRules"></a>
<p>It may be the case that the model you wish to use is linearizable,
but Calc&rsquo;s built-in rules are unable to figure it out.  Calc uses
its algebraic rewrite mechanism to linearize a model.  The rewrite
rules are kept in the variable <code>FitRules</code>.  You can edit this
variable using the <kbd>s e FitRules</kbd> command; in fact, there is
a special <kbd>s F</kbd> command just for editing <code>FitRules</code>.
See <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<p>See <a href="#Rewrite-Rules">Rewrite Rules</a>, for a discussion of rewrite rules.
</p>
<a name="index-fitvar"></a>
<a name="index-fitparam"></a>
<a name="index-fitmodel"></a>
<a name="index-fitsystem"></a>
<a name="index-fitdummy"></a>
<p>Calc uses <code>FitRules</code> as follows.  First, it converts the model
to an equation if necessary and encloses the model equation in a
call to the function <code>fitmodel</code> (which is not actually a defined
function in Calc; it is only used as a placeholder by the rewrite rules).
Parameter variables are renamed to function calls &lsquo;<samp>fitparam(1)</samp>&rsquo;,
&lsquo;<samp>fitparam(2)</samp>&rsquo;, and so on, and independent variables are renamed
to &lsquo;<samp>fitvar(1)</samp>&rsquo;, &lsquo;<samp>fitvar(2)</samp>&rsquo;, etc.  The dependent variable
is the highest-numbered <code>fitvar</code>.  For example, the power law
model &lsquo;<samp>a x^b</samp>&rsquo; is converted to &lsquo;<samp>y = a x^b</samp>&rsquo;, then to
</p>
<div class="smallexample">
<pre class="smallexample">fitmodel(fitvar(2) = fitparam(1) fitvar(1)^fitparam(2))
</pre></div>

<p>Calc then applies the rewrites as if by &lsquo;<samp>C-u 0 a r FitRules</samp>&rsquo;.
(The zero prefix means that rewriting should continue until no further
changes are possible.)
</p>
<p>When rewriting is complete, the <code>fitmodel</code> call should have
been replaced by a <code>fitsystem</code> call that looks like this:
</p>
<div class="example">
<pre class="example">fitsystem(<var>Y</var>, <var>FGH</var>, <var>abc</var>)
</pre></div>

<p>where <var>Y</var> is a formula that describes the function &lsquo;<samp>Y(x,y,z)</samp>&rsquo;,
<var>FGH</var> is the vector of formulas &lsquo;<samp>[F(x,y,z), G(x,y,z), H(x,y,z)]</samp>&rsquo;,
and <var>abc</var> is the vector of parameter filters which refer to the
raw parameters as &lsquo;<samp>fitdummy(1)</samp>&rsquo; for &lsquo;<samp>A</samp>&rsquo;, &lsquo;<samp>fitdummy(2)</samp>&rsquo;
for &lsquo;<samp>B</samp>&rsquo;, etc.  While the number of raw parameters (the length of
the <var>FGH</var> vector) is usually the same as the number of original
parameters (the length of the <var>abc</var> vector), this is not required.
</p>
<p>The power law model eventually boils down to
</p>
<div class="smallexample">
<pre class="smallexample">fitsystem(ln(fitvar(2)),
          [1, ln(fitvar(1))],
          [exp(fitdummy(1)), fitdummy(2)])
</pre></div>

<p>The actual implementation of <code>FitRules</code> is complicated; it
proceeds in four phases.  First, common rearrangements are done
to try to bring linear terms together and to isolate functions like
<code>exp</code> and <code>ln</code> either all the way &ldquo;out&rdquo; (so that they
can be put into <var>Y</var>) or all the way &ldquo;in&rdquo; (so that they can
be put into <var>abc</var> or <var>FGH</var>).  In particular, all
non-constant powers are converted to logs-and-exponentials form,
and the distributive law is used to expand products of sums.
Quotients are rewritten to use the &lsquo;<samp>fitinv</samp>&rsquo; function, where
&lsquo;<samp>fitinv(x)</samp>&rsquo; represents &lsquo;<samp>1/x</samp>&rsquo; while the <code>FitRules</code>
are operating.  (The use of <code>fitinv</code> makes recognition of
linear-looking forms easier.)  If you modify <code>FitRules</code>, you
will probably only need to modify the rules for this phase.
</p>
<p>Phase two, whose rules can actually also apply during phases one
and three, first rewrites <code>fitmodel</code> to a two-argument
form &lsquo;<samp>fitmodel(<var>Y</var>, <var>model</var>)</samp>&rsquo;, where <var>Y</var> is
initially zero and <var>model</var> has been changed from &lsquo;<samp>a=b</samp>&rsquo;
to &lsquo;<samp>a-b</samp>&rsquo; form.  It then tries to peel off invertible functions
from the outside of <var>model</var> and put them into <var>Y</var> instead,
calling the equation solver to invert the functions.  Finally, when
this is no longer possible, the <code>fitmodel</code> is changed to a
four-argument <code>fitsystem</code>, where the fourth argument is
<var>model</var> and the <var>FGH</var> and <var>abc</var> vectors are initially
empty.  (The last vector is really <var>ABC</var>, corresponding to
raw parameters, for now.)
</p>
<p>Phase three converts a sum of items in the <var>model</var> to a sum
of &lsquo;<samp>fitpart(<var>a</var>, <var>b</var>, <var>c</var>)</samp>&rsquo; terms which represent
terms &lsquo;<samp><var>a</var>*<var>b</var>*<var>c</var></samp>&rsquo; of the sum, where <var>a</var>
is all factors that do not involve any variables, <var>b</var> is all
factors that involve only parameters, and <var>c</var> is the factors
that involve only independent variables.  (If this decomposition
is not possible, the rule set will not complete and Calc will
complain that the model is too complex.)  Then <code>fitpart</code>s
with equal <var>b</var> or <var>c</var> components are merged back together
using the distributive law in order to minimize the number of
raw parameters needed.
</p>
<p>Phase four moves the <code>fitpart</code> terms into the <var>FGH</var> and
<var>ABC</var> vectors.  Also, some of the algebraic expansions that
were done in phase 1 are undone now to make the formulas more
computationally efficient.  Finally, it calls the solver one more
time to convert the <var>ABC</var> vector to an <var>abc</var> vector, and
removes the fourth <var>model</var> argument (which by now will be zero)
to obtain the three-argument <code>fitsystem</code> that the linear
least-squares solver wants to see.
</p>
<a name="index-hasfitparams"></a>
<a name="index-hasfitvars"></a>
<p>Two functions which are useful in connection with <code>FitRules</code>
are &lsquo;<samp>hasfitparams(x)</samp>&rsquo; and &lsquo;<samp>hasfitvars(x)</samp>&rsquo;, which check
whether &lsquo;<samp>x</samp>&rsquo; refers to any parameters or independent variables,
respectively.  Specifically, these functions return &ldquo;true&rdquo; if the
argument contains any <code>fitparam</code> (or <code>fitvar</code>) function
calls, and &ldquo;false&rdquo; otherwise.  (Recall that &ldquo;true&rdquo; means a
nonzero number, and &ldquo;false&rdquo; means zero.  The actual nonzero number
returned is the largest <var>n</var> from all the &lsquo;<samp>fitparam(<var>n</var>)</samp>&rsquo;s
or &lsquo;<samp>fitvar(<var>n</var>)</samp>&rsquo;s, respectively, that appear in the formula.)
</p>

<p>The <code>fit</code> function in algebraic notation normally takes four
arguments, &lsquo;<samp>fit(<var>model</var>, <var>vars</var>, <var>params</var>, <var>data</var>)</samp>&rsquo;,
where <var>model</var> is the model formula as it would be typed after
<kbd>a F '</kbd>, <var>vars</var> is the independent variable or a vector of
independent variables, <var>params</var> likewise gives the parameter(s),
and <var>data</var> is the data matrix.  Note that the length of <var>vars</var>
must be equal to the number of rows in <var>data</var> if <var>model</var> is
an equation, or one less than the number of rows if <var>model</var> is
a plain formula.  (Actually, a name for the dependent variable is
allowed but will be ignored in the plain-formula case.)
</p>
<p>If <var>params</var> is omitted, the parameters are all variables in
<var>model</var> except those that appear in <var>vars</var>.  If <var>vars</var>
is also omitted, Calc sorts all the variables that appear in
<var>model</var> alphabetically and uses the higher ones for <var>vars</var>
and the lower ones for <var>params</var>.
</p>
<p>Alternatively, &lsquo;<samp>fit(<var>modelvec</var>, <var>data</var>)</samp>&rsquo; is allowed
where <var>modelvec</var> is a 2- or 3-vector describing the model
and variables, as discussed previously.
</p>
<p>If Calc is unable to do the fit, the <code>fit</code> function is left
in symbolic form, ordinarily with an explanatory message.  The
message will be &ldquo;Model expression is too complex&rdquo; if the
linearizer was unable to put the model into the required form.
</p>
<p>The <code>efit</code> (corresponding to <kbd>H a F</kbd>) and <code>xfit</code>
(for <kbd>I a F</kbd>) functions are completely analogous.
</p>
<hr>
<a name="Interpolation"></a>
<div class="header">
<p>
Previous: <a href="#Curve-Fitting-Details" accesskey="p" rel="prev">Curve Fitting Details</a>, Up: <a href="#Curve-Fitting" accesskey="u" rel="up">Curve Fitting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Polynomial-Interpolation"></a>
<h4 class="subsection">10.8.6 Polynomial Interpolation</h4>

<a name="index-a-p"></a>
<a name="index-calc_002dpoly_002dinterp"></a>
<a name="index-polint"></a>
<p>The <kbd>a p</kbd> (<code>calc-poly-interp</code>) [<code>polint</code>] command does
a polynomial interpolation at a particular &lsquo;<samp>x</samp>&rsquo; value.  It takes
two arguments from the stack:  A data matrix of the sort used by
<kbd>a F</kbd>, and a single number which represents the desired &lsquo;<samp>x</samp>&rsquo;
value.  Calc effectively does an exact polynomial fit as if by <kbd>a F i</kbd>,
then substitutes the &lsquo;<samp>x</samp>&rsquo; value into the result in order to get an
approximate &lsquo;<samp>y</samp>&rsquo; value based on the fit.  (Calc does not actually
use <kbd>a F i</kbd>, however; it uses a direct method which is both more
efficient and more numerically stable.)
</p>
<p>The result of <kbd>a p</kbd> is actually a vector of two values:  The &lsquo;<samp>y</samp>&rsquo;
value approximation, and an error measure &lsquo;<samp>dy</samp>&rsquo; that reflects Calc&rsquo;s
estimation of the probable error of the approximation at that value of
&lsquo;<samp>x</samp>&rsquo;.  If the input &lsquo;<samp>x</samp>&rsquo; is equal to any of the &lsquo;<samp>x</samp>&rsquo; values
in the data matrix, the output &lsquo;<samp>y</samp>&rsquo; will be the corresponding &lsquo;<samp>y</samp>&rsquo;
value from the matrix, and the output &lsquo;<samp>dy</samp>&rsquo; will be exactly zero.
</p>
<p>A prefix argument of 2 causes <kbd>a p</kbd> to take separate x- and
y-vectors from the stack instead of one data matrix.
</p>
<p>If &lsquo;<samp>x</samp>&rsquo; is a vector of numbers, <kbd>a p</kbd> will return a matrix of
interpolated results for each of those &lsquo;<samp>x</samp>&rsquo; values.  (The matrix will
have two columns, the &lsquo;<samp>y</samp>&rsquo; values and the &lsquo;<samp>dy</samp>&rsquo; values.)
If &lsquo;<samp>x</samp>&rsquo; is a formula instead of a number, the <code>polint</code> function
remains in symbolic form; use the <kbd>a &quot;</kbd> command to expand it out to
a formula that describes the fit in symbolic terms.
</p>
<p>In all cases, the <kbd>a p</kbd> command leaves the data vectors or matrix
on the stack.  Only the &lsquo;<samp>x</samp>&rsquo; value is replaced by the result.
</p>
<a name="index-H-a-p"></a>
<a name="index-ratint"></a>
<p>The <kbd>H a p</kbd> [<code>ratint</code>] command does a rational function
interpolation.  It is used exactly like <kbd>a p</kbd>, except that it
uses as its model the quotient of two polynomials.  If there are
&lsquo;<samp>N</samp>&rsquo; data points, the numerator and denominator polynomials will
each have degree &lsquo;<samp>N/2</samp>&rsquo; (if &lsquo;<samp>N</samp>&rsquo; is odd, the denominator will
have degree one higher than the numerator).
</p>
<p>Rational approximations have the advantage that they can accurately
describe functions that have poles (points at which the function&rsquo;s value
goes to infinity, so that the denominator polynomial of the approximation
goes to zero).  If &lsquo;<samp>x</samp>&rsquo; corresponds to a pole of the fitted rational
function, then the result will be a division by zero.  If Infinite mode
is enabled, the result will be &lsquo;<samp>[uinf, uinf]</samp>&rsquo;.
</p>
<p>There is no way to get the actual coefficients of the rational function
used by <kbd>H a p</kbd>.  (The algorithm never generates these coefficients
explicitly, and quotients of polynomials are beyond <kbd>a&nbsp;F</kbd><!-- /@w -->&rsquo;s
capabilities to fit.)
</p>
<hr>
<a name="Summations"></a>
<div class="header">
<p>
Next: <a href="#Logical-Operations" accesskey="n" rel="next">Logical Operations</a>, Previous: <a href="#Curve-Fitting" accesskey="p" rel="prev">Curve Fitting</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Summations-1"></a>
<h3 class="section">10.9 Summations</h3>

<p><a name="index-Summation-of-a-series"></a>
<a name="index-a-_002b"></a>
<a name="index-calc_002dsummation"></a>
<a name="index-sum"></a>
The <kbd>a +</kbd> (<code>calc-summation</code>) [<code>sum</code>] command computes
the sum of a formula over a certain range of index values.  The formula
is taken from the top of the stack; the command prompts for the
name of the summation index variable, the lower limit of the
sum (any formula), and the upper limit of the sum.  If you
enter a blank line at any of these prompts, that prompt and
any later ones are answered by reading additional elements from
the stack.  Thus, <kbd>' k^2 <span class="key">RET</span> ' k <span class="key">RET</span> 1 <span class="key">RET</span> 5 <span class="key">RET</span> a + <span class="key">RET</span></kbd>
produces the result 55.
</p>
<p>The choice of index variable is arbitrary, but it&rsquo;s best not to
use a variable with a stored value.  In particular, while
<code>i</code> is often a favorite index variable, it should be avoided
in Calc because <code>i</code> has the imaginary constant &lsquo;<samp>(0, 1)</samp>&rsquo;
as a value.  If you pressed <kbd>=</kbd> on a sum over <code>i</code>, it would
be changed to a nonsensical sum over the &ldquo;variable&rdquo; &lsquo;<samp>(0, 1)</samp>&rsquo;!
If you really want to use <code>i</code> as an index variable, use
<kbd>s&nbsp;u&nbsp;i&nbsp;<span class="key">RET</span></kbd><!-- /@w --> first to &ldquo;unstore&rdquo; this variable.
(See <a href="#Storing-Variables">Storing Variables</a>.)
</p>
<p>A numeric prefix argument steps the index by that amount rather
than by one.  Thus <kbd>' a_k <span class="key">RET</span> C-u -2 a + k <span class="key">RET</span> 10 <span class="key">RET</span> 0 <span class="key">RET</span></kbd>
yields &lsquo;<samp>a_10 + a_8 + a_6 + a_4 + a_2 + a_0</samp>&rsquo;.  A prefix
argument of plain <kbd>C-u</kbd> causes <kbd>a +</kbd> to prompt for the
step value, in which case you can enter any formula or enter
a blank line to take the step value from the stack.  With the
<kbd>C-u</kbd> prefix, <kbd>a +</kbd> can take up to five arguments from
the stack:  The formula, the variable, the lower limit, the
upper limit, and (at the top of the stack), the step value.
</p>
<p>Calc knows how to do certain sums in closed form.  For example,
&lsquo;<samp>sum(6 k^2, k, 1, n) = 2&nbsp;n^3<!-- /@w --> + 3 n^2 + n</samp>&rsquo;.  In particular,
this is possible if the formula being summed is polynomial or
exponential in the index variable.  Sums of logarithms are
transformed into logarithms of products.  Sums of trigonometric
and hyperbolic functions are transformed to sums of exponentials
and then done in closed form.  Also, of course, sums in which the
lower and upper limits are both numbers can always be evaluated
just by grinding them out, although Calc will use closed forms
whenever it can for the sake of efficiency.
</p>
<p>The notation for sums in algebraic formulas is
&lsquo;<samp>sum(<var>expr</var>, <var>var</var>, <var>low</var>, <var>high</var>, <var>step</var>)</samp>&rsquo;.
If <var>step</var> is omitted, it defaults to one.  If <var>high</var> is
omitted, <var>low</var> is actually the upper limit and the lower limit
is one.  If <var>low</var> is also omitted, the limits are &lsquo;<samp>-inf</samp>&rsquo;
and &lsquo;<samp>inf</samp>&rsquo;, respectively.
</p>
<p>Infinite sums can sometimes be evaluated:  &lsquo;<samp>sum(.5^k, k, 1, inf)</samp>&rsquo;
returns &lsquo;<samp>1</samp>&rsquo;.  This is done by evaluating the sum in closed
form (to &lsquo;<samp>1. - 0.5^n</samp>&rsquo; in this case), then evaluating this
formula with <code>n</code> set to <code>inf</code>.  Calc&rsquo;s usual rules
for &ldquo;infinite&rdquo; arithmetic can find the answer from there.  If
infinite arithmetic yields a &lsquo;<samp>nan</samp>&rsquo;, or if the sum cannot be
solved in closed form, Calc leaves the <code>sum</code> function in
symbolic form.  See <a href="#Infinities">Infinities</a>.
</p>
<p>As a special feature, if the limits are infinite (or omitted, as
described above) but the formula includes vectors subscripted by
expressions that involve the iteration variable, Calc narrows
the limits to include only the range of integers which result in
valid subscripts for the vector.  For example, the sum
&lsquo;<samp>sum(k [a,b,c,d,e,f,g]_(2k),k)</samp>&rsquo; evaluates to &lsquo;<samp>b + 2 d + 3 f</samp>&rsquo;.
</p>
<p>The limits of a sum do not need to be integers.  For example,
&lsquo;<samp>sum(a_k, k, 0, 2 n, n)</samp>&rsquo; produces &lsquo;<samp>a_0 + a_n + a_(2 n)</samp>&rsquo;.
Calc computes the number of iterations using the formula
&lsquo;<samp>1 + (<var>high</var> - <var>low</var>) / <var>step</var></samp>&rsquo;, which must,
after algebraic simplification, evaluate to an integer.
</p>
<p>If the number of iterations according to the above formula does
not come out to an integer, the sum is invalid and will be left
in symbolic form.  However, closed forms are still supplied, and
you are on your honor not to misuse the resulting formulas by
substituting mismatched bounds into them.  For example,
&lsquo;<samp>sum(k, k, 1, 10, 2)</samp>&rsquo; is invalid, but Calc will go ahead and
evaluate the closed form solution for the limits 1 and 10 to get
the rather dubious answer, 29.25.
</p>
<p>If the lower limit is greater than the upper limit (assuming a
positive step size), the result is generally zero.  However,
Calc only guarantees a zero result when the upper limit is
exactly one step less than the lower limit, i.e., if the number
of iterations is <i>-1</i>.  Thus &lsquo;<samp>sum(f(k), k, n, n-1)</samp>&rsquo; is zero
but the sum from &lsquo;<samp>n</samp>&rsquo; to &lsquo;<samp>n-2</samp>&rsquo; may report a nonzero value
if Calc used a closed form solution.
</p>
<p>Calc&rsquo;s logical predicates like &lsquo;<samp>a &lt; b</samp>&rsquo; return 1 for &ldquo;true&rdquo;
and 0 for &ldquo;false.&rdquo;  See <a href="#Logical-Operations">Logical Operations</a>.  This can be
used to advantage for building conditional sums.  For example,
&lsquo;<samp>sum(prime(k)*k^2, k, 1, 20)</samp>&rsquo; is the sum of the squares of all
prime numbers from 1 to 20; the <code>prime</code> predicate returns 1 if
its argument is prime and 0 otherwise.  You can read this expression
as &ldquo;the sum of &lsquo;<samp>k^2</samp>&rsquo;, where &lsquo;<samp>k</samp>&rsquo; is prime.&rdquo;  Indeed,
&lsquo;<samp>sum(prime(k)*k^2, k)</samp>&rsquo; would represent the sum of <em>all</em> primes
squared, since the limits default to plus and minus infinity, but
there are no such sums that Calc&rsquo;s built-in rules can do in
closed form.
</p>
<p>As another example, &lsquo;<samp>sum((k != k_0) * f(k), k, 1, n)</samp>&rsquo; is the
sum of &lsquo;<samp>f(k)</samp>&rsquo; for all &lsquo;<samp>k</samp>&rsquo; from 1 to &lsquo;<samp>n</samp>&rsquo;, excluding
one value &lsquo;<samp>k_0</samp>&rsquo;.  Slightly more tricky is the summand
&lsquo;<samp>(k != k_0) / (k - k_0)</samp>&rsquo;, which is an attempt to describe
the sum of all &lsquo;<samp>1/(k-k_0)</samp>&rsquo; except at &lsquo;<samp>k = k_0</samp>&rsquo;, where
this would be a division by zero.  But at &lsquo;<samp>k = k_0</samp>&rsquo;, this
formula works out to the indeterminate form &lsquo;<samp>0 / 0</samp>&rsquo;, which
Calc will not assume is zero.  Better would be to use
&lsquo;<samp>(k != k_0) ? 1/(k-k_0) : 0</samp>&rsquo;; the &lsquo;<samp>? :</samp>&rsquo; operator does
an &ldquo;if-then-else&rdquo; test:  This expression says, &ldquo;if
&lsquo;<samp>k != k_0</samp>&rsquo;,
then &lsquo;<samp>1/(k-k_0)</samp>&rsquo;, else zero.&rdquo;  Now the formula &lsquo;<samp>1/(k-k_0)</samp>&rsquo;
will not even be evaluated by Calc when &lsquo;<samp>k = k_0</samp>&rsquo;.
</p>
<a name="index-Alternating-sums"></a>
<a name="index-a-_002d"></a>
<a name="index-calc_002dalt_002dsummation"></a>
<a name="index-asum"></a>
<p>The <kbd>a -</kbd> (<code>calc-alt-summation</code>) [<code>asum</code>] command
computes an alternating sum.  Successive terms of the sequence
are given alternating signs, with the first term (corresponding
to the lower index value) being positive.  Alternating sums
are converted to normal sums with an extra term of the form
&lsquo;<samp>(-1)^(k-<var>low</var>)</samp>&rsquo;.  This formula is adjusted appropriately
if the step value is other than one.  For example, the Taylor
series for the sine function is &lsquo;<samp>asum(x^k / k!, k, 1, inf, 2)</samp>&rsquo;.
(Calc cannot evaluate this infinite series, but it can approximate
it if you replace <code>inf</code> with any particular odd number.)
Calc converts this series to a regular sum with a step of one,
namely &lsquo;<samp>sum((-1)^k x^(2k+1) / (2k+1)!, k, 0, inf)</samp>&rsquo;.
</p>
<a name="index-Product-of-a-sequence"></a>
<a name="index-a-_002a"></a>
<a name="index-calc_002dproduct"></a>
<a name="index-prod"></a>
<p>The <kbd>a *</kbd> (<code>calc-product</code>) [<code>prod</code>] command is
the analogous way to take a product of many terms.  Calc also knows
some closed forms for products, such as &lsquo;<samp>prod(k, k, 1, n) = n!</samp>&rsquo;.
Conditional products can be written &lsquo;<samp>prod(k^prime(k), k, 1, n)</samp>&rsquo;
or &lsquo;<samp>prod(prime(k) ? k : 1, k, 1, n)</samp>&rsquo;.
</p>
<a name="index-a-T"></a>
<a name="index-calc_002dtabulate"></a>
<a name="index-table"></a>
<p>The <kbd>a T</kbd> (<code>calc-tabulate</code>) [<code>table</code>] command
evaluates a formula at a series of iterated index values, just
like <code>sum</code> and <code>prod</code>, but its result is simply a
vector of the results.  For example, &lsquo;<samp>table(a_i, i, 1, 7, 2)</samp>&rsquo;
produces &lsquo;<samp>[a_1, a_3, a_5, a_7]</samp>&rsquo;.
</p>
<hr>
<a name="Logical-Operations"></a>
<div class="header">
<p>
Next: <a href="#Rewrite-Rules" accesskey="n" rel="next">Rewrite Rules</a>, Previous: <a href="#Summations" accesskey="p" rel="prev">Summations</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Logical-Operations-1"></a>
<h3 class="section">10.10 Logical Operations</h3>

<p>The following commands and algebraic functions return true/false values,
where 1 represents &ldquo;true&rdquo; and 0 represents &ldquo;false.&rdquo;  In cases where
a truth value is required (such as for the condition part of a rewrite
rule, or as the condition for a <kbd>Z&nbsp;[&nbsp;Z&nbsp;]</kbd><!-- /@w --> control structure), any
nonzero value is accepted to mean &ldquo;true.&rdquo;  (Specifically, anything
for which <code>dnonzero</code> returns 1 is &ldquo;true,&rdquo; and anything for
which <code>dnonzero</code> returns 0 or cannot decide is assumed &ldquo;false.&rdquo;
Note that this means that <kbd>Z&nbsp;[&nbsp;Z&nbsp;]</kbd><!-- /@w --> will execute the &ldquo;then&rdquo;
portion if its condition is provably true, but it will execute the
&ldquo;else&rdquo; portion for any condition like &lsquo;<samp>a = b</samp>&rsquo; that is not
provably true, even if it might be true.  Algebraic functions that
have conditions as arguments, like <code>? :</code> and <code>&amp;&amp;</code>, remain
unevaluated if the condition is neither provably true nor provably
false.  See <a href="#Declarations">Declarations</a>.)
</p>
<a name="index-a-_003d"></a>
<a name="index-calc_002dequal_002dto"></a>
<a name="index-eq"></a>
<a name="index-_003d-1"></a>
<a name="index-_003d_003d"></a>
<p>The <kbd>a =</kbd> (<code>calc-equal-to</code>) command, or &lsquo;<samp>eq(a,b)</samp>&rsquo; function
(which can also be written &lsquo;<samp>a = b</samp>&rsquo; or &lsquo;<samp>a == b</samp>&rsquo; in an algebraic
formula) is true if &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are equal, either because they
are identical expressions, or because they are numbers which are
numerically equal.  (Thus the integer 1 is considered equal to the float
1.0.)  If the equality of &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; cannot be determined,
the comparison is left in symbolic form.  Note that as a command, this
operation pops two values from the stack and pushes back either a 1 or
a 0, or a formula &lsquo;<samp>a = b</samp>&rsquo; if the values&rsquo; equality cannot be determined.
</p>
<p>Many Calc commands use &lsquo;<samp>=</samp>&rsquo; formulas to represent <em>equations</em>.
For example, the <kbd>a S</kbd> (<code>calc-solve-for</code>) command rearranges
an equation to solve for a given variable.  The <kbd>a M</kbd>
(<code>calc-map-equation</code>) command can be used to apply any
function to both sides of an equation; for example, <kbd>2 a M *</kbd>
multiplies both sides of the equation by two.  Note that just
<kbd>2 *</kbd> would not do the same thing; it would produce the formula
&lsquo;<samp>2 (a = b)</samp>&rsquo; which represents 2 if the equality is true or
zero if not.
</p>
<p>The <code>eq</code> function with more than two arguments (e.g., <kbd>C-u 3 a =</kbd>
or &lsquo;<samp>a = b = c</samp>&rsquo;) tests if all of its arguments are equal.  In
algebraic notation, the &lsquo;<samp>=</samp>&rsquo; operator is unusual in that it is
neither left- nor right-associative:  &lsquo;<samp>a = b = c</samp>&rsquo; is not the
same as &lsquo;<samp>(a = b) = c</samp>&rsquo; or &lsquo;<samp>a = (b = c)</samp>&rsquo; (which each compare
one variable with the 1 or 0 that results from comparing two other
variables).
</p>
<a name="index-a-_0023"></a>
<a name="index-calc_002dnot_002dequal_002dto"></a>
<a name="index-neq"></a>
<a name="index-_0021_003d"></a>
<p>The <kbd>a #</kbd> (<code>calc-not-equal-to</code>) command, or &lsquo;<samp>neq(a,b)</samp>&rsquo; or
&lsquo;<samp>a != b</samp>&rsquo; function, is true if &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are not equal.
This also works with more than two arguments; &lsquo;<samp>a != b != c != d</samp>&rsquo;
tests that all four of &lsquo;<samp>a</samp>&rsquo;, &lsquo;<samp>b</samp>&rsquo;, &lsquo;<samp>c</samp>&rsquo;, and &lsquo;<samp>d</samp>&rsquo; are
distinct numbers.
</p>
<a name="index-a-_003c"></a>
<a name="index-lt"></a>
<a name="index-a-_003e"></a>
<a name="index-a-_005b"></a>
<a name="index-a-_005d"></a>
<a name="index-calc_002dless_002dthan"></a>
<a name="index-calc_002dgreater_002dthan"></a>
<a name="index-calc_002dless_002dequal"></a>
<a name="index-calc_002dgreater_002dequal"></a>
<a name="index-gt"></a>
<a name="index-leq"></a>
<a name="index-geq"></a>
<a name="index-_003c-1"></a>
<a name="index-_003e-1"></a>
<a name="index-_003c_003d"></a>
<a name="index-_003e_003d"></a>
<p>The <kbd>a &lt;</kbd> (<code>calc-less-than</code>) [&lsquo;<samp>lt(a,b)</samp>&rsquo; or &lsquo;<samp>a &lt; b</samp>&rsquo;]
operation is true if &lsquo;<samp>a</samp>&rsquo; is less than &lsquo;<samp>b</samp>&rsquo;.  Similar functions
are <kbd>a &gt;</kbd> (<code>calc-greater-than</code>) [&lsquo;<samp>gt(a,b)</samp>&rsquo; or &lsquo;<samp>a &gt; b</samp>&rsquo;],
<kbd>a [</kbd> (<code>calc-less-equal</code>) [&lsquo;<samp>leq(a,b)</samp>&rsquo; or &lsquo;<samp>a &lt;= b</samp>&rsquo;], and
<kbd>a ]</kbd> (<code>calc-greater-equal</code>) [&lsquo;<samp>geq(a,b)</samp>&rsquo; or &lsquo;<samp>a &gt;= b</samp>&rsquo;].
</p>
<p>While the inequality functions like <code>lt</code> do not accept more
than two arguments, the syntax &lsquo;<samp>a&nbsp;&lt;=&nbsp;b&nbsp;&lt;&nbsp;c</samp>&rsquo;<!-- /@w --> is translated to an
equivalent expression involving intervals: &lsquo;<samp>b in [a .. c)</samp>&rsquo;.
(See the description of <code>in</code> below.)  All four combinations
of &lsquo;<samp>&lt;</samp>&rsquo; and &lsquo;<samp>&lt;=</samp>&rsquo; are allowed, or any of the four combinations
of &lsquo;<samp>&gt;</samp>&rsquo; and &lsquo;<samp>&gt;=</samp>&rsquo;.  Four-argument constructions like
&lsquo;<samp>a &lt; b &lt; c &lt; d</samp>&rsquo;, and mixtures like &lsquo;<samp>a&nbsp;&lt;&nbsp;b&nbsp;=&nbsp;c</samp>&rsquo;<!-- /@w --> that
involve both equations and inequalities, are not allowed.
</p>
<a name="index-a-_002e"></a>
<a name="index-calc_002dremove_002dequal"></a>
<a name="index-rmeq"></a>
<p>The <kbd>a .</kbd> (<code>calc-remove-equal</code>) [<code>rmeq</code>] command extracts
the righthand side of the equation or inequality on the top of the
stack.  It also works elementwise on vectors.  For example, if
&lsquo;<samp>[x = 2.34, y = z / 2]</samp>&rsquo; is on the stack, then <kbd>a .</kbd> produces
&lsquo;<samp>[2.34, z / 2]</samp>&rsquo;.  As a special case, if the righthand side is a
variable and the lefthand side is a number (as in &lsquo;<samp>2.34 = x</samp>&rsquo;), then
Calc keeps the lefthand side instead.  Finally, this command works with
assignments &lsquo;<samp>x := 2.34</samp>&rsquo; as well as equations, always taking the
righthand side, and for &lsquo;<samp>=&gt;</samp>&rsquo; (evaluates-to) operators, always
taking the lefthand side.
</p>
<a name="index-a-_0026"></a>
<a name="index-calc_002dlogical_002dand"></a>
<a name="index-land"></a>
<a name="index-_0026_0026"></a>
<p>The <kbd>a &amp;</kbd> (<code>calc-logical-and</code>) [&lsquo;<samp>land(a,b)</samp>&rsquo; or &lsquo;<samp>a &amp;&amp; b</samp>&rsquo;]
function is true if both of its arguments are true, i.e., are
non-zero numbers.  In this case, the result will be either &lsquo;<samp>a</samp>&rsquo; or
&lsquo;<samp>b</samp>&rsquo;, chosen arbitrarily.  If either argument is zero, the result is
zero.  Otherwise, the formula is left in symbolic form.
</p>
<a name="index-a-_007c"></a>
<a name="index-calc_002dlogical_002dor"></a>
<a name="index-lor"></a>
<a name="index-_007c_007c"></a>
<p>The <kbd>a |</kbd> (<code>calc-logical-or</code>) [&lsquo;<samp>lor(a,b)</samp>&rsquo; or &lsquo;<samp>a || b</samp>&rsquo;]
function is true if either or both of its arguments are true (nonzero).
The result is whichever argument was nonzero, choosing arbitrarily if both
are nonzero.  If both &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are zero, the result is
zero.
</p>
<a name="index-a-_0021"></a>
<a name="index-calc_002dlogical_002dnot"></a>
<a name="index-lnot"></a>
<a name="index-_0021-2"></a>
<p>The <kbd>a !</kbd> (<code>calc-logical-not</code>) [&lsquo;<samp>lnot(a)</samp>&rsquo; or &lsquo;<samp>! a</samp>&rsquo;]
function is true if &lsquo;<samp>a</samp>&rsquo; is false (zero), or false if &lsquo;<samp>a</samp>&rsquo; is
true (nonzero).  It is left in symbolic form if &lsquo;<samp>a</samp>&rsquo; is not a
number.
</p>
<a name="index-a-_003a"></a>
<a name="index-calc_002dlogical_002dif"></a>
<a name="index-if"></a>
<a name="index-_003f-1"></a>
<a name="index-_003a-1"></a>
<a name="index-Arguments_002c-not-evaluated"></a>
<p>The <kbd>a :</kbd> (<code>calc-logical-if</code>) [&lsquo;<samp>if(a,b,c)</samp>&rsquo; or &lsquo;<samp>a ? b : c</samp>&rsquo;]
function is equal to either &lsquo;<samp>b</samp>&rsquo; or &lsquo;<samp>c</samp>&rsquo; if &lsquo;<samp>a</samp>&rsquo; is a nonzero
number or zero, respectively.  If &lsquo;<samp>a</samp>&rsquo; is not a number, the test is
left in symbolic form and neither &lsquo;<samp>b</samp>&rsquo; nor &lsquo;<samp>c</samp>&rsquo; is evaluated in
any way.  In algebraic formulas, this is one of the few Calc functions
whose arguments are not automatically evaluated when the function itself
is evaluated.  The others are <code>lambda</code>, <code>quote</code>, and
<code>condition</code>.
</p>
<p>One minor surprise to watch out for is that the formula &lsquo;<samp>a?3:4</samp>&rsquo;
will not work because the &lsquo;<samp>3:4</samp>&rsquo; is parsed as a fraction instead of
as three separate symbols.  Type something like &lsquo;<samp>a ? 3 : 4</samp>&rsquo; or
&lsquo;<samp>a?(3):4</samp>&rsquo; instead.
</p>
<p>As a special case, if &lsquo;<samp>a</samp>&rsquo; evaluates to a vector, then both &lsquo;<samp>b</samp>&rsquo;
and &lsquo;<samp>c</samp>&rsquo; are evaluated; the result is a vector of the same length
as &lsquo;<samp>a</samp>&rsquo; whose elements are chosen from corresponding elements of
&lsquo;<samp>b</samp>&rsquo; and &lsquo;<samp>c</samp>&rsquo; according to whether each element of &lsquo;<samp>a</samp>&rsquo;
is zero or nonzero.  Each of &lsquo;<samp>b</samp>&rsquo; and &lsquo;<samp>c</samp>&rsquo; must be either a
vector of the same length as &lsquo;<samp>a</samp>&rsquo;, or a non-vector which is matched
with all elements of &lsquo;<samp>a</samp>&rsquo;.
</p>
<a name="index-a-_007b"></a>
<a name="index-calc_002din_002dset"></a>
<a name="index-in"></a>
<p>The <kbd>a {</kbd> (<code>calc-in-set</code>) [&lsquo;<samp>in(a,b)</samp>&rsquo;] function is true if
the number &lsquo;<samp>a</samp>&rsquo; is in the set of numbers represented by &lsquo;<samp>b</samp>&rsquo;.
If &lsquo;<samp>b</samp>&rsquo; is an interval form, &lsquo;<samp>a</samp>&rsquo; must be one of the values
encompassed by the interval.  If &lsquo;<samp>b</samp>&rsquo; is a vector, &lsquo;<samp>a</samp>&rsquo; must be
equal to one of the elements of the vector.  (If any vector elements are
intervals, &lsquo;<samp>a</samp>&rsquo; must be in any of the intervals.)  If &lsquo;<samp>b</samp>&rsquo; is a
plain number, &lsquo;<samp>a</samp>&rsquo; must be numerically equal to &lsquo;<samp>b</samp>&rsquo;.
See <a href="#Set-Operations">Set Operations</a>, for a group of commands that manipulate sets
of this sort.
</p>
<a name="index-typeof"></a>
<p>The &lsquo;<samp>typeof(a)</samp>&rsquo; function produces an integer or variable which
characterizes &lsquo;<samp>a</samp>&rsquo;.  If &lsquo;<samp>a</samp>&rsquo; is a number, vector, or variable,
the result will be one of the following numbers:
</p>
<div class="example">
<pre class="example"> 1   Integer
 2   Fraction
 3   Floating-point number
 4   HMS form
 5   Rectangular complex number
 6   Polar complex number
 7   Error form
 8   Interval form
 9   Modulo form
10   Date-only form
11   Date/time form
12   Infinity (inf, uinf, or nan)
100  Variable
101  Vector (but not a matrix)
102  Matrix
</pre></div>

<p>Otherwise, &lsquo;<samp>a</samp>&rsquo; is a formula, and the result is a variable which
represents the name of the top-level function call.
</p>
<a name="index-integer-1"></a>
<a name="index-real"></a>
<a name="index-constant"></a>
<p>The &lsquo;<samp>integer(a)</samp>&rsquo; function returns true if &lsquo;<samp>a</samp>&rsquo; is an integer.
The &lsquo;<samp>real(a)</samp>&rsquo; function
is true if &lsquo;<samp>a</samp>&rsquo; is a real number, either integer, fraction, or
float.  The &lsquo;<samp>constant(a)</samp>&rsquo; function returns true if &lsquo;<samp>a</samp>&rsquo; is
any of the objects for which <code>typeof</code> would produce an integer
code result except for variables, and provided that the components of
an object like a vector or error form are themselves constant.
Note that infinities do not satisfy any of these tests, nor do
special constants like <code>pi</code> and <code>e</code>.
</p>
<p>See <a href="#Declarations">Declarations</a>, for a set of similar functions that recognize
formulas as well as actual numbers.  For example, &lsquo;<samp>dint(floor(x))</samp>&rsquo;
is true because &lsquo;<samp>floor(x)</samp>&rsquo; is provably integer-valued, but
&lsquo;<samp>integer(floor(x))</samp>&rsquo; does not because &lsquo;<samp>floor(x)</samp>&rsquo; is not
literally an integer constant.
</p>
<a name="index-refers"></a>
<p>The &lsquo;<samp>refers(a,b)</samp>&rsquo; function is true if the variable (or sub-expression)
&lsquo;<samp>b</samp>&rsquo; appears in &lsquo;<samp>a</samp>&rsquo;, or false otherwise.  Unlike the other
tests described here, this function returns a definite &ldquo;no&rdquo; answer
even if its arguments are still in symbolic form.  The only case where
<code>refers</code> will be left unevaluated is if &lsquo;<samp>a</samp>&rsquo; is a plain
variable (different from &lsquo;<samp>b</samp>&rsquo;).
</p>
<a name="index-negative"></a>
<p>The &lsquo;<samp>negative(a)</samp>&rsquo; function returns true if &lsquo;<samp>a</samp>&rsquo; &ldquo;looks&rdquo; negative,
because it is a negative number, because it is of the form &lsquo;<samp>-x</samp>&rsquo;,
or because it is a product or quotient with a term that looks negative.
This is most useful in rewrite rules.  Beware that &lsquo;<samp>negative(a)</samp>&rsquo;
evaluates to 1 or 0 for <em>any</em> argument &lsquo;<samp>a</samp>&rsquo;, so it can only
be stored in a formula if the default simplifications are turned off
first with <kbd>m O</kbd> (or if it appears in an unevaluated context such
as a rewrite rule condition).
</p>
<a name="index-variable"></a>
<p>The &lsquo;<samp>variable(a)</samp>&rsquo; function is true if &lsquo;<samp>a</samp>&rsquo; is a variable,
or false if not.  If &lsquo;<samp>a</samp>&rsquo; is a function call, this test is left
in symbolic form.  Built-in variables like <code>pi</code> and <code>inf</code>
are considered variables like any others by this test.
</p>
<a name="index-nonvar"></a>
<p>The &lsquo;<samp>nonvar(a)</samp>&rsquo; function is true if &lsquo;<samp>a</samp>&rsquo; is a non-variable.
If its argument is a variable it is left unsimplified; it never
actually returns zero.  However, since Calc&rsquo;s condition-testing
commands consider &ldquo;false&rdquo; anything not provably true, this is
often good enough.
</p>
<a name="index-lin"></a>
<a name="index-linnt"></a>
<a name="index-islin"></a>
<a name="index-islinnt"></a>
<a name="index-Linearity-testing"></a>
<p>The functions <code>lin</code>, <code>linnt</code>, <code>islin</code>, and <code>islinnt</code>
check if an expression is &ldquo;linear,&rdquo; i.e., can be written in the form
&lsquo;<samp>a + b x</samp>&rsquo; for some constants &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo;, and some
variable or subformula &lsquo;<samp>x</samp>&rsquo;.  The function &lsquo;<samp>islin(f,x)</samp>&rsquo; checks
if formula &lsquo;<samp>f</samp>&rsquo; is linear in &lsquo;<samp>x</samp>&rsquo;, returning 1 if so.  For
example, &lsquo;<samp>islin(x,x)</samp>&rsquo;, &lsquo;<samp>islin(-x,x)</samp>&rsquo;, &lsquo;<samp>islin(3,x)</samp>&rsquo;, and
&lsquo;<samp>islin(x y / 3 - 2, x)</samp>&rsquo; all return 1.  The &lsquo;<samp>lin(f,x)</samp>&rsquo; function
is similar, except that instead of returning 1 it returns the vector
&lsquo;<samp>[a, b, x]</samp>&rsquo;.  For the above examples, this vector would be
&lsquo;<samp>[0, 1, x]</samp>&rsquo;, &lsquo;<samp>[0, -1, x]</samp>&rsquo;, &lsquo;<samp>[3, 0, x]</samp>&rsquo;, and
&lsquo;<samp>[-2, y/3, x]</samp>&rsquo;, respectively.  Both <code>lin</code> and <code>islin</code>
generally remain unevaluated for expressions which are not linear,
e.g., &lsquo;<samp>lin(2 x^2, x)</samp>&rsquo; and &lsquo;<samp>lin(sin(x), x)</samp>&rsquo;.  The second
argument can also be a formula; &lsquo;<samp>islin(2 + 3 sin(x), sin(x))</samp>&rsquo;
returns true.
</p>
<p>The <code>linnt</code> and <code>islinnt</code> functions perform a similar check,
but require a &ldquo;non-trivial&rdquo; linear form, which means that the
&lsquo;<samp>b</samp>&rsquo; coefficient must be non-zero.  For example, &lsquo;<samp>lin(2,x)</samp>&rsquo;
returns &lsquo;<samp>[2, 0, x]</samp>&rsquo; and &lsquo;<samp>lin(y,x)</samp>&rsquo; returns &lsquo;<samp>[y, 0, x]</samp>&rsquo;,
but &lsquo;<samp>linnt(2,x)</samp>&rsquo; and &lsquo;<samp>linnt(y,x)</samp>&rsquo; are left unevaluated
(in other words, these formulas are considered to be only &ldquo;trivially&rdquo;
linear in &lsquo;<samp>x</samp>&rsquo;).
</p>
<p>All four linearity-testing functions allow you to omit the second
argument, in which case the input may be linear in any non-constant
formula.  Here, the &lsquo;<samp>a=0</samp>&rsquo;, &lsquo;<samp>b=1</samp>&rsquo; case is also considered
trivial, and only constant values for &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are
recognized.  Thus, &lsquo;<samp>lin(2 x y)</samp>&rsquo; returns &lsquo;<samp>[0, 2, x y]</samp>&rsquo;,
&lsquo;<samp>lin(2 - x y)</samp>&rsquo; returns &lsquo;<samp>[2, -1, x y]</samp>&rsquo;, and &lsquo;<samp>lin(x y)</samp>&rsquo;
returns &lsquo;<samp>[0, 1, x y]</samp>&rsquo;.  The <code>linnt</code> function would allow the
first two cases but not the third.  Also, neither <code>lin</code> nor
<code>linnt</code> accept plain constants as linear in the one-argument
case: &lsquo;<samp>islin(2,x)</samp>&rsquo; is true, but &lsquo;<samp>islin(2)</samp>&rsquo; is false.
</p>
<a name="index-istrue"></a>
<p>The &lsquo;<samp>istrue(a)</samp>&rsquo; function returns 1 if &lsquo;<samp>a</samp>&rsquo; is a nonzero
number or provably nonzero formula, or 0 if &lsquo;<samp>a</samp>&rsquo; is anything else.
Calls to <code>istrue</code> can only be manipulated if <kbd>m O</kbd> mode is
used to make sure they are not evaluated prematurely.  (Note that
declarations are used when deciding whether a formula is true;
<code>istrue</code> returns 1 when <code>dnonzero</code> would return 1, and
it returns 0 when <code>dnonzero</code> would return 0 or leave itself
in symbolic form.)
</p>
<hr>
<a name="Rewrite-Rules"></a>
<div class="header">
<p>
Previous: <a href="#Logical-Operations" accesskey="p" rel="prev">Logical Operations</a>, Up: <a href="#Algebra" accesskey="u" rel="up">Algebra</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rewrite-Rules-2"></a>
<h3 class="section">10.11 Rewrite Rules</h3>

<p><a name="index-Rewrite-rules"></a>
<a name="index-Transformations"></a>
<a name="index-Pattern-matching"></a>
<a name="index-a-r"></a>
<a name="index-calc_002drewrite"></a>
<a name="index-rewrite-1"></a>
The <kbd>a r</kbd> (<code>calc-rewrite</code>) [<code>rewrite</code>] command makes
substitutions in a formula according to a specified pattern or patterns
known as <em>rewrite rules</em>.  Whereas <kbd>a b</kbd> (<code>calc-substitute</code>)
matches literally, so that substituting &lsquo;<samp>sin(x)</samp>&rsquo; with &lsquo;<samp>cos(x)</samp>&rsquo;
matches only the <code>sin</code> function applied to the variable <code>x</code>,
rewrite rules match general kinds of formulas; rewriting using the rule
&lsquo;<samp>sin(x) := cos(x)</samp>&rsquo; matches <code>sin</code> of any argument and replaces
it with <code>cos</code> of that same argument.  The only significance of the
name <code>x</code> is that the same name is used on both sides of the rule.
</p>
<p>Rewrite rules rearrange formulas already in Calc&rsquo;s memory.
See <a href="#Syntax-Tables">Syntax Tables</a>, to read about <em>syntax rules</em>, which are
similar to algebraic rewrite rules but operate when new algebraic
entries are being parsed, converting strings of characters into
Calc formulas.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Entering-Rewrite-Rules" accesskey="1">Entering Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Basic-Rewrite-Rules" accesskey="2">Basic Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Rewrite-Rules" accesskey="3">Conditional Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Properties-of-Rewrite-Rules" accesskey="4">Algebraic Properties of Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Other-Features-of-Rewrite-Rules" accesskey="5">Other Features of Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Composing-Patterns-in-Rewrite-Rules" accesskey="6">Composing Patterns in Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Nested-Formulas-with-Rewrite-Rules" accesskey="7">Nested Formulas with Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Multi_002dPhase-Rewrite-Rules" accesskey="8">Multi-Phase Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Selections-with-Rewrite-Rules" accesskey="9">Selections with Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Matching-Commands">Matching Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Automatic-Rewrites">Automatic Rewrites</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-Rewrites">Debugging Rewrites</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Examples-of-Rewrite-Rules">Examples of Rewrite Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Entering-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Basic-Rewrite-Rules" accesskey="n" rel="next">Basic Rewrite Rules</a>, Previous: <a href="#Rewrite-Rules" accesskey="p" rel="prev">Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Entering-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.1 Entering Rewrite Rules</h4>

<p>Rewrite rules normally use the &ldquo;assignment&rdquo; operator
&lsquo;<samp><var>old</var> := <var>new</var></samp>&rsquo;.
This operator is equivalent to the function call &lsquo;<samp>assign(old, new)</samp>&rsquo;.
The <code>assign</code> function is undefined by itself in Calc, so an
assignment formula such as a rewrite rule will be left alone by ordinary
Calc commands.  But certain commands, like the rewrite system, interpret
assignments in special ways.
</p>
<p>For example, the rule &lsquo;<samp>sin(x)^2 := 1-cos(x)^2</samp>&rsquo; says to replace
every occurrence of the sine of something, squared, with one minus the
square of the cosine of that same thing.  All by itself as a formula
on the stack it does nothing, but when given to the <kbd>a r</kbd> command
it turns that command into a sine-squared-to-cosine-squared converter.
</p>
<p>To specify a set of rules to be applied all at once, make a vector of
rules.
</p>
<p>When <kbd>a r</kbd> prompts you to enter the rewrite rules, you can answer
in several ways:
</p>
<ol>
<li> With a rule:  <kbd>f(x) := g(x) <span class="key">RET</span></kbd>.
</li><li> With a vector of rules:  <kbd>[f1(x) := g1(x), f2(x) := g2(x)] <span class="key">RET</span></kbd>.
(You can omit the enclosing square brackets if you wish.)
</li><li> With the name of a variable that contains the rule or rules vector:
<kbd>myrules <span class="key">RET</span></kbd>.
</li><li> With any formula except a rule, a vector, or a variable name; this
will be interpreted as the <var>old</var> half of a rewrite rule,
and you will be prompted a second time for the <var>new</var> half:
<kbd>f(x) <span class="key">RET</span> g(x) <span class="key">RET</span></kbd>.
</li><li> With a blank line, in which case the rule, rules vector, or variable
will be taken from the top of the stack (and the formula to be
rewritten will come from the second-to-top position).
</li></ol>

<p>If you enter the rules directly (as opposed to using rules stored
in a variable), those rules will be put into the Trail so that you
can retrieve them later.  See <a href="#Trail-Commands">Trail Commands</a>.
</p>
<p>It is most convenient to store rules you use often in a variable and
invoke them by giving the variable name.  The <kbd>s e</kbd>
(<code>calc-edit-variable</code>) command is an easy way to create or edit a
rule set stored in a variable.  You may also wish to use <kbd>s p</kbd>
(<code>calc-permanent-variable</code>) to save your rules permanently;
see <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<p>Rewrite rules are compiled into a special internal form for faster
matching.  If you enter a rule set directly it must be recompiled
every time.  If you store the rules in a variable and refer to them
through that variable, they will be compiled once and saved away
along with the variable for later reference.  This is another good
reason to store your rules in a variable.
</p>
<p>Calc also accepts an obsolete notation for rules, as vectors
&lsquo;<samp>[<var>old</var>, <var>new</var>]</samp>&rsquo;.  But because it is easily confused with a
vector of two rules, the use of this notation is no longer recommended.
</p>
<hr>
<a name="Basic-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Rewrite-Rules" accesskey="n" rel="next">Conditional Rewrite Rules</a>, Previous: <a href="#Entering-Rewrite-Rules" accesskey="p" rel="prev">Entering Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.2 Basic Rewrite Rules</h4>

<p>To match a particular formula &lsquo;<samp>x</samp>&rsquo; with a particular rewrite rule
&lsquo;<samp><var>old</var> := <var>new</var></samp>&rsquo;, Calc compares the structure of &lsquo;<samp>x</samp>&rsquo; with
the structure of <var>old</var>.  Variables that appear in <var>old</var> are
treated as <em>meta-variables</em>; the corresponding positions in &lsquo;<samp>x</samp>&rsquo;
may contain any sub-formulas.  For example, the pattern &lsquo;<samp>f(x,y)</samp>&rsquo;
would match the expression &lsquo;<samp>f(12, a+1)</samp>&rsquo; with the meta-variable
&lsquo;<samp>x</samp>&rsquo; corresponding to 12 and with &lsquo;<samp>y</samp>&rsquo; corresponding to
&lsquo;<samp>a+1</samp>&rsquo;.  However, this pattern would not match &lsquo;<samp>f(12)</samp>&rsquo; or
&lsquo;<samp>g(12, a+1)</samp>&rsquo;, since there is no assignment of the meta-variables
that will make the pattern match these expressions.  Notice that if
the pattern is a single meta-variable, it will match any expression.
</p>
<p>If a given meta-variable appears more than once in <var>old</var>, the
corresponding sub-formulas of &lsquo;<samp>x</samp>&rsquo; must be identical.  Thus
the pattern &lsquo;<samp>f(x,x)</samp>&rsquo; would match &lsquo;<samp>f(12, 12)</samp>&rsquo; and
&lsquo;<samp>f(a+1, a+1)</samp>&rsquo; but not &lsquo;<samp>f(12, a+1)</samp>&rsquo; or &lsquo;<samp>f(a+b, b+a)</samp>&rsquo;.
(See <a href="#Conditional-Rewrite-Rules">Conditional Rewrite Rules</a>, for a way to match the latter.)
</p>
<p>Things other than variables must match exactly between the pattern
and the target formula.  To match a particular variable exactly, use
the pseudo-function &lsquo;<samp>quote(v)</samp>&rsquo; in the pattern.  For example, the
pattern &lsquo;<samp>x+quote(y)</samp>&rsquo; matches &lsquo;<samp>x+y</samp>&rsquo;, &lsquo;<samp>2+y</samp>&rsquo;, or
&lsquo;<samp>sin(a)+y</samp>&rsquo;.
</p>
<p>The special variable names &lsquo;<samp>e</samp>&rsquo;, &lsquo;<samp>pi</samp>&rsquo;, &lsquo;<samp>i</samp>&rsquo;, &lsquo;<samp>phi</samp>&rsquo;,
&lsquo;<samp>gamma</samp>&rsquo;, &lsquo;<samp>inf</samp>&rsquo;, &lsquo;<samp>uinf</samp>&rsquo;, and &lsquo;<samp>nan</samp>&rsquo; always match
literally.  Thus the pattern &lsquo;<samp>sin(d + e + f)</samp>&rsquo; acts exactly like
&lsquo;<samp>sin(d + quote(e) + f)</samp>&rsquo;.
</p>
<p>If the <var>old</var> pattern is found to match a given formula, that
formula is replaced by <var>new</var>, where any occurrences in <var>new</var>
of meta-variables from the pattern are replaced with the sub-formulas
that they matched.  Thus, applying the rule &lsquo;<samp>f(x,y) := g(y+x,x)</samp>&rsquo;
to &lsquo;<samp>f(12, a+1)</samp>&rsquo; would produce &lsquo;<samp>g(a+13, 12)</samp>&rsquo;.
</p>
<p>The normal <kbd>a r</kbd> command applies rewrite rules over and over
throughout the target formula until no further changes are possible
(up to a limit of 100 times).  Use <kbd>C-u 1 a r</kbd> to make only one
change at a time.
</p>
<hr>
<a name="Conditional-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Properties-of-Rewrite-Rules" accesskey="n" rel="next">Algebraic Properties of Rewrite Rules</a>, Previous: <a href="#Basic-Rewrite-Rules" accesskey="p" rel="prev">Basic Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditional-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.3 Conditional Rewrite Rules</h4>

<p>A rewrite rule can also be <em>conditional</em>, written in the form
&lsquo;<samp><var>old</var> := <var>new</var> :: <var>cond</var></samp>&rsquo;.  (There is also the obsolete
form &lsquo;<samp>[<var>old</var>, <var>new</var>, <var>cond</var>]</samp>&rsquo;.)  If a <var>cond</var> part
is present in the
rule, this is an additional condition that must be satisfied before
the rule is accepted.  Once <var>old</var> has been successfully matched
to the target expression, <var>cond</var> is evaluated (with all the
meta-variables substituted for the values they matched) and simplified
with Calc&rsquo;s algebraic simplifications.  If the result is a nonzero
number or any other object known to be nonzero (see <a href="#Declarations">Declarations</a>),
the rule is accepted.  If the result is zero or if it is a symbolic
formula that is not known to be nonzero, the rule is rejected.
See <a href="#Logical-Operations">Logical Operations</a>, for a number of functions that return
1 or 0 according to the results of various tests.
</p>
<p>For example, the formula &lsquo;<samp>n &gt; 0</samp>&rsquo; simplifies to 1 or 0 if &lsquo;<samp>n</samp>&rsquo;
is replaced by a positive or nonpositive number, respectively (or if
&lsquo;<samp>n</samp>&rsquo; has been declared to be positive or nonpositive).  Thus,
the rule &lsquo;<samp>f(x,y) := g(y+x,x) :: x+y &gt; 0</samp>&rsquo; would apply to
&lsquo;<samp>f(0, 4)</samp>&rsquo; but not to &lsquo;<samp>f(-3, 2)</samp>&rsquo; or &lsquo;<samp>f(12, a+1)</samp>&rsquo;
(assuming no outstanding declarations for &lsquo;<samp>a</samp>&rsquo;).  In the case of
&lsquo;<samp>f(-3, 2)</samp>&rsquo;, the condition can be shown not to be satisfied; in
the case of &lsquo;<samp>f(12, a+1)</samp>&rsquo;, the condition merely cannot be shown
to be satisfied, but that is enough to reject the rule.
</p>
<p>While Calc will use declarations to reason about variables in the
formula being rewritten, declarations do not apply to meta-variables.
For example, the rule &lsquo;<samp>f(a) := g(a+1)</samp>&rsquo; will match for any values
of &lsquo;<samp>a</samp>&rsquo;, such as complex numbers, vectors, or formulas, even if
&lsquo;<samp>a</samp>&rsquo; has been declared to be real or scalar.  If you want the
meta-variable &lsquo;<samp>a</samp>&rsquo; to match only literal real numbers, use
&lsquo;<samp>f(a) := g(a+1) :: real(a)</samp>&rsquo;.  If you want &lsquo;<samp>a</samp>&rsquo; to match only
reals and formulas which are provably real, use &lsquo;<samp>dreal(a)</samp>&rsquo; as
the condition.
</p>
<p>The &lsquo;<samp>::</samp>&rsquo; operator is a shorthand for the <code>condition</code>
function; &lsquo;<samp><var>old</var> := <var>new</var> :: <var>cond</var></samp>&rsquo; is equivalent to
the formula &lsquo;<samp>condition(assign(<var>old</var>, <var>new</var>), <var>cond</var>)</samp>&rsquo;.
</p>
<p>If you have several conditions, you can use &lsquo;<samp>... :: c1 :: c2 :: c3</samp>&rsquo;
or &lsquo;<samp>... :: c1 &amp;&amp; c2 &amp;&amp; c3</samp>&rsquo;.  The two are entirely equivalent.
</p>
<p>It is also possible to embed conditions inside the pattern:
&lsquo;<samp>f(x :: x&gt;0, y) := g(y+x, x)</samp>&rsquo;.  This is purely a notational
convenience, though; where a condition appears in a rule has no
effect on when it is tested.  The rewrite-rule compiler automatically
decides when it is best to test each condition while a rule is being
matched.
</p>
<p>Certain conditions are handled as special cases by the rewrite rule
system and are tested very efficiently:  Where &lsquo;<samp>x</samp>&rsquo; is any
meta-variable, these conditions are &lsquo;<samp>integer(x)</samp>&rsquo;, &lsquo;<samp>real(x)</samp>&rsquo;,
&lsquo;<samp>constant(x)</samp>&rsquo;, &lsquo;<samp>negative(x)</samp>&rsquo;, &lsquo;<samp>x &gt;= y</samp>&rsquo; where &lsquo;<samp>y</samp>&rsquo;
is either a constant or another meta-variable and &lsquo;<samp>&gt;=</samp>&rsquo; may be
replaced by any of the six relational operators, and &lsquo;<samp>x % a = b</samp>&rsquo;
where &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are constants.  Other conditions, like
&lsquo;<samp>x &gt;= y+1</samp>&rsquo; or &lsquo;<samp>dreal(x)</samp>&rsquo;, will be less efficient to check
since Calc must bring the whole evaluator and simplifier into play.
</p>
<p>An interesting property of &lsquo;<samp>::</samp>&rsquo; is that neither of its arguments
will be touched by Calc&rsquo;s default simplifications.  This is important
because conditions often are expressions that cannot safely be
evaluated early.  For example, the <code>typeof</code> function never
remains in symbolic form; entering &lsquo;<samp>typeof(a)</samp>&rsquo; will put the
number 100 (the type code for variables like &lsquo;<samp>a</samp>&rsquo;) on the stack.
But putting the condition &lsquo;<samp>... :: typeof(a) = 6</samp>&rsquo; on the stack
is safe since &lsquo;<samp>::</samp>&rsquo; prevents the <code>typeof</code> from being
evaluated until the condition is actually used by the rewrite system.
</p>
<p>Since &lsquo;<samp>::</samp>&rsquo; protects its lefthand side, too, you can use a dummy
condition to protect a rule that must itself not evaluate early.
For example, it&rsquo;s not safe to put &lsquo;<samp>a(f,x) := apply(f, [x])</samp>&rsquo; on
the stack because it will immediately evaluate to &lsquo;<samp>a(f,x) := f(x)</samp>&rsquo;,
where the meta-variable-ness of <code>f</code> on the righthand side has been
lost.  But &lsquo;<samp>a(f,x) := apply(f, [x]) :: 1</samp>&rsquo; is safe, and of course
the condition &lsquo;<samp>1</samp>&rsquo; is always true (nonzero) so it has no effect on
the functioning of the rule.  (The rewrite compiler will ensure that
it doesn&rsquo;t even impact the speed of matching the rule.)
</p>
<hr>
<a name="Algebraic-Properties-of-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Other-Features-of-Rewrite-Rules" accesskey="n" rel="next">Other Features of Rewrite Rules</a>, Previous: <a href="#Conditional-Rewrite-Rules" accesskey="p" rel="prev">Conditional Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Algebraic-Properties-of-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.4 Algebraic Properties of Rewrite Rules</h4>

<p>The rewrite mechanism understands the algebraic properties of functions
like &lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>*</samp>&rsquo;.  In particular, pattern matching takes
the associativity and commutativity of the following functions into
account:
</p>
<div class="smallexample">
<pre class="smallexample">+ - *  = !=  &amp;&amp; ||  and or xor  vint vunion vxor  gcd lcm  max min  beta
</pre></div>

<p>For example, the rewrite rule:
</p>
<div class="example">
<pre class="example">a x + b x  :=  (a + b) x
</pre></div>

<p>will match formulas of the form,
</p>
<div class="example">
<pre class="example">a x + b x,  x a + x b,  a x + x b,  x a + b x
</pre></div>

<p>Rewrites also understand the relationship between the &lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>-</samp>&rsquo;
operators.  The above rewrite rule will also match the formulas,
</p>
<div class="example">
<pre class="example">a x - b x,  x a - x b,  a x - x b,  x a - b x
</pre></div>

<p>by matching &lsquo;<samp>b</samp>&rsquo; in the pattern to &lsquo;<samp>-b</samp>&rsquo; from the formula.
</p>
<p>Applied to a sum of many terms like &lsquo;<samp>r + a x + s + b x + t</samp>&rsquo;, this
pattern will check all pairs of terms for possible matches.  The rewrite
will take whichever suitable pair it discovers first.
</p>
<p>In general, a pattern using an associative operator like &lsquo;<samp>a + b</samp>&rsquo;
will try <var>2 n</var> different ways to match a sum of <var>n</var> terms
like &lsquo;<samp>x + y + z - w</samp>&rsquo;.  First, &lsquo;<samp>a</samp>&rsquo; is matched against each
of &lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>y</samp>&rsquo;, &lsquo;<samp>z</samp>&rsquo;, and &lsquo;<samp>-w</samp>&rsquo; in turn, with &lsquo;<samp>b</samp>&rsquo;
being matched to the remainders &lsquo;<samp>y + z - w</samp>&rsquo;, &lsquo;<samp>x + z - w</samp>&rsquo;, etc.
If none of these succeed, then &lsquo;<samp>b</samp>&rsquo; is matched against each of the
four terms with &lsquo;<samp>a</samp>&rsquo; matching the remainder.  Half-and-half matches,
like &lsquo;<samp>(x + y) + (z - w)</samp>&rsquo;, are not tried.
</p>
<p>Note that &lsquo;<samp>*</samp>&rsquo; is not commutative when applied to matrices, but
rewrite rules pretend that it is.  If you type <kbd>m v</kbd> to enable
Matrix mode (see <a href="#Matrix-Mode">Matrix Mode</a>), rewrite rules will match &lsquo;<samp>*</samp>&rsquo;
literally, ignoring its usual commutativity property.  (In the
current implementation, the associativity also vanishes&mdash;it is as
if the pattern had been enclosed in a <code>plain</code> marker; see below.)
If you are applying rewrites to formulas with matrices, it&rsquo;s best to
enable Matrix mode first to prevent algebraically incorrect rewrites
from occurring.
</p>
<p>The pattern &lsquo;<samp>-x</samp>&rsquo; will actually match any expression.  For example,
the rule
</p>
<div class="example">
<pre class="example">f(-x)  :=  -f(x)
</pre></div>

<p>will rewrite &lsquo;<samp>f(a)</samp>&rsquo; to &lsquo;<samp>-f(-a)</samp>&rsquo;.  To avoid this, either use
a <code>plain</code> marker as described below, or add a &lsquo;<samp>negative(x)</samp>&rsquo;
condition.  The <code>negative</code> function is true if its argument
&ldquo;looks&rdquo; negative, for example, because it is a negative number or
because it is a formula like &lsquo;<samp>-x</samp>&rsquo;.  The new rule using this
condition is:
</p>
<div class="example">
<pre class="example">f(x)  :=  -f(-x)  :: negative(x)    <span class="roman">or, equivalently,</span>
f(-x)  :=  -f(x)  :: negative(-x)
</pre></div>

<p>In the same way, the pattern &lsquo;<samp>x - y</samp>&rsquo; will match the sum &lsquo;<samp>a + b</samp>&rsquo;
by matching &lsquo;<samp>y</samp>&rsquo; to &lsquo;<samp>-b</samp>&rsquo;.
</p>
<p>The pattern &lsquo;<samp>a b</samp>&rsquo; will also match the formula &lsquo;<samp>x/y</samp>&rsquo; if
&lsquo;<samp>y</samp>&rsquo; is a number.  Thus the rule &lsquo;<samp>a x + b&nbsp;x<!-- /@w --> := (a+b) x</samp>&rsquo;
will also convert &lsquo;<samp>a x + x / 2</samp>&rsquo; to &lsquo;<samp>(a + 0.5) x</samp>&rsquo; (or
&lsquo;<samp>(a + 1:2) x</samp>&rsquo;, depending on the current fraction mode).
</p>
<p>Calc will <em>not</em> take other liberties with &lsquo;<samp>*</samp>&rsquo;, &lsquo;<samp>/</samp>&rsquo;, and
&lsquo;<samp>^</samp>&rsquo;.  For example, the pattern &lsquo;<samp>f(a b)</samp>&rsquo; will not match
&lsquo;<samp>f(x^2)</samp>&rsquo;, and &lsquo;<samp>f(a + b)</samp>&rsquo; will not match &lsquo;<samp>f(2 x)</samp>&rsquo;, even
though conceivably these patterns could match with &lsquo;<samp>a = b = x</samp>&rsquo;.
Nor will &lsquo;<samp>f(a b)</samp>&rsquo; match &lsquo;<samp>f(x / y)</samp>&rsquo; if &lsquo;<samp>y</samp>&rsquo; is not a
constant, even though it could be considered to match with &lsquo;<samp>a = x</samp>&rsquo;
and &lsquo;<samp>b = 1/y</samp>&rsquo;.  The reasons are partly for efficiency, and partly
because while few mathematical operations are substantively different
for addition and subtraction, often it is preferable to treat the cases
of multiplication, division, and integer powers separately.
</p>
<p>Even more subtle is the rule set
</p>
<div class="example">
<pre class="example">[ f(a) + f(b) := f(a + b),  -f(a) := f(-a) ]
</pre></div>

<p>attempting to match &lsquo;<samp>f(x) - f(y)</samp>&rsquo;.  You might think that Calc
will view this subtraction as &lsquo;<samp>f(x) + (-f(y))</samp>&rsquo; and then apply
the above two rules in turn, but actually this will not work because
Calc only does this when considering rules for &lsquo;<samp>+</samp>&rsquo; (like the
first rule in this set).  So it will see first that &lsquo;<samp>f(x) + (-f(y))</samp>&rsquo;
does not match &lsquo;<samp>f(a) + f(b)</samp>&rsquo; for any assignments of the
meta-variables, and then it will see that &lsquo;<samp>f(x) - f(y)</samp>&rsquo; does
not match &lsquo;<samp>-f(a)</samp>&rsquo; for any assignment of &lsquo;<samp>a</samp>&rsquo;.  Because Calc
tries only one rule at a time, it will not be able to rewrite
&lsquo;<samp>f(x) - f(y)</samp>&rsquo; with this rule set.  An explicit &lsquo;<samp>f(a) - f(b)</samp>&rsquo;
rule will have to be added.
</p>
<p>Another thing patterns will <em>not</em> do is break up complex numbers.
The pattern &lsquo;<samp>myconj(a + b&nbsp;i)<!-- /@w --> := a - b i</samp>&rsquo; will work for formulas
involving the special constant &lsquo;<samp>i</samp>&rsquo; (such as &lsquo;<samp>3 - 4 i</samp>&rsquo;), but
it will not match actual complex numbers like &lsquo;<samp>(3, -4)</samp>&rsquo;.  A version
of the above rule for complex numbers would be
</p>
<div class="example">
<pre class="example">myconj(a)  :=  re(a) - im(a) (0,1)  :: im(a) != 0
</pre></div>

<p>(Because the <code>re</code> and <code>im</code> functions understand the properties
of the special constant &lsquo;<samp>i</samp>&rsquo;, this rule will also work for
&lsquo;<samp>3 - 4 i</samp>&rsquo;.  In fact, this particular rule would probably be better
without the &lsquo;<samp>im(a) != 0</samp>&rsquo; condition, since if &lsquo;<samp>im(a) = 0</samp>&rsquo; the
righthand side of the rule will still give the correct answer for the
conjugate of a real number.)
</p>
<p>It is also possible to specify optional arguments in patterns.  The rule
</p>
<div class="example">
<pre class="example">opt(a) x + opt(b) (x^opt(c) + opt(d))  :=  f(a, b, c, d)
</pre></div>

<p>will match the formula
</p>
<div class="example">
<pre class="example">5 (x^2 - 4) + 3 x
</pre></div>

<p>in a fairly straightforward manner, but it will also match reduced
formulas like
</p>
<div class="example">
<pre class="example">x + x^2,    2(x + 1) - x,    x + x
</pre></div>

<p>producing, respectively,
</p>
<div class="example">
<pre class="example">f(1, 1, 2, 0),   f(-1, 2, 1, 1),   f(1, 1, 1, 0)
</pre></div>

<p>(The latter two formulas can be entered only if default simplifications
have been turned off with <kbd>m O</kbd>.)
</p>
<p>The default value for a term of a sum is zero.  The default value
for a part of a product, for a power, or for the denominator of a
quotient, is one.  Also, &lsquo;<samp>-x</samp>&rsquo; matches the pattern &lsquo;<samp>opt(a) b</samp>&rsquo;
with &lsquo;<samp>a = -1</samp>&rsquo;.
</p>
<p>In particular, the distributive-law rule can be refined to
</p>
<div class="example">
<pre class="example">opt(a) x + opt(b) x  :=  (a + b) x
</pre></div>

<p>so that it will convert, e.g., &lsquo;<samp>a x - x</samp>&rsquo;, to &lsquo;<samp>(a - 1) x</samp>&rsquo;.
</p>
<p>The pattern &lsquo;<samp>opt(a) + opt(b) x</samp>&rsquo; matches almost any formulas which
are linear in &lsquo;<samp>x</samp>&rsquo;.  You can also use the <code>lin</code> and <code>islin</code>
functions with rewrite conditions to test for this; see <a href="#Logical-Operations">Logical Operations</a>.  These functions are not as convenient to use in rewrite
rules, but they recognize more kinds of formulas as linear:
&lsquo;<samp>x/z</samp>&rsquo; is considered linear with &lsquo;<samp>b = 1/z</samp>&rsquo; by <code>lin</code>,
but it will not match the above pattern because that pattern calls
for a multiplication, not a division.
</p>
<p>As another example, the obvious rule to replace &lsquo;<samp>sin(x)^2 + cos(x)^2</samp>&rsquo;
by 1,
</p>
<div class="example">
<pre class="example">sin(x)^2 + cos(x)^2  :=  1
</pre></div>

<p>misses many cases because the sine and cosine may both be multiplied by
an equal factor.  Here&rsquo;s a more successful rule:
</p>
<div class="example">
<pre class="example">opt(a) sin(x)^2 + opt(a) cos(x)^2  :=  a
</pre></div>

<p>Note that this rule will <em>not</em> match &lsquo;<samp>sin(x)^2 + 6 cos(x)^2</samp>&rsquo;
because one &lsquo;<samp>a</samp>&rsquo; would have &ldquo;matched&rdquo; 1 while the other matched 6.
</p>
<p>Calc automatically converts a rule like
</p>
<div class="example">
<pre class="example">f(x-1, x)  :=  g(x)
</pre></div>

<p>into the form
</p>
<div class="example">
<pre class="example">f(temp, x)  :=  g(x)  :: temp = x-1
</pre></div>

<p>(where <code>temp</code> stands for a new, invented meta-variable that
doesn&rsquo;t actually have a name).  This modified rule will successfully
match &lsquo;<samp>f(6, 7)</samp>&rsquo;, binding &lsquo;<samp>temp</samp>&rsquo; and &lsquo;<samp>x</samp>&rsquo; to 6 and 7,
respectively, then verifying that they differ by one even though
&lsquo;<samp>6</samp>&rsquo; does not superficially look like &lsquo;<samp>x-1</samp>&rsquo;.
</p>
<p>However, Calc does not solve equations to interpret a rule.  The
following rule,
</p>
<div class="example">
<pre class="example">f(x-1, x+1)  :=  g(x)
</pre></div>

<p>will not work.  That is, it will match &lsquo;<samp>f(a - 1 + b, a + 1 + b)</samp>&rsquo;
but not &lsquo;<samp>f(6, 8)</samp>&rsquo;.  Calc always interprets at least one occurrence
of a variable by literal matching.  If the variable appears &ldquo;isolated&rdquo;
then Calc is smart enough to use it for literal matching.  But in this
last example, Calc is forced to rewrite the rule to &lsquo;<samp>f(x-1, temp)
:= g(x) :: temp = x+1</samp>&rsquo; where the &lsquo;<samp>x-1</samp>&rsquo; term must correspond to an
actual &ldquo;something-minus-one&rdquo; in the target formula.
</p>
<p>A successful way to write this would be &lsquo;<samp>f(x, x+2) := g(x+1)</samp>&rsquo;.
You could make this resemble the original form more closely by using
<code>let</code> notation, which is described in the next section:
</p>
<div class="example">
<pre class="example">f(xm1, x+1)  :=  g(x)  :: let(x := xm1+1)
</pre></div>

<p>Calc does this rewriting or &ldquo;conditionalizing&rdquo; for any sub-pattern
which involves only the functions in the following list, operating
only on constants and meta-variables which have already been matched
elsewhere in the pattern.  When matching a function call, Calc is
careful to match arguments which are plain variables before arguments
which are calls to any of the functions below, so that a pattern like
&lsquo;<samp>f(x-1, x)</samp>&rsquo; can be conditionalized even though the isolated
&lsquo;<samp>x</samp>&rsquo; comes after the &lsquo;<samp>x-1</samp>&rsquo;.
</p>
<div class="smallexample">
<pre class="smallexample">+ - * / \ % ^  abs sign  round rounde roundu trunc floor ceil
max min  re im conj arg
</pre></div>

<p>You can suppress all of the special treatments described in this
section by surrounding a function call with a <code>plain</code> marker.
This marker causes the function call which is its argument to be
matched literally, without regard to commutativity, associativity,
negation, or conditionalization.  When you use <code>plain</code>, the
&ldquo;deep structure&rdquo; of the formula being matched can show through.
For example,
</p>
<div class="example">
<pre class="example">plain(a - a b)  :=  f(a, b)
</pre></div>

<p>will match only literal subtractions.  However, the <code>plain</code>
marker does not affect its arguments&rsquo; arguments.  In this case,
commutativity and associativity is still considered while matching
the &lsquo;<samp>a&nbsp;b</samp>&rsquo;<!-- /@w --> sub-pattern, so the whole pattern will match
&lsquo;<samp>x - y x</samp>&rsquo; as well as &lsquo;<samp>x - x y</samp>&rsquo;.  We could go still
further and use
</p>
<div class="example">
<pre class="example">plain(a - plain(a b))  :=  f(a, b)
</pre></div>

<p>which would do a completely strict match for the pattern.
</p>
<p>By contrast, the <code>quote</code> marker means that not only the
function name but also the arguments must be literally the same.
The above pattern will match &lsquo;<samp>x - x y</samp>&rsquo; but
</p>
<div class="example">
<pre class="example">quote(a - a b)  :=  f(a, b)
</pre></div>

<p>will match only the single formula &lsquo;<samp>a - a b</samp>&rsquo;.  Also,
</p>
<div class="example">
<pre class="example">quote(a - quote(a b))  :=  f(a, b)
</pre></div>

<p>will match only &lsquo;<samp>a - quote(a b)</samp>&rsquo;&mdash;probably not the desired
effect!
</p>
<p>A certain amount of algebra is also done when substituting the
meta-variables on the righthand side of a rule.  For example,
in the rule
</p>
<div class="example">
<pre class="example">a + f(b)  :=  f(a + b)
</pre></div>

<p>matching &lsquo;<samp>f(x) - y</samp>&rsquo; would produce &lsquo;<samp>f((-y) + x)</samp>&rsquo; if
taken literally, but the rewrite mechanism will simplify the
righthand side to &lsquo;<samp>f(x - y)</samp>&rsquo; automatically.  (Of course,
the default simplifications would do this anyway, so this
special simplification is only noticeable if you have turned the
default simplifications off.)  This rewriting is done only when
a meta-variable expands to a &ldquo;negative-looking&rdquo; expression.
If this simplification is not desirable, you can use a <code>plain</code>
marker on the righthand side:
</p>
<div class="example">
<pre class="example">a + f(b)  :=  f(plain(a + b))
</pre></div>

<p>In this example, we are still allowing the pattern-matcher to
use all the algebra it can muster, but the righthand side will
always simplify to a literal addition like &lsquo;<samp>f((-y) + x)</samp>&rsquo;.
</p>
<hr>
<a name="Other-Features-of-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Composing-Patterns-in-Rewrite-Rules" accesskey="n" rel="next">Composing Patterns in Rewrite Rules</a>, Previous: <a href="#Algebraic-Properties-of-Rewrite-Rules" accesskey="p" rel="prev">Algebraic Properties of Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-Features-of-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.5 Other Features of Rewrite Rules</h4>

<p>Certain &ldquo;function names&rdquo; serve as markers in rewrite rules.
Here is a complete list of these markers.  First are listed the
markers that work inside a pattern; then come the markers that
work in the righthand side of a rule.
</p>
<a name="index-import"></a>
<p>One kind of marker, &lsquo;<samp>import(x)</samp>&rsquo;, takes the place of a whole
rule.  Here &lsquo;<samp>x</samp>&rsquo; is the name of a variable containing another
rule set; those rules are &ldquo;spliced into&rdquo; the rule set that
imports them.  For example, if &lsquo;<samp>[f(a+b) := f(a) + f(b),
f(a b) := a f(b) :: real(a)]</samp>&rsquo; is stored in variable &lsquo;<samp>linearF</samp>&rsquo;,
then the rule set &lsquo;<samp>[f(0) := 0, import(linearF)]</samp>&rsquo; will apply
all three rules.  It is possible to modify the imported rules
slightly:  &lsquo;<samp>import(x, v1, x1, v2, x2, &hellip;)</samp>&rsquo; imports
the rule set &lsquo;<samp>x</samp>&rsquo; with all occurrences of
&lsquo;<samp>v1</samp>&rsquo;,
as either a variable name or a function name, replaced with
&lsquo;<samp>x1</samp>&rsquo;
and so on.  (If
&lsquo;<samp>v1</samp>&rsquo;
is used as a function name, then
&lsquo;<samp>x1</samp>&rsquo;
must be either a function name itself or a &lsquo;<samp>&lt;&nbsp;&gt;</samp>&rsquo;<!-- /@w --> nameless
function; see <a href="#Specifying-Operators">Specifying Operators</a>.)  For example, &lsquo;<samp>[g(0) := 0,
import(linearF, f, g)]</samp>&rsquo; applies the linearity rules to the function
&lsquo;<samp>g</samp>&rsquo; instead of &lsquo;<samp>f</samp>&rsquo;.  Imports can be nested, but the
import-with-renaming feature may fail to rename sub-imports properly.
</p>
<p>The special functions allowed in patterns are:
</p>
<dl compact="compact">
<dt>&lsquo;<samp>quote(x)</samp>&rsquo;</dt>
<dd><a name="index-quote"></a>
<p>This pattern matches exactly &lsquo;<samp>x</samp>&rsquo;; variable names in &lsquo;<samp>x</samp>&rsquo; are
not interpreted as meta-variables.  The only flexibility is that
numbers are compared for numeric equality, so that the pattern
&lsquo;<samp>f(quote(12))</samp>&rsquo; will match both &lsquo;<samp>f(12)</samp>&rsquo; and &lsquo;<samp>f(12.0)</samp>&rsquo;.
(Numbers are always treated this way by the rewrite mechanism:
The rule &lsquo;<samp>f(x,x) := g(x)</samp>&rsquo; will match &lsquo;<samp>f(12, 12.0)</samp>&rsquo;.
The rewrite may produce either &lsquo;<samp>g(12)</samp>&rsquo; or &lsquo;<samp>g(12.0)</samp>&rsquo;
as a result in this case.)
</p>
</dd>
<dt>&lsquo;<samp>plain(x)</samp>&rsquo;</dt>
<dd><a name="index-plain"></a>
<p>Here &lsquo;<samp>x</samp>&rsquo; must be a function call &lsquo;<samp>f(x1,x2,&hellip;)</samp>&rsquo;.  This
pattern matches a call to function &lsquo;<samp>f</samp>&rsquo; with the specified
argument patterns.  No special knowledge of the properties of the
function &lsquo;<samp>f</samp>&rsquo; is used in this case; &lsquo;<samp>+</samp>&rsquo; is not commutative or
associative.  Unlike <code>quote</code>, the arguments &lsquo;<samp>x1,x2,&hellip;</samp>&rsquo;
are treated as patterns.  If you wish them to be treated &ldquo;plainly&rdquo;
as well, you must enclose them with more <code>plain</code> markers:
&lsquo;<samp>plain(plain(<span class="nolinebreak">-a</span><!-- /@w -->) + plain(b c))</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>opt(x,def)</samp>&rsquo;</dt>
<dd><a name="index-opt"></a>
<p>Here &lsquo;<samp>x</samp>&rsquo; must be a variable name.  This must appear as an
argument to a function or an element of a vector; it specifies that
the argument or element is optional.
As an argument to &lsquo;<samp>+</samp>&rsquo;, &lsquo;<samp>-</samp>&rsquo;, &lsquo;<samp>*</samp>&rsquo;, &lsquo;<samp>&amp;&amp;</samp>&rsquo;, or &lsquo;<samp>||</samp>&rsquo;,
or as the second argument to &lsquo;<samp>/</samp>&rsquo; or &lsquo;<samp>^</samp>&rsquo;, the value <var>def</var>
may be omitted.  The pattern &lsquo;<samp>x + opt(y)</samp>&rsquo; matches a sum by
binding one summand to &lsquo;<samp>x</samp>&rsquo; and the other to &lsquo;<samp>y</samp>&rsquo;, and it
matches anything else by binding the whole expression to &lsquo;<samp>x</samp>&rsquo; and
zero to &lsquo;<samp>y</samp>&rsquo;.  The other operators above work similarly.
</p>
<p>For general miscellaneous functions, the default value <code>def</code>
must be specified.  Optional arguments are dropped starting with
the rightmost one during matching.  For example, the pattern
&lsquo;<samp>f(opt(a,0), b, opt(c,b))</samp>&rsquo; will match &lsquo;<samp>f(b)</samp>&rsquo;, &lsquo;<samp>f(a,b)</samp>&rsquo;,
or &lsquo;<samp>f(a,b,c)</samp>&rsquo;.  Default values of zero and &lsquo;<samp>b</samp>&rsquo; are
supplied in this example for the omitted arguments.  Note that
the literal variable &lsquo;<samp>b</samp>&rsquo; will be the default in the latter
case, <em>not</em> the value that matched the meta-variable &lsquo;<samp>b</samp>&rsquo;.
In other words, the default <var>def</var> is effectively quoted.
</p>
</dd>
<dt>&lsquo;<samp>condition(x,c)</samp>&rsquo;</dt>
<dd><a name="index-condition"></a>
<a name="index-_003a_003a"></a>
<p>This matches the pattern &lsquo;<samp>x</samp>&rsquo;, with the attached condition
&lsquo;<samp>c</samp>&rsquo;.  It is the same as &lsquo;<samp>x :: c</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>pand(x,y)</samp>&rsquo;</dt>
<dd><a name="index-pand"></a>
<a name="index-_0026_0026_0026"></a>
<p>This matches anything that matches both pattern &lsquo;<samp>x</samp>&rsquo; and
pattern &lsquo;<samp>y</samp>&rsquo;.  It is the same as &lsquo;<samp>x &amp;&amp;&amp; y</samp>&rsquo;.
see <a href="#Composing-Patterns-in-Rewrite-Rules">Composing Patterns in Rewrite Rules</a>.
</p>
</dd>
<dt>&lsquo;<samp>por(x,y)</samp>&rsquo;</dt>
<dd><a name="index-por"></a>
<a name="index-_007c_007c_007c"></a>
<p>This matches anything that matches either pattern &lsquo;<samp>x</samp>&rsquo; or
pattern &lsquo;<samp>y</samp>&rsquo;.  It is the same as &lsquo;<samp>x&nbsp;|||&nbsp;y</samp>&rsquo;<!-- /@w -->.
</p>
</dd>
<dt>&lsquo;<samp>pnot(x)</samp>&rsquo;</dt>
<dd><a name="index-pnot"></a>
<a name="index-_0021_0021_0021"></a>
<p>This matches anything that does not match pattern &lsquo;<samp>x</samp>&rsquo;.
It is the same as &lsquo;<samp>!!! x</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>cons(h,t)</samp>&rsquo;</dt>
<dd><a name="index-cons-_0028rewrites_0029"></a>
<p>This matches any vector of one or more elements.  The first
element is matched to &lsquo;<samp>h</samp>&rsquo;; a vector of the remaining
elements is matched to &lsquo;<samp>t</samp>&rsquo;.  Note that vectors of fixed
length can also be matched as actual vectors:  The rule
&lsquo;<samp>cons(a,cons(b,[])) := cons(a+b,[])</samp>&rsquo; is equivalent
to the rule &lsquo;<samp>[a,b] := [a+b]</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>rcons(t,h)</samp>&rsquo;</dt>
<dd><a name="index-rcons-_0028rewrites_0029"></a>
<p>This is like <code>cons</code>, except that the <em>last</em> element
is matched to &lsquo;<samp>h</samp>&rsquo;, with the remaining elements matched
to &lsquo;<samp>t</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>apply(f,args)</samp>&rsquo;</dt>
<dd><a name="index-apply-_0028rewrites_0029"></a>
<p>This matches any function call.  The name of the function, in
the form of a variable, is matched to &lsquo;<samp>f</samp>&rsquo;.  The arguments
of the function, as a vector of zero or more objects, are
matched to &lsquo;<samp>args</samp>&rsquo;.  Constants, variables, and vectors
do <em>not</em> match an <code>apply</code> pattern.  For example,
&lsquo;<samp>apply(f,x)</samp>&rsquo; matches any function call, &lsquo;<samp>apply(quote(f),x)</samp>&rsquo;
matches any call to the function &lsquo;<samp>f</samp>&rsquo;, &lsquo;<samp>apply(f,[a,b])</samp>&rsquo;
matches any function call with exactly two arguments, and
&lsquo;<samp>apply(quote(f), cons(a,cons(b,x)))</samp>&rsquo; matches any call
to the function &lsquo;<samp>f</samp>&rsquo; with two or more arguments.  Another
way to implement the latter, if the rest of the rule does not
need to refer to the first two arguments of &lsquo;<samp>f</samp>&rsquo; by name,
would be &lsquo;<samp>apply(quote(f), x :: vlen(x) &gt;= 2)</samp>&rsquo;.
Here&rsquo;s a more interesting sample use of <code>apply</code>:
</p>
<div class="example">
<pre class="example">apply(f,[x+n])  :=  n + apply(f,[x])
   :: in(f, [floor,ceil,round,trunc]) :: integer(n)
</pre></div>

<p>Note, however, that this will be slower to match than a rule
set with four separate rules.  The reason is that Calc sorts
the rules of a rule set according to top-level function name;
if the top-level function is <code>apply</code>, Calc must try the
rule for every single formula and sub-formula.  If the top-level
function in the pattern is, say, <code>floor</code>, then Calc invokes
the rule only for sub-formulas which are calls to <code>floor</code>.
</p>
<p>Formulas normally written with operators like <code>+</code> are still
considered function calls:  <code>apply(f,x)</code> matches &lsquo;<samp>a+b</samp>&rsquo;
with &lsquo;<samp>f = add</samp>&rsquo;, &lsquo;<samp>x = [a,b]</samp>&rsquo;.
</p>
<p>You must use <code>apply</code> for meta-variables with function names
on both sides of a rewrite rule:  &lsquo;<samp>apply(f, [x]) := f(x+1)</samp>&rsquo;
is <em>not</em> correct, because it rewrites &lsquo;<samp>spam(6)</samp>&rsquo; into
&lsquo;<samp>f(7)</samp>&rsquo;.  The righthand side should be &lsquo;<samp>apply(f, [x+1])</samp>&rsquo;.
Also note that you will have to use No-Simplify mode (<kbd>m O</kbd>)
when entering this rule so that the <code>apply</code> isn&rsquo;t
evaluated immediately to get the new rule &lsquo;<samp>f(x) := f(x+1)</samp>&rsquo;.
Or, use <kbd>s e</kbd> to enter the rule without going through the stack,
or enter the rule as &lsquo;<samp>apply(f, [x]) := apply(f, [x+1]) ::&nbsp;1<!-- /@w --></samp>&rsquo;.
See <a href="#Conditional-Rewrite-Rules">Conditional Rewrite Rules</a>.
</p>
</dd>
<dt>&lsquo;<samp>select(x)</samp>&rsquo;</dt>
<dd><a name="index-select"></a>
<p>This is used for applying rules to formulas with selections;
see <a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a>.
</p></dd>
</dl>

<p>Special functions for the righthand sides of rules are:
</p>
<dl compact="compact">
<dt>&lsquo;<samp>quote(x)</samp>&rsquo;</dt>
<dd><p>The notation &lsquo;<samp>quote(x)</samp>&rsquo; is changed to &lsquo;<samp>x</samp>&rsquo; when the
righthand side is used.  As far as the rewrite rule is concerned,
<code>quote</code> is invisible.  However, <code>quote</code> has the special
property in Calc that its argument is not evaluated.  Thus,
while it will not work to put the rule &lsquo;<samp>t(a) := typeof(a)</samp>&rsquo;
on the stack because &lsquo;<samp>typeof(a)</samp>&rsquo; is evaluated immediately
to produce &lsquo;<samp>t(a) := 100</samp>&rsquo;, you can use <code>quote</code> to
protect the righthand side:  &lsquo;<samp>t(a) := quote(typeof(a))</samp>&rsquo;.
(See <a href="#Conditional-Rewrite-Rules">Conditional Rewrite Rules</a>, for another trick for
protecting rules from evaluation.)
</p>
</dd>
<dt>&lsquo;<samp>plain(x)</samp>&rsquo;</dt>
<dd><p>Special properties of and simplifications for the function call
&lsquo;<samp>x</samp>&rsquo; are not used.  One interesting case where <code>plain</code>
is useful is the rule, &lsquo;<samp>q(x) := quote(x)</samp>&rsquo;, trying to expand a
shorthand notation for the <code>quote</code> function.  This rule will
not work as shown; instead of replacing &lsquo;<samp>q(foo)</samp>&rsquo; with
&lsquo;<samp>quote(foo)</samp>&rsquo;, it will replace it with &lsquo;<samp>foo</samp>&rsquo;!  The correct
rule would be &lsquo;<samp>q(x) := plain(quote(x))</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>cons(h,t)</samp>&rsquo;</dt>
<dd><p>Where &lsquo;<samp>t</samp>&rsquo; is a vector, this is converted into an expanded
vector during rewrite processing.  Note that <code>cons</code> is a regular
Calc function which normally does this anyway; the only way <code>cons</code>
is treated specially by rewrites is that <code>cons</code> on the righthand
side of a rule will be evaluated even if default simplifications
have been turned off.
</p>
</dd>
<dt>&lsquo;<samp>rcons(t,h)</samp>&rsquo;</dt>
<dd><p>Analogous to <code>cons</code> except putting &lsquo;<samp>h</samp>&rsquo; at the <em>end</em> of
the vector &lsquo;<samp>t</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>apply(f,args)</samp>&rsquo;</dt>
<dd><p>Where &lsquo;<samp>f</samp>&rsquo; is a variable and <var>args</var> is a vector, this
is converted to a function call.  Once again, note that <code>apply</code>
is also a regular Calc function.
</p>
</dd>
<dt>&lsquo;<samp>eval(x)</samp>&rsquo;</dt>
<dd><a name="index-eval"></a>
<p>The formula &lsquo;<samp>x</samp>&rsquo; is handled in the usual way, then the
default simplifications are applied to it even if they have
been turned off normally.  This allows you to treat any function
similarly to the way <code>cons</code> and <code>apply</code> are always
treated.  However, there is a slight difference:  &lsquo;<samp>cons(2+3, [])</samp>&rsquo;
with default simplifications off will be converted to &lsquo;<samp>[2+3]</samp>&rsquo;,
whereas &lsquo;<samp>eval(cons(2+3, []))</samp>&rsquo; will be converted to &lsquo;<samp>[5]</samp>&rsquo;.
</p>
</dd>
<dt>&lsquo;<samp>evalsimp(x)</samp>&rsquo;</dt>
<dd><a name="index-evalsimp"></a>
<p>The formula &lsquo;<samp>x</samp>&rsquo; has meta-variables substituted in the usual
way, then algebraically simplified.
</p>
</dd>
<dt>&lsquo;<samp>evalextsimp(x)</samp>&rsquo;</dt>
<dd><a name="index-evalextsimp"></a>
<p>The formula &lsquo;<samp>x</samp>&rsquo; has meta-variables substituted in the normal
way, then &ldquo;extendedly&rdquo; simplified as if by the <kbd>a e</kbd> command.
</p>
</dd>
<dt>&lsquo;<samp>select(x)</samp>&rsquo;</dt>
<dd><p>See <a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a>.
</p></dd>
</dl>

<p>There are also some special functions you can use in conditions.
</p>
<dl compact="compact">
<dt>&lsquo;<samp>let(v := x)</samp>&rsquo;</dt>
<dd><a name="index-let"></a>
<p>The expression &lsquo;<samp>x</samp>&rsquo; is evaluated with meta-variables substituted.
The algebraic simplifications are <em>not</em> applied by
default, but &lsquo;<samp>x</samp>&rsquo; can include calls to <code>evalsimp</code> or
<code>evalextsimp</code> as described above to invoke higher levels
of simplification.  The result of &lsquo;<samp>x</samp>&rsquo; is then bound to the
meta-variable &lsquo;<samp>v</samp>&rsquo;.  As usual, if this meta-variable has already
been matched to something else the two values must be equal; if the
meta-variable is new then it is bound to the result of the expression.
This variable can then appear in later conditions, and on the righthand
side of the rule.
In fact, &lsquo;<samp>v</samp>&rsquo; may be any pattern in which case the result of
evaluating &lsquo;<samp>x</samp>&rsquo; is matched to that pattern, binding any
meta-variables that appear in that pattern.  Note that <code>let</code>
can only appear by itself as a condition, or as one term of an
&lsquo;<samp>&amp;&amp;</samp>&rsquo; which is a whole condition:  It cannot be inside
an &lsquo;<samp>||</samp>&rsquo; term or otherwise buried.
</p>
<p>The alternate, equivalent form &lsquo;<samp>let(v, x)</samp>&rsquo; is also recognized.
Note that the use of &lsquo;<samp>:=</samp>&rsquo; by <code>let</code>, while still being
assignment-like in character, is unrelated to the use of &lsquo;<samp>:=</samp>&rsquo;
in the main part of a rewrite rule.
</p>
<p>As an example, &lsquo;<samp>f(a) := g(ia) :: let(ia := 1/a) :: constant(ia)</samp>&rsquo;
replaces &lsquo;<samp>f(a)</samp>&rsquo; with &lsquo;<samp>g</samp>&rsquo; of the inverse of &lsquo;<samp>a</samp>&rsquo;, if
that inverse exists and is constant.  For example, if &lsquo;<samp>a</samp>&rsquo; is a
singular matrix the operation &lsquo;<samp>1/a</samp>&rsquo; is left unsimplified and
&lsquo;<samp>constant(ia)</samp>&rsquo; fails, but if &lsquo;<samp>a</samp>&rsquo; is an invertible matrix
then the rule succeeds.  Without <code>let</code> there would be no way
to express this rule that didn&rsquo;t have to invert the matrix twice.
Note that, because the meta-variable &lsquo;<samp>ia</samp>&rsquo; is otherwise unbound
in this rule, the <code>let</code> condition itself always &ldquo;succeeds&rdquo;
because no matter what &lsquo;<samp>1/a</samp>&rsquo; evaluates to, it can successfully
be bound to <code>ia</code>.
</p>
<p>Here&rsquo;s another example, for integrating cosines of linear
terms:  &lsquo;<samp>myint(cos(y),x) := sin(y)/b :: let([a,b,x] := lin(y,x))</samp>&rsquo;.
The <code>lin</code> function returns a 3-vector if its argument is linear,
or leaves itself unevaluated if not.  But an unevaluated <code>lin</code>
call will not match the 3-vector on the lefthand side of the <code>let</code>,
so this <code>let</code> both verifies that <code>y</code> is linear, and binds
the coefficients <code>a</code> and <code>b</code> for use elsewhere in the rule.
(It would have been possible to use &lsquo;<samp>sin(a x + b)/b</samp>&rsquo; for the
righthand side instead, but using &lsquo;<samp>sin(y)/b</samp>&rsquo; avoids gratuitous
rearrangement of the argument of the sine.)
</p>
<a name="index-ierf"></a>
<p>Similarly, here is a rule that implements an inverse-<code>erf</code>
function.  It uses <code>root</code> to search for a solution.  If
<code>root</code> succeeds, it will return a vector of two numbers
where the first number is the desired solution.  If no solution
is found, <code>root</code> remains in symbolic form.  So we use
<code>let</code> to check that the result was indeed a vector.
</p>
<div class="example">
<pre class="example">ierf(x)  :=  y  :: let([y,z] := root(erf(a) = x, a, .5))
</pre></div>

</dd>
<dt>&lsquo;<samp>matches(v,p)</samp>&rsquo;</dt>
<dd><p>The meta-variable <var>v</var>, which must already have been matched
to something elsewhere in the rule, is compared against pattern
<var>p</var>.  Since <code>matches</code> is a standard Calc function, it
can appear anywhere in a condition.  But if it appears alone or
as a term of a top-level &lsquo;<samp>&amp;&amp;</samp>&rsquo;, then you get the special
extra feature that meta-variables which are bound to things
inside <var>p</var> can be used elsewhere in the surrounding rewrite
rule.
</p>
<p>The only real difference between &lsquo;<samp>let(p := v)</samp>&rsquo; and
&lsquo;<samp>matches(v, p)</samp>&rsquo; is that the former evaluates &lsquo;<samp>v</samp>&rsquo; using
the default simplifications, while the latter does not.
</p>
</dd>
<dt>&lsquo;<samp>remember</samp>&rsquo;</dt>
<dd><a name="index-remember-1"></a>
<p>This is actually a variable, not a function.  If <code>remember</code>
appears as a condition in a rule, then when that rule succeeds
the original expression and rewritten expression are added to the
front of the rule set that contained the rule.  If the rule set
was not stored in a variable, <code>remember</code> is ignored.  The
lefthand side is enclosed in <code>quote</code> in the added rule if it
contains any variables.
</p>
<p>For example, the rule &lsquo;<samp>f(n) := n f(n-1) :: remember</samp>&rsquo; applied
to &lsquo;<samp>f(7)</samp>&rsquo; will add the rule &lsquo;<samp>f(7) := 7 f(6)</samp>&rsquo; to the front
of the rule set.  The rule set <code>EvalRules</code> works slightly
differently:  There, the evaluation of &lsquo;<samp>f(6)</samp>&rsquo; will complete before
the result is added to the rule set, in this case as &lsquo;<samp>f(7) := 5040</samp>&rsquo;.
Thus <code>remember</code> is most useful inside <code>EvalRules</code>.
</p>
<p>It is up to you to ensure that the optimization performed by
<code>remember</code> is safe.  For example, the rule &lsquo;<samp>foo(n) := n
:: evalv(eatfoo) &gt; 0 :: remember</samp>&rsquo; is a bad idea (<code>evalv</code> is
the function equivalent of the <kbd>=</kbd> command); if the variable
<code>eatfoo</code> ever contains 1, rules like &lsquo;<samp>foo(7) := 7</samp>&rsquo; will
be added to the rule set and will continue to operate even if
<code>eatfoo</code> is later changed to 0.
</p>
</dd>
<dt>&lsquo;<samp>remember(c)</samp>&rsquo;</dt>
<dd><a name="index-remember"></a>
<p>Remember the match as described above, but only if condition &lsquo;<samp>c</samp>&rsquo;
is true.  For example, &lsquo;<samp>remember(n % 4 = 0)</samp>&rsquo; in the above factorial
rule remembers only every fourth result.  Note that &lsquo;<samp>remember(1)</samp>&rsquo;
is equivalent to &lsquo;<samp>remember</samp>&rsquo;, and &lsquo;<samp>remember(0)</samp>&rsquo; has no effect.
</p></dd>
</dl>

<hr>
<a name="Composing-Patterns-in-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Nested-Formulas-with-Rewrite-Rules" accesskey="n" rel="next">Nested Formulas with Rewrite Rules</a>, Previous: <a href="#Other-Features-of-Rewrite-Rules" accesskey="p" rel="prev">Other Features of Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Composing-Patterns-in-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.6 Composing Patterns in Rewrite Rules</h4>

<p>There are three operators, &lsquo;<samp>&amp;&amp;&amp;</samp>&rsquo;, &lsquo;<samp>|||</samp>&rsquo;, and &lsquo;<samp>!!!</samp>&rsquo;,
that combine rewrite patterns to make larger patterns.  The
combinations are &ldquo;and,&rdquo; &ldquo;or,&rdquo; and &ldquo;not,&rdquo; respectively, and
these operators are the pattern equivalents of &lsquo;<samp>&amp;&amp;</samp>&rsquo;, &lsquo;<samp>||</samp>&rsquo;
and &lsquo;<samp>!</samp>&rsquo; (which operate on zero-or-nonzero logical values).
</p>
<p>Note that &lsquo;<samp>&amp;&amp;&amp;</samp>&rsquo;, &lsquo;<samp>|||</samp>&rsquo;, and &lsquo;<samp>!!!</samp>&rsquo; are left in symbolic
form by all regular Calc features; they have special meaning only in
the context of rewrite rule patterns.
</p>
<p>The pattern &lsquo;<samp><var>p1</var> &amp;&amp;&amp; <var>p2</var></samp>&rsquo; matches anything that
matches both <var>p1</var> and <var>p2</var>.  One especially useful case is
when one of <var>p1</var> or <var>p2</var> is a meta-variable.  For example,
here is a rule that operates on error forms:
</p>
<div class="example">
<pre class="example">f(x &amp;&amp;&amp; a +/- b, x)  :=  g(x)
</pre></div>

<p>This does the same thing, but is arguably simpler than, the rule
</p>
<div class="example">
<pre class="example">f(a +/- b, a +/- b)  :=  g(a +/- b)
</pre></div>

<a name="index-ends"></a>
<p>Here&rsquo;s another interesting example:
</p>
<div class="example">
<pre class="example">ends(cons(a, x) &amp;&amp;&amp; rcons(y, b))  :=  [a, b]
</pre></div>

<p>which effectively clips out the middle of a vector leaving just
the first and last elements.  This rule will change a one-element
vector &lsquo;<samp>[a]</samp>&rsquo; to &lsquo;<samp>[a, a]</samp>&rsquo;.  The similar rule
</p>
<div class="example">
<pre class="example">ends(cons(a, rcons(y, b)))  :=  [a, b]
</pre></div>

<p>would do the same thing except that it would fail to match a
one-element vector.
</p>

<p>The pattern &lsquo;<samp><var>p1</var> ||| <var>p2</var></samp>&rsquo; matches anything that
matches either <var>p1</var> or <var>p2</var>.  Calc first tries matching
against <var>p1</var>; if that fails, it goes on to try <var>p2</var>.
</p>
<a name="index-curve"></a>
<p>A simple example of &lsquo;<samp>|||</samp>&rsquo; is
</p>
<div class="example">
<pre class="example">curve(inf ||| -inf)  :=  0
</pre></div>

<p>which converts both &lsquo;<samp>curve(inf)</samp>&rsquo; and &lsquo;<samp>curve(-inf)</samp>&rsquo; to zero.
</p>
<p>Here is a larger example:
</p>
<div class="example">
<pre class="example">log(a, b) ||| (ln(a) :: let(b := e))  :=  mylog(a, b)
</pre></div>

<p>This matches both generalized and natural logarithms in a single rule.
Note that the &lsquo;<samp>::</samp>&rsquo; term must be enclosed in parentheses because
that operator has lower precedence than &lsquo;<samp>|||</samp>&rsquo; or &lsquo;<samp>:=</samp>&rsquo;.
</p>
<p>(In practice this rule would probably include a third alternative,
omitted here for brevity, to take care of <code>log10</code>.)
</p>
<p>While Calc generally treats interior conditions exactly the same as
conditions on the outside of a rule, it does guarantee that if all the
variables in the condition are special names like <code>e</code>, or already
bound in the pattern to which the condition is attached (say, if
&lsquo;<samp>a</samp>&rsquo; had appeared in this condition), then Calc will process this
condition right after matching the pattern to the left of the &lsquo;<samp>::</samp>&rsquo;.
Thus, we know that &lsquo;<samp>b</samp>&rsquo; will be bound to &lsquo;<samp>e</samp>&rsquo; only if the
<code>ln</code> branch of the &lsquo;<samp>|||</samp>&rsquo; was taken.
</p>
<p>Note that this rule was careful to bind the same set of meta-variables
on both sides of the &lsquo;<samp>|||</samp>&rsquo;.  Calc does not check this, but if
you bind a certain meta-variable only in one branch and then use that
meta-variable elsewhere in the rule, results are unpredictable:
</p>
<div class="example">
<pre class="example">f(a,b) ||| g(b)  :=  h(a,b)
</pre></div>

<p>Here if the pattern matches &lsquo;<samp>g(17)</samp>&rsquo;, Calc makes no promises about
the value that will be substituted for &lsquo;<samp>a</samp>&rsquo; on the righthand side.
</p>

<p>The pattern &lsquo;<samp>!!! <var>pat</var></samp>&rsquo; matches anything that does not
match <var>pat</var>.  Any meta-variables that are bound while matching
<var>pat</var> remain unbound outside of <var>pat</var>.
</p>
<p>For example,
</p>
<div class="example">
<pre class="example">f(x &amp;&amp;&amp; !!! a +/- b, !!![])  :=  g(x)
</pre></div>

<p>converts <code>f</code> whose first argument is anything <em>except</em> an
error form, and whose second argument is not the empty vector, into
a similar call to <code>g</code> (but without the second argument).
</p>
<p>If we know that the second argument will be a vector (empty or not),
then an equivalent rule would be:
</p>
<div class="example">
<pre class="example">f(x, y)  :=  g(x)  :: typeof(x) != 7 :: vlen(y) &gt; 0
</pre></div>

<p>where of course 7 is the <code>typeof</code> code for error forms.
Another final condition, that works for any kind of &lsquo;<samp>y</samp>&rsquo;,
would be &lsquo;<samp>!istrue(y == [])</samp>&rsquo;.  (The <code>istrue</code> function
returns an explicit 0 if its argument was left in symbolic form;
plain &lsquo;<samp>!(y == [])</samp>&rsquo; or &lsquo;<samp>y != []</samp>&rsquo; would not work to replace
&lsquo;<samp>!!![]</samp>&rsquo; since these would be left unsimplified, and thus cause
the rule to fail, if &lsquo;<samp>y</samp>&rsquo; was something like a variable name.)
</p>
<p>It is possible for a &lsquo;<samp>!!!</samp>&rsquo; to refer to meta-variables bound
elsewhere in the pattern.  For example,
</p>
<div class="example">
<pre class="example">f(a, !!!a)  :=  g(a)
</pre></div>

<p>matches any call to <code>f</code> with different arguments, changing
this to <code>g</code> with only the first argument.
</p>
<p>If a function call is to be matched and one of the argument patterns
contains a &lsquo;<samp>!!!</samp>&rsquo; somewhere inside it, that argument will be
matched last.  Thus
</p>
<div class="example">
<pre class="example">f(!!!a, a)  :=  g(a)
</pre></div>

<p>will be careful to bind &lsquo;<samp>a</samp>&rsquo; to the second argument of <code>f</code>
before testing the first argument.  If Calc had tried to match the
first argument of <code>f</code> first, the results would have been
disastrous: since <code>a</code> was unbound so far, the pattern &lsquo;<samp>a</samp>&rsquo;
would have matched anything at all, and the pattern &lsquo;<samp>!!!a</samp>&rsquo;
therefore would <em>not</em> have matched anything at all!
</p>
<hr>
<a name="Nested-Formulas-with-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Multi_002dPhase-Rewrite-Rules" accesskey="n" rel="next">Multi-Phase Rewrite Rules</a>, Previous: <a href="#Composing-Patterns-in-Rewrite-Rules" accesskey="p" rel="prev">Composing Patterns in Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Nested-Formulas-with-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.7 Nested Formulas with Rewrite Rules</h4>

<p>When <kbd>a r</kbd> (<code>calc-rewrite</code>) is used, it takes an expression from
the top of the stack and attempts to match any of the specified rules
to any part of the expression, starting with the whole expression
and then, if that fails, trying deeper and deeper sub-expressions.
For each part of the expression, the rules are tried in the order
they appear in the rules vector.  The first rule to match the first
sub-expression wins; it replaces the matched sub-expression according
to the <var>new</var> part of the rule.
</p>
<p>Often, the rule set will match and change the formula several times.
The top-level formula is first matched and substituted repeatedly until
it no longer matches the pattern; then, sub-formulas are tried, and
so on.  Once every part of the formula has gotten its chance, the
rewrite mechanism starts over again with the top-level formula
(in case a substitution of one of its arguments has caused it again
to match).  This continues until no further matches can be made
anywhere in the formula.
</p>
<p>It is possible for a rule set to get into an infinite loop.  The
most obvious case, replacing a formula with itself, is not a problem
because a rule is not considered to &ldquo;succeed&rdquo; unless the righthand
side actually comes out to something different than the original
formula or sub-formula that was matched.  But if you accidentally
had both &lsquo;<samp>ln(a b) := ln(a) + ln(b)</samp>&rsquo; and the reverse
&lsquo;<samp>ln(a) + ln(b) := ln(a b)</samp>&rsquo; in your rule set, Calc would
run forever switching a formula back and forth between the two
forms.
</p>
<p>To avoid disaster, Calc normally stops after 100 changes have been
made to the formula.  This will be enough for most multiple rewrites,
but it will keep an endless loop of rewrites from locking up the
computer forever.  (On most systems, you can also type <kbd>C-g</kbd> to
halt any Emacs command prematurely.)
</p>
<p>To change this limit, give a positive numeric prefix argument.
In particular, <kbd>M-1 a r</kbd> applies only one rewrite at a time,
useful when you are first testing your rule (or just if repeated
rewriting is not what is called for by your application).
</p>
<a name="index-iterations"></a>
<p>You can also put a &ldquo;function call&rdquo; &lsquo;<samp>iterations(<var>n</var>)</samp>&rsquo;
in place of a rule anywhere in your rules vector (but usually at
the top).  Then, <var>n</var> will be used instead of 100 as the default
number of iterations for this rule set.  You can use
&lsquo;<samp>iterations(inf)</samp>&rsquo; if you want no iteration limit by default.
A prefix argument will override the <code>iterations</code> limit in the
rule set.
</p>
<div class="example">
<pre class="example">[ iterations(1),
  f(x) := f(x+1) ]
</pre></div>

<p>More precisely, the limit controls the number of &ldquo;iterations,&rdquo;
where each iteration is a successful matching of a rule pattern whose
righthand side, after substituting meta-variables and applying the
default simplifications, is different from the original sub-formula
that was matched.
</p>
<p>A prefix argument of zero sets the limit to infinity.  Use with caution!
</p>
<p>Given a negative numeric prefix argument, <kbd>a r</kbd> will match and
substitute the top-level expression up to that many times, but
will not attempt to match the rules to any sub-expressions.
</p>
<p>In a formula, <code>rewrite(<var>expr</var>, <var>rules</var>, <var>n</var>)</code>
does a rewriting operation.  Here <var>expr</var> is the expression
being rewritten, <var>rules</var> is the rule, vector of rules, or
variable containing the rules, and <var>n</var> is the optional
iteration limit, which may be a positive integer, a negative
integer, or &lsquo;<samp>inf</samp>&rsquo; or &lsquo;<samp>-inf</samp>&rsquo;.  If <var>n</var> is omitted
the <code>iterations</code> value from the rule set is used; if both
are omitted, 100 is used.
</p>
<hr>
<a name="Multi_002dPhase-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Selections-with-Rewrite-Rules" accesskey="n" rel="next">Selections with Rewrite Rules</a>, Previous: <a href="#Nested-Formulas-with-Rewrite-Rules" accesskey="p" rel="prev">Nested Formulas with Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Multi_002dPhase-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.8 Multi-Phase Rewrite Rules</h4>

<p>It is possible to separate a rewrite rule set into several <em>phases</em>.
During each phase, certain rules will be enabled while certain others
will be disabled.  A <em>phase schedule</em> controls the order in which
phases occur during the rewriting process.
</p>
<a name="index-phase"></a>
<a name="index-all"></a>
<p>If a call to the marker function <code>phase</code> appears in the rules
vector in place of a rule, all rules following that point will be
members of the phase(s) identified in the arguments to <code>phase</code>.
Phases are given integer numbers.  The markers &lsquo;<samp>phase()</samp>&rsquo; and
&lsquo;<samp>phase(all)</samp>&rsquo; both mean the following rules belong to all phases;
this is the default at the start of the rule set.
</p>
<p>If you do not explicitly schedule the phases, Calc sorts all phase
numbers that appear in the rule set and executes the phases in
ascending order.  For example, the rule set
</p>
<div class="example">
<pre class="example">[ f0(x) := g0(x),
  phase(1),
  f1(x) := g1(x),
  phase(2),
  f2(x) := g2(x),
  phase(3),
  f3(x) := g3(x),
  phase(1,2),
  f4(x) := g4(x) ]
</pre></div>

<p>has three phases, 1 through 3.  Phase 1 consists of the <code>f0</code>,
<code>f1</code>, and <code>f4</code> rules (in that order).  Phase 2 consists of
<code>f0</code>, <code>f2</code>, and <code>f4</code>.  Phase 3 consists of <code>f0</code>
and <code>f3</code>.
</p>
<p>When Calc rewrites a formula using this rule set, it first rewrites
the formula using only the phase 1 rules until no further changes are
possible.  Then it switches to the phase 2 rule set and continues
until no further changes occur, then finally rewrites with phase 3.
When no more phase 3 rules apply, rewriting finishes.  (This is
assuming <kbd>a r</kbd> with a large enough prefix argument to allow the
rewriting to run to completion; the sequence just described stops
early if the number of iterations specified in the prefix argument,
100 by default, is reached.)
</p>
<p>During each phase, Calc descends through the nested levels of the
formula as described previously.  (See <a href="#Nested-Formulas-with-Rewrite-Rules">Nested Formulas with Rewrite Rules</a>.)  Rewriting starts at the top of the formula, then works its
way down to the parts, then goes back to the top and works down again.
The phase 2 rules do not begin until no phase 1 rules apply anywhere
in the formula.
</p>
<a name="index-schedule"></a>
<p>A <code>schedule</code> marker appearing in the rule set (anywhere, but
conventionally at the top) changes the default schedule of phases.
In the simplest case, <code>schedule</code> has a sequence of phase numbers
for arguments; each phase number is invoked in turn until the
arguments to <code>schedule</code> are exhausted.  Thus adding
&lsquo;<samp>schedule(3,2,1)</samp>&rsquo; at the top of the above rule set would
reverse the order of the phases; &lsquo;<samp>schedule(1,2,3)</samp>&rsquo; would have
no effect since this is the default schedule; and &lsquo;<samp>schedule(1,2,1,3)</samp>&rsquo;
would give phase 1 a second chance after phase 2 has completed, before
moving on to phase 3.
</p>
<p>Any argument to <code>schedule</code> can instead be a vector of phase
numbers (or even of sub-vectors).  Then the sub-sequence of phases
described by the vector are tried repeatedly until no change occurs
in any phase in the sequence.  For example, &lsquo;<samp>schedule([1, 2], 3)</samp>&rsquo;
tries phase 1, then phase 2, then, if either phase made any changes
to the formula, repeats these two phases until they can make no
further progress.  Finally, it goes on to phase 3 for finishing
touches.
</p>
<p>Also, items in <code>schedule</code> can be variable names as well as
numbers.  A variable name is interpreted as the name of a function
to call on the whole formula.  For example, &lsquo;<samp>schedule(1, simplify)</samp>&rsquo;
says to apply the phase-1 rules (presumably, all of them), then to
call <code>simplify</code> which is the function name equivalent of <kbd>a s</kbd>.
Likewise, &lsquo;<samp>schedule([1, simplify])</samp>&rsquo; says to alternate between
phase 1 and <kbd>a s</kbd> until no further changes occur.
</p>
<p>Phases can be used purely to improve efficiency; if it is known that
a certain group of rules will apply only at the beginning of rewriting,
and a certain other group will apply only at the end, then rewriting
will be faster if these groups are identified as separate phases.
Once the phase 1 rules are done, Calc can put them aside and no longer
spend any time on them while it works on phase 2.
</p>
<p>There are also some problems that can only be solved with several
rewrite phases.  For a real-world example of a multi-phase rule set,
examine the set <code>FitRules</code>, which is used by the curve-fitting
command to convert a model expression to linear form.
See <a href="#Curve-Fitting-Details">Curve Fitting Details</a>.  This set is divided into four phases.
The first phase rewrites certain kinds of expressions to be more
easily linearizable, but less computationally efficient.  After the
linear components have been picked out, the final phase includes the
opposite rewrites to put each component back into an efficient form.
If both sets of rules were included in one big phase, Calc could get
into an infinite loop going back and forth between the two forms.
</p>
<p>Elsewhere in <code>FitRules</code>, the components are first isolated,
then recombined where possible to reduce the complexity of the linear
fit, then finally packaged one component at a time into vectors.
If the packaging rules were allowed to begin before the recombining
rules were finished, some components might be put away into vectors
before they had a chance to recombine.  By putting these rules in
two separate phases, this problem is neatly avoided.
</p>
<hr>
<a name="Selections-with-Rewrite-Rules"></a>
<div class="header">
<p>
Next: <a href="#Matching-Commands" accesskey="n" rel="next">Matching Commands</a>, Previous: <a href="#Multi_002dPhase-Rewrite-Rules" accesskey="p" rel="prev">Multi-Phase Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Selections-with-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.9 Selections with Rewrite Rules</h4>

<p>If a sub-formula of the current formula is selected (as by <kbd>j s</kbd>;
see <a href="#Selecting-Subformulas">Selecting Subformulas</a>), the <kbd>a r</kbd> (<code>calc-rewrite</code>)
command applies only to that sub-formula.  Together with a negative
prefix argument, you can use this fact to apply a rewrite to one
specific part of a formula without affecting any other parts.
</p>
<a name="index-j-r"></a>
<a name="index-calc_002drewrite_002dselection"></a>
<p>The <kbd>j r</kbd> (<code>calc-rewrite-selection</code>) command allows more
sophisticated operations on selections.  This command prompts for
the rules in the same way as <kbd>a r</kbd>, but it then applies those
rules to the whole formula in question even though a sub-formula
of it has been selected.  However, the selected sub-formula will
first have been surrounded by a &lsquo;<samp>select( )</samp>&rsquo; function call.
(Calc&rsquo;s evaluator does not understand the function name <code>select</code>;
this is only a tag used by the <kbd>j r</kbd> command.)
</p>
<p>For example, suppose the formula on the stack is &lsquo;<samp>2 (a + b)^2</samp>&rsquo;
and the sub-formula &lsquo;<samp>a + b</samp>&rsquo; is selected.  This formula will
be rewritten to &lsquo;<samp>2 select(a + b)^2</samp>&rsquo; and then the rewrite
rules will be applied in the usual way.  The rewrite rules can
include references to <code>select</code> to tell where in the pattern
the selected sub-formula should appear.
</p>
<p>If there is still exactly one &lsquo;<samp>select( )</samp>&rsquo; function call in
the formula after rewriting is done, it indicates which part of
the formula should be selected afterwards.  Otherwise, the
formula will be unselected.
</p>
<p>You can make <kbd>j r</kbd> act much like <kbd>a r</kbd> by enclosing both parts
of the rewrite rule with &lsquo;<samp>select()</samp>&rsquo;.  However, <kbd>j r</kbd>
allows you to use the current selection in more flexible ways.
Suppose you wished to make a rule which removed the exponent from
the selected term; the rule &lsquo;<samp>select(a)^x := select(a)</samp>&rsquo; would
work.  In the above example, it would rewrite &lsquo;<samp>2 select(a + b)^2</samp>&rsquo;
to &lsquo;<samp>2 select(a + b)</samp>&rsquo;.  This would then be returned to the
stack as &lsquo;<samp>2 (a + b)</samp>&rsquo; with the &lsquo;<samp>a + b</samp>&rsquo; selected.
</p>
<p>The <kbd>j r</kbd> command uses one iteration by default, unlike
<kbd>a r</kbd> which defaults to 100 iterations.  A numeric prefix
argument affects <kbd>j r</kbd> in the same way as <kbd>a r</kbd>.
See <a href="#Nested-Formulas-with-Rewrite-Rules">Nested Formulas with Rewrite Rules</a>.
</p>
<p>As with other selection commands, <kbd>j r</kbd> operates on the stack
entry that contains the cursor.  (If the cursor is on the top-of-stack
&lsquo;<samp>.</samp>&rsquo; marker, it works as if the cursor were on the formula
at stack level 1.)
</p>
<p>If you don&rsquo;t specify a set of rules, the rules are taken from the
top of the stack, just as with <kbd>a r</kbd>.  In this case, the
cursor must indicate stack entry 2 or above as the formula to be
rewritten (otherwise the same formula would be used as both the
target and the rewrite rules).
</p>
<p>If the indicated formula has no selection, the cursor position within
the formula temporarily selects a sub-formula for the purposes of this
command.  If the cursor is not on any sub-formula (e.g., it is in
the line-number area to the left of the formula), the &lsquo;<samp>select( )</samp>&rsquo;
markers are ignored by the rewrite mechanism and the rules are allowed
to apply anywhere in the formula.
</p>
<p>As a special feature, the normal <kbd>a r</kbd> command also ignores
&lsquo;<samp>select( )</samp>&rsquo; calls in rewrite rules.  For example, if you used the
above rule &lsquo;<samp>select(a)^x := select(a)</samp>&rsquo; with <kbd>a r</kbd>, it would apply
the rule as if it were &lsquo;<samp>a^x := a</samp>&rsquo;.  Thus, you can write general
purpose rules with &lsquo;<samp>select( )</samp>&rsquo; hints inside them so that they
will &ldquo;do the right thing&rdquo; in both <kbd>a r</kbd> and <kbd>j r</kbd>,
both with and without selections.
</p>
<hr>
<a name="Matching-Commands"></a>
<div class="header">
<p>
Next: <a href="#Automatic-Rewrites" accesskey="n" rel="next">Automatic Rewrites</a>, Previous: <a href="#Selections-with-Rewrite-Rules" accesskey="p" rel="prev">Selections with Rewrite Rules</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matching-Commands-1"></a>
<h4 class="subsection">10.11.10 Matching Commands</h4>

<p><a name="index-a-m"></a>
<a name="index-calc_002dmatch"></a>
<a name="index-match"></a>
The <kbd>a m</kbd> (<code>calc-match</code>) [<code>match</code>] function takes a
vector of formulas and a rewrite-rule-style pattern, and produces
a vector of all formulas which match the pattern.  The command
prompts you to enter the pattern; as for <kbd>a r</kbd>, you can enter
a single pattern (i.e., a formula with meta-variables), or a
vector of patterns, or a variable which contains patterns, or
you can give a blank response in which case the patterns are taken
from the top of the stack.  The pattern set will be compiled once
and saved if it is stored in a variable.  If there are several
patterns in the set, vector elements are kept if they match any
of the patterns.
</p>
<p>For example, &lsquo;<samp>match(a+b, [x, x+y, x-y, 7, x+y+z])</samp>&rsquo;
will return &lsquo;<samp>[x+y, x-y, x+y+z]</samp>&rsquo;.
</p>
<p>The <code>import</code> mechanism is not available for pattern sets.
</p>
<p>The <kbd>a m</kbd> command can also be used to extract all vector elements
which satisfy any condition:  The pattern &lsquo;<samp>x :: x&gt;0</samp>&rsquo; will select
all the positive vector elements.
</p>
<a name="index-I-a-m"></a>
<a name="index-matchnot"></a>
<p>With the Inverse flag [<code>matchnot</code>], this command extracts all
vector elements which do <em>not</em> match the given pattern.
</p>
<a name="index-matches"></a>
<p>There is also a function &lsquo;<samp>matches(<var>x</var>, <var>p</var>)</samp>&rsquo; which
evaluates to 1 if expression <var>x</var> matches pattern <var>p</var>, or
to 0 otherwise.  This is sometimes useful for including into the
conditional clauses of other rewrite rules.
</p>
<a name="index-vmatches"></a>
<p>The function <code>vmatches</code> is just like <code>matches</code>, except
that if the match succeeds it returns a vector of assignments to
the meta-variables instead of the number 1.  For example,
&lsquo;<samp>vmatches(f(1,2), f(a,b))</samp>&rsquo; returns &lsquo;<samp>[a := 1, b := 2]</samp>&rsquo;.
If the match fails, the function returns the number 0.
</p>
<hr>
<a name="Automatic-Rewrites"></a>
<div class="header">
<p>
Next: <a href="#Debugging-Rewrites" accesskey="n" rel="next">Debugging Rewrites</a>, Previous: <a href="#Matching-Commands" accesskey="p" rel="prev">Matching Commands</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Automatic-Rewrites-1"></a>
<h4 class="subsection">10.11.11 Automatic Rewrites</h4>

<p><a name="index-EvalRules-variable"></a>
<a name="index-EvalRules"></a>
It is possible to get Calc to apply a set of rewrite rules on all
results, effectively adding to the built-in set of default
simplifications.  To do this, simply store your rule set in the
variable <code>EvalRules</code>.  There is a convenient <kbd>s E</kbd> command
for editing <code>EvalRules</code>; see <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<p>For example, suppose you want &lsquo;<samp>sin(a + b)</samp>&rsquo; to be expanded out
to &lsquo;<samp>sin(b) cos(a) + cos(b) sin(a)</samp>&rsquo; wherever it appears, and
similarly for &lsquo;<samp>cos(a + b)</samp>&rsquo;.  The corresponding rewrite rule
set would be,
</p>
<div class="smallexample">
<pre class="smallexample">[ sin(a + b)  :=  cos(a) sin(b) + sin(a) cos(b),
  cos(a + b)  :=  cos(a) cos(b) - sin(a) sin(b) ]
</pre></div>

<p>To apply these manually, you could put them in a variable called
<code>trigexp</code> and then use <kbd>a r trigexp</kbd> every time you wanted
to expand trig functions.  But if instead you store them in the
variable <code>EvalRules</code>, they will automatically be applied to all
sines and cosines of sums.  Then, with &lsquo;<samp>2 x</samp>&rsquo; and &lsquo;<samp>45</samp>&rsquo; on
the stack, typing <kbd>+ S</kbd> will (assuming Degrees mode) result in
&lsquo;<samp>0.7071 sin(2 x) + 0.7071 cos(2 x)</samp>&rsquo; automatically.
</p>
<p>As each level of a formula is evaluated, the rules from
<code>EvalRules</code> are applied before the default simplifications.
Rewriting continues until no further <code>EvalRules</code> apply.
Note that this is different from the usual order of application of
rewrite rules:  <code>EvalRules</code> works from the bottom up, simplifying
the arguments to a function before the function itself, while <kbd>a r</kbd>
applies rules from the top down.
</p>
<p>Because the <code>EvalRules</code> are tried first, you can use them to
override the normal behavior of any built-in Calc function.
</p>
<p>It is important not to write a rule that will get into an infinite
loop.  For example, the rule set &lsquo;<samp>[f(0) := 1, f(n) := n f(n-1)]</samp>&rsquo;
appears to be a good definition of a factorial function, but it is
unsafe.  Imagine what happens if &lsquo;<samp>f(2.5)</samp>&rsquo; is simplified.  Calc
will continue to subtract 1 from this argument forever without reaching
zero.  A safer second rule would be &lsquo;<samp>f(n) := n f(n-1) :: n&gt;0</samp>&rsquo;.
Another dangerous rule is &lsquo;<samp>g(x, y) := g(y, x)</samp>&rsquo;.  Rewriting
&lsquo;<samp>g(2, 4)</samp>&rsquo;, this would bounce back and forth between that and
&lsquo;<samp>g(4, 2)</samp>&rsquo; forever.  If an infinite loop in <code>EvalRules</code>
occurs, Emacs will eventually stop with a &ldquo;Computation got stuck
or ran too long&rdquo; message.
</p>
<p>Another subtle difference between <code>EvalRules</code> and regular rewrites
concerns rules that rewrite a formula into an identical formula.  For
example, &lsquo;<samp>f(n) := f(floor(n))</samp>&rsquo; &ldquo;fails to match&rdquo; when &lsquo;<samp>n</samp>&rsquo; is
already an integer.  But in <code>EvalRules</code> this case is detected only
if the righthand side literally becomes the original formula before any
further simplification.  This means that &lsquo;<samp>f(n) := f(floor(n))</samp>&rsquo; will
get into an infinite loop if it occurs in <code>EvalRules</code>.  Calc will
replace &lsquo;<samp>f(6)</samp>&rsquo; with &lsquo;<samp>f(floor(6))</samp>&rsquo;, which is different from
&lsquo;<samp>f(6)</samp>&rsquo;, so it will consider the rule to have matched and will
continue simplifying that formula; first the argument is simplified
to get &lsquo;<samp>f(6)</samp>&rsquo;, then the rule matches again to get &lsquo;<samp>f(floor(6))</samp>&rsquo;
again, ad infinitum.  A much safer rule would check its argument first,
say, with &lsquo;<samp>f(n) := f(floor(n)) :: !dint(n)</samp>&rsquo;.
</p>
<p>(What really happens is that the rewrite mechanism substitutes the
meta-variables in the righthand side of a rule, compares to see if the
result is the same as the original formula and fails if so, then uses
the default simplifications to simplify the result and compares again
(and again fails if the formula has simplified back to its original
form).  The only special wrinkle for the <code>EvalRules</code> is that the
same rules will come back into play when the default simplifications
are used.  What Calc wants to do is build &lsquo;<samp>f(floor(6))</samp>&rsquo;, see that
this is different from the original formula, simplify to &lsquo;<samp>f(6)</samp>&rsquo;,
see that this is the same as the original formula, and thus halt the
rewriting.  But while simplifying, &lsquo;<samp>f(6)</samp>&rsquo; will again trigger
the same <code>EvalRules</code> rule and Calc will get into a loop inside
the rewrite mechanism itself.)
</p>
<p>The <code>phase</code>, <code>schedule</code>, and <code>iterations</code> markers do
not work in <code>EvalRules</code>.  If the rule set is divided into phases,
only the phase 1 rules are applied, and the schedule is ignored.
The rules are always repeated as many times as possible.
</p>
<p>The <code>EvalRules</code> are applied to all function calls in a formula,
but not to numbers (and other number-like objects like error forms),
nor to vectors or individual variable names.  (Though they will apply
to <em>components</em> of vectors and error forms when appropriate.)  You
might try to make a variable <code>phihat</code> which automatically expands
to its definition without the need to press <kbd>=</kbd> by writing the
rule &lsquo;<samp>quote(phihat) := (1-sqrt(5))/2</samp>&rsquo;, but unfortunately this rule
will not work as part of <code>EvalRules</code>.
</p>
<p>Finally, another limitation is that Calc sometimes calls its built-in
functions directly rather than going through the default simplifications.
When it does this, <code>EvalRules</code> will not be able to override those
functions.  For example, when you take the absolute value of the complex
number &lsquo;<samp>(2, 3)</samp>&rsquo;, Calc computes &lsquo;<samp>sqrt(2*2 + 3*3)</samp>&rsquo; by calling
the multiplication, addition, and square root functions directly rather
than applying the default simplifications to this formula.  So an
<code>EvalRules</code> rule that (perversely) rewrites &lsquo;<samp>sqrt(13) := 6</samp>&rsquo;
would not apply.  (However, if you put Calc into Symbolic mode so that
&lsquo;<samp>sqrt(13)</samp>&rsquo; will be left in symbolic form by the built-in square
root function, your rule will be able to apply.  But if the complex
number were &lsquo;<samp>(3,4)</samp>&rsquo;, so that &lsquo;<samp>sqrt(25)</samp>&rsquo; must be calculated,
then Symbolic mode will not help because &lsquo;<samp>sqrt(25)</samp>&rsquo; can be
evaluated exactly to 5.)
</p>
<p>One subtle restriction that normally only manifests itself with
<code>EvalRules</code> is that while a given rewrite rule is in the process
of being checked, that same rule cannot be recursively applied.  Calc
effectively removes the rule from its rule set while checking the rule,
then puts it back once the match succeeds or fails.  (The technical
reason for this is that compiled pattern programs are not reentrant.)
For example, consider the rule &lsquo;<samp>foo(x) := x :: foo(x/2) &gt; 0</samp>&rsquo;
attempting to match &lsquo;<samp>foo(8)</samp>&rsquo;.  This rule will be inactive while
the condition &lsquo;<samp>foo(4) &gt; 0</samp>&rsquo; is checked, even though it might be
an integral part of evaluating that condition.  Note that this is not
a problem for the more usual recursive type of rule, such as
&lsquo;<samp>foo(x) := foo(x/2)</samp>&rsquo;, because there the rule has succeeded and
been reactivated by the time the righthand side is evaluated.
</p>
<p>If <code>EvalRules</code> has no stored value (its default state), or if
anything but a vector is stored in it, then it is ignored.
</p>
<p>Even though Calc&rsquo;s rewrite mechanism is designed to compare rewrite
rules to formulas as quickly as possible, storing rules in
<code>EvalRules</code> may make Calc run substantially slower.  This is
particularly true of rules where the top-level call is a commonly used
function, or is not fixed.  The rule &lsquo;<samp>f(n) := n f(n-1) :: n&gt;0</samp>&rsquo; will
only activate the rewrite mechanism for calls to the function <code>f</code>,
but &lsquo;<samp>lg(n) + lg(m) := lg(n m)</samp>&rsquo; will check every &lsquo;<samp>+</samp>&rsquo; operator.
</p>
<div class="smallexample">
<pre class="smallexample">apply(f, [a*b]) := apply(f, [a]) + apply(f, [b]) :: in(f, [ln, log10])
</pre></div>

<p>may seem more &ldquo;efficient&rdquo; than two separate rules for <code>ln</code> and
<code>log10</code>, but actually it is vastly less efficient because rules
with <code>apply</code> as the top-level pattern must be tested against
<em>every</em> function call that is simplified.
</p>
<a name="index-AlgSimpRules-variable"></a>
<a name="index-AlgSimpRules"></a>
<p>Suppose you want &lsquo;<samp>sin(a + b)</samp>&rsquo; to be expanded out not all the time,
but only when algebraic simplifications are used to simplify the
formula.  The variable <code>AlgSimpRules</code> holds rules for this purpose.
The <kbd>a s</kbd> command will apply <code>EvalRules</code> and
<code>AlgSimpRules</code> to the formula, as well as all of its built-in
simplifications.
</p>
<p>Most of the special limitations for <code>EvalRules</code> don&rsquo;t apply to
<code>AlgSimpRules</code>.  Calc simply does an <kbd>a r AlgSimpRules</kbd>
command with an infinite repeat count as the first step of algebraic
simplifications. It then applies its own built-in simplifications
throughout the formula, and then repeats these two steps (along with
applying the default simplifications) until no further changes are
possible.
</p>
<a name="index-ExtSimpRules-variable"></a>
<a name="index-UnitSimpRules-variable"></a>
<a name="index-ExtSimpRules"></a>
<a name="index-UnitSimpRules"></a>
<p>There are also <code>ExtSimpRules</code> and <code>UnitSimpRules</code> variables
that are used by <kbd>a e</kbd> and <kbd>u s</kbd>, respectively; these commands
also apply <code>EvalRules</code> and <code>AlgSimpRules</code>.  The variable
<code>IntegSimpRules</code> contains simplification rules that are used
only during integration by <kbd>a i</kbd>.
</p>
<hr>
<a name="Debugging-Rewrites"></a>
<div class="header">
<p>
Next: <a href="#Examples-of-Rewrite-Rules" accesskey="n" rel="next">Examples of Rewrite Rules</a>, Previous: <a href="#Automatic-Rewrites" accesskey="p" rel="prev">Automatic Rewrites</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Debugging-Rewrites-1"></a>
<h4 class="subsection">10.11.12 Debugging Rewrites</h4>

<p>If a buffer named <samp>*Trace*</samp> exists, the rewrite mechanism will
record some useful information there as it operates.  The original
formula is written there, as is the result of each successful rewrite,
and the final result of the rewriting.  All phase changes are also
noted.
</p>
<p>Calc always appends to <samp>*Trace*</samp>.  You must empty this buffer
yourself periodically if it is in danger of growing unwieldy.
</p>
<p>Note that the rewriting mechanism is substantially slower when the
<samp>*Trace*</samp> buffer exists, even if the buffer is not visible on
the screen.  Once you are done, you will probably want to kill this
buffer (with <kbd>C-x k *Trace* <span class="key">RET</span></kbd>).  If you leave it in
existence and forget about it, all your future rewrite commands will
be needlessly slow.
</p>
<hr>
<a name="Examples-of-Rewrite-Rules"></a>
<div class="header">
<p>
Previous: <a href="#Debugging-Rewrites" accesskey="p" rel="prev">Debugging Rewrites</a>, Up: <a href="#Rewrite-Rules" accesskey="u" rel="up">Rewrite Rules</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Examples-of-Rewrite-Rules-1"></a>
<h4 class="subsection">10.11.13 Examples of Rewrite Rules</h4>

<p>Returning to the example of substituting the pattern
&lsquo;<samp>sin(x)^2 + cos(x)^2</samp>&rsquo; with 1, we saw that the rule
&lsquo;<samp>opt(a) sin(x)^2 + opt(a) cos(x)^2 := a</samp>&rsquo; does a good job of
finding suitable cases.  Another solution would be to use the rule
&lsquo;<samp>cos(x)^2 := 1 - sin(x)^2</samp>&rsquo;, followed by algebraic simplification
if necessary.  This rule will be the most effective way to do the job,
but at the expense of making some changes that you might not desire.
</p>
<p>Another algebraic rewrite rule is &lsquo;<samp>exp(x+y) := exp(x) exp(y)</samp>&rsquo;.
To make this work with the <kbd>j&nbsp;r</kbd><!-- /@w --> command so that it can be
easily targeted to a particular exponential in a large formula,
you might wish to write the rule as &lsquo;<samp>select(exp(x+y)) :=
select(exp(x) exp(y))</samp>&rsquo;.  The &lsquo;<samp>select</samp>&rsquo; markers will be
ignored by the regular <kbd>a r</kbd> command
(see <a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a>).
</p>
<p>A surprisingly useful rewrite rule is &lsquo;<samp>a/(b-c) := a*(b+c)/(b^2-c^2)</samp>&rsquo;.
This will simplify the formula whenever &lsquo;<samp>b</samp>&rsquo; and/or &lsquo;<samp>c</samp>&rsquo; can
be made simpler by squaring.  For example, applying this rule to
&lsquo;<samp>2 / (sqrt(2) + 3)</samp>&rsquo; yields &lsquo;<samp>6:7 - 2:7 sqrt(2)</samp>&rsquo; (assuming
Symbolic mode has been enabled to keep the square root from being
evaluated to a floating-point approximation).  This rule is also
useful when working with symbolic complex numbers, e.g.,
&lsquo;<samp>(a + b i) / (c + d i)</samp>&rsquo;.
</p>
<p>As another example, we could define our own &ldquo;triangular numbers&rdquo; function
with the rules &lsquo;<samp>[tri(0) := 0, tri(n) := n + tri(n-1) :: n&gt;0]</samp>&rsquo;.  Enter
this vector and store it in a variable:  <kbd>s&nbsp;t<!-- /@w --> trirules</kbd>.  Now, given
a suitable formula like &lsquo;<samp>tri(5)</samp>&rsquo; on the stack, type &lsquo;<samp>a r trirules</samp>&rsquo;
to apply these rules repeatedly.  After six applications, <kbd>a r</kbd> will
stop with 15 on the stack.  Once these rules are debugged, it would probably
be most useful to add them to <code>EvalRules</code> so that Calc will evaluate
the new <code>tri</code> function automatically.  We could then use <kbd>Z K</kbd> on
the keyboard macro <kbd>' tri($) <span class="key">RET</span></kbd> to make a command that applies
<code>tri</code> to the value on the top of the stack.  See <a href="#Programming">Programming</a>.
</p>
<a name="index-Quaternions"></a>
<p>The following rule set, contributed by François
Pinard, implements <em>quaternions</em>, a generalization of the concept of
complex numbers.  Quaternions have four components, and are here
represented by function calls &lsquo;<samp>quat(<var>w</var>, [<var>x</var>, <var>y</var>,
<var>z</var>])</samp>&rsquo; with &ldquo;real part&rdquo; <var>w</var> and the three &ldquo;imaginary&rdquo; parts
collected into a vector.  Various arithmetical operations on quaternions
are supported.  To use these rules, either add them to <code>EvalRules</code>,
or create a command based on <kbd>a r</kbd> for simplifying quaternion
formulas.  A convenient way to enter quaternions would be a command
defined by a keyboard macro containing: <kbd>' quat($$$$, [$$$, $$, $])
<span class="key">RET</span></kbd>.
</p>
<div class="smallexample">
<pre class="smallexample">[ quat(w, x, y, z) := quat(w, [x, y, z]),
  quat(w, [0, 0, 0]) := w,
  abs(quat(w, v)) := hypot(w, v),
  -quat(w, v) := quat(-w, -v),
  r + quat(w, v) := quat(r + w, v) :: real(r),
  r - quat(w, v) := quat(r - w, -v) :: real(r),
  quat(w1, v1) + quat(w2, v2) := quat(w1 + w2, v1 + v2),
  r * quat(w, v) := quat(r * w, r * v) :: real(r),
  plain(quat(w1, v1) * quat(w2, v2))
     := quat(w1 * w2 - v1 * v2, w1 * v2 + w2 * v1 + cross(v1, v2)),
  quat(w1, v1) / r := quat(w1 / r, v1 / r) :: real(r),
  z / quat(w, v) := z * quatinv(quat(w, v)),
  quatinv(quat(w, v)) := quat(w, -v) / (w^2 + v^2),
  quatsqr(quat(w, v)) := quat(w^2 - v^2, 2 * w * v),
  quat(w, v)^k := quatsqr(quat(w, v)^(k / 2))
               :: integer(k) :: k &gt; 0 :: k % 2 = 0,
  quat(w, v)^k := quatsqr(quat(w, v)^((k - 1) / 2)) * quat(w, v)
               :: integer(k) :: k &gt; 2,
  quat(w, v)^-k := quatinv(quat(w, v)^k) :: integer(k) :: k &gt; 0 ]
</pre></div>

<p>Quaternions, like matrices, have non-commutative multiplication.
In other words, &lsquo;<samp>q1 * q2 = q2 * q1</samp>&rsquo; is not necessarily true if
&lsquo;<samp>q1</samp>&rsquo; and &lsquo;<samp>q2</samp>&rsquo; are <code>quat</code> forms.  The &lsquo;<samp>quat*quat</samp>&rsquo;
rule above uses <code>plain</code> to prevent Calc from rearranging the
product.  It may also be wise to add the line &lsquo;<samp>[quat(), matrix]</samp>&rsquo;
to the <code>Decls</code> matrix, to ensure that Calc&rsquo;s other algebraic
operations will not rearrange a quaternion product.  See <a href="#Declarations">Declarations</a>.
</p>
<p>These rules also accept a four-argument <code>quat</code> form, converting
it to the preferred form in the first rule.  If you would rather see
results in the four-argument form, just append the two items
&lsquo;<samp>phase(2), quat(w, [x, y, z]) := quat(w, x, y, z)</samp>&rsquo; to the end
of the rule set.  (But remember that multi-phase rule sets don&rsquo;t work
in <code>EvalRules</code>.)
</p>
<hr>
<a name="Units"></a>
<div class="header">
<p>
Next: <a href="#Store-and-Recall" accesskey="n" rel="next">Store and Recall</a>, Previous: <a href="#Algebra" accesskey="p" rel="prev">Algebra</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Operating-on-Units"></a>
<h2 class="chapter">11 Operating on Units</h2>

<p>One special interpretation of algebraic formulas is as numbers with units.
For example, the formula &lsquo;<samp>5 m / s^2</samp>&rsquo; can be read &ldquo;five meters
per second squared.&rdquo;  The commands in this chapter help you
manipulate units expressions in this form.  Units-related commands
begin with the <kbd>u</kbd> prefix key.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Operations-on-Units" accesskey="1">Basic Operations on Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Units-Table" accesskey="2">The Units Table</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Predefined-Units" accesskey="3">Predefined Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User_002dDefined-Units" accesskey="4">User-Defined Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Logarithmic-Units" accesskey="5">Logarithmic Units</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Musical-Notes" accesskey="6">Musical Notes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Operations-on-Units"></a>
<div class="header">
<p>
Next: <a href="#The-Units-Table" accesskey="n" rel="next">The Units Table</a>, Previous: <a href="#Units" accesskey="p" rel="prev">Units</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Operations-on-Units-1"></a>
<h3 class="section">11.1 Basic Operations on Units</h3>

<p>A <em>units expression</em> is a formula which is basically a number
multiplied and/or divided by one or more <em>unit names</em>, which may
optionally be raised to integer powers.  Actually, the value part need not
be a number; any product or quotient involving unit names is a units
expression.  Many of the units commands will also accept any formula,
where the command applies to all units expressions which appear in the
formula.
</p>
<p>A unit name is a variable whose name appears in the <em>unit table</em>,
or a variable whose name is a prefix character like &lsquo;<samp>k</samp>&rsquo; (for &ldquo;kilo&rdquo;)
or &lsquo;<samp>u</samp>&rsquo; (for &ldquo;micro&rdquo;) followed by a name in the unit table.
A substantial table of built-in units is provided with Calc;
see <a href="#Predefined-Units">Predefined Units</a>.  You can also define your own unit names;
see <a href="#User_002dDefined-Units">User-Defined Units</a>.
</p>
<p>Note that if the value part of a units expression is exactly &lsquo;<samp>1</samp>&rsquo;,
it will be removed by the Calculator&rsquo;s automatic algebra routines:  The
formula &lsquo;<samp>1 mm</samp>&rsquo; is &ldquo;simplified&rdquo; to &lsquo;<samp>mm</samp>&rsquo;.  This is only a
display anomaly, however; &lsquo;<samp>mm</samp>&rsquo; will work just fine as a
representation of one millimeter.
</p>
<p>You may find that Algebraic mode (see <a href="#Algebraic-Entry">Algebraic Entry</a>) makes working
with units expressions easier.  Otherwise, you will have to remember
to hit the apostrophe key every time you wish to enter units.
</p>
<a name="index-u-s"></a>
<a name="index-calc_002dsimplify_002dunits"></a>
<a name="index-usimplify"></a>
<p>The <kbd>u s</kbd> (<code>calc-simplify-units</code>) [<code>usimplify</code>] command
simplifies a units
expression.  It uses Calc&rsquo;s algebraic simplifications to simplify the
expression first as a regular algebraic formula; it then looks for
features that can be further simplified by converting one object&rsquo;s units
to be compatible with another&rsquo;s.  For example, &lsquo;<samp>5 m + 23 mm</samp>&rsquo; will
simplify to &lsquo;<samp>5.023 m</samp>&rsquo;.  When different but compatible units are
added, the righthand term&rsquo;s units are converted to match those of the
lefthand term.  See <a href="#Simplification-Modes">Simplification Modes</a>, for a way to have this done
automatically at all times.
</p>
<p>Units simplification also handles quotients of two units with the same
dimensionality, as in &lsquo;<samp>2&nbsp;in&nbsp;s/L&nbsp;cm</samp>&rsquo;<!-- /@w --> to &lsquo;<samp>5.08 s/L</samp>&rsquo;; fractional
powers of unit expressions, as in &lsquo;<samp>sqrt(9 mm^2)</samp>&rsquo; to &lsquo;<samp>3 mm</samp>&rsquo; and
&lsquo;<samp>sqrt(9 acre)</samp>&rsquo; to a quantity in meters; and <code>floor</code>,
<code>ceil</code>, <code>round</code>, <code>rounde</code>, <code>roundu</code>, <code>trunc</code>,
<code>float</code>, <code>frac</code>, <code>abs</code>, and <code>clean</code>
applied to units expressions, in which case
the operation in question is applied only to the numeric part of the
expression.  Finally, trigonometric functions of quantities with units
of angle are evaluated, regardless of the current angular mode.
</p>
<a name="index-u-c"></a>
<a name="index-calc_002dconvert_002dunits"></a>
<p>The <kbd>u c</kbd> (<code>calc-convert-units</code>) command converts a units
expression to new, compatible units.  For example, given the units
expression &lsquo;<samp>55 mph</samp>&rsquo;, typing <kbd>u c m/s <span class="key">RET</span></kbd> produces
&lsquo;<samp>24.5872 m/s</samp>&rsquo;.  If you have previously converted a units expression
with the same type of units (in this case, distance over time), you will
be offered the previous choice of new units as a default.  Continuing
the above example, entering the units expression &lsquo;<samp>100 km/hr</samp>&rsquo; and
typing <kbd>u c <span class="key">RET</span></kbd> (without specifying new units) produces
&lsquo;<samp>27.7777777778 m/s</samp>&rsquo;.
</p>
<a name="index-u-t"></a>
<a name="index-calc_002dconvert_002dtemperature"></a>
<a name="index-Temperature-conversion"></a>
<p>The <kbd>u c</kbd> command treats temperature units (like &lsquo;<samp>degC</samp>&rsquo; and
&lsquo;<samp>K</samp>&rsquo;) as relative temperatures.  For example, <kbd>u c</kbd> converts
&lsquo;<samp>10 degC</samp>&rsquo; to &lsquo;<samp>18 degF</samp>&rsquo;: A change of 10 degrees Celsius
corresponds to a change of 18 degrees Fahrenheit.  To convert absolute
temperatures, you can use the <kbd>u t</kbd>
(<code>calc-convert-temperature</code>) command.   The value on the stack
must be a simple units expression with units of temperature only.
This command would convert &lsquo;<samp>10 degC</samp>&rsquo; to &lsquo;<samp>50 degF</samp>&rsquo;, the
equivalent temperature on the Fahrenheit scale.
</p>
<p>While many of Calc&rsquo;s conversion factors are exact, some are necessarily
approximate.  If Calc is in fraction mode (see <a href="#Fraction-Mode">Fraction Mode</a>), then
unit conversions will try to give exact, rational conversions, but it
isn&rsquo;t always possible.  Given &lsquo;<samp>55 mph</samp>&rsquo; in fraction mode, typing
<kbd>u c m/s <span class="key">RET</span></kbd> produces  &lsquo;<samp>15367:625 m/s</samp>&rsquo;, for example,
while typing <kbd>u c au/yr <span class="key">RET</span></kbd> produces
&lsquo;<samp>5.18665819999e-3 au/yr</samp>&rsquo;.
</p>
<p>If the units you request are inconsistent with the original units, the
number will be converted into your units times whatever &ldquo;remainder&rdquo;
units are left over.  For example, converting &lsquo;<samp>55 mph</samp>&rsquo; into acres
produces &lsquo;<samp>6.08e-3 acre / (m s)</samp>&rsquo;. Remainder units are expressed in terms of
&ldquo;fundamental&rdquo; units like &lsquo;<samp>m</samp>&rsquo; and &lsquo;<samp>s</samp>&rsquo;, regardless of the
input units.
</p>
<a name="index-u-n"></a>
<a name="index-calc_002dconvert_002dexact_002dunits"></a>
<p>If you intend that your new units be consistent with the original
units, the <kbd>u n</kbd> (<code>calc-convert-exact-units</code>) command will
check the units before the conversion.  For example, to change
&lsquo;<samp>mi/hr</samp>&rsquo; to &lsquo;<samp>km/hr</samp>&rsquo;, you could type <kbd>u c km <span class="key">RET</span></kbd>,
but <kbd>u n km <span class="key">RET</span></kbd> would signal an error.
You would need to type <kbd>u n km/hr <span class="key">RET</span></kbd>.
</p>
<p>One special exception is that if you specify a single unit name, and
a compatible unit appears somewhere in the units expression, then
that compatible unit will be converted to the new unit and the
remaining units in the expression will be left alone.  For example,
given the input &lsquo;<samp>980 cm/s^2</samp>&rsquo;, the command <kbd>u c ms</kbd> will
change the &lsquo;<samp>s</samp>&rsquo; to &lsquo;<samp>ms</samp>&rsquo; to get &lsquo;<samp>9.8e-4 cm/ms^2</samp>&rsquo;.
The &ldquo;remainder unit&rdquo; &lsquo;<samp>cm</samp>&rsquo; is left alone rather than being
changed to the base unit &lsquo;<samp>m</samp>&rsquo;.
</p>
<p>You can use explicit unit conversion instead of the <kbd>u s</kbd> command
to gain more control over the units of the result of an expression.
For example, given &lsquo;<samp>5 m + 23 mm</samp>&rsquo;, you can type <kbd>u c m</kbd> or
<kbd>u c mm</kbd> to express the result in either meters or millimeters.
(For that matter, you could type <kbd>u c fath</kbd> to express the result
in fathoms, if you preferred!)
</p>
<p>In place of a specific set of units, you can also enter one of the
units system names <code>si</code>, <code>mks</code> (equivalent), or <code>cgs</code>.
For example, <kbd>u c si <span class="key">RET</span></kbd> converts the expression into
International System of Units (SI) base units.  Also, <kbd>u c base</kbd>
converts to Calc&rsquo;s base units, which are the same as <code>si</code> units
except that <code>base</code> uses &lsquo;<samp>g</samp>&rsquo; as the fundamental unit of mass
whereas <code>si</code> uses &lsquo;<samp>kg</samp>&rsquo;.
</p>
<a name="index-Composite-units"></a>
<p>The <kbd>u c</kbd> command also accepts <em>composite units</em>, which
are expressed as the sum of several compatible unit names.  For
example, converting &lsquo;<samp>30.5 in</samp>&rsquo; to units &lsquo;<samp>mi+ft+in</samp>&rsquo; (miles,
feet, and inches) produces &lsquo;<samp>2 ft + 6.5 in</samp>&rsquo;.  Calc first
sorts the unit names into order of decreasing relative size.
It then accounts for as much of the input quantity as it can
using an integer number times the largest unit, then moves on
to the next smaller unit, and so on.  Only the smallest unit
may have a non-integer amount attached in the result.  A few
standard unit names exist for common combinations, such as
<code>mfi</code> for &lsquo;<samp>mi+ft+in</samp>&rsquo;, and <code>tpo</code> for &lsquo;<samp>ton+lb+oz</samp>&rsquo;.
Composite units are expanded as if by <kbd>a x</kbd>, so that
&lsquo;<samp>(ft+in)/hr</samp>&rsquo; is first converted to &lsquo;<samp>ft/hr+in/hr</samp>&rsquo;.
</p>
<p>If the value on the stack does not contain any units, <kbd>u c</kbd> will
prompt first for the old units which this value should be considered
to have, then for the new units.  (If the value on the stack can be
simplified so that it doesn&rsquo;t contain any units, like &lsquo;<samp>ft/in</samp>&rsquo; can
be simplified to 12, then <kbd>u c</kbd> will still prompt for both old
units and new units.   Assuming the old and new units you give are
consistent with each other, the result also will not contain any
units.  For example, <kbd>u&nbsp;c<!-- /@w --> cm <span class="key">RET</span> in <span class="key">RET</span></kbd> converts
the number 2 on the stack to 5.08.
</p>
<a name="index-u-b"></a>
<a name="index-calc_002dbase_002dunits"></a>
<p>The <kbd>u b</kbd> (<code>calc-base-units</code>) command is shorthand for
<kbd>u c base</kbd>; it converts the units expression on the top of the
stack into <code>base</code> units.  If <kbd>u s</kbd> does not simplify a
units expression as far as you would like, try <kbd>u b</kbd>.
</p>
<p>Like the <kbd>u c</kbd> command, the <kbd>u b</kbd> command treats temperature
units as relative temperatures.
</p>
<a name="index-u-r"></a>
<a name="index-calc_002dremove_002dunits"></a>
<a name="index-u-x"></a>
<a name="index-calc_002dextract_002dunits"></a>
<p>The <kbd>u r</kbd> (<code>calc-remove-units</code>) command removes units from the
formula at the top of the stack.  The <kbd>u x</kbd>
(<code>calc-extract-units</code>) command extracts only the units portion of a
formula.  These commands essentially replace every term of the formula
that does or doesn&rsquo;t (respectively) look like a unit name by the
constant 1, then resimplify the formula.
</p>
<a name="index-u-a"></a>
<a name="index-calc_002dautorange_002dunits"></a>
<p>The <kbd>u a</kbd> (<code>calc-autorange-units</code>) command turns on and off a
mode in which unit prefixes like <code>k</code> (&ldquo;kilo&rdquo;) are automatically
applied to keep the numeric part of a units expression in a reasonable
range.  This mode affects <kbd>u s</kbd> and all units conversion commands
except <kbd>u b</kbd>.  For example, with autoranging on, &lsquo;<samp>12345 Hz</samp>&rsquo;
will be simplified to &lsquo;<samp>12.345 kHz</samp>&rsquo;.  Autoranging is useful for
some kinds of units (like <code>Hz</code> and <code>m</code>), but is probably
undesirable for non-metric units like <code>ft</code> and <code>tbsp</code>.
(Composite units are more appropriate for those; see above.)
</p>
<p>Autoranging always applies the prefix to the leftmost unit name.
Calc chooses the largest prefix that causes the number to be greater
than or equal to 1.0.  Thus an increasing sequence of adjusted times
would be &lsquo;<samp>1 ms, 10 ms, 100 ms, 1 s, 10 s, 100 s, 1 ks</samp>&rsquo;.
Generally the rule of thumb is that the number will be adjusted
to be in the interval &lsquo;<samp>[1 .. 1000)</samp>&rsquo;, although there are several
exceptions to this rule.  First, if the unit has a power then this
is not possible; &lsquo;<samp>0.1 s^2</samp>&rsquo; simplifies to &lsquo;<samp>100000 ms^2</samp>&rsquo;.
Second, the &ldquo;centi-&rdquo; prefix is allowed to form <code>cm</code> (centimeters),
but will not apply to other units.  The &ldquo;deci-,&rdquo; &ldquo;deka-,&rdquo; and
&ldquo;hecto-&rdquo; prefixes are never used.  Thus the allowable interval is
&lsquo;<samp>[1 .. 10)</samp>&rsquo; for millimeters and &lsquo;<samp>[1 .. 100)</samp>&rsquo; for centimeters.
Finally, a prefix will not be added to a unit if the resulting name
is also the actual name of another unit; &lsquo;<samp>1e-15 t</samp>&rsquo; would normally
be considered a &ldquo;femto-ton,&rdquo; but it is written as &lsquo;<samp>1000 at</samp>&rsquo;
(1000 atto-tons) instead because <code>ft</code> would be confused with feet.
</p>
<hr>
<a name="The-Units-Table"></a>
<div class="header">
<p>
Next: <a href="#Predefined-Units" accesskey="n" rel="next">Predefined Units</a>, Previous: <a href="#Basic-Operations-on-Units" accesskey="p" rel="prev">Basic Operations on Units</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Units-Table-1"></a>
<h3 class="section">11.2 The Units Table</h3>

<p><a name="index-u-v"></a>
<a name="index-calc_002denter_002dunits_002dtable"></a>
The <kbd>u v</kbd> (<code>calc-enter-units-table</code>) command displays the units table
in another buffer called <samp>*Units Table*</samp>.  Each entry in this table
gives the unit name as it would appear in an expression, the definition
of the unit in terms of simpler units, and a full name or description of
the unit.  Fundamental units are defined as themselves; these are the
units produced by the <kbd>u b</kbd> command.  The fundamental units are
meters, seconds, grams, kelvins, amperes, candelas, moles, radians,
and steradians.
</p>
<p>The Units Table buffer also displays the Unit Prefix Table.  Note that
two prefixes, &ldquo;kilo&rdquo; and &ldquo;hecto,&rdquo; accept either upper- or lower-case
prefix letters.  &lsquo;<samp>Meg</samp>&rsquo; is also accepted as a synonym for the &lsquo;<samp>M</samp>&rsquo;
prefix.  Whenever a unit name can be interpreted as either a built-in name
or a prefix followed by another built-in name, the former interpretation
wins.  For example, &lsquo;<samp>2 pt</samp>&rsquo; means two pints, not two pico-tons.
</p>
<p>The Units Table buffer, once created, is not rebuilt unless you define
new units.  To force the buffer to be rebuilt, give any numeric prefix
argument to <kbd>u v</kbd>.
</p>
<a name="index-u-V"></a>
<a name="index-calc_002dview_002dunits_002dtable"></a>
<p>The <kbd>u V</kbd> (<code>calc-view-units-table</code>) command is like <kbd>u v</kbd> except
that the cursor is not moved into the Units Table buffer.  You can
type <kbd>u V</kbd> again to remove the Units Table from the display.  To
return from the Units Table buffer after a <kbd>u v</kbd>, type <kbd>C-x * c</kbd>
again or use the regular Emacs <kbd><span class="nolinebreak">C-x</span>&nbsp;o</kbd><!-- /@w --> (<code>other-window</code>)
command.  You can also kill the buffer with <kbd>C-x k</kbd> if you wish;
the actual units table is safely stored inside the Calculator.
</p>
<a name="index-u-g"></a>
<a name="index-calc_002dget_002dunit_002ddefinition"></a>
<p>The <kbd>u g</kbd> (<code>calc-get-unit-definition</code>) command retrieves a unit&rsquo;s
defining expression and pushes it onto the Calculator stack.  For example,
<kbd>u g in</kbd> will produce the expression &lsquo;<samp>2.54 cm</samp>&rsquo;.  This is the
same definition for the unit that would appear in the Units Table buffer.
Note that this command works only for actual unit names; <kbd>u g km</kbd>
will report that no such unit exists, for example, because <code>km</code> is
really the unit <code>m</code> with a <code>k</code> (&ldquo;kilo&rdquo;) prefix.  To see a
definition of a unit in terms of base units, it is easier to push the
unit name on the stack and then reduce it to base units with <kbd>u b</kbd>.
</p>
<a name="index-u-e"></a>
<a name="index-calc_002dexplain_002dunits"></a>
<p>The <kbd>u e</kbd> (<code>calc-explain-units</code>) command displays an English
description of the units of the expression on the stack.  For example,
for the expression &lsquo;<samp>62 km^2 g / s^2 mol K</samp>&rsquo;, the description is
&ldquo;Square-Kilometer Gram per (Second-squared Mole Degree-Kelvin).&rdquo;  This
command uses the English descriptions that appear in the righthand
column of the Units Table.
</p>
<hr>
<a name="Predefined-Units"></a>
<div class="header">
<p>
Next: <a href="#User_002dDefined-Units" accesskey="n" rel="next">User-Defined Units</a>, Previous: <a href="#The-Units-Table" accesskey="p" rel="prev">The Units Table</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Predefined-Units-1"></a>
<h3 class="section">11.3 Predefined Units</h3>

<p>The definitions of many units have changed over the years.  For example,
the meter was originally defined in 1791 as one ten-millionth of the
distance from the Equator to the North Pole.  In order to be more
precise, the definition was adjusted several times, and now a meter is
defined as the distance that light will travel in a vacuum in
1/299792458 of a second; consequently, the speed of light in a
vacuum is exactly 299792458 m/s.  Many other units have been
redefined in terms of fundamental physical processes; a second, for
example, is currently defined as 9192631770 periods of a certain
radiation related to the cesium-133 atom.  The only SI unit that is not
based on a fundamental physical process (although there are efforts to
change this) is the kilogram, which was originally defined as the mass
of one liter of water, but is now defined as the mass of the
international prototype of the kilogram (IPK), a cylinder of platinum-iridium
kept at the Bureau international des poids et mesures in Sèvres,
France.  (There are several copies of the IPK throughout the world.)
The British imperial units, once defined in terms of physical objects,
were redefined in 1963 in terms of SI units.  The US customary units,
which were the same as British units until the British imperial system
was created in 1824, were also defined in terms of the SI units in 1893.
Because of these redefinitions, conversions between metric, British
Imperial, and US customary units can often be done precisely.
</p>
<p>Since the exact definitions of many kinds of units have evolved over the
years, and since certain countries sometimes have local differences in
their definitions, it is a good idea to examine Calc&rsquo;s definition of a
unit before depending on its exact value.  For example, there are three
different units for gallons, corresponding to the US (<code>gal</code>),
Canadian (<code>galC</code>), and British (<code>galUK</code>) definitions.  Also,
note that <code>oz</code> is a standard ounce of mass, <code>ozt</code> is a Troy
ounce, and <code>ozfl</code> is a fluid ounce.
</p>
<p>The temperature units corresponding to degrees Kelvin and Centigrade
(Celsius) are the same in this table, since most units commands treat
temperatures as being relative.  The <code>calc-convert-temperature</code>
command has special rules for handling the different absolute magnitudes
of the various temperature scales.
</p>
<p>The unit of volume &ldquo;liters&rdquo; can be referred to by either the lower-case
<code>l</code> or the upper-case <code>L</code>.
</p>
<p>The unit <code>A</code> stands for amperes; the name <code>Ang</code> is used
for angstroms.
</p>
<p>The unit <code>pt</code> stands for pints; the name <code>point</code> stands for
a typographical point, defined by &lsquo;<samp>72 point = 1 in</samp>&rsquo;.  This is
slightly different than the point defined by the American Typefounder&rsquo;s
Association in 1886, but the point used by Calc has become standard
largely due to its use by the PostScript page description language.
There is also <code>texpt</code>, which stands for a printer&rsquo;s point as
defined by the TeX typesetting system:  &lsquo;<samp>72.27 texpt = 1 in</samp>&rsquo;.
Other units used by TeX are available; they are <code>texpc</code> (a pica),
<code>texbp</code> (a &ldquo;big point&rdquo;, equal to a standard point which is larger
than the point used by TeX), <code>texdd</code> (a Didot point),
<code>texcc</code> (a Cicero) and <code>texsp</code> (a scaled TeX point,
all dimensions representable in TeX are multiples of this value).
</p>
<p>When Calc is using the TeX or LaTeX language mode (see <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>), the TeX specific unit names will not
use the &lsquo;<samp>tex</samp>&rsquo; prefix; the unit name for a TeX point will be
&lsquo;<samp>pt</samp>&rsquo; instead of &lsquo;<samp>texpt</samp>&rsquo;, for example.  To avoid conflicts,
the unit names for pint and parsec will simply be &lsquo;<samp>pint</samp>&rsquo; and
&lsquo;<samp>parsec</samp>&rsquo; instead of &lsquo;<samp>pt</samp>&rsquo; and &lsquo;<samp>pc</samp>&rsquo;.
</p>
<p>The unit <code>e</code> stands for the elementary (electron) unit of charge;
because algebra command could mistake this for the special constant
&lsquo;<samp>e</samp>&rsquo;, Calc provides the alternate unit name <code>ech</code> which is
preferable to <code>e</code>.
</p>
<p>The name <code>g</code> stands for one gram of mass; there is also <code>gf</code>,
one gram of force.  (Likewise for <kbd>lb</kbd>, pounds, and <kbd>lbf</kbd>.)
Meanwhile, one &ldquo;&lsquo;<samp>g</samp>&rsquo;&rdquo; of acceleration is denoted <code>ga</code>.
</p>
<p>The unit <code>ton</code> is a U.S. ton of &lsquo;<samp>2000 lb</samp>&rsquo;, and <code>t</code> is
a metric ton of &lsquo;<samp>1000 kg</samp>&rsquo;.
</p>
<p>The names <code>s</code> (or <code>sec</code>) and <code>min</code> refer to units of
time; <code>arcsec</code> and <code>arcmin</code> are units of angle.
</p>
<p>Some &ldquo;units&rdquo; are really physical constants; for example, <code>c</code>
represents the speed of light, and <code>h</code> represents Planck&rsquo;s
constant.  You can use these just like other units: converting
&lsquo;<samp>.5 c</samp>&rsquo; to &lsquo;<samp>m/s</samp>&rsquo; expresses one-half the speed of light in
meters per second.  You can also use this merely as a handy reference;
the <kbd>u g</kbd> command gets the definition of one of these constants
in its normal terms, and <kbd>u b</kbd> expresses the definition in base
units.
</p>
<p>Two units, <code>pi</code> and <code>alpha</code> (the fine structure constant,
approximately <i>1/137</i>) are dimensionless.  The units simplification
commands simply treat these names as equivalent to their corresponding
values.  However you can, for example, use <kbd>u c</kbd> to convert a pure
number into multiples of the fine structure constant, or <kbd>u b</kbd> to
convert this back into a pure number.  (When <kbd>u c</kbd> prompts for the
&ldquo;old units,&rdquo; just enter a blank line to signify that the value
really is unitless.)
</p>

<hr>
<a name="User_002dDefined-Units"></a>
<div class="header">
<p>
Next: <a href="#Logarithmic-Units" accesskey="n" rel="next">Logarithmic Units</a>, Previous: <a href="#Predefined-Units" accesskey="p" rel="prev">Predefined Units</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="User_002dDefined-Units-1"></a>
<h3 class="section">11.4 User-Defined Units</h3>

<p>Calc provides ways to get quick access to your selected &ldquo;favorite&rdquo;
units, as well as ways to define your own new units.
</p>
<a name="index-u-0_002d9"></a>
<a name="index-calc_002dquick_002dunits"></a>
<a name="index-Units"></a>
<a name="index-Units-variable"></a>
<a name="index-Quick-units"></a>
<p>To select your favorite units, store a vector of unit names or
expressions in the Calc variable <code>Units</code>.  The <kbd>u 1</kbd>
through <kbd>u 9</kbd> commands (<code>calc-quick-units</code>) provide access
to these units.  If the value on the top of the stack is a plain
number (with no units attached), then <kbd>u 1</kbd> gives it the
specified units.  (Basically, it multiplies the number by the
first item in the <code>Units</code> vector.)  If the number on the
stack <em>does</em> have units, then <kbd>u 1</kbd> converts that number
to the new units.  For example, suppose the vector &lsquo;<samp>[in, ft]</samp>&rsquo;
is stored in <code>Units</code>.  Then <kbd>30 u 1</kbd> will create the
expression &lsquo;<samp>30 in</samp>&rsquo;, and <kbd>u 2</kbd> will convert that expression
to &lsquo;<samp>2.5 ft</samp>&rsquo;.
</p>
<p>The <kbd>u 0</kbd> command accesses the tenth element of <code>Units</code>.
Only ten quick units may be defined at a time.  If the <code>Units</code>
variable has no stored value (the default), or if its value is not
a vector, then the quick-units commands will not function.  The
<kbd>s U</kbd> command is a convenient way to edit the <code>Units</code>
variable; see <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<a name="index-u-d"></a>
<a name="index-calc_002ddefine_002dunit"></a>
<a name="index-User_002ddefined-units"></a>
<p>The <kbd>u d</kbd> (<code>calc-define-unit</code>) command records the units
expression on the top of the stack as the definition for a new,
user-defined unit.  For example, putting &lsquo;<samp>16.5 ft</samp>&rsquo; on the stack and
typing <kbd>u d rod</kbd> defines the new unit &lsquo;<samp>rod</samp>&rsquo; to be equivalent to
16.5 feet.  The unit conversion and simplification commands will now
treat <code>rod</code> just like any other unit of length.  You will also be
prompted for an optional English description of the unit, which will
appear in the Units Table.  If you wish the definition of this unit to
be displayed in a special way in the Units Table buffer (such as with an
asterisk to indicate an approximate value), then you can call this
command with an argument, <kbd>C-u u d</kbd>; you will then also be prompted
for a string that will be used to display the definition.
</p>
<a name="index-u-u"></a>
<a name="index-calc_002dundefine_002dunit"></a>
<p>The <kbd>u u</kbd> (<code>calc-undefine-unit</code>) command removes a user-defined
unit.  It is not possible to remove one of the predefined units,
however.
</p>
<p>If you define a unit with an existing unit name, your new definition
will replace the original definition of that unit.  If the unit was a
predefined unit, the old definition will not be replaced, only
&ldquo;shadowed.&rdquo;  The built-in definition will reappear if you later use
<kbd>u u</kbd> to remove the shadowing definition.
</p>
<p>To create a new fundamental unit, use either 1 or the unit name itself
as the defining expression.  Otherwise the expression can involve any
other units that you like (except for composite units like &lsquo;<samp>mfi</samp>&rsquo;).
You can create a new composite unit with a sum of other units as the
defining expression.  The next unit operation like <kbd>u c</kbd> or <kbd>u v</kbd>
will rebuild the internal unit table incorporating your modifications.
Note that erroneous definitions (such as two units defined in terms of
each other) will not be detected until the unit table is next rebuilt;
<kbd>u v</kbd> is a convenient way to force this to happen.
</p>
<p>Temperature units are treated specially inside the Calculator; it is not
possible to create user-defined temperature units.
</p>
<a name="index-u-p"></a>
<a name="index-calc_002dpermanent_002dunits"></a>
<a name="index-Calc-init-file_002c-user_002ddefined-units"></a>
<p>The <kbd>u p</kbd> (<code>calc-permanent-units</code>) command stores the user-defined
units in your Calc init file (the file given by the variable
<code>calc-settings-file</code>, typically <samp>~/.emacs.d/calc.el</samp>), so that the
units will still be available in subsequent Emacs sessions.  If there
was already a set of user-defined units in your Calc init file, it
is replaced by the new set.  (See <a href="#General-Mode-Commands">General Mode Commands</a>, for a way to
tell Calc to use a different file for the Calc init file.)
</p>
<hr>
<a name="Logarithmic-Units"></a>
<div class="header">
<p>
Next: <a href="#Musical-Notes" accesskey="n" rel="next">Musical Notes</a>, Previous: <a href="#User_002dDefined-Units" accesskey="p" rel="prev">User-Defined Units</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Logarithmic-Units-1"></a>
<h3 class="section">11.5 Logarithmic Units</h3>

<p>The units <code>dB</code> (decibels) and <code>Np</code> (nepers) are logarithmic
units which are manipulated differently than standard units.  Calc
provides commands to work with these logarithmic units.
</p>
<p>Decibels and nepers are used to measure power quantities as well as
field quantities (quantities whose squares are proportional to power);
these two types of quantities are handled slightly different from each
other.  By default the Calc commands work as if power quantities are
being used; with the <kbd>H</kbd> prefix the Calc commands work as if field
quantities are being used.
</p>
<p>The decibel level of a power
<em>P1</em>,
relative to a reference power
<em>P0</em>,
is defined to be
<em>10 log10(P1/P0) dB</em>.
(The factor of 10 is because a decibel, as its name implies, is
one-tenth of a bel. The bel, named after Alexander Graham Bell, was
considered to be too large of a unit and was effectively replaced by
the decibel.)  If <em>F</em> is a field quantity with power
<em>P=k F^2</em>, then a reference quantity of
<em>F0</em>
would correspond to a power of
<em>P0=k F0^2</em>.
If
<em>P1=k F1^2</em>,
then
</p>
<div class="example">
<pre class="example">10 log10(P1/P0) = 10 log10(F1^2/F0^2) = 20 log10(F1/F0).
</pre></div>

<p>In order to get the same decibel level regardless of whether a field
quantity or the corresponding power quantity is used,  the decibel
level of a field quantity
<em>F1</em>,
relative to a reference
<em>F0</em>,
is defined as
<em>20 log10(F1/F0) dB</em>.
For example, the decibel value of a sound pressure level of
<em>60 uPa</em>
relative to
<em>20 uPa</em>
(the threshold of human hearing) is
<em>20 log10(60 uPa/ 20 uPa) dB = 20 log10(3) dB</em>,
which is about
<em>9.54 dB</em>.
Note that in taking the ratio, the original units cancel and so these
logarithmic units are dimensionless.
</p>
<p>Nepers (named after John Napier, who is credited with inventing the
logarithm) are similar to bels except they use natural logarithms instead
of common logarithms.  The neper level of a power
<em>P1</em>,
relative to a reference power
<em>P0</em>,
is
<em>(1/2) ln(P1/P0) Np</em>.
The neper level of a field
<em>F1</em>,
relative to a reference field
<em>F0</em>,
is
<em>ln(F1/F0) Np</em>.
</p>
<a name="index-calc_002dlu_002dpower_002dreference"></a>
<a name="index-calc_002dlu_002dfield_002dreference"></a>
<p>For power quantities, Calc uses
<em>1 mW</em>
as the default reference quantity; this default can be changed by changing
the value of the customizable variable
<code>calc-lu-power-reference</code> (see <a href="#Customizing-Calc">Customizing Calc</a>).
For field quantities, Calc uses
<em>20 uPa</em>
as the default reference quantity; this is the value used in acoustics
which is where decibels are commonly encountered.  This default can be
changed by changing the value of the customizable variable
<code>calc-lu-field-reference</code> (see <a href="#Customizing-Calc">Customizing Calc</a>).  A
non-default reference quantity will be read from the stack if the
capital <kbd>O</kbd> prefix is used.
</p>
<a name="index-l-q"></a>
<a name="index-calc_002dlu_002dquant"></a>
<a name="index-lupquant"></a>
<a name="index-lufquant"></a>
<p>The <kbd>l q</kbd> (<code>calc-lu-quant</code>) [<code>lupquant</code>]
command computes the power quantity corresponding to a given number of
logarithmic units. With the capital <kbd>O</kbd> prefix, <kbd>O l q</kbd>, the
reference level will be read from the top of the stack. (In an
algebraic formula, <code>lupquant</code> can be given an optional second
argument which will be used for the reference level.) For example,
<code>20 dB <span class="key">RET</span> l q</code> will return <code>100 mW</code>;
<code>20 dB <span class="key">RET</span> 4 W <span class="key">RET</span> O l q</code> will return <code>400 W</code>.
The <kbd>H l q</kbd> [<code>lufquant</code>] command behaves like <kbd>l q</kbd> but
computes field quantities instead of power quantities.
</p>
<a name="index-l-d"></a>
<a name="index-calc_002ddb"></a>
<a name="index-dbpower"></a>
<a name="index-dbfield"></a>
<a name="index-l-n"></a>
<a name="index-calc_002dnp"></a>
<a name="index-nppower"></a>
<a name="index-npfield"></a>
<p>The <kbd>l d</kbd> (<code>calc-db</code>) [<code>dbpower</code>] command will compute
the decibel level of a power quantity using the default reference
level; <kbd>H l d</kbd> [<code>dbfield</code>] will compute the decibel level of
a field quantity.  The commands <kbd>l n</kbd> (<code>calc-np</code>)
[<code>nppower</code>] and <kbd>H l n</kbd> [<code>npfield</code>] will similarly
compute neper levels.  With the capital <kbd>O</kbd> prefix these commands
will read a reference level from the stack; in an algebraic formula
the reference level can be given as an optional second argument.
</p>
<a name="index-l-_002b"></a>
<a name="index-calc_002dlu_002dplus"></a>
<a name="index-lupadd"></a>
<a name="index-lufadd"></a>
<a name="index-l-_002d"></a>
<a name="index-calc_002dlu_002dminus"></a>
<a name="index-lupsub"></a>
<a name="index-lufsub"></a>
<a name="index-l-_002a"></a>
<a name="index-calc_002dlu_002dtimes"></a>
<a name="index-lupmul"></a>
<a name="index-lufmul"></a>
<a name="index-l-_002f"></a>
<a name="index-calc_002dlu_002ddivide"></a>
<a name="index-lupdiv"></a>
<a name="index-lufdiv"></a>
<p>The sum of two power or field quantities doesn&rsquo;t correspond to the sum
of the corresponding decibel or neper levels.  If the powers
corresponding to decibel levels
<em>D1</em>
and
<em>D2</em>
are added, the corresponding decibel level &ldquo;sum&rdquo; will be
</p>
<div class="example">
<pre class="example">  10 log10(10^(D1/10) + 10^(D2/10)) dB.
</pre></div>

<p>When field quantities are combined, it often means the corresponding
powers are added and so the above formula might be used.  In
acoustics, for example, the sound pressure level is a field quantity
and so the decibels are often defined using the field formula, but the
sound pressure levels are combined as the sound power levels, and so
the above formula should be used.  If two field quantities themselves
are added, the new decibel level will be
</p>
<div class="example">
<pre class="example">  20 log10(10^(D1/20) + 10^(D2/20)) dB.
</pre></div>

<p>If the power corresponding to <em>D</em> dB is multiplied by a number <em>N</em>,
then the corresponding decibel level will be
</p>
<div class="example">
<pre class="example">  D + 10 log10(N) dB,
</pre></div>

<p>if a field quantity is multiplied by <em>N</em> the corresponding decibel level
will be
</p>
<div class="example">
<pre class="example">  D + 20 log10(N) dB.
</pre></div>

<p>There are similar formulas for combining nepers.  The <kbd>l +</kbd>
(<code>calc-lu-plus</code>) [<code>lupadd</code>] command will &ldquo;add&rdquo; two
logarithmic unit power levels this way; with the <kbd>H</kbd> prefix,
<kbd>H l +</kbd> [<code>lufadd</code>] will add logarithmic unit field levels.
Similarly, logarithmic units can be &ldquo;subtracted&rdquo; with <kbd>l -</kbd>
(<code>calc-lu-minus</code>) [<code>lupsub</code>] or <kbd>H l -</kbd> [<code>lufsub</code>].
The <kbd>l *</kbd> (<code>calc-lu-times</code>) [<code>lupmul</code>] and <kbd>H l *</kbd>
[<code>lufmul</code>] commands will &ldquo;multiply&rdquo; a logarithmic unit by a
number; the <kbd>l /</kbd> (<code>calc-lu-divide</code>) [<code>lupdiv</code>] and
<kbd>H l /</kbd> [<code>lufdiv</code>] commands will &ldquo;divide&rdquo; a logarithmic
unit by a number. Note that the reference quantities don&rsquo;t play a role
in this arithmetic.
</p>
<hr>
<a name="Musical-Notes"></a>
<div class="header">
<p>
Previous: <a href="#Logarithmic-Units" accesskey="p" rel="prev">Logarithmic Units</a>, Up: <a href="#Units" accesskey="u" rel="up">Units</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Musical-Notes-1"></a>
<h3 class="section">11.6 Musical Notes</h3>

<p>Calc can convert between musical notes and their associated
frequencies.  Notes can be given using either scientific pitch
notation or midi numbers.  Since these note systems are basically
logarithmic scales, Calc uses the <kbd>l</kbd> prefix for functions
operating on notes.
</p>
<p>Scientific pitch notation refers to a note by giving a letter
A through G, possibly followed by a flat or sharp) with a subscript
indicating an octave number.  Each octave starts with C and ends with
B and
the octave numbered 0 was chosen to correspond to the lowest
audible frequency.  Using this system, middle C (about 261.625 Hz)
corresponds to the note &lsquo;<samp>C</samp>&rsquo; in octave 4 and is denoted
&lsquo;<samp>C_4</samp>&rsquo;.  Any frequency can be described by giving a note plus an
offset in cents (where a cent is a ratio of frequencies so that a
semitone consists of 100 cents).
</p>
<p>The midi note number system assigns numbers to notes so that
&lsquo;<samp>C_(-1)</samp>&rsquo; corresponds to the midi note number 0 and &lsquo;<samp>G_9</samp>&rsquo;
corresponds to the midi note number 127.   A midi controller can have
up to 128 keys and each midi note number from  0 to 127 corresponds to
a possible key.
</p>
<a name="index-l-s"></a>
<a name="index-calc_002dspn"></a>
<a name="index-spn"></a>
<p>The <kbd>l s</kbd> (<code>calc-spn</code>) [<code>spn</code>] command converts either
a frequency or a midi number to scientific pitch notation.  For
example, <code>500 Hz</code> gets converted to
<code>B_4 + 21.3094853649 cents</code> and <code>84</code> to <code>C_6</code>.
</p>
<a name="index-l-m"></a>
<a name="index-calc_002dmidi"></a>
<a name="index-midi"></a>
<p>The <kbd>l m</kbd> (<code>calc-midi</code>) [<code>midi</code>] command converts either
a frequency or a note given in scientific pitch notation to the
corresponding midi number. For example, <code>C_6</code> gets converted to 84
and <code>440 Hz</code> to 69.
</p>
<a name="index-l-f"></a>
<a name="index-calc_002dfreq"></a>
<a name="index-freq"></a>
<p>The <kbd>l f</kbd> (<code>calc-freq</code>) [<code>freq</code>] command converts either
either a midi number or a note given in scientific pitch notation to
the corresponding frequency. For example, <code>Asharp_2 + 30 cents</code>
gets converted to <code>118.578040134 Hz</code> and <code>55</code> to
<code>195.99771799 Hz</code>.
</p>
<p>Since the frequencies of notes are not usually given exactly (and are
typically irrational), the customizable variable
<code>calc-note-threshold</code> determines how close (in cents) a frequency
needs to be to a note to be recognized as that note
(see <a href="#Customizing-Calc">Customizing Calc</a>).  This variable has a default value of
<code>1</code>.  For example, middle <var>C</var> is approximately
&lsquo;<samp>261.625565302 Hz</samp>&rsquo;; this frequency is often shortened to
&lsquo;<samp>261.625 Hz</samp>&rsquo;.  Without <code>calc-note-threshold</code> (or a value of
&lsquo;<samp>0</samp>&rsquo;), Calc would convert <code>261.625 Hz</code> to scientific pitch
notation <code>B_3 + 99.9962592773 cents</code>; with the default value of
<code>1</code>, Calc converts <code>261.625 Hz</code> to <code>C_4</code>.
</p>

<hr>
<a name="Store-and-Recall"></a>
<div class="header">
<p>
Next: <a href="#Graphics" accesskey="n" rel="next">Graphics</a>, Previous: <a href="#Units" accesskey="p" rel="prev">Units</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Storing-and-Recalling"></a>
<h2 class="chapter">12 Storing and Recalling</h2>

<p>Calculator variables are really just Lisp variables that contain numbers
or formulas in a form that Calc can understand.  The commands in this
section allow you to manipulate variables conveniently.  Commands related
to variables use the <kbd>s</kbd> prefix key.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Storing-Variables" accesskey="1">Storing Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Recalling-Variables" accesskey="2">Recalling Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Operations-on-Variables" accesskey="3">Operations on Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Let-Command" accesskey="4">Let Command</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Evaluates_002dTo-Operator" accesskey="5">Evaluates-To Operator</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Storing-Variables"></a>
<div class="header">
<p>
Next: <a href="#Recalling-Variables" accesskey="n" rel="next">Recalling Variables</a>, Previous: <a href="#Store-and-Recall" accesskey="p" rel="prev">Store and Recall</a>, Up: <a href="#Store-and-Recall" accesskey="u" rel="up">Store and Recall</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Storing-Variables-1"></a>
<h3 class="section">12.1 Storing Variables</h3>

<p><a name="index-s-s"></a>
<a name="index-calc_002dstore"></a>
<a name="index-Storing-variables"></a>
<a name="index-Quick-variables"></a>
<a name="index-q0"></a>
<a name="index-q9"></a>
The <kbd>s s</kbd> (<code>calc-store</code>) command stores the value at the top of
the stack into a specified variable.  It prompts you to enter the
name of the variable.  If you press a single digit, the value is stored
immediately in one of the &ldquo;quick&rdquo; variables <code>q0</code> through
<code>q9</code>.  Or you can enter any variable name.
</p>
<a name="index-s-t"></a>
<a name="index-calc_002dstore_002dinto"></a>
<p>The <kbd>s s</kbd> command leaves the stored value on the stack.  There is
also an <kbd>s t</kbd> (<code>calc-store-into</code>) command, which removes a
value from the stack and stores it in a variable.
</p>
<p>If the top of stack value is an equation &lsquo;<samp>a = 7</samp>&rsquo; or assignment
&lsquo;<samp>a := 7</samp>&rsquo; with a variable on the lefthand side, then Calc will
assign that variable with that value by default, i.e., if you type
<kbd>s s <span class="key">RET</span></kbd> or <kbd>s t <span class="key">RET</span></kbd>.  In this example, the
value 7 would be stored in the variable &lsquo;<samp>a</samp>&rsquo;.  (If you do type
a variable name at the prompt, the top-of-stack value is stored in
its entirety, even if it is an equation:  &lsquo;<samp>s s b <span class="key">RET</span></samp>&rsquo;
with &lsquo;<samp>a := 7</samp>&rsquo; on the stack stores &lsquo;<samp>a := 7</samp>&rsquo; in <code>b</code>.)
</p>
<p>In fact, the top of stack value can be a vector of equations or
assignments with different variables on their lefthand sides; the
default will be to store all the variables with their corresponding
righthand sides simultaneously.
</p>
<p>It is also possible to type an equation or assignment directly at
the prompt for the <kbd>s s</kbd> or <kbd>s t</kbd> command:  <kbd>s s foo = 7</kbd>.
In this case the expression to the right of the <kbd>=</kbd> or <kbd>:=</kbd>
symbol is evaluated as if by the <kbd>=</kbd> command, and that value is
stored in the variable.  No value is taken from the stack; <kbd>s s</kbd>
and <kbd>s t</kbd> are equivalent when used in this way.
</p>
<a name="index-s-0_002d9"></a>
<a name="index-t-0_002d9"></a>
<p>The prefix keys <kbd>s</kbd> and <kbd>t</kbd> may be followed immediately by a
digit; <kbd>s 9</kbd> is equivalent to <kbd>s s 9</kbd>, and <kbd>t 9</kbd> is
equivalent to <kbd>s t 9</kbd>.  (The <kbd>t</kbd> prefix is otherwise used
for trail and time/date commands.)
</p>
<a name="index-s-_002b"></a>
<a name="index-s-_002d"></a>
<a name="index-s-_002a"></a>
<a name="index-s-_002f"></a>
<a name="index-s-_005e"></a>
<a name="index-s-_007c"></a>
<a name="index-s-n"></a>
<a name="index-s-_0026"></a>
<a name="index-s-_005b"></a>
<a name="index-s-_005d"></a>
<a name="index-calc_002dstore_002dplus"></a>
<a name="index-calc_002dstore_002dminus"></a>
<a name="index-calc_002dstore_002dtimes"></a>
<a name="index-calc_002dstore_002ddiv"></a>
<a name="index-calc_002dstore_002dpower"></a>
<a name="index-calc_002dstore_002dconcat"></a>
<a name="index-calc_002dstore_002dneg"></a>
<a name="index-calc_002dstore_002dinv"></a>
<a name="index-calc_002dstore_002ddecr"></a>
<a name="index-calc_002dstore_002dincr"></a>
<p>There are also several &ldquo;arithmetic store&rdquo; commands.  For example,
<kbd>s +</kbd> removes a value from the stack and adds it to the specified
variable.  The other arithmetic stores are <kbd>s -</kbd>, <kbd>s *</kbd>, <kbd>s /</kbd>,
<kbd>s ^</kbd>, and <kbd>s&nbsp;|</kbd><!-- /@w --> (vector concatenation), plus <kbd>s n</kbd> and
<kbd>s &amp;</kbd> which negate or invert the value in a variable, and <kbd>s&nbsp;[</kbd><!-- /@w -->
and <kbd>s ]</kbd> which decrease or increase a variable by one.
</p>
<p>All the arithmetic stores accept the Inverse prefix to reverse the
order of the operands.  If &lsquo;<samp>v</samp>&rsquo; represents the contents of the
variable, and &lsquo;<samp>a</samp>&rsquo; is the value drawn from the stack, then regular
<kbd>s&nbsp;<span class="nolinebreak">-</span></kbd><!-- /@w --> assigns
&lsquo;<samp>v := v - a</samp>&rsquo;,
but <kbd>I s -</kbd> assigns
&lsquo;<samp>v := a - v</samp>&rsquo;.
While <kbd>I s *</kbd> might seem pointless, it is
useful if matrix multiplication is involved.  Actually, all the
arithmetic stores use formulas designed to behave usefully both
forwards and backwards:
</p>
<div class="example">
<pre class="example">s +        v := v + a          v := a + v
s -        v := v - a          v := a - v
s *        v := v * a          v := a * v
s /        v := v / a          v := a / v
s ^        v := v ^ a          v := a ^ v
s |        v := v | a          v := a | v
s n        v := v / (-1)       v := (-1) / v
s &amp;        v := v ^ (-1)       v := (-1) ^ v
s [        v := v - 1          v := 1 - v
s ]        v := v - (-1)       v := (-1) - v
</pre></div>

<p>In the last four cases, a numeric prefix argument will be used in
place of the number one.  (For example, <kbd>M-2 s ]</kbd> increases
a variable by 2, and <kbd>M-2 I s ]</kbd> replaces a variable by
minus-two minus the variable.
</p>
<p>The first six arithmetic stores can also be typed <kbd>s t +</kbd>, <kbd>s t -</kbd>,
etc.  The commands <kbd>s s +</kbd>, <kbd>s s -</kbd>, and so on are analogous
arithmetic stores that don&rsquo;t remove the value &lsquo;<samp>a</samp>&rsquo; from the stack.
</p>
<p>All arithmetic stores report the new value of the variable in the
Trail for your information.  They signal an error if the variable
previously had no stored value.  If default simplifications have been
turned off, the arithmetic stores temporarily turn them on for numeric
arguments only (i.e., they temporarily do an <kbd>m N</kbd> command).
See <a href="#Simplification-Modes">Simplification Modes</a>.  Large vectors put in the trail by
these commands always use abbreviated (<kbd>t .</kbd>) mode.
</p>
<a name="index-s-m"></a>
<a name="index-calc_002dstore_002dmap"></a>
<p>The <kbd>s m</kbd> command is a general way to adjust a variable&rsquo;s value
using any Calc function.  It is a &ldquo;mapping&rdquo; command analogous to
<kbd>V M</kbd>, <kbd>V R</kbd>, etc.  See <a href="#Reducing-and-Mapping">Reducing and Mapping</a>, to see
how to specify a function for a mapping command.  Basically,
all you do is type the Calc command key that would invoke that
function normally.  For example, <kbd>s m n</kbd> applies the <kbd>n</kbd>
key to negate the contents of the variable, so <kbd>s m n</kbd> is
equivalent to <kbd>s n</kbd>.  Also, <kbd>s m Q</kbd> takes the square root
of the value stored in a variable, <kbd>s m v v</kbd> uses <kbd>v v</kbd> to
reverse the vector stored in the variable, and <kbd>s m H I S</kbd>
takes the hyperbolic arcsine of the variable contents.
</p>
<p>If the mapping function takes two or more arguments, the additional
arguments are taken from the stack; the old value of the variable
is provided as the first argument.  Thus <kbd>s m -</kbd> with &lsquo;<samp>a</samp>&rsquo;
on the stack computes &lsquo;<samp>v - a</samp>&rsquo;, just like <kbd>s -</kbd>.  With the
Inverse prefix, the variable&rsquo;s original value becomes the <em>last</em>
argument instead of the first.  Thus <kbd>I s m -</kbd> is also
equivalent to <kbd>I s -</kbd>.
</p>
<a name="index-s-x"></a>
<a name="index-calc_002dstore_002dexchange"></a>
<p>The <kbd>s x</kbd> (<code>calc-store-exchange</code>) command exchanges the value
of a variable with the value on the top of the stack.  Naturally, the
variable must already have a stored value for this to work.
</p>
<p>You can type an equation or assignment at the <kbd>s x</kbd> prompt.  The
command <kbd>s x a=6</kbd> takes no values from the stack; instead, it
pushes the old value of &lsquo;<samp>a</samp>&rsquo; on the stack and stores &lsquo;<samp>a = 6</samp>&rsquo;.
</p>
<a name="index-s-u"></a>
<a name="index-calc_002dunstore"></a>
<a name="index-Void-variables"></a>
<a name="index-Un_002dstoring-variables"></a>
<p>Until you store something in them, most variables are &ldquo;void,&rdquo; that is,
they contain no value at all.  If they appear in an algebraic formula
they will be left alone even if you press <kbd>=</kbd> (<code>calc-evaluate</code>).
The <kbd>s u</kbd> (<code>calc-unstore</code>) command returns a variable to the
void state.
</p>
<a name="index-s-c"></a>
<a name="index-calc_002dcopy_002dvariable"></a>
<p>The <kbd>s c</kbd> (<code>calc-copy-variable</code>) command copies the stored
value of one variable to another.  One way it differs from a simple
<kbd>s r</kbd> followed by an <kbd>s t</kbd> (aside from saving keystrokes) is
that the value never goes on the stack and thus is never rounded,
evaluated, or simplified in any way; it is not even rounded down to the
current precision.
</p>
<p>The only variables with predefined values are the &ldquo;special constants&rdquo;
<code>pi</code>, <code>e</code>, <code>i</code>, <code>phi</code>, and <code>gamma</code>.  You are free
to unstore these variables or to store new values into them if you like,
although some of the algebraic-manipulation functions may assume these
variables represent their standard values.  Calc displays a warning if
you change the value of one of these variables, or of one of the other
special variables <code>inf</code>, <code>uinf</code>, and <code>nan</code> (which are
normally void).
</p>
<p>Note that <code>pi</code> doesn&rsquo;t actually have 3.14159265359 stored in it,
but rather a special magic value that evaluates to &lsquo;<samp>pi</samp>&rsquo; at the current
precision.  Likewise <code>e</code>, <code>i</code>, and <code>phi</code> evaluate
according to the current precision or polar mode.  If you recall a value
from <code>pi</code> and store it back, this magic property will be lost.  The
magic property is preserved, however, when a variable is copied with
<kbd>s c</kbd>.
</p>
<a name="index-s-k"></a>
<a name="index-calc_002dcopy_002dspecial_002dconstant"></a>
<p>If one of the &ldquo;special constants&rdquo; is redefined (or undefined) so that
it no longer has its magic property, the property can be restored with
<kbd>s k</kbd> (<code>calc-copy-special-constant</code>).  This command will prompt
for a special constant and a variable to store it in, and so a special
constant can be stored in any variable.  Here, the special constant that
you enter doesn&rsquo;t depend on the value of the corresponding variable;
<code>pi</code> will represent 3.14159&hellip; regardless of what is currently
stored in the Calc variable <code>pi</code>.  If one of the other special
variables, <code>inf</code>, <code>uinf</code> or <code>nan</code>, is given a value, its
original behavior can be restored by voiding it with <kbd>s u</kbd>.
</p>
<hr>
<a name="Recalling-Variables"></a>
<div class="header">
<p>
Next: <a href="#Operations-on-Variables" accesskey="n" rel="next">Operations on Variables</a>, Previous: <a href="#Storing-Variables" accesskey="p" rel="prev">Storing Variables</a>, Up: <a href="#Store-and-Recall" accesskey="u" rel="up">Store and Recall</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Recalling-Variables-1"></a>
<h3 class="section">12.2 Recalling Variables</h3>

<p><a name="index-s-r"></a>
<a name="index-calc_002drecall"></a>
<a name="index-Recalling-variables"></a>
The most straightforward way to extract the stored value from a variable
is to use the <kbd>s r</kbd> (<code>calc-recall</code>) command.  This command prompts
for a variable name (similarly to <code>calc-store</code>), looks up the value
of the specified variable, and pushes that value onto the stack.  It is
an error to try to recall a void variable.
</p>
<p>It is also possible to recall the value from a variable by evaluating a
formula containing that variable.  For example, <kbd>' a <span class="key">RET</span> =</kbd> is
the same as <kbd>s r a <span class="key">RET</span></kbd> except that if the variable is void, the
former will simply leave the formula &lsquo;<samp>a</samp>&rsquo; on the stack whereas the
latter will produce an error message.
</p>
<a name="index-r-0_002d9"></a>
<p>The <kbd>r</kbd> prefix may be followed by a digit, so that <kbd>r 9</kbd> is
equivalent to <kbd>s r 9</kbd>.
</p>
<hr>
<a name="Operations-on-Variables"></a>
<div class="header">
<p>
Next: <a href="#Let-Command" accesskey="n" rel="next">Let Command</a>, Previous: <a href="#Recalling-Variables" accesskey="p" rel="prev">Recalling Variables</a>, Up: <a href="#Store-and-Recall" accesskey="u" rel="up">Store and Recall</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-Operations-on-Variables"></a>
<h3 class="section">12.3 Other Operations on Variables</h3>

<p><a name="index-s-e"></a>
<a name="index-calc_002dedit_002dvariable"></a>
The <kbd>s e</kbd> (<code>calc-edit-variable</code>) command edits the stored
value of a variable without ever putting that value on the stack
or simplifying or evaluating the value.  It prompts for the name of
the variable to edit.  If the variable has no stored value, the
editing buffer will start out empty.  If the editing buffer is
empty when you press <kbd>C-c C-c</kbd> to finish, the variable will
be made void.  See <a href="#Editing-Stack-Entries">Editing Stack Entries</a>, for a general
description of editing.
</p>
<p>The <kbd>s e</kbd> command is especially useful for creating and editing
rewrite rules which are stored in variables.  Sometimes these rules
contain formulas which must not be evaluated until the rules are
actually used.  (For example, they may refer to &lsquo;<samp>deriv(x,y)</samp>&rsquo;,
where <code>x</code> will someday become some expression involving <code>y</code>;
if you let Calc evaluate the rule while you are defining it, Calc will
replace &lsquo;<samp>deriv(x,y)</samp>&rsquo; with 0 because the formula <code>x</code> does
not itself refer to <code>y</code>.)  By contrast, recalling the variable,
editing with <kbd>`</kbd>, and storing will evaluate the variable&rsquo;s value
as a side effect of putting the value on the stack.
</p>
<a name="index-s-A"></a>
<a name="index-s-D"></a>
<a name="index-s-E"></a>
<a name="index-s-F"></a>
<a name="index-s-G"></a>
<a name="index-s-H"></a>
<a name="index-s-I"></a>
<a name="index-s-L"></a>
<a name="index-s-P"></a>
<a name="index-s-R"></a>
<a name="index-s-T"></a>
<a name="index-s-U"></a>
<a name="index-s-X"></a>
<a name="index-calc_002dstore_002dAlgSimpRules"></a>
<a name="index-calc_002dstore_002dDecls"></a>
<a name="index-calc_002dstore_002dEvalRules"></a>
<a name="index-calc_002dstore_002dFitRules"></a>
<a name="index-calc_002dstore_002dGenCount"></a>
<a name="index-calc_002dstore_002dHolidays"></a>
<a name="index-calc_002dstore_002dIntegLimit"></a>
<a name="index-calc_002dstore_002dLineStyles"></a>
<a name="index-calc_002dstore_002dPointStyles"></a>
<a name="index-calc_002dstore_002dPlotRejects"></a>
<a name="index-calc_002dstore_002dTimeZone"></a>
<a name="index-calc_002dstore_002dUnits"></a>
<a name="index-calc_002dstore_002dExtSimpRules"></a>
<p>There are several special-purpose variable-editing commands that
use the <kbd>s</kbd> prefix followed by a shifted letter:
</p>
<dl compact="compact">
<dt><kbd>s A</kbd></dt>
<dd><p>Edit <code>AlgSimpRules</code>.  See <a href="#Algebraic-Simplifications">Algebraic Simplifications</a>.
</p></dd>
<dt><kbd>s D</kbd></dt>
<dd><p>Edit <code>Decls</code>.  See <a href="#Declarations">Declarations</a>.
</p></dd>
<dt><kbd>s E</kbd></dt>
<dd><p>Edit <code>EvalRules</code>.  See <a href="#Basic-Simplifications">Basic Simplifications</a>.
</p></dd>
<dt><kbd>s F</kbd></dt>
<dd><p>Edit <code>FitRules</code>.  See <a href="#Curve-Fitting">Curve Fitting</a>.
</p></dd>
<dt><kbd>s G</kbd></dt>
<dd><p>Edit <code>GenCount</code>.  See <a href="#Solving-Equations">Solving Equations</a>.
</p></dd>
<dt><kbd>s H</kbd></dt>
<dd><p>Edit <code>Holidays</code>.  See <a href="#Business-Days">Business Days</a>.
</p></dd>
<dt><kbd>s I</kbd></dt>
<dd><p>Edit <code>IntegLimit</code>.  See <a href="#Calculus">Calculus</a>.
</p></dd>
<dt><kbd>s L</kbd></dt>
<dd><p>Edit <code>LineStyles</code>.  See <a href="#Graphics">Graphics</a>.
</p></dd>
<dt><kbd>s P</kbd></dt>
<dd><p>Edit <code>PointStyles</code>.  See <a href="#Graphics">Graphics</a>.
</p></dd>
<dt><kbd>s R</kbd></dt>
<dd><p>Edit <code>PlotRejects</code>.  See <a href="#Graphics">Graphics</a>.
</p></dd>
<dt><kbd>s T</kbd></dt>
<dd><p>Edit <code>TimeZone</code>.  See <a href="#Time-Zones">Time Zones</a>.
</p></dd>
<dt><kbd>s U</kbd></dt>
<dd><p>Edit <code>Units</code>.  See <a href="#User_002dDefined-Units">User-Defined Units</a>.
</p></dd>
<dt><kbd>s X</kbd></dt>
<dd><p>Edit <code>ExtSimpRules</code>.  See <a href="#Unsafe-Simplifications">Unsafe Simplifications</a>.
</p></dd>
</dl>

<p>These commands are just versions of <kbd>s e</kbd> that use fixed variable
names rather than prompting for the variable name.
</p>
<a name="index-s-p"></a>
<a name="index-calc_002dpermanent_002dvariable"></a>
<a name="index-Storing-variables-1"></a>
<a name="index-Permanent-variables"></a>
<a name="index-Calc-init-file_002c-variables"></a>
<p>The <kbd>s p</kbd> (<code>calc-permanent-variable</code>) command saves a
variable&rsquo;s value permanently in your Calc init file (the file given by
the variable <code>calc-settings-file</code>, typically <samp>~/.emacs.d/calc.el</samp>), so
that its value will still be available in future Emacs sessions.  You
can re-execute <kbd>s&nbsp;p</kbd><!-- /@w --> later on to update the saved value, but the
only way to remove a saved variable is to edit your calc init file
by hand.  (See <a href="#General-Mode-Commands">General Mode Commands</a>, for a way to tell Calc to
use a different file for the Calc init file.)
</p>
<p>If you do not specify the name of a variable to save (i.e.,
<kbd>s p <span class="key">RET</span></kbd>), all Calc variables with defined values
are saved except for the special constants <code>pi</code>, <code>e</code>,
<code>i</code>, <code>phi</code>, and <code>gamma</code>; the variables <code>TimeZone</code>
and <code>PlotRejects</code>;
<code>FitRules</code>, <code>DistribRules</code>, and other built-in rewrite
rules; and <code>PlotData<var>n</var></code> variables generated
by the graphics commands.  (You can still save these variables by
explicitly naming them in an <kbd>s p</kbd> command.)
</p>
<a name="index-s-i"></a>
<a name="index-calc_002dinsert_002dvariables"></a>
<p>The <kbd>s i</kbd> (<code>calc-insert-variables</code>) command writes
the values of all Calc variables into a specified buffer.
The variables are written with the prefix <code>var-</code> in the form of
Lisp <code>setq</code> commands
which store the values in string form.  You can place these commands
in your Calc init file (or <samp>.emacs</samp>) if you wish, though in this case it
would be easier to use <kbd>s p <span class="key">RET</span></kbd>.  (Note that <kbd>s i</kbd>
omits the same set of variables as <kbd>s&nbsp;p&nbsp;<span class="key">RET</span></kbd><!-- /@w -->; the difference
is that <kbd>s i</kbd> will store the variables in any buffer, and it also
stores in a more human-readable format.)
</p>
<hr>
<a name="Let-Command"></a>
<div class="header">
<p>
Next: <a href="#Evaluates_002dTo-Operator" accesskey="n" rel="next">Evaluates-To Operator</a>, Previous: <a href="#Operations-on-Variables" accesskey="p" rel="prev">Operations on Variables</a>, Up: <a href="#Store-and-Recall" accesskey="u" rel="up">Store and Recall</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Let-Command"></a>
<h3 class="section">12.4 The Let Command</h3>

<p><a name="index-s-l"></a>
<a name="index-calc_002dlet"></a>
<a name="index-Variables_002c-temporary-assignment"></a>
<a name="index-Temporary-assignment-to-variables"></a>
If you have an expression like &lsquo;<samp>a+b^2</samp>&rsquo; on the stack and you wish to
compute its value where &lsquo;<samp>b=3</samp>&rsquo;, you can simply store 3 in &lsquo;<samp>b</samp>&rsquo; and
then press <kbd>=</kbd> to reevaluate the formula.  This has the side-effect
of leaving the stored value of 3 in &lsquo;<samp>b</samp>&rsquo; for future operations.
</p>
<p>The <kbd>s l</kbd> (<code>calc-let</code>) command evaluates a formula under a
<em>temporary</em> assignment of a variable.  It stores the value on the
top of the stack into the specified variable, then evaluates the
second-to-top stack entry, then restores the original value (or lack of one)
in the variable.  Thus after <kbd>'&nbsp;<!-- /@w -->a+b^2 <span class="key">RET</span> 3 s l b <span class="key">RET</span></kbd>,
the stack will contain the formula &lsquo;<samp>a + 9</samp>&rsquo;.  The subsequent command
<kbd>5&nbsp;s&nbsp;l&nbsp;a<!-- /@w --> <span class="key">RET</span></kbd> will replace this formula with the number 14.
The variables &lsquo;<samp>a</samp>&rsquo; and &lsquo;<samp>b</samp>&rsquo; are not permanently affected in any way
by these commands.
</p>
<p>The value on the top of the stack may be an equation or assignment, or
a vector of equations or assignments, in which case the default will be
analogous to the case of <kbd>s t <span class="key">RET</span></kbd>.  See <a href="#Storing-Variables">Storing Variables</a>.
</p>
<p>Also, you can answer the variable-name prompt with an equation or
assignment:  <kbd>s l b=3 <span class="key">RET</span></kbd> is the same as storing 3 on the stack
and typing <kbd>s l b <span class="key">RET</span></kbd>.
</p>
<p>The <kbd>a b</kbd> (<code>calc-substitute</code>) command is another way to substitute
a variable with a value in a formula.  It does an actual substitution
rather than temporarily assigning the variable and evaluating.  For
example, letting &lsquo;<samp>n=2</samp>&rsquo; in &lsquo;<samp>f(n pi)</samp>&rsquo; with <kbd>a b</kbd> will
produce &lsquo;<samp>f(2 pi)</samp>&rsquo;, whereas <kbd>s l</kbd> would give &lsquo;<samp>f(6.28)</samp>&rsquo;
since the evaluation step will also evaluate <code>pi</code>.
</p>
<hr>
<a name="Evaluates_002dTo-Operator"></a>
<div class="header">
<p>
Previous: <a href="#Let-Command" accesskey="p" rel="prev">Let Command</a>, Up: <a href="#Store-and-Recall" accesskey="u" rel="up">Store and Recall</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Evaluates_002dTo-Operator"></a>
<h3 class="section">12.5 The Evaluates-To Operator</h3>

<p><a name="index-evalto"></a>
<a name="index-_003d_003e"></a>
<a name="index-Evaluates_002dto-operator"></a>
<a name="index-_003d_003e-operator"></a>
The special algebraic symbol &lsquo;<samp>=&gt;</samp>&rsquo; is known as the <em>evaluates-to
operator</em>.  (It will show up as an <code>evalto</code> function call in
other language modes like Pascal and LaTeX.)  This is a binary
operator, that is, it has a lefthand and a righthand argument,
although it can be entered with the righthand argument omitted.
</p>
<p>A formula like &lsquo;<samp><var>a</var> =&gt; <var>b</var></samp>&rsquo; is evaluated by Calc as
follows:  First, <var>a</var> is not simplified or modified in any
way.  The previous value of argument <var>b</var> is thrown away; the
formula <var>a</var> is then copied and evaluated as if by the <kbd>=</kbd>
command according to all current modes and stored variable values,
and the result is installed as the new value of <var>b</var>.
</p>
<p>For example, suppose you enter the algebraic formula &lsquo;<samp>2 + 3 =&gt; 17</samp>&rsquo;.
The number 17 is ignored, and the lefthand argument is left in its
unevaluated form; the result is the formula &lsquo;<samp>2 + 3 =&gt; 5</samp>&rsquo;.
</p>
<a name="index-s-_003d"></a>
<a name="index-calc_002devalto"></a>
<p>You can enter an &lsquo;<samp>=&gt;</samp>&rsquo; formula either directly using algebraic
entry (in which case the righthand side may be omitted since it is
going to be replaced right away anyhow), or by using the <kbd>s =</kbd>
(<code>calc-evalto</code>) command, which takes <var>a</var> from the stack
and replaces it with &lsquo;<samp><var>a</var> =&gt; <var>b</var></samp>&rsquo;.
</p>
<p>Calc keeps track of all &lsquo;<samp>=&gt;</samp>&rsquo; operators on the stack, and
recomputes them whenever anything changes that might affect their
values, i.e., a mode setting or variable value.  This occurs only
if the &lsquo;<samp>=&gt;</samp>&rsquo; operator is at the top level of the formula, or
if it is part of a top-level vector.  In other words, pushing
&lsquo;<samp>2 + (a =&gt; 17)</samp>&rsquo; will change the 17 to the actual value of
&lsquo;<samp>a</samp>&rsquo; when you enter the formula, but the result will not be
dynamically updated when &lsquo;<samp>a</samp>&rsquo; is changed later because the
&lsquo;<samp>=&gt;</samp>&rsquo; operator is buried inside a sum.  However, a vector
of &lsquo;<samp>=&gt;</samp>&rsquo; operators will be recomputed, since it is convenient
to push a vector like &lsquo;<samp>[a =&gt;, b =&gt;, c =&gt;]</samp>&rsquo; on the stack to
make a concise display of all the variables in your problem.
(Another way to do this would be to use &lsquo;<samp>[a, b, c] =&gt;</samp>&rsquo;,
which provides a slightly different format of display.  You
can use whichever you find easiest to read.)
</p>
<a name="index-m-C-1"></a>
<a name="index-calc_002dauto_002drecompute-1"></a>
<p>The <kbd>m C</kbd> (<code>calc-auto-recompute</code>) command allows you to
turn this automatic recomputation on or off.  If you turn
recomputation off, you must explicitly recompute an &lsquo;<samp>=&gt;</samp>&rsquo;
operator on the stack in one of the usual ways, such as by
pressing <kbd>=</kbd>.  Turning recomputation off temporarily can save
a lot of time if you will be changing several modes or variables
before you look at the &lsquo;<samp>=&gt;</samp>&rsquo; entries again.
</p>
<p>Most commands are not especially useful with &lsquo;<samp>=&gt;</samp>&rsquo; operators
as arguments.  For example, given &lsquo;<samp>x + 2 =&gt; 17</samp>&rsquo;, it won&rsquo;t
work to type <kbd>1 +</kbd> to get &lsquo;<samp>x + 3 =&gt; 18</samp>&rsquo;.  If you want
to operate on the lefthand side of the &lsquo;<samp>=&gt;</samp>&rsquo; operator on
the top of the stack, type <kbd>j 1</kbd> (that&rsquo;s the digit &ldquo;one&rdquo;)
to select the lefthand side, execute your commands, then type
<kbd>j u</kbd> to unselect.
</p>
<p>All current modes apply when an &lsquo;<samp>=&gt;</samp>&rsquo; operator is computed,
including the current simplification mode.  Recall that the
formula &lsquo;<samp>arcsin(sin(x))</samp>&rsquo; will not be handled by Calc&rsquo;s algebraic
simplifications, but Calc&rsquo;s unsafe simplifications will reduce it to
&lsquo;<samp>x</samp>&rsquo;.   If you enter &lsquo;<samp>arcsin(sin(x)) =&gt;</samp>&rsquo; normally, the result
will be &lsquo;<samp>arcsin(sin(x)) =&gt; arcsin(sin(x))</samp>&rsquo;.  If you change to
Extended Simplification mode, the result will be
&lsquo;<samp>arcsin(sin(x)) =&gt; x</samp>&rsquo;.  However, just pressing <kbd>a e</kbd>
once will have no effect on &lsquo;<samp>arcsin(sin(x)) =&gt; arcsin(sin(x))</samp>&rsquo;,
because the righthand side depends only on the lefthand side
and the current mode settings, and the lefthand side is not
affected by commands like <kbd>a e</kbd>.
</p>
<p>The &ldquo;let&rdquo; command (<kbd>s l</kbd>) has an interesting interaction
with the &lsquo;<samp>=&gt;</samp>&rsquo; operator.  The <kbd>s l</kbd> command evaluates the
second-to-top stack entry with the top stack entry supplying
a temporary value for a given variable.  As you might expect,
if that stack entry is an &lsquo;<samp>=&gt;</samp>&rsquo; operator its righthand
side will temporarily show this value for the variable.  In
fact, all &lsquo;<samp>=&gt;</samp>&rsquo;s on the stack will be updated if they refer
to that variable.  But this change is temporary in the sense
that the next command that causes Calc to look at those stack
entries will make them revert to the old variable value.
</p>
<div class="smallexample">
<pre class="smallexample">2:  a =&gt; a             2:  a =&gt; 17         2:  a =&gt; a
1:  a + 1 =&gt; a + 1     1:  a + 1 =&gt; 18     1:  a + 1 =&gt; a + 1
    .                      .                   .

                           17 s l a <span class="key">RET</span>        p 8 <span class="key">RET</span>
</pre></div>

<p>Here the <kbd>p 8</kbd> command changes the current precision,
thus causing the &lsquo;<samp>=&gt;</samp>&rsquo; forms to be recomputed after the
influence of the &ldquo;let&rdquo; is gone.  The <kbd>d <span class="key">SPC</span></kbd> command
(<code>calc-refresh</code>) is a handy way to force the &lsquo;<samp>=&gt;</samp>&rsquo;
operators on the stack to be recomputed without any other
side effects.
</p>
<a name="index-s-_003a"></a>
<a name="index-calc_002dassign"></a>
<a name="index-assign"></a>
<a name="index-_003a_003d"></a>
<p>Embedded mode also uses &lsquo;<samp>=&gt;</samp>&rsquo; operators.  In Embedded mode,
the lefthand side of an &lsquo;<samp>=&gt;</samp>&rsquo; operator can refer to variables
assigned elsewhere in the file by &lsquo;<samp>:=</samp>&rsquo; operators.  The
assignment operator &lsquo;<samp>a := 17</samp>&rsquo; does not actually do anything
by itself.  But Embedded mode recognizes it and marks it as a sort
of file-local definition of the variable.  You can enter &lsquo;<samp>:=</samp>&rsquo;
operators in Algebraic mode, or by using the <kbd>s :</kbd>
(<code>calc-assign</code>) [<code>assign</code>] command which takes a variable
and value from the stack and replaces them with an assignment.
</p>
<p>See <a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a>, for the way &lsquo;<samp>=&gt;</samp>&rsquo; appears in
TeX language output.  The <em>eqn</em> mode gives similar
treatment to &lsquo;<samp>=&gt;</samp>&rsquo;.
</p>
<hr>
<a name="Graphics"></a>
<div class="header">
<p>
Next: <a href="#Kill-and-Yank" accesskey="n" rel="next">Kill and Yank</a>, Previous: <a href="#Store-and-Recall" accesskey="p" rel="prev">Store and Recall</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Graphics-1"></a>
<h2 class="chapter">13 Graphics</h2>

<p>The commands for graphing data begin with the <kbd>g</kbd> prefix key.  Calc
uses GNUPLOT 2.0 or later to do graphics.  These commands will only work
if GNUPLOT is available on your system.  (While GNUPLOT sounds like
a relative of GNU Emacs, it is actually completely unrelated.
However, it is free software.   It can be obtained from
&lsquo;<samp>http://www.gnuplot.info</samp>&rsquo;.)
</p>
<a name="index-calc_002dgnuplot_002dname"></a>
<p>If you have GNUPLOT installed on your system but Calc is unable to
find it, you may need to set the <code>calc-gnuplot-name</code> variable in
your Calc init file or <samp>.emacs</samp>.  You may also need to set some
Lisp variables to show Calc how to run GNUPLOT on your system; these
are described under <kbd>g D</kbd> and <kbd>g O</kbd> below.  If you are using
the X window system or MS-Windows, Calc will configure GNUPLOT for you
automatically.  If you have GNUPLOT 3.0 or later and you are using a
Unix or GNU system without X, Calc will configure GNUPLOT to display
graphs using simple character graphics that will work on any
Posix-compatible terminal.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Graphics" accesskey="1">Basic Graphics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Three-Dimensional-Graphics" accesskey="2">Three Dimensional Graphics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Managing-Curves" accesskey="3">Managing Curves</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Graphics-Options" accesskey="4">Graphics Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Devices" accesskey="5">Devices</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Graphics"></a>
<div class="header">
<p>
Next: <a href="#Three-Dimensional-Graphics" accesskey="n" rel="next">Three Dimensional Graphics</a>, Previous: <a href="#Graphics" accesskey="p" rel="prev">Graphics</a>, Up: <a href="#Graphics" accesskey="u" rel="up">Graphics</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Graphics-1"></a>
<h3 class="section">13.1 Basic Graphics</h3>

<p><a name="index-g-f"></a>
<a name="index-calc_002dgraph_002dfast"></a>
The easiest graphics command is <kbd>g f</kbd> (<code>calc-graph-fast</code>).
This command takes two vectors of equal length from the stack.
The vector at the top of the stack represents the &ldquo;y&rdquo; values of
the various data points.  The vector in the second-to-top position
represents the corresponding &ldquo;x&rdquo; values.  This command runs
GNUPLOT (if it has not already been started by previous graphing
commands) and displays the set of data points.  The points will
be connected by lines, and there will also be some kind of symbol
to indicate the points themselves.
</p>
<p>The &ldquo;x&rdquo; entry may instead be an interval form, in which case suitable
&ldquo;x&rdquo; values are interpolated between the minimum and maximum values of
the interval (whether the interval is open or closed is ignored).
</p>
<p>The &ldquo;x&rdquo; entry may also be a number, in which case Calc uses the
sequence of &ldquo;x&rdquo; values &lsquo;<samp>x</samp>&rsquo;, &lsquo;<samp>x+1</samp>&rsquo;, &lsquo;<samp>x+2</samp>&rsquo;, etc.
(Generally the number 0 or 1 would be used for &lsquo;<samp>x</samp>&rsquo; in this case.)
</p>
<p>The &ldquo;y&rdquo; entry may be any formula instead of a vector.  Calc effectively
uses <kbd>N</kbd> (<code>calc-eval-num</code>) to evaluate variables in the formula;
the result of this must be a formula in a single (unassigned) variable.
The formula is plotted with this variable taking on the various &ldquo;x&rdquo;
values.  Graphs of formulas by default use lines without symbols at the
computed data points.  Note that if neither &ldquo;x&rdquo; nor &ldquo;y&rdquo; is a vector,
Calc guesses at a reasonable number of data points to use.  See the
<kbd>g N</kbd> command below.  (The &ldquo;x&rdquo; values must be either a vector
or an interval if &ldquo;y&rdquo; is a formula.)
</p>
<a name="index-xy"></a>
<p>If &ldquo;y&rdquo; is (or evaluates to) a formula of the form
&lsquo;<samp>xy(<var>x</var>, <var>y</var>)</samp>&rsquo; then the result is a
parametric plot.  The two arguments of the fictitious <code>xy</code> function
are used as the &ldquo;x&rdquo; and &ldquo;y&rdquo; coordinates of the curve, respectively.
In this case the &ldquo;x&rdquo; vector or interval you specified is not directly
visible in the graph.  For example, if &ldquo;x&rdquo; is the interval &lsquo;<samp>[0..360]</samp>&rsquo;
and &ldquo;y&rdquo; is the formula &lsquo;<samp>xy(sin(t), cos(t))</samp>&rsquo;, the resulting graph
will be a circle.
</p>
<p>Also, &ldquo;x&rdquo; and &ldquo;y&rdquo; may each be variable names, in which case Calc
looks for suitable vectors, intervals, or formulas stored in those
variables.
</p>
<p>The &ldquo;x&rdquo; and &ldquo;y&rdquo; values for the data points (as pulled from the vectors,
calculated from the formulas, or interpolated from the intervals) should
be real numbers (integers, fractions, or floats).  One exception to this
is that the &ldquo;y&rdquo; entry can consist of a vector of numbers combined with
error forms, in which case the points will be plotted with the
appropriate error bars.  Other than this, if either the &ldquo;x&rdquo;
value or the &ldquo;y&rdquo; value of a given data point is not a real number, that
data point will be omitted from the graph.  The points on either side
of the invalid point will <em>not</em> be connected by a line.
</p>
<p>See the documentation for <kbd>g a</kbd> below for a description of the way
numeric prefix arguments affect <kbd>g f</kbd>.
</p>
<a name="index-PlotRejects-variable"></a>
<a name="index-PlotRejects"></a>
<p>If you store an empty vector in the variable <code>PlotRejects</code>
(i.e., <kbd>[ ] s t PlotRejects</kbd>), Calc will append information to
this vector for every data point which was rejected because its
&ldquo;x&rdquo; or &ldquo;y&rdquo; values were not real numbers.  The result will be
a matrix where each row holds the curve number, data point number,
&ldquo;x&rdquo; value, and &ldquo;y&rdquo; value for a rejected data point.
See <a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a>, for a handy way to keep tabs on the
current value of <code>PlotRejects</code>.  See <a href="#Operations-on-Variables">Operations on Variables</a>,
for the <kbd>s R</kbd> command which is another easy way to examine
<code>PlotRejects</code>.
</p>
<a name="index-g-c"></a>
<a name="index-calc_002dgraph_002dclear"></a>
<p>To clear the graphics display, type <kbd>g c</kbd> (<code>calc-graph-clear</code>).
If the GNUPLOT output device is an X window, the window will go away.
Effects on other kinds of output devices will vary.  You don&rsquo;t need
to use <kbd>g c</kbd> if you don&rsquo;t want to&mdash;if you give another <kbd>g f</kbd>
or <kbd>g p</kbd> command later on, it will reuse the existing graphics
window if there is one.
</p>
<hr>
<a name="Three-Dimensional-Graphics"></a>
<div class="header">
<p>
Next: <a href="#Managing-Curves" accesskey="n" rel="next">Managing Curves</a>, Previous: <a href="#Basic-Graphics" accesskey="p" rel="prev">Basic Graphics</a>, Up: <a href="#Graphics" accesskey="u" rel="up">Graphics</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Three_002dDimensional-Graphics"></a>
<h3 class="section">13.2 Three-Dimensional Graphics</h3>

<a name="index-g-F"></a>
<a name="index-calc_002dgraph_002dfast_002d3d"></a>
<p>The <kbd>g F</kbd> (<code>calc-graph-fast-3d</code>) command makes a three-dimensional
graph.  It works only if you have GNUPLOT 3.0 or later; with GNUPLOT 2.0,
you will see a GNUPLOT error message if you try this command.
</p>
<p>The <kbd>g F</kbd> command takes three values from the stack, called &ldquo;x&rdquo;,
&ldquo;y&rdquo;, and &ldquo;z&rdquo;, respectively.  As was the case for 2D graphs, there
are several options for these values.
</p>
<p>In the first case, &ldquo;x&rdquo; and &ldquo;y&rdquo; are each vectors (not necessarily of
the same length); either or both may instead be interval forms.  The
&ldquo;z&rdquo; value must be a matrix with the same number of rows as elements
in &ldquo;x&rdquo;, and the same number of columns as elements in &ldquo;y&rdquo;.  The
result is a surface plot where
&lsquo;<samp>z_ij</samp>&rsquo;
is the height of the point
at coordinate &lsquo;<samp>(x_i, y_j)</samp>&rsquo; on the surface.  The 3D graph will
be displayed from a certain default viewpoint; you can change this
viewpoint by adding a &lsquo;<samp>set view</samp>&rsquo; to the <samp>*Gnuplot Commands*</samp>
buffer as described later.  See the GNUPLOT documentation for a
description of the &lsquo;<samp>set view</samp>&rsquo; command.
</p>
<p>Each point in the matrix will be displayed as a dot in the graph,
and these points will be connected by a grid of lines (<em>isolines</em>).
</p>
<p>In the second case, &ldquo;x&rdquo;, &ldquo;y&rdquo;, and &ldquo;z&rdquo; are all vectors of equal
length.  The resulting graph displays a 3D line instead of a surface,
where the coordinates of points along the line are successive triplets
of values from the input vectors.
</p>
<p>In the third case, &ldquo;x&rdquo; and &ldquo;y&rdquo; are vectors or interval forms, and
&ldquo;z&rdquo; is any formula involving two variables (not counting variables
with assigned values).  These variables are sorted into alphabetical
order; the first takes on values from &ldquo;x&rdquo; and the second takes on
values from &ldquo;y&rdquo; to form a matrix of results that are graphed as a
3D surface.
</p>
<a name="index-xyz"></a>
<p>If the &ldquo;z&rdquo; formula evaluates to a call to the fictitious function
&lsquo;<samp>xyz(<var>x</var>, <var>y</var>, <var>z</var>)</samp>&rsquo;, then the result is a
&ldquo;parametric surface.&rdquo;  In this case, the axes of the graph are
taken from the <var>x</var> and <var>y</var> values in these calls, and the
&ldquo;x&rdquo; and &ldquo;y&rdquo; values from the input vectors or intervals are used only
to specify the range of inputs to the formula.  For example, plotting
&lsquo;<samp>[0..360], [0..180], xyz(sin(x)*sin(y), cos(x)*sin(y), cos(y))</samp>&rsquo;
will draw a sphere.  (Since the default resolution for 3D plots is
5 steps in each of &ldquo;x&rdquo; and &ldquo;y&rdquo;, this will draw a very crude
sphere.  You could use the <kbd>g N</kbd> command, described below, to
increase this resolution, or specify the &ldquo;x&rdquo; and &ldquo;y&rdquo; values as
vectors with more than 5 elements.
</p>
<p>It is also possible to have a function in a regular <kbd>g f</kbd> plot
evaluate to an <code>xyz</code> call.  Since <kbd>g f</kbd> plots a line, not
a surface, the result will be a 3D parametric line.  For example,
&lsquo;<samp>[[0..720], xyz(sin(x), cos(x), x)]</samp>&rsquo; will plot two turns of a
helix (a three-dimensional spiral).
</p>
<p>As for <kbd>g f</kbd>, each of &ldquo;x&rdquo;, &ldquo;y&rdquo;, and &ldquo;z&rdquo; may instead be
variables containing the relevant data.
</p>
<hr>
<a name="Managing-Curves"></a>
<div class="header">
<p>
Next: <a href="#Graphics-Options" accesskey="n" rel="next">Graphics Options</a>, Previous: <a href="#Three-Dimensional-Graphics" accesskey="p" rel="prev">Three Dimensional Graphics</a>, Up: <a href="#Graphics" accesskey="u" rel="up">Graphics</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Managing-Curves-1"></a>
<h3 class="section">13.3 Managing Curves</h3>

<p>The <kbd>g f</kbd> command is really shorthand for the following commands:
<kbd>C-u g d  g a  g p</kbd>.  Likewise, <kbd>g&nbsp;F</kbd><!-- /@w --> is shorthand for
<kbd>C-u g d  g A  g p</kbd>.  You can gain more control over your graph
by using these commands directly.
</p>
<a name="index-g-a"></a>
<a name="index-calc_002dgraph_002dadd"></a>
<p>The <kbd>g a</kbd> (<code>calc-graph-add</code>) command adds the &ldquo;curve&rdquo;
represented by the two values on the top of the stack to the current
graph.  You can have any number of curves in the same graph.  When
you give the <kbd>g p</kbd> command, all the curves will be drawn superimposed
on the same axes.
</p>
<p>The <kbd>g a</kbd> command (and many others that affect the current graph)
will cause a special buffer, <samp>*Gnuplot Commands*</samp>, to be displayed
in another window.  This buffer is a template of the commands that will
be sent to GNUPLOT when it is time to draw the graph.  The first
<kbd>g a</kbd> command adds a <code>plot</code> command to this buffer.  Succeeding
<kbd>g a</kbd> commands add extra curves onto that <code>plot</code> command.
Other graph-related commands put other GNUPLOT commands into this
buffer.  In normal usage you never need to work with this buffer
directly, but you can if you wish.  The only constraint is that there
must be only one <code>plot</code> command, and it must be the last command
in the buffer.  If you want to save and later restore a complete graph
configuration, you can use regular Emacs commands to save and restore
the contents of the <samp>*Gnuplot Commands*</samp> buffer.
</p>
<a name="index-PlotData1"></a>
<a name="index-PlotData2"></a>
<p>If the values on the stack are not variable names, <kbd>g a</kbd> will invent
variable names for them (of the form &lsquo;<samp>PlotData<var>n</var></samp>&rsquo;) and store
the values in those variables.  The &ldquo;x&rdquo; and &ldquo;y&rdquo; variables are what
go into the <code>plot</code> command in the template.  If you add a curve
that uses a certain variable and then later change that variable, you
can replot the graph without having to delete and re-add the curve.
That&rsquo;s because the variable name, not the vector, interval or formula
itself, is what was added by <kbd>g a</kbd>.
</p>
<p>A numeric prefix argument on <kbd>g a</kbd> or <kbd>g f</kbd> changes the way
stack entries are interpreted as curves.  With a positive prefix
argument &lsquo;<samp>n</samp>&rsquo;, the top &lsquo;<samp>n</samp>&rsquo; stack entries are &ldquo;y&rdquo; values
for &lsquo;<samp>n</samp>&rsquo; different curves which share a common &ldquo;x&rdquo; value in
the &lsquo;<samp>n+1</samp>&rsquo;st stack entry.  (Thus <kbd>g a</kbd> with no prefix
argument is equivalent to <kbd>C-u 1 g a</kbd>.)
</p>
<p>A prefix of zero or plain <kbd>C-u</kbd> means to take two stack entries,
&ldquo;x&rdquo; and &ldquo;y&rdquo; as usual, but to interpret &ldquo;y&rdquo; as a vector of
&ldquo;y&rdquo; values for several curves that share a common &ldquo;x&rdquo;.
</p>
<p>A negative prefix argument tells Calc to read &lsquo;<samp>n</samp>&rsquo; vectors from
the stack; each vector &lsquo;<samp>[x, y]</samp>&rsquo; describes an independent curve.
This is the only form of <kbd>g a</kbd> that creates several curves at once
that don&rsquo;t have common &ldquo;x&rdquo; values.  (Of course, the range of &ldquo;x&rdquo;
values covered by all the curves ought to be roughly the same if
they are to look nice on the same graph.)
</p>
<p>For example, to plot
&lsquo;<samp>sin(n x)</samp>&rsquo;
for integers &lsquo;<samp>n</samp>&rsquo;
from 1 to 5, you could use <kbd>v x</kbd> to create a vector of integers
(&lsquo;<samp>n</samp>&rsquo;), then <kbd>V M '</kbd> or <kbd>V M $</kbd> to map &lsquo;<samp>sin(n x)</samp>&rsquo;
across this vector.  The resulting vector of formulas is suitable
for use as the &ldquo;y&rdquo; argument to a <kbd>C-u g a</kbd> or <kbd>C-u g f</kbd>
command.
</p>
<a name="index-g-A"></a>
<a name="index-calc_002dgraph_002dadd_002d3d"></a>
<p>The <kbd>g A</kbd> (<code>calc-graph-add-3d</code>) command adds a 3D curve
to the graph.  It is not valid to intermix 2D and 3D curves in a
single graph.  This command takes three arguments, &ldquo;x&rdquo;, &ldquo;y&rdquo;,
and &ldquo;z&rdquo;, from the stack.  With a positive prefix &lsquo;<samp>n</samp>&rsquo;, it
takes &lsquo;<samp>n+2</samp>&rsquo; arguments (common &ldquo;x&rdquo; and &ldquo;y&rdquo;, plus &lsquo;<samp>n</samp>&rsquo;
separate &ldquo;z&rdquo;s).  With a zero prefix, it takes three stack entries
but the &ldquo;z&rdquo; entry is a vector of curve values.  With a negative
prefix &lsquo;<samp>-n</samp>&rsquo;, it takes &lsquo;<samp>n</samp>&rsquo; vectors of the form &lsquo;<samp>[x, y, z]</samp>&rsquo;.
The <kbd>g A</kbd> command works by adding a <code>splot</code> (surface-plot)
command to the <samp>*Gnuplot Commands*</samp> buffer.
</p>
<p>(Although <kbd>g a</kbd> adds a 2D <code>plot</code> command to the
<samp>*Gnuplot Commands*</samp> buffer, Calc changes this to <code>splot</code>
before sending it to GNUPLOT if it notices that the data points are
evaluating to <code>xyz</code> calls.  It will not work to mix 2D and 3D
<kbd>g a</kbd> curves in a single graph, although Calc does not currently
check for this.)
</p>
<a name="index-g-d"></a>
<a name="index-calc_002dgraph_002ddelete"></a>
<p>The <kbd>g d</kbd> (<code>calc-graph-delete</code>) command deletes the most
recently added curve from the graph.  It has no effect if there are
no curves in the graph.  With a numeric prefix argument of any kind,
it deletes all of the curves from the graph.
</p>
<a name="index-g-H"></a>
<a name="index-calc_002dgraph_002dhide"></a>
<p>The <kbd>g H</kbd> (<code>calc-graph-hide</code>) command &ldquo;hides&rdquo; or &ldquo;unhides&rdquo;
the most recently added curve.  A hidden curve will not appear in
the actual plot, but information about it such as its name and line and
point styles will be retained.
</p>
<a name="index-g-j"></a>
<a name="index-calc_002dgraph_002djuggle"></a>
<p>The <kbd>g j</kbd> (<code>calc-graph-juggle</code>) command moves the curve
at the end of the list (the &ldquo;most recently added curve&rdquo;) to the
front of the list.  The next-most-recent curve is thus exposed for
<kbd>g&nbsp;d</kbd><!-- /@w --> or similar commands to use.  With <kbd>g j</kbd> you can work
with any curve in the graph even though curve-related commands only
affect the last curve in the list.
</p>
<a name="index-g-p"></a>
<a name="index-calc_002dgraph_002dplot"></a>
<p>The <kbd>g p</kbd> (<code>calc-graph-plot</code>) command uses GNUPLOT to draw
the graph described in the <samp>*Gnuplot Commands*</samp> buffer.  Any
GNUPLOT parameters which are not defined by commands in this buffer
are reset to their default values.  The variables named in the <code>plot</code>
command are written to a temporary data file and the variable names
are then replaced by the file name in the template.  The resulting
plotting commands are fed to the GNUPLOT program.  See the documentation
for the GNUPLOT program for more specific information.  All temporary
files are removed when Emacs or GNUPLOT exits.
</p>
<p>If you give a formula for &ldquo;y&rdquo;, Calc will remember all the values that
it calculates for the formula so that later plots can reuse these values.
Calc throws out these saved values when you change any circumstances
that may affect the data, such as switching from Degrees to Radians
mode, or changing the value of a parameter in the formula.  You can
force Calc to recompute the data from scratch by giving a negative
numeric prefix argument to <kbd>g p</kbd>.
</p>
<p>Calc uses a fairly rough step size when graphing formulas over intervals.
This is to ensure quick response.  You can &ldquo;refine&rdquo; a plot by giving
a positive numeric prefix argument to <kbd>g p</kbd>.  Calc goes through
the data points it has computed and saved from previous plots of the
function, and computes and inserts a new data point midway between
each of the existing points.  You can refine a plot any number of times,
but beware that the amount of calculation involved doubles each time.
</p>
<p>Calc does not remember computed values for 3D graphs.  This means the
numerix prefix argument, if any, to <kbd>g p</kbd> is effectively ignored if
the current graph is three-dimensional.
</p>
<a name="index-g-P"></a>
<a name="index-calc_002dgraph_002dprint"></a>
<p>The <kbd>g P</kbd> (<code>calc-graph-print</code>) command is like <kbd>g p</kbd>,
except that it sends the output to a printer instead of to the
screen.  More precisely, <kbd>g p</kbd> looks for &lsquo;<samp>set terminal</samp>&rsquo;
or &lsquo;<samp>set output</samp>&rsquo; commands in the <samp>*Gnuplot Commands*</samp> buffer;
lacking these it uses the default settings.  However, <kbd>g P</kbd>
ignores &lsquo;<samp>set terminal</samp>&rsquo; and &lsquo;<samp>set output</samp>&rsquo; commands and
uses a different set of default values.  All of these values are
controlled by the <kbd>g D</kbd> and <kbd>g O</kbd> commands discussed below.
Provided everything is set up properly, <kbd>g p</kbd> will plot to
the screen unless you have specified otherwise and <kbd>g P</kbd> will
always plot to the printer.
</p>
<hr>
<a name="Graphics-Options"></a>
<div class="header">
<p>
Next: <a href="#Devices" accesskey="n" rel="next">Devices</a>, Previous: <a href="#Managing-Curves" accesskey="p" rel="prev">Managing Curves</a>, Up: <a href="#Graphics" accesskey="u" rel="up">Graphics</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Graphics-Options-1"></a>
<h3 class="section">13.4 Graphics Options</h3>

<p><a name="index-g-g"></a>
<a name="index-calc_002dgraph_002dgrid"></a>
The <kbd>g g</kbd> (<code>calc-graph-grid</code>) command turns the &ldquo;grid&rdquo;
on and off.  It is off by default; tick marks appear only at the
edges of the graph.  With the grid turned on, dotted lines appear
across the graph at each tick mark.  Note that this command only
changes the setting in <samp>*Gnuplot Commands*</samp>; to see the effects
of the change you must give another <kbd>g p</kbd> command.
</p>
<a name="index-g-b"></a>
<a name="index-calc_002dgraph_002dborder"></a>
<p>The <kbd>g b</kbd> (<code>calc-graph-border</code>) command turns the border
(the box that surrounds the graph) on and off.  It is on by default.
This command will only work with GNUPLOT 3.0 and later versions.
</p>
<a name="index-g-k"></a>
<a name="index-calc_002dgraph_002dkey"></a>
<p>The <kbd>g k</kbd> (<code>calc-graph-key</code>) command turns the &ldquo;key&rdquo;
on and off.  The key is a chart in the corner of the graph that
shows the correspondence between curves and line styles.  It is
off by default, and is only really useful if you have several
curves on the same graph.
</p>
<a name="index-g-N"></a>
<a name="index-calc_002dgraph_002dnum_002dpoints"></a>
<p>The <kbd>g N</kbd> (<code>calc-graph-num-points</code>) command allows you
to select the number of data points in the graph.  This only affects
curves where neither &ldquo;x&rdquo; nor &ldquo;y&rdquo; is specified as a vector.
Enter a blank line to revert to the default value (initially 15).
With no prefix argument, this command affects only the current graph.
With a positive prefix argument this command changes or, if you enter
a blank line, displays the default number of points used for all
graphs created by <kbd>g a</kbd> that don&rsquo;t specify the resolution explicitly.
With a negative prefix argument, this command changes or displays
the default value (initially 5) used for 3D graphs created by <kbd>g A</kbd>.
Note that a 3D setting of 5 means that a total of &lsquo;<samp>5^2 = 25</samp>&rsquo; points
will be computed for the surface.
</p>
<p>Data values in the graph of a function are normally computed to a
precision of five digits, regardless of the current precision at the
time. This is usually more than adequate, but there are cases where
it will not be.  For example, plotting &lsquo;<samp>1 + x</samp>&rsquo; with &lsquo;<samp>x</samp>&rsquo; in the
interval &lsquo;<samp>[0 .. 1e-6]</samp>&rsquo; will round all the data points down
to 1.0!  Putting the command &lsquo;<samp>set precision <var>n</var></samp>&rsquo; in the
<samp>*Gnuplot Commands*</samp> buffer will cause the data to be computed
at precision <var>n</var> instead of 5.  Since this is such a rare case,
there is no keystroke-based command to set the precision.
</p>
<a name="index-g-h"></a>
<a name="index-calc_002dgraph_002dheader"></a>
<p>The <kbd>g h</kbd> (<code>calc-graph-header</code>) command sets the title
for the graph.  This will show up centered above the graph.
The default title is blank (no title).
</p>
<a name="index-g-n"></a>
<a name="index-calc_002dgraph_002dname"></a>
<p>The <kbd>g n</kbd> (<code>calc-graph-name</code>) command sets the title of an
individual curve.  Like the other curve-manipulating commands, it
affects the most recently added curve, i.e., the last curve on the
list in the <samp>*Gnuplot Commands*</samp> buffer.  To set the title of
the other curves you must first juggle them to the end of the list
with <kbd>g j</kbd>, or edit the <samp>*Gnuplot Commands*</samp> buffer by hand.
Curve titles appear in the key; if the key is turned off they are
not used.
</p>
<a name="index-g-t"></a>
<a name="index-g-T"></a>
<a name="index-calc_002dgraph_002dtitle_002dx"></a>
<a name="index-calc_002dgraph_002dtitle_002dy"></a>
<p>The <kbd>g t</kbd> (<code>calc-graph-title-x</code>) and <kbd>g T</kbd>
(<code>calc-graph-title-y</code>) commands set the titles on the &ldquo;x&rdquo;
and &ldquo;y&rdquo; axes, respectively.  These titles appear next to the
tick marks on the left and bottom edges of the graph, respectively.
Calc does not have commands to control the tick marks themselves,
but you can edit them into the <samp>*Gnuplot Commands*</samp> buffer if
you wish.  See the GNUPLOT documentation for details.
</p>
<a name="index-g-r"></a>
<a name="index-g-R"></a>
<a name="index-calc_002dgraph_002drange_002dx"></a>
<a name="index-calc_002dgraph_002drange_002dy"></a>
<p>The <kbd>g r</kbd> (<code>calc-graph-range-x</code>) and <kbd>g R</kbd>
(<code>calc-graph-range-y</code>) commands set the range of values on the
&ldquo;x&rdquo; and &ldquo;y&rdquo; axes, respectively.  You are prompted to enter a
suitable range.  This should be either a pair of numbers of the
form, &lsquo;<samp><var>min</var>:<var>max</var></samp>&rsquo;, or a blank line to revert to the
default behavior of setting the range based on the range of values
in the data, or &lsquo;<samp>$</samp>&rsquo; to take the range from the top of the stack.
Ranges on the stack can be represented as either interval forms or
vectors:  &lsquo;<samp>[<var>min</var> .. <var>max</var>]</samp>&rsquo; or &lsquo;<samp>[<var>min</var>, <var>max</var>]</samp>&rsquo;.
</p>
<a name="index-g-l"></a>
<a name="index-g-L"></a>
<a name="index-calc_002dgraph_002dlog_002dx"></a>
<a name="index-calc_002dgraph_002dlog_002dy"></a>
<p>The <kbd>g l</kbd> (<code>calc-graph-log-x</code>) and <kbd>g L</kbd> (<code>calc-graph-log-y</code>)
commands allow you to set either or both of the axes of the graph to
be logarithmic instead of linear.
</p>
<a name="index-g-C_002dl"></a>
<a name="index-g-C_002dr"></a>
<a name="index-g-C_002dt"></a>
<a name="index-calc_002dgraph_002dlog_002dz"></a>
<a name="index-calc_002dgraph_002drange_002dz"></a>
<a name="index-calc_002dgraph_002dtitle_002dz"></a>
<p>For 3D plots, <kbd>g C-t</kbd>, <kbd>g C-r</kbd>, and <kbd>g C-l</kbd> (those are
letters with the Control key held down) are the corresponding commands
for the &ldquo;z&rdquo; axis.
</p>
<a name="index-g-z"></a>
<a name="index-g-Z"></a>
<a name="index-calc_002dgraph_002dzero_002dx"></a>
<a name="index-calc_002dgraph_002dzero_002dy"></a>
<p>The <kbd>g z</kbd> (<code>calc-graph-zero-x</code>) and <kbd>g Z</kbd>
(<code>calc-graph-zero-y</code>) commands control whether a dotted line is
drawn to indicate the &ldquo;x&rdquo; and/or &ldquo;y&rdquo; zero axes.  (These are the same
dotted lines that would be drawn there anyway if you used <kbd>g g</kbd> to
turn the &ldquo;grid&rdquo; feature on.)  Zero-axis lines are on by default, and
may be turned off only in GNUPLOT 3.0 and later versions.  They are
not available for 3D plots.
</p>
<a name="index-g-s"></a>
<a name="index-calc_002dgraph_002dline_002dstyle"></a>
<p>The <kbd>g s</kbd> (<code>calc-graph-line-style</code>) command turns the connecting
lines on or off for the most recently added curve, and optionally selects
the style of lines to be used for that curve.  Plain <kbd>g s</kbd> simply
toggles the lines on and off.  With a numeric prefix argument, <kbd>g s</kbd>
turns lines on and sets a particular line style.  Line style numbers
start at one and their meanings vary depending on the output device.
GNUPLOT guarantees that there will be at least six different line styles
available for any device.
</p>
<a name="index-g-S"></a>
<a name="index-calc_002dgraph_002dpoint_002dstyle"></a>
<p>The <kbd>g S</kbd> (<code>calc-graph-point-style</code>) command similarly turns
the symbols at the data points on or off, or sets the point style.
If you turn both lines and points off, the data points will show as
tiny dots.  If the &ldquo;y&rdquo; values being plotted contain error forms and
the connecting lines are turned off, then this command will also turn
the error bars on or off.
</p>
<a name="index-LineStyles-variable"></a>
<a name="index-PointStyles-variable"></a>
<a name="index-LineStyles"></a>
<a name="index-PointStyles"></a>
<p>Another way to specify curve styles is with the <code>LineStyles</code> and
<code>PointStyles</code> variables.  These variables initially have no stored
values, but if you store a vector of integers in one of these variables,
the <kbd>g a</kbd> and <kbd>g f</kbd> commands will use those style numbers
instead of the defaults for new curves that are added to the graph.
An entry should be a positive integer for a specific style, or 0 to let
the style be chosen automatically, or <i>-1</i> to turn off lines or points
altogether.  If there are more curves than elements in the vector, the
last few curves will continue to have the default styles.  Of course,
you can later use <kbd>g s</kbd> and <kbd>g S</kbd> to change any of these styles.
</p>
<p>For example, <kbd>'[2 -1 3] <span class="key">RET</span> s t LineStyles</kbd> causes the first curve
to have lines in style number 2, the second curve to have no connecting
lines, and the third curve to have lines in style 3.  Point styles will
still be assigned automatically, but you could store another vector in
<code>PointStyles</code> to define them, too.
</p>
<hr>
<a name="Devices"></a>
<div class="header">
<p>
Previous: <a href="#Graphics-Options" accesskey="p" rel="prev">Graphics Options</a>, Up: <a href="#Graphics" accesskey="u" rel="up">Graphics</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Graphical-Devices"></a>
<h3 class="section">13.5 Graphical Devices</h3>

<p><a name="index-g-D"></a>
<a name="index-calc_002dgraph_002ddevice"></a>
The <kbd>g D</kbd> (<code>calc-graph-device</code>) command sets the device name
(or &ldquo;terminal name&rdquo; in GNUPLOT lingo) to be used by <kbd>g p</kbd> commands
on this graph.  It does not affect the permanent default device name.
If you enter a blank name, the device name reverts to the default.
Enter &lsquo;<samp>?</samp>&rsquo; to see a list of supported devices.
</p>
<p>With a positive numeric prefix argument, <kbd>g D</kbd> instead sets
the default device name, used by all plots in the future which do
not override it with a plain <kbd>g D</kbd> command.  If you enter a
blank line this command shows you the current default.  The special
name <code>default</code> signifies that Calc should choose <code>x11</code> if
the X window system is in use (as indicated by the presence of a
<code>DISPLAY</code> environment variable), <code>windows</code> on MS-Windows, or
otherwise <code>dumb</code> under GNUPLOT 3.0 and later, or
<code>postscript</code> under GNUPLOT 2.0.  This is the initial default
value.
</p>
<p>The <code>dumb</code> device is an interface to &ldquo;dumb terminals,&rdquo; i.e.,
terminals with no special graphics facilities.  It writes a crude
picture of the graph composed of characters like <code>-</code> and <code>|</code>
to a buffer called <samp>*Gnuplot Trail*</samp>, which Calc then displays.
The graph is made the same size as the Emacs screen, which on most
dumb terminals will be
80x24
characters.  The graph is displayed in
an Emacs &ldquo;recursive edit&rdquo;; type <kbd>q</kbd> or <kbd>C-c C-c</kbd> to exit
the recursive edit and return to Calc.  Note that the <code>dumb</code>
device is present only in GNUPLOT 3.0 and later versions.
</p>
<p>The word <code>dumb</code> may be followed by two numbers separated by
spaces.  These are the desired width and height of the graph in
characters.  Also, the device name <code>big</code> is like <code>dumb</code>
but creates a graph four times the width and height of the Emacs
screen.  You will then have to scroll around to view the entire
graph.  In the <samp>*Gnuplot Trail*</samp> buffer, <tt class="key">SPC</tt>, <tt class="key">DEL</tt>,
<kbd>&lt;</kbd>, and <kbd>&gt;</kbd> are defined to scroll by one screenful in each
of the four directions.
</p>
<p>With a negative numeric prefix argument, <kbd>g D</kbd> sets or displays
the device name used by <kbd>g P</kbd> (<code>calc-graph-print</code>).  This
is initially <code>postscript</code>.  If you don&rsquo;t have a PostScript
printer, you may decide once again to use <code>dumb</code> to create a
plot on any text-only printer.
</p>
<a name="index-g-O"></a>
<a name="index-calc_002dgraph_002doutput"></a>
<p>The <kbd>g O</kbd> (<code>calc-graph-output</code>) command sets the name of the
output file used by GNUPLOT.  For some devices, notably <code>x11</code> and
<code>windows</code>, there is no output file and this information is not
used.  Many other &ldquo;devices&rdquo; are really file formats like
<code>postscript</code>; in these cases the output in the desired format
goes into the file you name with <kbd>g O</kbd>.  Type <kbd>g O stdout
<span class="key">RET</span></kbd> to set GNUPLOT to write to its standard output stream,
i.e., to <samp>*Gnuplot Trail*</samp>.  This is the default setting.
</p>
<p>Another special output name is <code>tty</code>, which means that GNUPLOT
is going to write graphics commands directly to its standard output,
which you wish Emacs to pass through to your terminal.  Tektronix
graphics terminals, among other devices, operate this way.  Calc does
this by telling GNUPLOT to write to a temporary file, then running a
sub-shell executing the command &lsquo;<samp>cat tempfile &gt;/dev/tty</samp>&rsquo;.  On
typical Unix systems, this will copy the temporary file directly to
the terminal, bypassing Emacs entirely.  You will have to type <kbd>C-l</kbd>
to Emacs afterwards to refresh the screen.
</p>
<p>Once again, <kbd>g O</kbd> with a positive or negative prefix argument
sets the default or printer output file names, respectively.  In each
case you can specify <code>auto</code>, which causes Calc to invent a temporary
file name for each <kbd>g p</kbd> (or <kbd>g P</kbd>) command.  This temporary file
will be deleted once it has been displayed or printed.  If the output file
name is not <code>auto</code>, the file is not automatically deleted.
</p>
<p>The default and printer devices and output files can be saved
permanently by the <kbd>m m</kbd> (<code>calc-save-modes</code>) command.  The
default number of data points (see <kbd>g N</kbd>) and the X geometry
(see <kbd>g X</kbd>) are also saved.  Other graph information is <em>not</em>
saved; you can save a graph&rsquo;s configuration simply by saving the contents
of the <samp>*Gnuplot Commands*</samp> buffer.
</p>
<a name="index-calc_002dgnuplot_002dplot_002dcommand"></a>
<a name="index-calc_002dgnuplot_002ddefault_002ddevice"></a>
<a name="index-calc_002dgnuplot_002ddefault_002doutput"></a>
<a name="index-calc_002dgnuplot_002dprint_002dcommand"></a>
<a name="index-calc_002dgnuplot_002dprint_002ddevice"></a>
<a name="index-calc_002dgnuplot_002dprint_002doutput"></a>
<p>You may wish to configure the default and
printer devices and output files for the whole system.  The relevant
Lisp variables are <code>calc-gnuplot-default-device</code> and <code>-output</code>,
and <code>calc-gnuplot-print-device</code> and <code>-output</code>.  The output
file names must be either strings as described above, or Lisp
expressions which are evaluated on the fly to get the output file names.
</p>
<p>Other important Lisp variables are <code>calc-gnuplot-plot-command</code> and
<code>calc-gnuplot-print-command</code>, which give the system commands to
display or print the output of GNUPLOT, respectively.  These may be
<code>nil</code> if no command is necessary, or strings which can include
&lsquo;<samp>%s</samp>&rsquo; to signify the name of the file to be displayed or printed.
Or, these variables may contain Lisp expressions which are evaluated
to display or print the output.  These variables are customizable
(see <a href="#Customizing-Calc">Customizing Calc</a>).
</p>
<a name="index-g-x"></a>
<a name="index-calc_002dgraph_002ddisplay"></a>
<p>The <kbd>g x</kbd> (<code>calc-graph-display</code>) command lets you specify
on which X window system display your graphs should be drawn.  Enter
a blank line to see the current display name.  This command has no
effect unless the current device is <code>x11</code>.
</p>
<a name="index-g-X"></a>
<a name="index-calc_002dgraph_002dgeometry"></a>
<p>The <kbd>g X</kbd> (<code>calc-graph-geometry</code>) command is a similar
command for specifying the position and size of the X window.
The normal value is <code>default</code>, which generally means your
window manager will let you place the window interactively.
Entering &lsquo;<samp>800x500+0+0</samp>&rsquo; would create an 800-by-500 pixel
window in the upper-left corner of the screen.  This command has no
effect if the current device is <code>windows</code>.
</p>
<p>The buffer called <samp>*Gnuplot Trail*</samp> holds a transcript of the
session with GNUPLOT.  This shows the commands Calc has &ldquo;typed&rdquo; to
GNUPLOT and the responses it has received.  Calc tries to notice when an
error message has appeared here and display the buffer for you when
this happens.  You can check this buffer yourself if you suspect
something has gone wrong<a name="DOCF1" href="#FOOT1"><sup>1</sup></a>.
</p>
<a name="index-g-C"></a>
<a name="index-calc_002dgraph_002dcommand"></a>
<p>The <kbd>g C</kbd> (<code>calc-graph-command</code>) command prompts you to
enter any line of text, then simply sends that line to the current
GNUPLOT process.  The <samp>*Gnuplot Trail*</samp> buffer looks deceptively
like a Shell buffer but you can&rsquo;t type commands in it yourself.
Instead, you must use <kbd>g C</kbd> for this purpose.
</p>
<a name="index-g-v"></a>
<a name="index-g-V"></a>
<a name="index-calc_002dgraph_002dview_002dcommands"></a>
<a name="index-calc_002dgraph_002dview_002dtrail"></a>
<p>The <kbd>g v</kbd> (<code>calc-graph-view-commands</code>) and <kbd>g V</kbd>
(<code>calc-graph-view-trail</code>) commands display the <samp>*Gnuplot Commands*</samp>
and <samp>*Gnuplot Trail*</samp> buffers, respectively, in another window.
This happens automatically when Calc thinks there is something you
will want to see in either of these buffers.  If you type <kbd>g v</kbd>
or <kbd>g V</kbd> when the relevant buffer is already displayed, the
buffer is hidden again.  (Note that on MS-Windows, the <samp>*Gnuplot
Trail*</samp> buffer will usually show nothing of interest, because
GNUPLOT&rsquo;s responses are not communicated back to Calc.)
</p>
<p>One reason to use <kbd>g v</kbd> is to add your own commands to the
<samp>*Gnuplot Commands*</samp> buffer.  Press <kbd>g v</kbd>, then use
<kbd>C-x o</kbd> to switch into that window.  For example, GNUPLOT has
&lsquo;<samp>set label</samp>&rsquo; and &lsquo;<samp>set arrow</samp>&rsquo; commands that allow you to
annotate your plots.  Since Calc doesn&rsquo;t understand these commands,
you have to add them to the <samp>*Gnuplot Commands*</samp> buffer
yourself, then use <kbd>g&nbsp;p</kbd><!-- /@w --> to replot using these new commands.  Note
that your commands must appear <em>before</em> the <code>plot</code> command.
To get help on any GNUPLOT feature, type, e.g., <kbd>g C help set label</kbd>.
You may have to type <kbd>g C <span class="key">RET</span></kbd> a few times to clear the
&ldquo;press return for more&rdquo; or &ldquo;subtopic of &hellip;&rdquo; requests.
Note that Calc always sends commands (like &lsquo;<samp>set nolabel</samp>&rsquo;) to
reset all plotting parameters to the defaults before each plot, so
to delete a label all you need to do is delete the &lsquo;<samp>set label</samp>&rsquo;
line you added (or comment it out with &lsquo;<samp>#</samp>&rsquo;) and then replot
with <kbd>g p</kbd>.
</p>
<a name="index-g-q"></a>
<a name="index-calc_002dgraph_002dquit"></a>
<p>You can use <kbd>g q</kbd> (<code>calc-graph-quit</code>) to kill the GNUPLOT
process that is running.  The next graphing command you give will
start a fresh GNUPLOT process.  The word &lsquo;<samp>Graph</samp>&rsquo; appears in
the Calc window&rsquo;s mode line whenever a GNUPLOT process is currently
running.  The GNUPLOT process is automatically killed when you
exit Emacs if you haven&rsquo;t killed it manually by then.
</p>
<a name="index-g-K"></a>
<a name="index-calc_002dgraph_002dkill"></a>
<p>The <kbd>g K</kbd> (<code>calc-graph-kill</code>) command is like <kbd>g q</kbd>
except that it also views the <samp>*Gnuplot Trail*</samp> buffer so that
you can see the process being killed.  This is better if you are
killing GNUPLOT because you think it has gotten stuck.
</p>
<hr>
<a name="Kill-and-Yank"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Mode" accesskey="n" rel="next">Keypad Mode</a>, Previous: <a href="#Graphics" accesskey="p" rel="prev">Graphics</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Kill-and-Yank-Functions"></a>
<h2 class="chapter">14 Kill and Yank Functions</h2>

<p>The commands in this chapter move information between the Calculator and
other Emacs editing buffers.
</p>
<p>In many cases Embedded mode is an easier and more natural way to
work with Calc from a regular editing buffer.  See <a href="#Embedded-Mode">Embedded Mode</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Killing-From-Stack" accesskey="1">Killing From Stack</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Yanking-Into-Stack" accesskey="2">Yanking Into Stack</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Saving-Into-Registers" accesskey="3">Saving Into Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Inserting-From-Registers" accesskey="4">Inserting From Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Grabbing-From-Buffers" accesskey="5">Grabbing From Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Yanking-Into-Buffers" accesskey="6">Yanking Into Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#X-Cut-and-Paste" accesskey="7">X Cut and Paste</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Killing-From-Stack"></a>
<div class="header">
<p>
Next: <a href="#Yanking-Into-Stack" accesskey="n" rel="next">Yanking Into Stack</a>, Previous: <a href="#Kill-and-Yank" accesskey="p" rel="prev">Kill and Yank</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Killing-from-the-Stack"></a>
<h3 class="section">14.1 Killing from the Stack</h3>

<p><a name="index-C_002dk"></a>
<a name="index-calc_002dkill"></a>
<a name="index-M_002dk"></a>
<a name="index-calc_002dcopy_002das_002dkill"></a>
<a name="index-C_002dw"></a>
<a name="index-calc_002dkill_002dregion"></a>
<a name="index-M_002dw"></a>
<a name="index-calc_002dcopy_002dregion_002das_002dkill"></a>
<a name="index-M_002dC_002dw"></a>
<a name="index-Kill-ring"></a>
<em>Kill</em> commands are Emacs commands that insert text into the &ldquo;kill
ring,&rdquo; from which it can later be &ldquo;yanked&rdquo; by a <kbd>C-y</kbd> command.
Three common kill commands in normal Emacs are <kbd>C-k</kbd>, which kills
one line, <kbd>C-w</kbd>, which kills the region between mark and point, and
<kbd>M-w</kbd>, which puts the region into the kill ring without actually
deleting it.  All of these commands work in the Calculator, too,
although in the Calculator they operate on whole stack entries, so they
&ldquo;round up&rdquo; the specified region to encompass full lines.  (To copy
only parts of lines, the <kbd>M-C-w</kbd> command in the Calculator will copy
the region to the kill ring without any &ldquo;rounding up&rdquo;, just like the
<kbd>M-w</kbd> command in normal Emacs.)  Also, <kbd>M-k</kbd> has been provided
to complete the set; it puts the current line into the kill ring without
deleting anything.
</p>
<p>The kill commands are unusual in that they pay attention to the location
of the cursor in the Calculator buffer.  If the cursor is on or below
the bottom line, the kill commands operate on the top of the stack.
Otherwise, they operate on whatever stack element the cursor is on.  The
text is copied into the kill ring exactly as it appears on the screen,
including line numbers if they are enabled.
</p>
<p>A numeric prefix argument to <kbd>C-k</kbd> or <kbd>M-k</kbd> affects the number
of lines killed.  A positive argument kills the current line and &lsquo;<samp>n-1</samp>&rsquo;
lines below it.  A negative argument kills the &lsquo;<samp>-n</samp>&rsquo; lines above the
current line.  Again this mirrors the behavior of the standard Emacs
<kbd>C-k</kbd> command.  Although a whole line is always deleted, <kbd>C-k</kbd>
with no argument copies only the number itself into the kill ring, whereas
<kbd>C-k</kbd> with a prefix argument of 1 copies the number with its trailing
newline.
</p>
<hr>
<a name="Yanking-Into-Stack"></a>
<div class="header">
<p>
Next: <a href="#Saving-Into-Registers" accesskey="n" rel="next">Saving Into Registers</a>, Previous: <a href="#Killing-From-Stack" accesskey="p" rel="prev">Killing From Stack</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Yanking-into-the-Stack"></a>
<h3 class="section">14.2 Yanking into the Stack</h3>

<p><a name="index-C_002dy"></a>
<a name="index-calc_002dyank"></a>
The <kbd>C-y</kbd> command yanks the most recently killed text back into the
Calculator.  It pushes this value onto the top of the stack regardless of
the cursor position.  In general it re-parses the killed text as a number
or formula (or a list of these separated by commas or newlines).  However if
the thing being yanked is something that was just killed from the Calculator
itself, its full internal structure is yanked.  For example, if you have
set the floating-point display mode to show only four significant digits,
then killing and re-yanking 3.14159 (which displays as 3.142) will yank the
full 3.14159, even though yanking it into any other buffer would yank the
number in its displayed form, 3.142.  (Since the default display modes
show all objects to their full precision, this feature normally makes no
difference.)
</p>
<p>The <kbd>C-y</kbd> command can be given a prefix, which will interpret the
text being yanked with a different radix.  If the text being yanked can be
interpreted as a binary, octal, hexadecimal, or decimal number, then a
prefix of <kbd>2</kbd>, <kbd>8</kbd>, <kbd>6</kbd> or <kbd>0</kbd> will have Calc
interpret the yanked text as a number in the appropriate base.  For example,
if &lsquo;<samp>111</samp>&rsquo; has just been killed and is yanked into Calc with a command
of <kbd>C-2 C-y</kbd>, then the number &lsquo;<samp>7</samp>&rsquo; will be put on the stack.
If you use the plain prefix <kbd>C-u</kbd>, then you will be prompted for a
base to use, which can be any integer from 2 to 36.  If Calc doesn&rsquo;t
allow the text being yanked to be read in a different base (such as if
the text is an algebraic expression), then the prefix will have no
effect.
</p>
<hr>
<a name="Saving-Into-Registers"></a>
<div class="header">
<p>
Next: <a href="#Inserting-From-Registers" accesskey="n" rel="next">Inserting From Registers</a>, Previous: <a href="#Yanking-Into-Stack" accesskey="p" rel="prev">Yanking Into Stack</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Saving-into-Registers"></a>
<h3 class="section">14.3 Saving into Registers</h3>

<p><a name="index-r-s"></a>
<a name="index-calc_002dcopy_002dto_002dregister"></a>
<a name="index-calc_002dprepend_002dto_002dregister"></a>
<a name="index-calc_002dappend_002dto_002dregister"></a>
<a name="index-Registers"></a>
An alternative to killing and yanking stack entries is using
registers in Calc.  Saving stack entries in registers is like
saving text in normal Emacs registers; although, like Calc&rsquo;s kill
commands, register commands always operate on whole stack
entries.
</p>
<p>Registers in Calc are places to store stack entries for later use;
each register is indexed by a single character.  To store the current
region (rounded up, of course, to include full stack entries) into a
register, use the command <kbd>r s</kbd> (<code>calc-copy-to-register</code>).
You will then be prompted for a register to use, the next character
you type will be the index for the register.  To store the region in
register <var>r</var>, the full command will be <kbd>r s <var>r</var></kbd>.  With an
argument, <kbd>C-u r s <var>r</var></kbd>, the region being copied to the
register will be deleted from the Calc buffer.
</p>
<p>It is possible to add additional stack entries to a register.  The
command <kbd>M-x calc-append-to-register</kbd> will prompt for a register,
then add the stack entries in the region to the end of the register
contents. The command <kbd>M-x calc-prepend-to-register</kbd> will
similarly prompt for a register and add  the stack entries in the
region to the beginning of the register contents.  Both commands take
<kbd>C-u</kbd> arguments, which will cause the region to be deleted after being
added to the register.
</p>
<hr>
<a name="Inserting-From-Registers"></a>
<div class="header">
<p>
Next: <a href="#Grabbing-From-Buffers" accesskey="n" rel="next">Grabbing From Buffers</a>, Previous: <a href="#Saving-Into-Registers" accesskey="p" rel="prev">Saving Into Registers</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Inserting-from-Registers"></a>
<h3 class="section">14.4 Inserting from Registers</h3>
<p><a name="index-r-i"></a>
<a name="index-calc_002dinsert_002dregister"></a>
The command <kbd>r i</kbd> (<code>calc-insert-register</code>) will prompt for a
register, then insert the contents of that register into the
Calculator.  If the contents of the register were placed there from
within Calc, then the full internal structure of the contents will be
inserted into the Calculator, otherwise whatever text is in the
register is reparsed and then inserted into the Calculator.
</p>
<hr>
<a name="Grabbing-From-Buffers"></a>
<div class="header">
<p>
Next: <a href="#Yanking-Into-Buffers" accesskey="n" rel="next">Yanking Into Buffers</a>, Previous: <a href="#Inserting-From-Registers" accesskey="p" rel="prev">Inserting From Registers</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Grabbing-from-Other-Buffers"></a>
<h3 class="section">14.5 Grabbing from Other Buffers</h3>

<p><a name="index-C_002dx-_002a-g"></a>
<a name="index-calc_002dgrab_002dregion"></a>
The <kbd>C-x * g</kbd> (<code>calc-grab-region</code>) command takes the text between
point and mark in the current buffer and attempts to parse it as a
vector of values.  Basically, it wraps the text in vector brackets
&lsquo;<samp>[ ]</samp>&rsquo; unless the text already is enclosed in vector brackets,
then reads the text as if it were an algebraic entry.  The contents
of the vector may be numbers, formulas, or any other Calc objects.
If the <kbd>C-x * g</kbd> command works successfully, it does an automatic
<kbd>C-x * c</kbd> to enter the Calculator buffer.
</p>
<p>A numeric prefix argument grabs the specified number of lines around
point, ignoring the mark.  A positive prefix grabs from point to the
&lsquo;<samp>n</samp>&rsquo;th following newline (so that <kbd>M-1 C-x * g</kbd> grabs from point
to the end of the current line); a negative prefix grabs from point
back to the &lsquo;<samp>n+1</samp>&rsquo;st preceding newline.  In these cases the text
that is grabbed is exactly the same as the text that <kbd>C-k</kbd> would
delete given that prefix argument.
</p>
<p>A prefix of zero grabs the current line; point may be anywhere on the
line.
</p>
<p>A plain <kbd>C-u</kbd> prefix interprets the region between point and mark
as a single number or formula rather than a vector.  For example,
<kbd>C-x * g</kbd> on the text &lsquo;<samp>2 a b</samp>&rsquo; produces the vector of three
values &lsquo;<samp>[2, a, b]</samp>&rsquo;, but <kbd>C-u C-x * g</kbd> on the same region
reads a formula which is a product of three things:  &lsquo;<samp>2 a b</samp>&rsquo;.
(The text &lsquo;<samp>a + b</samp>&rsquo;, on the other hand, will be grabbed as a
vector of one element by plain <kbd>C-x * g</kbd> because the interpretation
&lsquo;<samp>[a, +, b]</samp>&rsquo; would be a syntax error.)
</p>
<p>If a different language has been specified (see <a href="#Language-Modes">Language Modes</a>),
the grabbed text will be interpreted according to that language.
</p>
<a name="index-C_002dx-_002a-r"></a>
<a name="index-calc_002dgrab_002drectangle"></a>
<p>The <kbd>C-x * r</kbd> (<code>calc-grab-rectangle</code>) command takes the text between
point and mark and attempts to parse it as a matrix.  If point and mark
are both in the leftmost column, the lines in between are parsed in their
entirety.  Otherwise, point and mark define the corners of a rectangle
whose contents are parsed.
</p>
<p>Each line of the grabbed area becomes a row of the matrix.  The result
will actually be a vector of vectors, which Calc will treat as a matrix
only if every row contains the same number of values.
</p>
<p>If a line contains a portion surrounded by square brackets (or curly
braces), that portion is interpreted as a vector which becomes a row
of the matrix.  Any text surrounding the bracketed portion on the line
is ignored.
</p>
<p>Otherwise, the entire line is interpreted as a row vector as if it
were surrounded by square brackets.  Leading line numbers (in the
format used in the Calc stack buffer) are ignored.  If you wish to
force this interpretation (even if the line contains bracketed
portions), give a negative numeric prefix argument to the
<kbd>C-x * r</kbd> command.
</p>
<p>If you give a numeric prefix argument of zero or plain <kbd>C-u</kbd>, each
line is instead interpreted as a single formula which is converted into
a one-element vector.  Thus the result of <kbd>C-u C-x * r</kbd> will be a
one-column matrix.  For example, suppose one line of the data is the
expression &lsquo;<samp>2 a</samp>&rsquo;.  A plain <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;r</kbd><!-- /@w --> will interpret this as
&lsquo;<samp>[2 a]</samp>&rsquo;, which in turn is read as a two-element vector that forms
one row of the matrix.  But a <kbd>C-u C-x * r</kbd> will interpret this row
as &lsquo;<samp>[2*a]</samp>&rsquo;.
</p>
<p>If you give a positive numeric prefix argument <var>n</var>, then each line
will be split up into columns of width <var>n</var>; each column is parsed
separately as a matrix element.  If a line contained
&lsquo;<samp>2&nbsp;<span class="nolinebreak">+/-</span>&nbsp;3&nbsp;4&nbsp;<span class="nolinebreak">+/-</span>&nbsp;5</samp>&rsquo;<!-- /@w -->, then grabbing with a prefix argument of 8
would correctly split the line into two error forms.
</p>
<p>See <a href="#Matrix-Functions">Matrix Functions</a>, to see how to pull the matrix apart into its
constituent rows and columns.  (If it is a
1x1
matrix, just hit <kbd>v u</kbd> (<code>calc-unpack</code>) twice.)
</p>
<a name="index-C_002dx-_002a-_003a"></a>
<a name="index-C_002dx-_002a-_005f"></a>
<a name="index-calc_002dgrab_002dsum_002dacross"></a>
<a name="index-calc_002dgrab_002dsum_002ddown"></a>
<a name="index-Summing-rows-and-columns-of-data"></a>
<p>The <kbd>C-x * :</kbd> (<code>calc-grab-sum-down</code>) command is a handy way to
grab a rectangle of data and sum its columns.  It is equivalent to
typing <kbd>C-x * r</kbd>, followed by <kbd>V R : +</kbd> (the vector reduction
command that sums the columns of a matrix; see <a href="#Reducing">Reducing</a>).  The
result of the command will be a vector of numbers, one for each column
in the input data.  The <kbd>C-x * _</kbd> (<code>calc-grab-sum-across</code>) command
similarly grabs a rectangle and sums its rows by executing <kbd>V&nbsp;R&nbsp;<span class="nolinebreak">_</span>&nbsp;+</kbd><!-- /@w -->.
</p>
<p>As well as being more convenient, <kbd>C-x * :</kbd> and <kbd>C-x * _</kbd> are also
much faster because they don&rsquo;t actually place the grabbed vector on
the stack.  In a <kbd>C-x * r V R : +</kbd> sequence, formatting the vector
for display on the stack takes a large fraction of the total time
(unless you have planned ahead and used <kbd>v .</kbd> and <kbd>t .</kbd> modes).
</p>
<p>For example, suppose we have a column of numbers in a file which we
wish to sum.  Go to one corner of the column and press <kbd>C-@</kbd> to
set the mark; go to the other corner and type <kbd>C-x * :</kbd>.  Since there
is only one column, the result will be a vector of one number, the sum.
(You can type <kbd>v u</kbd> to unpack this vector into a plain number if
you want to do further arithmetic with it.)
</p>
<p>To compute the product of the column of numbers, we would have to do
it &ldquo;by hand&rdquo; since there&rsquo;s no special grab-and-multiply command.
Use <kbd>C-x * r</kbd> to grab the column of numbers into the calculator in
the form of a column matrix.  The statistics command <kbd>u *</kbd> is a
handy way to find the product of a vector or matrix of numbers.
See <a href="#Statistical-Operations">Statistical Operations</a>.  Another approach would be to use
an explicit column reduction command, <kbd>V R : *</kbd>.
</p>
<hr>
<a name="Yanking-Into-Buffers"></a>
<div class="header">
<p>
Next: <a href="#X-Cut-and-Paste" accesskey="n" rel="next">X Cut and Paste</a>, Previous: <a href="#Grabbing-From-Buffers" accesskey="p" rel="prev">Grabbing From Buffers</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Yanking-into-Other-Buffers"></a>
<h3 class="section">14.6 Yanking into Other Buffers</h3>

<p><a name="index-y"></a>
<a name="index-calc_002dcopy_002dto_002dbuffer"></a>
The plain <kbd>y</kbd> (<code>calc-copy-to-buffer</code>) command inserts the number
at the top of the stack into the most recently used normal editing buffer.
(More specifically, this is the most recently used buffer which is displayed
in a window and whose name does not begin with &lsquo;<samp>*</samp>&rsquo;.  If there is no
such buffer, this is the most recently used buffer except for Calculator
and Calc Trail buffers.)  The number is inserted exactly as it appears and
without a newline.  (If line-numbering is enabled, the line number is
normally not included.)  The number is <em>not</em> removed from the stack.
</p>
<p>With a prefix argument, <kbd>y</kbd> inserts several numbers, one per line.
A positive argument inserts the specified number of values from the top
of the stack.  A negative argument inserts the &lsquo;<samp>n</samp>&rsquo;th value from the
top of the stack.  An argument of zero inserts the entire stack.  Note
that <kbd>y</kbd> with an argument of 1 is slightly different from <kbd>y</kbd>
with no argument; the former always copies full lines, whereas the
latter strips off the trailing newline.
</p>
<p>With a lone <kbd>C-u</kbd> as a prefix argument, <kbd>y</kbd> <em>replaces</em> the
region in the other buffer with the yanked text, then quits the
Calculator, leaving you in that buffer.  A typical use would be to use
<kbd>C-x * g</kbd> to read a region of data into the Calculator, operate on the
data to produce a new matrix, then type <kbd>C-u y</kbd> to replace the
original data with the new data.  One might wish to alter the matrix
display style (see <a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a>) or change the current
display language (see <a href="#Language-Modes">Language Modes</a>) before doing this.  Also, note
that this command replaces a linear region of text (as grabbed by
<kbd>C-x * g</kbd>), not a rectangle (as grabbed by <kbd>C-x * r</kbd>).
</p>
<p>If the editing buffer is in overwrite (as opposed to insert) mode,
and the <kbd>C-u</kbd> prefix was not used, then the yanked number will
overwrite the characters following point rather than being inserted
before those characters.  The usual conventions of overwrite mode
are observed; for example, characters will be inserted at the end of
a line rather than overflowing onto the next line.  Yanking a multi-line
object such as a matrix in overwrite mode overwrites the next <var>n</var>
lines in the buffer, lengthening or shortening each line as necessary.
Finally, if the thing being yanked is a simple integer or floating-point
number (like &lsquo;<samp>-1.2345e-3</samp>&rsquo;) and the characters following point also
make up such a number, then Calc will replace that number with the new
number, lengthening or shortening as necessary.  The concept of
&ldquo;overwrite mode&rdquo; has thus been generalized from overwriting characters
to overwriting one complete number with another.
</p>
<a name="index-C_002dx-_002a-y"></a>
<p>The <kbd>C-x * y</kbd> key sequence is equivalent to <kbd>y</kbd> except that
it can be typed anywhere, not just in Calc.  This provides an easy
way to guarantee that Calc knows which editing buffer you want to use!
</p>
<hr>
<a name="X-Cut-and-Paste"></a>
<div class="header">
<p>
Previous: <a href="#Yanking-Into-Buffers" accesskey="p" rel="prev">Yanking Into Buffers</a>, Up: <a href="#Kill-and-Yank" accesskey="u" rel="up">Kill and Yank</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="X-Cut-and-Paste-1"></a>
<h3 class="section">14.7 X Cut and Paste</h3>

<p>If you are using Emacs with the X window system, there is an easier
way to move small amounts of data into and out of the calculator:
Use the mouse-oriented cut and paste facilities of X.
</p>
<p>The default bindings for a three-button mouse cause the left button
to move the Emacs cursor to the given place, the right button to
select the text between the cursor and the clicked location, and
the middle button to yank the selection into the buffer at the
clicked location.  So, if you have a Calc window and an editing
window on your Emacs screen, you can use left-click/right-click
to select a number, vector, or formula from one window, then
middle-click to paste that value into the other window.  When you
paste text into the Calc window, Calc interprets it as an algebraic
entry.  It doesn&rsquo;t matter where you click in the Calc window; the
new value is always pushed onto the top of the stack.
</p>
<p>The <code>xterm</code> program that is typically used for general-purpose
shell windows in X interprets the mouse buttons in the same way.
So you can use the mouse to move data between Calc and any other
Unix program.  One nice feature of <code>xterm</code> is that a double
left-click selects one word, and a triple left-click selects a
whole line.  So you can usually transfer a single number into Calc
just by double-clicking on it in the shell, then middle-clicking
in the Calc window.
</p>
<hr>
<a name="Keypad-Mode"></a>
<div class="header">
<p>
Next: <a href="#Embedded-Mode" accesskey="n" rel="next">Embedded Mode</a>, Previous: <a href="#Kill-and-Yank" accesskey="p" rel="prev">Kill and Yank</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Keypad-Mode-1"></a>
<h2 class="chapter">15 Keypad Mode</h2>

<p><a name="index-C_002dx-_002a-k"></a>
<a name="index-calc_002dkeypad"></a>
The <kbd>C-x * k</kbd> (<code>calc-keypad</code>) command starts the Calculator
and displays a picture of a calculator-style keypad.  If you are using
the X window system, you can click on any of the &ldquo;keys&rdquo; in the
keypad using the left mouse button to operate the calculator.
The original window remains the selected window; in Keypad mode
you can type in your file while simultaneously performing
calculations with the mouse.
</p>
<a name="index-full_002dcalc_002dkeypad"></a>
<p>If you have used <kbd>C-x * b</kbd> first, <kbd>C-x * k</kbd> instead invokes
the <code>full-calc-keypad</code> command, which takes over the whole
Emacs screen and displays the keypad, the Calc stack, and the Calc
trail all at once.  This mode would normally be used when running
Calc standalone (see <a href="#Standalone-Operation">Standalone Operation</a>).
</p>
<p>If you aren&rsquo;t using the X window system, you must switch into
the <samp>*Calc Keypad*</samp> window, place the cursor on the desired
&ldquo;key,&rdquo; and type <tt class="key">SPC</tt> or <tt class="key">RET</tt>.  If you think this
is easier than using Calc normally, go right ahead.
</p>
<p>Calc commands are more or less the same in Keypad mode.  Certain
keypad keys differ slightly from the corresponding normal Calc
keystrokes; all such deviations are described below.
</p>
<p>Keypad mode includes many more commands than will fit on the keypad
at once.  Click the right mouse button [<code>calc-keypad-menu</code>]
to switch to the next menu.  The bottom five rows of the keypad
stay the same; the top three rows change to a new set of commands.
To return to earlier menus, click the middle mouse button
[<code>calc-keypad-menu-back</code>] or simply advance through the menus
until you wrap around.  Typing <tt class="key">TAB</tt> inside the keypad window
is equivalent to clicking the right mouse button there.
</p>
<p>You can always click the <tt class="key">EXEC</tt> button and type any normal
Calc key sequence.  This is equivalent to switching into the
Calc buffer, typing the keys, then switching back to your
original buffer.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Main-Menu" accesskey="1">Keypad Main Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Functions-Menu" accesskey="2">Keypad Functions Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Binary-Menu" accesskey="3">Keypad Binary Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Vectors-Menu" accesskey="4">Keypad Vectors Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keypad-Modes-Menu" accesskey="5">Keypad Modes Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Keypad-Main-Menu"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Functions-Menu" accesskey="n" rel="next">Keypad Functions Menu</a>, Previous: <a href="#Keypad-Mode" accesskey="p" rel="prev">Keypad Mode</a>, Up: <a href="#Keypad-Mode" accesskey="u" rel="up">Keypad Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Main-Menu"></a>
<h3 class="section">15.1 Main Menu</h3>

<div class="smallexample">
<pre class="smallexample">|----+----+--Calc---+----+----1
|FLR |CEIL|RND |TRNC|CLN2|FLT |
|----+----+----+----+----+----|
| LN |EXP |    |ABS |IDIV|MOD |
|----+----+----+----+----+----|
|SIN |COS |TAN |SQRT|y^x |1/x |
|----+----+----+----+----+----|
|  ENTER  |+/- |EEX |UNDO| &lt;- |
|-----+---+-+--+--+-+---++----|
| INV |  7  |  8  |  9  |  /  |
|-----+-----+-----+-----+-----|
| HYP |  4  |  5  |  6  |  *  |
|-----+-----+-----+-----+-----|
|EXEC |  1  |  2  |  3  |  -  |
|-----+-----+-----+-----+-----|
| OFF |  0  |  .  | PI  |  +  |
|-----+-----+-----+-----+-----+
</pre></div>

<p>This is the menu that appears the first time you start Keypad mode.
It will show up in a vertical window on the right side of your screen.
Above this menu is the traditional Calc stack display.  On a 24-line
screen you will be able to see the top three stack entries.
</p>
<p>The ten digit keys, decimal point, and <tt class="key">EEX</tt> key are used for
entering numbers in the obvious way.  <tt class="key">EEX</tt> begins entry of an
exponent in scientific notation.  Just as with regular Calc, the
number is pushed onto the stack as soon as you press <tt class="key">ENTER</tt>
or any other function key.
</p>
<p>The <tt class="key">+/-</tt> key corresponds to normal Calc&rsquo;s <kbd>n</kbd> key.  During
numeric entry it changes the sign of the number or of the exponent.
At other times it changes the sign of the number on the top of the
stack.
</p>
<p>The <tt class="key">INV</tt> and <tt class="key">HYP</tt> keys modify other keys.  As well as
having the effects described elsewhere in this manual, Keypad mode
defines several other &ldquo;inverse&rdquo; operations.  These are described
below and in the following sections.
</p>
<p>The <tt class="key">ENTER</tt> key finishes the current numeric entry, or otherwise
duplicates the top entry on the stack.
</p>
<p>The <tt class="key">UNDO</tt> key undoes the most recent Calc operation.
<kbd>INV UNDO</kbd> is the &ldquo;redo&rdquo; command, and <kbd>HYP UNDO</kbd> is
&ldquo;last arguments&rdquo; (<kbd>M-<span class="key">RET</span></kbd>).
</p>
<p>The <tt class="key">&lt;-</tt> key acts as a &ldquo;backspace&rdquo; during numeric entry.
At other times it removes the top stack entry.  <kbd>INV &lt;-</kbd>
clears the entire stack.  <kbd>HYP &lt;-</kbd> takes an integer from
the stack, then removes that many additional stack elements.
</p>
<p>The <tt class="key">EXEC</tt> key prompts you to enter any keystroke sequence
that would normally work in Calc mode.  This can include a
numeric prefix if you wish.  It is also possible simply to
switch into the Calc window and type commands in it; there is
nothing &ldquo;magic&rdquo; about this window when Keypad mode is active.
</p>
<p>The other keys in this display perform their obvious calculator
functions.  <tt class="key">CLN2</tt> rounds the top-of-stack by temporarily
reducing the precision by 2 digits.  <tt class="key">FLT</tt> converts an
integer or fraction on the top of the stack to floating-point.
</p>
<p>The <tt class="key">INV</tt> and <tt class="key">HYP</tt> keys combined with several of these keys
give you access to some common functions even if the appropriate menu
is not displayed.  Obviously you don&rsquo;t need to learn these keys
unless you find yourself wasting time switching among the menus.
</p>
<dl compact="compact">
<dt><kbd>INV +/-</kbd></dt>
<dd><p>is the same as <tt class="key">1/x</tt>.
</p></dd>
<dt><kbd>INV +</kbd></dt>
<dd><p>is the same as <tt class="key">SQRT</tt>.
</p></dd>
<dt><kbd>INV -</kbd></dt>
<dd><p>is the same as <tt class="key">CONJ</tt>.
</p></dd>
<dt><kbd>INV *</kbd></dt>
<dd><p>is the same as <tt class="key">y^x</tt>.
</p></dd>
<dt><kbd>INV /</kbd></dt>
<dd><p>is the same as <tt class="key">INV y^x</tt> (the &lsquo;<samp>x</samp>&rsquo;th root of &lsquo;<samp>y</samp>&rsquo;).
</p></dd>
<dt><kbd>HYP/INV 1</kbd></dt>
<dd><p>are the same as <tt class="key">SIN</tt> / <kbd>INV SIN</kbd>.
</p></dd>
<dt><kbd>HYP/INV 2</kbd></dt>
<dd><p>are the same as <tt class="key">COS</tt> / <kbd>INV COS</kbd>.
</p></dd>
<dt><kbd>HYP/INV 3</kbd></dt>
<dd><p>are the same as <tt class="key">TAN</tt> / <kbd>INV TAN</kbd>.
</p></dd>
<dt><kbd>INV/HYP 4</kbd></dt>
<dd><p>are the same as <tt class="key">LN</tt> / <kbd>HYP LN</kbd>.
</p></dd>
<dt><kbd>INV/HYP 5</kbd></dt>
<dd><p>are the same as <tt class="key">EXP</tt> / <kbd>HYP EXP</kbd>.
</p></dd>
<dt><kbd>INV 6</kbd></dt>
<dd><p>is the same as <tt class="key">ABS</tt>.
</p></dd>
<dt><kbd>INV 7</kbd></dt>
<dd><p>is the same as <tt class="key">RND</tt> (<code>calc-round</code>).
</p></dd>
<dt><kbd>INV 8</kbd></dt>
<dd><p>is the same as <tt class="key">CLN2</tt>.
</p></dd>
<dt><kbd>INV 9</kbd></dt>
<dd><p>is the same as <tt class="key">FLT</tt> (<code>calc-float</code>).
</p></dd>
<dt><kbd>INV 0</kbd></dt>
<dd><p>is the same as <tt class="key">IMAG</tt>.
</p></dd>
<dt><kbd>INV .</kbd></dt>
<dd><p>is the same as <tt class="key">PREC</tt>.
</p></dd>
<dt><kbd>INV ENTER</kbd></dt>
<dd><p>is the same as <tt class="key">SWAP</tt>.
</p></dd>
<dt><kbd>HYP ENTER</kbd></dt>
<dd><p>is the same as <tt class="key">RLL3</tt>.
</p></dd>
<dt><kbd>INV HYP ENTER</kbd></dt>
<dd><p>is the same as <tt class="key">OVER</tt>.
</p></dd>
<dt><kbd>HYP +/-</kbd></dt>
<dd><p>packs the top two stack entries as an error form.
</p></dd>
<dt><kbd>HYP EEX</kbd></dt>
<dd><p>packs the top two stack entries as a modulo form.
</p></dd>
<dt><kbd>INV EEX</kbd></dt>
<dd><p>creates an interval form; this removes an integer which is one
of 0 &lsquo;<samp>[]</samp>&rsquo;, 1 &lsquo;<samp>[)</samp>&rsquo;, 2 &lsquo;<samp>(]</samp>&rsquo; or 3 &lsquo;<samp>()</samp>&rsquo;, followed
by the two limits of the interval.
</p></dd>
</dl>

<p>The <kbd>OFF</kbd> key turns Calc off; typing <kbd>C-x * k</kbd> or <kbd>C-x * *</kbd>
again has the same effect.  This is analogous to typing <kbd>q</kbd> or
hitting <kbd>C-x * c</kbd> again in the normal calculator.  If Calc is
running standalone (the <code>full-calc-keypad</code> command appeared in the
command line that started Emacs), then <kbd>OFF</kbd> is replaced with
<kbd>EXIT</kbd>; clicking on this actually exits Emacs itself.
</p>
<hr>
<a name="Keypad-Functions-Menu"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Binary-Menu" accesskey="n" rel="next">Keypad Binary Menu</a>, Previous: <a href="#Keypad-Main-Menu" accesskey="p" rel="prev">Keypad Main Menu</a>, Up: <a href="#Keypad-Mode" accesskey="u" rel="up">Keypad Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Functions-Menu"></a>
<h3 class="section">15.2 Functions Menu</h3>

<div class="smallexample">
<pre class="smallexample">|----+----+----+----+----+----2
|IGAM|BETA|IBET|ERF |BESJ|BESY|
|----+----+----+----+----+----|
|IMAG|CONJ| RE |ATN2|RAND|RAGN|
|----+----+----+----+----+----|
|GCD |FACT|DFCT|BNOM|PERM|NXTP|
|----+----+----+----+----+----|
</pre></div>

<p>This menu provides various operations from the <kbd>f</kbd> and <kbd>k</kbd>
prefix keys.
</p>
<p><tt class="key">IMAG</tt> multiplies the number on the stack by the imaginary
number &lsquo;<samp>i = (0, 1)</samp>&rsquo;.
</p>
<p><tt class="key">RE</tt> extracts the real part a complex number.  <kbd>INV RE</kbd>
extracts the imaginary part.
</p>
<p><tt class="key">RAND</tt> takes a number from the top of the stack and computes
a random number greater than or equal to zero but less than that
number.  (See <a href="#Random-Numbers">Random Numbers</a>.)  <tt class="key">RAGN</tt> is the &ldquo;random
again&rdquo; command; it computes another random number using the
same limit as last time.
</p>
<p><tt class="key">INV GCD</tt> computes the LCM (least common multiple) function.
</p>
<p><tt class="key">INV FACT</tt> is the gamma function.
&lsquo;<samp>gamma(x) = (x-1)!</samp>&rsquo;.
</p>
<p><tt class="key">PERM</tt> is the number-of-permutations function, which is on the
<kbd>H k c</kbd> key in normal Calc.
</p>
<p><tt class="key">NXTP</tt> finds the next prime after a number.  <kbd>INV NXTP</kbd>
finds the previous prime.
</p>
<hr>
<a name="Keypad-Binary-Menu"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Vectors-Menu" accesskey="n" rel="next">Keypad Vectors Menu</a>, Previous: <a href="#Keypad-Functions-Menu" accesskey="p" rel="prev">Keypad Functions Menu</a>, Up: <a href="#Keypad-Mode" accesskey="u" rel="up">Keypad Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Binary-Menu"></a>
<h3 class="section">15.3 Binary Menu</h3>

<div class="smallexample">
<pre class="smallexample">|----+----+----+----+----+----3
|AND | OR |XOR |NOT |LSH |RSH |
|----+----+----+----+----+----|
|DEC |HEX |OCT |BIN |WSIZ|ARSH|
|----+----+----+----+----+----|
| A  | B  | C  | D  | E  | F  |
|----+----+----+----+----+----|
</pre></div>

<p>The keys in this menu perform operations on binary integers.
Note that both logical and arithmetic right-shifts are provided.
<tt class="key">INV LSH</tt> rotates one bit to the left.
</p>
<p>The &ldquo;difference&rdquo; function (normally on <kbd>b d</kbd>) is on <tt class="key">INV AND</tt>.
The &ldquo;clip&rdquo; function (normally on <kbd>b&nbsp;c</kbd><!-- /@w -->) is on <tt class="key">INV NOT</tt>.
</p>
<p>The <tt class="key">DEC</tt>, <tt class="key">HEX</tt>, <tt class="key">OCT</tt>, and <tt class="key">BIN</tt> keys select the
current radix for display and entry of numbers:  Decimal, hexadecimal,
octal, or binary.  The six letter keys <tt class="key">A</tt> through <tt class="key">F</tt> are used
for entering hexadecimal numbers.
</p>
<p>The <tt class="key">WSIZ</tt> key displays the current word size for binary operations
and allows you to enter a new word size.  You can respond to the prompt
using either the keyboard or the digits and <tt class="key">ENTER</tt> from the keypad.
The initial word size is 32 bits.
</p>
<hr>
<a name="Keypad-Vectors-Menu"></a>
<div class="header">
<p>
Next: <a href="#Keypad-Modes-Menu" accesskey="n" rel="next">Keypad Modes Menu</a>, Previous: <a href="#Keypad-Binary-Menu" accesskey="p" rel="prev">Keypad Binary Menu</a>, Up: <a href="#Keypad-Mode" accesskey="u" rel="up">Keypad Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vectors-Menu"></a>
<h3 class="section">15.4 Vectors Menu</h3>

<div class="smallexample">
<pre class="smallexample">|----+----+----+----+----+----4
|SUM |PROD|MAX |MAP*|MAP^|MAP$|
|----+----+----+----+----+----|
|MINV|MDET|MTRN|IDNT|CRSS|&quot;x&quot; |
|----+----+----+----+----+----|
|PACK|UNPK|INDX|BLD |LEN |... |
|----+----+----+----+----+----|
</pre></div>

<p>The keys in this menu operate on vectors and matrices.
</p>
<p><tt class="key">PACK</tt> removes an integer <var>n</var> from the top of the stack;
the next <var>n</var> stack elements are removed and packed into a vector,
which is replaced onto the stack.  Thus the sequence
<kbd>1 ENTER 3 ENTER 5 ENTER 3 PACK</kbd> enters the vector
&lsquo;<samp>[1, 3, 5]</samp>&rsquo; onto the stack.  To enter a matrix, build each row
on the stack as a vector, then use a final <tt class="key">PACK</tt> to collect the
rows into a matrix.
</p>
<p><tt class="key">UNPK</tt> unpacks the vector on the stack, pushing each of its
components separately.
</p>
<p><tt class="key">INDX</tt> removes an integer <var>n</var>, then builds a vector of
integers from 1 to <var>n</var>.  <kbd>INV INDX</kbd> takes three numbers
from the stack:  The vector size <var>n</var>, the starting number,
and the increment.  <kbd>BLD</kbd> takes an integer <var>n</var> and any
value <var>x</var> and builds a vector of <var>n</var> copies of <var>x</var>.
</p>
<p><tt class="key">IDNT</tt> removes an integer <var>n</var>, then builds an <var>n</var>-by-<var>n</var>
identity matrix.
</p>
<p><tt class="key">LEN</tt> replaces a vector by its length, an integer.
</p>
<p><tt class="key">...</tt> turns on or off &ldquo;abbreviated&rdquo; display mode for large vectors.
</p>
<p><tt class="key">MINV</tt>, <tt class="key">MDET</tt>, <tt class="key">MTRN</tt>, and <tt class="key">CROSS</tt> are the matrix
inverse, determinant, and transpose, and vector cross product.
</p>
<p><tt class="key">SUM</tt> replaces a vector by the sum of its elements.  It is
equivalent to <kbd>u +</kbd> in normal Calc (see <a href="#Statistical-Operations">Statistical Operations</a>).
<tt class="key">PROD</tt> computes the product of the elements of a vector, and
<tt class="key">MAX</tt> computes the maximum of all the elements of a vector.
</p>
<p><tt class="key">INV SUM</tt> computes the alternating sum of the first element
minus the second, plus the third, minus the fourth, and so on.
<tt class="key">INV MAX</tt> computes the minimum of the vector elements.
</p>
<p><tt class="key">HYP SUM</tt> computes the mean of the vector elements.
<tt class="key">HYP PROD</tt> computes the sample standard deviation.
<tt class="key">HYP MAX</tt> computes the median.
</p>
<p><tt class="key">MAP*</tt> multiplies two vectors elementwise.  It is equivalent
to the <kbd>V M *</kbd> command.  <tt class="key">MAP^</tt> computes powers elementwise.
The arguments must be vectors of equal length, or one must be a vector
and the other must be a plain number.  For example, <kbd>2 MAP^</kbd> squares
all the elements of a vector.
</p>
<p><tt class="key">MAP$</tt> maps the formula on the top of the stack across the
vector in the second-to-top position.  If the formula contains
several variables, Calc takes that many vectors starting at the
second-to-top position and matches them to the variables in
alphabetical order.  The result is a vector of the same size as
the input vectors, whose elements are the formula evaluated with
the variables set to the various sets of numbers in those vectors.
For example, you could simulate <tt class="key">MAP^</tt> using <tt class="key">MAP$</tt> with
the formula &lsquo;<samp>x^y</samp>&rsquo;.
</p>
<p>The <kbd>&quot;x&quot;</kbd> key pushes the variable name &lsquo;<samp>x</samp>&rsquo; onto the
stack.  To build the formula &lsquo;<samp>x^2 + 6</samp>&rsquo;, you would use the
key sequence <kbd>&quot;x&quot; 2 y^x 6 +</kbd>.  This formula would then be
suitable for use with the <tt class="key">MAP$</tt> key described above.
With <tt class="key">INV</tt>, <tt class="key">HYP</tt>, or <tt class="key">INV</tt> and <tt class="key">HYP</tt>, the
<kbd>&quot;x&quot;</kbd> key pushes the variable names &lsquo;<samp>y</samp>&rsquo;, &lsquo;<samp>z</samp>&rsquo;, and
&lsquo;<samp>t</samp>&rsquo;, respectively.
</p>
<hr>
<a name="Keypad-Modes-Menu"></a>
<div class="header">
<p>
Previous: <a href="#Keypad-Vectors-Menu" accesskey="p" rel="prev">Keypad Vectors Menu</a>, Up: <a href="#Keypad-Mode" accesskey="u" rel="up">Keypad Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Modes-Menu"></a>
<h3 class="section">15.5 Modes Menu</h3>

<div class="smallexample">
<pre class="smallexample">|----+----+----+----+----+----5
|FLT |FIX |SCI |ENG |GRP |    |
|----+----+----+----+----+----|
|RAD |DEG |FRAC|POLR|SYMB|PREC|
|----+----+----+----+----+----|
|SWAP|RLL3|RLL4|OVER|STO |RCL |
|----+----+----+----+----+----|
</pre></div>

<p>The keys in this menu manipulate modes, variables, and the stack.
</p>
<p>The <tt class="key">FLT</tt>, <tt class="key">FIX</tt>, <tt class="key">SCI</tt>, and <tt class="key">ENG</tt> keys select
floating-point, fixed-point, scientific, or engineering notation.
<tt class="key">FIX</tt> displays two digits after the decimal by default; the
others display full precision.  With the <tt class="key">INV</tt> prefix, these
keys pop a number-of-digits argument from the stack.
</p>
<p>The <tt class="key">GRP</tt> key turns grouping of digits with commas on or off.
<kbd>INV GRP</kbd> enables grouping to the right of the decimal point as
well as to the left.
</p>
<p>The <tt class="key">RAD</tt> and <tt class="key">DEG</tt> keys switch between radians and degrees
for trigonometric functions.
</p>
<p>The <tt class="key">FRAC</tt> key turns Fraction mode on or off.  This affects
whether commands like <kbd>/</kbd> with integer arguments produce
fractional or floating-point results.
</p>
<p>The <tt class="key">POLR</tt> key turns Polar mode on or off, determining whether
polar or rectangular complex numbers are used by default.
</p>
<p>The <tt class="key">SYMB</tt> key turns Symbolic mode on or off, in which
operations that would produce inexact floating-point results
are left unevaluated as algebraic formulas.
</p>
<p>The <tt class="key">PREC</tt> key selects the current precision.  Answer with
the keyboard or with the keypad digit and <tt class="key">ENTER</tt> keys.
</p>
<p>The <tt class="key">SWAP</tt> key exchanges the top two stack elements.
The <tt class="key">RLL3</tt> key rotates the top three stack elements upwards.
The <tt class="key">RLL4</tt> key rotates the top four stack elements upwards.
The <tt class="key">OVER</tt> key duplicates the second-to-top stack element.
</p>
<p>The <tt class="key">STO</tt> and <tt class="key">RCL</tt> keys are analogous to <kbd>s t</kbd> and
<kbd>s r</kbd> in regular Calc.  See <a href="#Store-and-Recall">Store and Recall</a>.  Click the
<tt class="key">STO</tt> or <tt class="key">RCL</tt> key, then one of the ten digits.  (Named
variables are not available in Keypad mode.)  You can also use,
for example, <kbd>STO + 3</kbd> to add to register 3.
</p>
<hr>
<a name="Embedded-Mode"></a>
<div class="header">
<p>
Next: <a href="#Programming" accesskey="n" rel="next">Programming</a>, Previous: <a href="#Keypad-Mode" accesskey="p" rel="prev">Keypad Mode</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Embedded-Mode-1"></a>
<h2 class="chapter">16 Embedded Mode</h2>

<p>Embedded mode in Calc provides an alternative to copying numbers
and formulas back and forth between editing buffers and the Calc
stack.  In Embedded mode, your editing buffer becomes temporarily
linked to the stack and this copying is taken care of automatically.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Embedded-Mode" accesskey="1">Basic Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#More-About-Embedded-Mode" accesskey="2">More About Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Assignments-in-Embedded-Mode" accesskey="3">Assignments in Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mode-Settings-in-Embedded-Mode" accesskey="4">Mode Settings in Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Customizing-Embedded-Mode" accesskey="5">Customizing Embedded Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Basic-Embedded-Mode"></a>
<div class="header">
<p>
Next: <a href="#More-About-Embedded-Mode" accesskey="n" rel="next">More About Embedded Mode</a>, Previous: <a href="#Embedded-Mode" accesskey="p" rel="prev">Embedded Mode</a>, Up: <a href="#Embedded-Mode" accesskey="u" rel="up">Embedded Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Embedded-Mode-1"></a>
<h3 class="section">16.1 Basic Embedded Mode</h3>

<p><a name="index-C_002dx-_002a-e"></a>
<a name="index-calc_002dembedded"></a>
To enter Embedded mode, position the Emacs point (cursor) on a
formula in any buffer and press <kbd>C-x * e</kbd> (<code>calc-embedded</code>).
Note that <kbd>C-x * e</kbd> is not to be used in the Calc stack buffer
like most Calc commands, but rather in regular editing buffers that
are visiting your own files.
</p>
<p>Calc will try to guess an appropriate language based on the major mode
of the editing buffer. (See <a href="#Language-Modes">Language Modes</a>.) If the current buffer is
in <code>latex-mode</code>, for example, Calc will set its language to LaTeX.
Similarly, Calc will use TeX language for <code>tex-mode</code>,
<code>plain-tex-mode</code> and <code>context-mode</code>, C language for
<code>c-mode</code> and <code>c++-mode</code>, FORTRAN language for
<code>fortran-mode</code> and <code>f90-mode</code>, Pascal for <code>pascal-mode</code>,
and eqn for <code>nroff-mode</code> (see <a href="#Customizing-Calc">Customizing Calc</a>).
These can be overridden with Calc&rsquo;s mode
changing commands (see <a href="#Mode-Settings-in-Embedded-Mode">Mode Settings in Embedded Mode</a>).  If no
suitable language is available, Calc will continue with its current language.
</p>
<p>Calc normally scans backward and forward in the buffer for the
nearest opening and closing <em>formula delimiters</em>.  The simplest
delimiters are blank lines.  Other delimiters that Embedded mode
understands are:
</p>
<ol>
<li> The TeX and LaTeX math delimiters &lsquo;<samp>$ $</samp>&rsquo;, &lsquo;<samp>$$ $$</samp>&rsquo;,
&lsquo;<samp>\[ \]</samp>&rsquo;, and &lsquo;<samp>\( \)</samp>&rsquo;;
</li><li> Lines beginning with &lsquo;<samp>\begin</samp>&rsquo; and &lsquo;<samp>\end</samp>&rsquo; (except matrix delimiters);
</li><li> Lines beginning with &lsquo;<samp>@</samp>&rsquo; (Texinfo delimiters).
</li><li> Lines beginning with &lsquo;<samp>.EQ</samp>&rsquo; and &lsquo;<samp>.EN</samp>&rsquo; (<em>eqn</em> delimiters);
</li><li> Lines containing a single &lsquo;<samp>%</samp>&rsquo; or &lsquo;<samp>.\&quot;</samp>&rsquo; symbol and nothing else.
</li></ol>

<p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>, to see how to make Calc recognize
your own favorite delimiters.  Delimiters like &lsquo;<samp>$ $</samp>&rsquo; can appear
on their own separate lines or in-line with the formula.
</p>
<p>If you give a positive or negative numeric prefix argument, Calc
instead uses the current point as one end of the formula, and includes
that many lines forward or backward (respectively, including the current
line). Explicit delimiters are not necessary in this case.
</p>
<p>With a prefix argument of zero, Calc uses the current region (delimited
by point and mark) instead of formula delimiters.  With a prefix
argument of <kbd>C-u</kbd> only, Calc uses the current line as the formula.
</p>
<a name="index-C_002dx-_002a-w"></a>
<a name="index-calc_002dembedded_002dword"></a>
<p>The <kbd>C-x * w</kbd> (<code>calc-embedded-word</code>) command will start Embedded
mode on the current &ldquo;word&rdquo;; in this case Calc will scan for the first
non-numeric character (i.e., the first character that is not a digit,
sign, decimal point, or upper- or lower-case &lsquo;<samp>e</samp>&rsquo;) forward and
backward to delimit the formula.
</p>
<p>When you enable Embedded mode for a formula, Calc reads the text
between the delimiters and tries to interpret it as a Calc formula.
Calc can generally identify TeX formulas and
Big-style formulas even if the language mode is wrong.  If Calc
can&rsquo;t make sense of the formula, it beeps and refuses to enter
Embedded mode.  But if the current language is wrong, Calc can
sometimes parse the formula successfully (but incorrectly);
for example, the C expression &lsquo;<samp>atan(a[1])</samp>&rsquo; can be parsed
in Normal language mode, but the <code>atan</code> won&rsquo;t correspond to
the built-in <code>arctan</code> function, and the &lsquo;<samp>a[1]</samp>&rsquo; will be
interpreted as &lsquo;<samp>a</samp>&rsquo; times the vector &lsquo;<samp>[1]</samp>&rsquo;!
</p>
<p>If you press <kbd>C-x * e</kbd> or <kbd>C-x * w</kbd> to activate an embedded
formula which is blank, say with the cursor on the space between
the two delimiters &lsquo;<samp>$ $</samp>&rsquo;, Calc will immediately prompt for
an algebraic entry.
</p>
<p>Only one formula in one buffer can be enabled at a time.  If you
move to another area of the current buffer and give Calc commands,
Calc turns Embedded mode off for the old formula and then tries
to restart Embedded mode at the new position.  Other buffers are
not affected by Embedded mode.
</p>
<p>When Embedded mode begins, Calc pushes the current formula onto
the stack.  No Calc stack window is created; however, Calc copies
the top-of-stack position into the original buffer at all times.
You can create a Calc window by hand with <kbd>C-x * o</kbd> if you
find you need to see the entire stack.
</p>
<p>For example, typing <kbd>C-x * e</kbd> while somewhere in the formula
&lsquo;<samp>n&gt;2</samp>&rsquo; in the following line enables Embedded mode on that
inequality:
</p>
<div class="example">
<pre class="example">We define $F_n = F_(n-1)+F_(n-2)$ for all $n&gt;2$.
</pre></div>

<p>The formula &lsquo;<samp>n&gt;2</samp>&rsquo; will be pushed onto the Calc stack, and
the top of stack will be copied back into the editing buffer.
This means that spaces will appear around the &lsquo;<samp>&gt;</samp>&rsquo; symbol
to match Calc&rsquo;s usual display style:
</p>
<div class="example">
<pre class="example">We define $F_n = F_(n-1)+F_(n-2)$ for all $n &gt; 2$.
</pre></div>

<p>No spaces have appeared around the &lsquo;<samp>+</samp>&rsquo; sign because it&rsquo;s
in a different formula, one which we have not yet touched with
Embedded mode.
</p>
<p>Now that Embedded mode is enabled, keys you type in this buffer
are interpreted as Calc commands.  At this point we might use
the &ldquo;commute&rdquo; command <kbd>j C</kbd> to reverse the inequality.
This is a selection-based command for which we first need to
move the cursor onto the operator (&lsquo;<samp>&gt;</samp>&rsquo; in this case) that
needs to be commuted.
</p>
<div class="example">
<pre class="example">We define $F_n = F_(n-1)+F_(n-2)$ for all $2 &lt; n$.
</pre></div>

<p>The <kbd>C-x * o</kbd> command is a useful way to open a Calc window
without actually selecting that window.  Giving this command
verifies that &lsquo;<samp>2 &lt; n</samp>&rsquo; is also on the Calc stack.  Typing
<kbd>17 <span class="key">RET</span></kbd> would produce:
</p>
<div class="example">
<pre class="example">We define $F_n = F_(n-1)+F_(n-2)$ for all $17$.
</pre></div>

<p>with &lsquo;<samp>2 &lt; n</samp>&rsquo; and &lsquo;<samp>17</samp>&rsquo; on the stack; typing <tt class="key">TAB</tt>
at this point will exchange the two stack values and restore
&lsquo;<samp>2 &lt; n</samp>&rsquo; to the embedded formula.  Even though you can&rsquo;t
normally see the stack in Embedded mode, it is still there and
it still operates in the same way.  But, as with old-fashioned
RPN calculators, you can only see the value at the top of the
stack at any given time (unless you use <kbd>C-x * o</kbd>).
</p>
<p>Typing <kbd>C-x * e</kbd> again turns Embedded mode off.  The Calc
window reveals that the formula &lsquo;<samp>2&nbsp;&lt;&nbsp;n</samp>&rsquo;<!-- /@w --> is automatically
removed from the stack, but the &lsquo;<samp>17</samp>&rsquo; is not.  Entering
Embedded mode always pushes one thing onto the stack, and
leaving Embedded mode always removes one thing.  Anything else
that happens on the stack is entirely your business as far as
Embedded mode is concerned.
</p>
<p>If you press <kbd>C-x * e</kbd> in the wrong place by accident, it is
possible that Calc will be able to parse the nearby text as a
formula and will mangle that text in an attempt to redisplay it
&ldquo;properly&rdquo; in the current language mode.  If this happens,
press <kbd>C-x * e</kbd> again to exit Embedded mode, then give the
regular Emacs &ldquo;undo&rdquo; command (<kbd>C-_</kbd> or <kbd>C-x u</kbd>) to put
the text back the way it was before Calc edited it.  Note that Calc&rsquo;s
own Undo command (typed before you turn Embedded mode back off)
will not do you any good, because as far as Calc is concerned
you haven&rsquo;t done anything with this formula yet.
</p>
<hr>
<a name="More-About-Embedded-Mode"></a>
<div class="header">
<p>
Next: <a href="#Assignments-in-Embedded-Mode" accesskey="n" rel="next">Assignments in Embedded Mode</a>, Previous: <a href="#Basic-Embedded-Mode" accesskey="p" rel="prev">Basic Embedded Mode</a>, Up: <a href="#Embedded-Mode" accesskey="u" rel="up">Embedded Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="More-About-Embedded-Mode-1"></a>
<h3 class="section">16.2 More About Embedded Mode</h3>

<p>When Embedded mode &ldquo;activates&rdquo; a formula, i.e., when it examines
the formula for the first time since the buffer was created or
loaded, Calc tries to sense the language in which the formula was
written.  If the formula contains any LaTeX-like &lsquo;<samp>\</samp>&rsquo; sequences,
it is parsed (i.e., read) in LaTeX mode.  If the formula appears to
be written in multi-line Big mode, it is parsed in Big mode.  Otherwise,
it is parsed according to the current language mode.
</p>
<p>Note that Calc does not change the current language mode according
the formula it reads in.  Even though it can read a LaTeX formula when
not in LaTeX mode, it will immediately rewrite this formula using
whatever language mode is in effect.
</p>

<a name="index-d-p"></a>
<a name="index-calc_002dshow_002dplain"></a>
<p>Calc&rsquo;s parser is unable to read certain kinds of formulas.  For
example, with <kbd>v ]</kbd> (<code>calc-matrix-brackets</code>) you can
specify matrix display styles which the parser is unable to
recognize as matrices.  The <kbd>d p</kbd> (<code>calc-show-plain</code>)
command turns on a mode in which a &ldquo;plain&rdquo; version of a
formula is placed in front of the fully-formatted version.
When Calc reads a formula that has such a plain version in
front, it reads the plain version and ignores the formatted
version.
</p>
<p>Plain formulas are preceded and followed by &lsquo;<samp>%%%</samp>&rsquo; signs
by default.  This notation has the advantage that the &lsquo;<samp>%</samp>&rsquo;
character begins a comment in TeX and LaTeX, so if your formula is
embedded in a TeX or LaTeX document its plain version will be
invisible in the final printed copy.  Certain major modes have different
delimiters to ensure that the &ldquo;plain&rdquo; version will be
in a comment for those modes, also.
See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a> to see how to change the &ldquo;plain&rdquo;
formula delimiters.
</p>
<p>There are several notations which Calc&rsquo;s parser for &ldquo;big&rdquo;
formatted formulas can&rsquo;t yet recognize.  In particular, it can&rsquo;t
read the large symbols for <code>sum</code>, <code>prod</code>, and <code>integ</code>,
and it can&rsquo;t handle &lsquo;<samp>=&gt;</samp>&rsquo; with the righthand argument omitted.
Also, Calc won&rsquo;t recognize special formats you have defined with
the <kbd>Z C</kbd> command (see <a href="#User_002dDefined-Compositions">User-Defined Compositions</a>).  In
these cases it is important to use &ldquo;plain&rdquo; mode to make sure
Calc will be able to read your formula later.
</p>
<p>Another example where &ldquo;plain&rdquo; mode is important is if you have
specified a float mode with few digits of precision.  Normally
any digits that are computed but not displayed will simply be
lost when you save and re-load your embedded buffer, but &ldquo;plain&rdquo;
mode allows you to make sure that the complete number is present
in the file as well as the rounded-down number.
</p>

<p>Embedded buffers remember active formulas for as long as they
exist in Emacs memory.  Suppose you have an embedded formula
which is &lsquo;<samp>pi</samp>&rsquo; to the normal 12 decimal places, and then
type <kbd><span class="nolinebreak">C-u</span>&nbsp;5&nbsp;d&nbsp;n</kbd><!-- /@w --> to display only five decimal places.
If you then type <kbd>d n</kbd>, all 12 places reappear because the
full number is still there on the Calc stack.  More surprisingly,
even if you exit Embedded mode and later re-enter it for that
formula, typing <kbd>d n</kbd> will restore all 12 places because
each buffer remembers all its active formulas.  However, if you
save the buffer in a file and reload it in a new Emacs session,
all non-displayed digits will have been lost unless you used
&ldquo;plain&rdquo; mode.
</p>

<p>In some applications of Embedded mode, you will want to have a
sequence of copies of a formula that show its evolution as you
work on it.  For example, you might want to have a sequence
like this in your file (elaborating here on the example from
the &ldquo;Getting Started&rdquo; chapter):
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                              ln(ln(x))

is

                  <span class="roman">(the derivative of </span>ln(ln(x))<span class="roman">)</span>

whose value at x = 2 is

                            <span class="roman">(the value)</span>

and at x = 3 is

                            <span class="roman">(the value)</span>
</pre></div>

<a name="index-C_002dx-_002a-d"></a>
<a name="index-calc_002dembedded_002dduplicate"></a>
<p>The <kbd>C-x * d</kbd> (<code>calc-embedded-duplicate</code>) command is a
handy way to make sequences like this.  If you type <kbd>C-x * d</kbd>,
the formula under the cursor (which may or may not have Embedded
mode enabled for it at the time) is copied immediately below and
Embedded mode is then enabled for that copy.
</p>
<p>For this example, you would start with just
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                              ln(ln(x))
</pre></div>

<p>and press <kbd>C-x * d</kbd> with the cursor on this formula.  The result
is
</p>
<div class="smallexample">
<pre class="smallexample">The derivative of

                              ln(ln(x))


                              ln(ln(x))
</pre></div>

<p>with the second copy of the formula enabled in Embedded mode.
You can now press <kbd>a d x <span class="key">RET</span></kbd> to take the derivative, and
<kbd>C-x * d C-x * d</kbd> to make two more copies of the derivative.
To complete the computations, type <kbd>3 s l x <span class="key">RET</span></kbd> to evaluate
the last formula, then move up to the second-to-last formula
and type <kbd>2 s l x <span class="key">RET</span></kbd>.
</p>
<p>Finally, you would want to press <kbd>C-x * e</kbd> to exit Embedded
mode, then go up and insert the necessary text in between the
various formulas and numbers.
</p>

<a name="index-C_002dx-_002a-f"></a>
<a name="index-C_002dx-_002a-_0027"></a>
<a name="index-calc_002dembedded_002dnew_002dformula"></a>
<p>The <kbd>C-x * f</kbd> (<code>calc-embedded-new-formula</code>) command
creates a new embedded formula at the current point.  It inserts
some default delimiters, which are usually just blank lines,
and then does an algebraic entry to get the formula (which is
then enabled for Embedded mode).  This is just shorthand for
typing the delimiters yourself, positioning the cursor between
the new delimiters, and pressing <kbd>C-x * e</kbd>.  The key sequence
<kbd>C-x * '</kbd> is equivalent to <kbd>C-x * f</kbd>.
</p>
<a name="index-C_002dx-_002a-n"></a>
<a name="index-C_002dx-_002a-p"></a>
<a name="index-calc_002dembedded_002dnext"></a>
<a name="index-calc_002dembedded_002dprevious"></a>
<p>The <kbd>C-x * n</kbd> (<code>calc-embedded-next</code>) and <kbd>C-x * p</kbd>
(<code>calc-embedded-previous</code>) commands move the cursor to the
next or previous active embedded formula in the buffer.  They
can take positive or negative prefix arguments to move by several
formulas.  Note that these commands do not actually examine the
text of the buffer looking for formulas; they only see formulas
which have previously been activated in Embedded mode.  In fact,
<kbd>C-x * n</kbd> and <kbd>C-x * p</kbd> are a useful way to tell which
embedded formulas are currently active.  Also, note that these
commands do not enable Embedded mode on the next or previous
formula, they just move the cursor.
</p>
<a name="index-C_002dx-_002a-_0060"></a>
<a name="index-calc_002dembedded_002dedit"></a>
<p>The <kbd>C-x * `</kbd> (<code>calc-embedded-edit</code>) command edits the
embedded formula at the current point as if by <kbd>`</kbd> (<code>calc-edit</code>).
Embedded mode does not have to be enabled for this to work.  Press
<kbd>C-c C-c</kbd> to finish the edit, or <kbd>C-x k</kbd> to cancel.
</p>
<hr>
<a name="Assignments-in-Embedded-Mode"></a>
<div class="header">
<p>
Next: <a href="#Mode-Settings-in-Embedded-Mode" accesskey="n" rel="next">Mode Settings in Embedded Mode</a>, Previous: <a href="#More-About-Embedded-Mode" accesskey="p" rel="prev">More About Embedded Mode</a>, Up: <a href="#Embedded-Mode" accesskey="u" rel="up">Embedded Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Assignments-in-Embedded-Mode-1"></a>
<h3 class="section">16.3 Assignments in Embedded Mode</h3>

<p>The &lsquo;<samp>:=</samp>&rsquo; (assignment) and &lsquo;<samp>=&gt;</samp>&rsquo; (&ldquo;evaluates-to&rdquo;) operators
are especially useful in Embedded mode.  They allow you to make
a definition in one formula, then refer to that definition in
other formulas embedded in the same buffer.
</p>
<p>An embedded formula which is an assignment to a variable, as in
</p>
<div class="example">
<pre class="example">foo := 5
</pre></div>

<p>records &lsquo;<samp>5</samp>&rsquo; as the stored value of <code>foo</code> for the
purposes of Embedded mode operations in the current buffer.  It
does <em>not</em> actually store &lsquo;<samp>5</samp>&rsquo; as the &ldquo;global&rdquo; value
of <code>foo</code>, however.  Regular Calc operations, and Embedded
formulas in other buffers, will not see this assignment.
</p>
<p>One way to use this assigned value is simply to create an
Embedded formula elsewhere that refers to <code>foo</code>, and to press
<kbd>=</kbd> in that formula.  However, this permanently replaces the
<code>foo</code> in the formula with its current value.  More interesting
is to use &lsquo;<samp>=&gt;</samp>&rsquo; elsewhere:
</p>
<div class="example">
<pre class="example">foo + 7 =&gt; 12
</pre></div>

<p>See <a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a>, for a general discussion of &lsquo;<samp>=&gt;</samp>&rsquo;.
</p>
<p>If you move back and change the assignment to <code>foo</code>, any
&lsquo;<samp>=&gt;</samp>&rsquo; formulas which refer to it are automatically updated.
</p>
<div class="example">
<pre class="example">foo := 17

foo + 7 =&gt; 24
</pre></div>

<p>The obvious question then is, <em>how</em> can one easily change the
assignment to <code>foo</code>?  If you simply select the formula in
Embedded mode and type 17, the assignment itself will be replaced
by the 17.  The effect on the other formula will be that the
variable <code>foo</code> becomes unassigned:
</p>
<div class="example">
<pre class="example">17

foo + 7 =&gt; foo + 7
</pre></div>

<p>The right thing to do is first to use a selection command (<kbd>j 2</kbd>
will do the trick) to select the righthand side of the assignment.
Then, <kbd>17 <span class="key">TAB</span> <span class="key">DEL</span></kbd> will swap the 17 into place (see <a href="#Selecting-Subformulas">Selecting Subformulas</a>, to see how this works).
</p>
<a name="index-C_002dx-_002a-j"></a>
<a name="index-calc_002dembedded_002dselect"></a>
<p>The <kbd>C-x * j</kbd> (<code>calc-embedded-select</code>) command provides an
easy way to operate on assignments.  It is just like <kbd>C-x * e</kbd>,
except that if the enabled formula is an assignment, it uses
<kbd>j 2</kbd> to select the righthand side.  If the enabled formula
is an evaluates-to, it uses <kbd>j 1</kbd> to select the lefthand side.
A formula can also be a combination of both:
</p>
<div class="example">
<pre class="example">bar := foo + 3 =&gt; 20
</pre></div>

<p>in which case <kbd>C-x * j</kbd> will select the middle part (&lsquo;<samp>foo + 3</samp>&rsquo;).
</p>
<p>The formula is automatically deselected when you leave Embedded
mode.
</p>
<a name="index-C_002dx-_002a-u"></a>
<a name="index-calc_002dembedded_002dupdate_002dformula"></a>
<p>Another way to change the assignment to <code>foo</code> would simply be
to edit the number using regular Emacs editing rather than Embedded
mode.  Then, we have to find a way to get Embedded mode to notice
the change.  The <kbd>C-x * u</kbd> (<code>calc-embedded-update-formula</code>)
command is a convenient way to do this.
</p>
<div class="example">
<pre class="example">foo := 6

foo + 7 =&gt; 13
</pre></div>

<p>Pressing <kbd>C-x * u</kbd> is much like pressing <kbd>C-x * e = C-x * e</kbd>, that
is, temporarily enabling Embedded mode for the formula under the
cursor and then evaluating it with <kbd>=</kbd>.  But <kbd>C-x * u</kbd> does
not actually use <kbd>C-x * e</kbd>, and in fact another formula somewhere
else can be enabled in Embedded mode while you use <kbd>C-x * u</kbd> and
that formula will not be disturbed.
</p>
<p>With a numeric prefix argument, <kbd>C-x * u</kbd> updates all active
&lsquo;<samp>=&gt;</samp>&rsquo; formulas in the buffer.  Formulas which have not yet
been activated in Embedded mode, and formulas which do not have
&lsquo;<samp>=&gt;</samp>&rsquo; as their top-level operator, are not affected by this.
(This is useful only if you have used <kbd>m C</kbd>; see below.)
</p>
<p>With a plain <kbd>C-u</kbd> prefix, <kbd>C-u C-x * u</kbd> updates only in the
region between mark and point rather than in the whole buffer.
</p>
<p><kbd>C-x * u</kbd> is also a handy way to activate a formula, such as an
&lsquo;<samp>=&gt;</samp>&rsquo; formula that has freshly been typed in or loaded from a
file.
</p>
<a name="index-C_002dx-_002a-a"></a>
<a name="index-calc_002dembedded_002dactivate"></a>
<p>The <kbd>C-x * a</kbd> (<code>calc-embedded-activate</code>) command scans
through the current buffer and activates all embedded formulas
that contain &lsquo;<samp>:=</samp>&rsquo; or &lsquo;<samp>=&gt;</samp>&rsquo; symbols.  This does not mean
that Embedded mode is actually turned on, but only that the
formulas&rsquo; positions are registered with Embedded mode so that
the &lsquo;<samp>=&gt;</samp>&rsquo; values can be properly updated as assignments are
changed.
</p>
<p>It is a good idea to type <kbd>C-x * a</kbd> right after loading a file
that uses embedded &lsquo;<samp>=&gt;</samp>&rsquo; operators.  Emacs includes a nifty
&ldquo;buffer-local variables&rdquo; feature that you can use to do this
automatically.  The idea is to place near the end of your file
a few lines that look like this:
</p>
<div class="example">
<pre class="example">--- Local Variables: ---
--- eval:(calc-embedded-activate) ---
--- End: ---
</pre></div>

<p>where the leading and trailing &lsquo;<samp>---</samp>&rsquo; can be replaced by
any suitable strings (which must be the same on all three lines)
or omitted altogether; in a TeX or LaTeX file, &lsquo;<samp>%</samp>&rsquo; would be a good
leading string and no trailing string would be necessary.  In a
C program, &lsquo;<samp>/*</samp>&rsquo; and &lsquo;<samp>*/</samp>&rsquo; would be good leading and
trailing strings.
</p>
<p>When Emacs loads a file into memory, it checks for a Local Variables
section like this one at the end of the file.  If it finds this
section, it does the specified things (in this case, running
<kbd>C-x * a</kbd> automatically) before editing of the file begins.
The Local Variables section must be within 3000 characters of the
end of the file for Emacs to find it, and it must be in the last
page of the file if the file has any page separators.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#File-Variables">Local Variables in Files</a> in <cite>the
Emacs manual</cite>.
</p>
<p>Note that <kbd>C-x * a</kbd> does not update the formulas it finds.
To do this, type, say, <kbd>M-1 C-x * u</kbd> after <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;a</kbd><!-- /@w -->.
Generally this should not be a problem, though, because the
formulas will have been up-to-date already when the file was
saved.
</p>
<p>Normally, <kbd>C-x * a</kbd> activates all the formulas it finds, but
any previous active formulas remain active as well.  With a
positive numeric prefix argument, <kbd>C-x * a</kbd> first deactivates
all current active formulas, then actives the ones it finds in
its scan of the buffer.  With a negative prefix argument,
<kbd>C-x * a</kbd> simply deactivates all formulas.
</p>
<p>Embedded mode has two symbols, &lsquo;<samp>Active</samp>&rsquo; and &lsquo;<samp>~Active</samp>&rsquo;,
which it puts next to the major mode name in a buffer&rsquo;s mode line.
It puts &lsquo;<samp>Active</samp>&rsquo; if it has reason to believe that all
formulas in the buffer are active, because you have typed <kbd>C-x * a</kbd>
and Calc has not since had to deactivate any formulas (which can
happen if Calc goes to update an &lsquo;<samp>=&gt;</samp>&rsquo; formula somewhere because
a variable changed, and finds that the formula is no longer there
due to some kind of editing outside of Embedded mode).  Calc puts
&lsquo;<samp>~Active</samp>&rsquo; in the mode line if some, but probably not all,
formulas in the buffer are active.  This happens if you activate
a few formulas one at a time but never use <kbd>C-x * a</kbd>, or if you
used <kbd>C-x * a</kbd> but then Calc had to deactivate a formula
because it lost track of it.  If neither of these symbols appears
in the mode line, no embedded formulas are active in the buffer
(e.g., before Embedded mode has been used, or after a <kbd>M-- C-x * a</kbd>).
</p>
<p>Embedded formulas can refer to assignments both before and after them
in the buffer.  If there are several assignments to a variable, the
nearest preceding assignment is used if there is one, otherwise the
following assignment is used.
</p>
<div class="example">
<pre class="example">x =&gt; 1

x := 1

x =&gt; 1

x := 2

x =&gt; 2
</pre></div>

<p>As well as simple variables, you can also assign to subscript
expressions of the form &lsquo;<samp><var>var</var>_<var>number</var></samp>&rsquo; (as in
<code>x_0</code>), or &lsquo;<samp><var>var</var>_<var>var</var></samp>&rsquo; (as in <code>x_max</code>).
Assignments to other kinds of objects can be represented by Calc,
but the automatic linkage between assignments and references works
only for plain variables and these two kinds of subscript expressions.
</p>
<p>If there are no assignments to a given variable, the global
stored value for the variable is used (see <a href="#Storing-Variables">Storing Variables</a>),
or, if no value is stored, the variable is left in symbolic form.
Note that global stored values will be lost when the file is saved
and loaded in a later Emacs session, unless you have used the
<kbd>s p</kbd> (<code>calc-permanent-variable</code>) command to save them;
see <a href="#Operations-on-Variables">Operations on Variables</a>.
</p>
<p>The <kbd>m C</kbd> (<code>calc-auto-recompute</code>) command turns automatic
recomputation of &lsquo;<samp>=&gt;</samp>&rsquo; forms on and off.  If you turn automatic
recomputation off, you will have to use <kbd>C-x * u</kbd> to update these
formulas manually after an assignment has been changed.  If you
plan to change several assignments at once, it may be more efficient
to type <kbd>m C</kbd>, change all the assignments, then use <kbd>M-1 C-x * u</kbd>
to update the entire buffer afterwards.  The <kbd>m C</kbd> command also
controls &lsquo;<samp>=&gt;</samp>&rsquo; formulas on the stack; see <a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a>.  When you turn automatic recomputation back on, the
stack will be updated but the Embedded buffer will not; you must
use <kbd>C-x * u</kbd> to update the buffer by hand.
</p>
<hr>
<a name="Mode-Settings-in-Embedded-Mode"></a>
<div class="header">
<p>
Next: <a href="#Customizing-Embedded-Mode" accesskey="n" rel="next">Customizing Embedded Mode</a>, Previous: <a href="#Assignments-in-Embedded-Mode" accesskey="p" rel="prev">Assignments in Embedded Mode</a>, Up: <a href="#Embedded-Mode" accesskey="u" rel="up">Embedded Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mode-Settings-in-Embedded-Mode-1"></a>
<h3 class="section">16.4 Mode Settings in Embedded Mode</h3>

<a name="index-m-e"></a>
<a name="index-calc_002dembedded_002dpreserve_002dmodes"></a>
<p>The mode settings can be changed while Calc is in embedded mode, but
by default they will revert to their original values when embedded mode
is ended. However, the modes saved when the mode-recording mode is
<code>Save</code> (see below) and the modes in effect when the <kbd>m e</kbd>
(<code>calc-embedded-preserve-modes</code>) command is given
will be preserved when embedded mode is ended.
</p>
<p>Embedded mode has a rather complicated mechanism for handling mode
settings in Embedded formulas.  It is possible to put annotations
in the file that specify mode settings either global to the entire
file or local to a particular formula or formulas.  In the latter
case, different modes can be specified for use when a formula
is the enabled Embedded mode formula.
</p>
<p>When you give any mode-setting command, like <kbd>m f</kbd> (for Fraction
mode) or <kbd>d s</kbd> (for scientific notation), Embedded mode adds
a line like the following one to the file just before the opening
delimiter of the formula.
</p>
<div class="example">
<pre class="example">% [calc-mode: fractions: t]
% [calc-mode: float-format: (sci 0)]
</pre></div>

<p>When Calc interprets an embedded formula, it scans the text before
the formula for mode-setting annotations like these and sets the
Calc buffer to match these modes.  Modes not explicitly described
in the file are not changed.  Calc scans all the way to the top of
the file, or up to a line of the form
</p>
<div class="example">
<pre class="example">% [calc-defaults]
</pre></div>

<p>which you can insert at strategic places in the file if this backward
scan is getting too slow, or just to provide a barrier between one
&ldquo;zone&rdquo; of mode settings and another.
</p>
<p>If the file contains several annotations for the same mode, the
closest one before the formula is used.  Annotations after the
formula are never used (except for global annotations, described
below).
</p>
<p>The scan does not look for the leading &lsquo;<samp>% </samp>&rsquo;, only for the
square brackets and the text they enclose.  In fact, the leading
characters are different for different major modes.  You can edit the
mode annotations to a style that works better in context if you wish.
See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>, to see how to change the style
that Calc uses when it generates the annotations.  You can write
mode annotations into the file yourself if you know the syntax;
the easiest way to find the syntax for a given mode is to let
Calc write the annotation for it once and see what it does.
</p>
<p>If you give a mode-changing command for a mode that already has
a suitable annotation just above the current formula, Calc will
modify that annotation rather than generating a new, conflicting
one.
</p>
<p>Mode annotations have three parts, separated by colons.  (Spaces
after the colons are optional.)  The first identifies the kind
of mode setting, the second is a name for the mode itself, and
the third is the value in the form of a Lisp symbol, number,
or list.  Annotations with unrecognizable text in the first or
second parts are ignored.  The third part is not checked to make
sure the value is of a valid type or range; if you write an
annotation by hand, be sure to give a proper value or results
will be unpredictable.  Mode-setting annotations are case-sensitive.
</p>
<p>While Embedded mode is enabled, the word <code>Local</code> appears in
the mode line.  This is to show that mode setting commands generate
annotations that are &ldquo;local&rdquo; to the current formula or set of
formulas.  The <kbd>m R</kbd> (<code>calc-mode-record-mode</code>) command
causes Calc to generate different kinds of annotations.  Pressing
<kbd>m R</kbd> repeatedly cycles through the possible modes.
</p>
<p><code>LocEdit</code> and <code>LocPerm</code> modes generate annotations
that look like this, respectively:
</p>
<div class="example">
<pre class="example">% [calc-edit-mode: float-format: (sci 0)]
% [calc-perm-mode: float-format: (sci 5)]
</pre></div>

<p>The first kind of annotation will be used only while a formula
is enabled in Embedded mode.  The second kind will be used only
when the formula is <em>not</em> enabled.  (Whether the formula
is &ldquo;active&rdquo; or not, i.e., whether Calc has seen this formula
yet, is not relevant here.)
</p>
<p><code>Global</code> mode generates an annotation like this at the end
of the file:
</p>
<div class="example">
<pre class="example">% [calc-global-mode: fractions t]
</pre></div>

<p>Global mode annotations affect all formulas throughout the file,
and may appear anywhere in the file.  This allows you to tuck your
mode annotations somewhere out of the way, say, on a new page of
the file, as long as those mode settings are suitable for all
formulas in the file.
</p>
<p>Enabling a formula with <kbd>C-x * e</kbd> causes a fresh scan for local
mode annotations; you will have to use this after adding annotations
above a formula by hand to get the formula to notice them.  Updating
a formula with <kbd>C-x * u</kbd> will also re-scan the local modes, but
global modes are only re-scanned by <kbd>C-x * a</kbd>.
</p>
<p>Another way that modes can get out of date is if you add a local
mode annotation to a formula that has another formula after it.
In this example, we have used the <kbd>d s</kbd> command while the
first of the two embedded formulas is active.  But the second
formula has not changed its style to match, even though by the
rules of reading annotations the &lsquo;<samp>(sci 0)</samp>&rsquo; applies to it, too.
</p>
<div class="example">
<pre class="example">% [calc-mode: float-format: (sci 0)]
1.23e2

456.
</pre></div>

<p>We would have to go down to the other formula and press <kbd>C-x * u</kbd>
on it in order to get it to notice the new annotation.
</p>
<p>Two more mode-recording modes selectable by <kbd>m R</kbd> are available
which are also available outside of Embedded mode.
(see <a href="#General-Mode-Commands">General Mode Commands</a>.) They are <code>Save</code>,  in which mode
settings are recorded permanently in your Calc init file (the file given
by the variable <code>calc-settings-file</code>, typically <samp>~/.emacs.d/calc.el</samp>)
rather than by annotating the current document, and no-recording
mode (where there is no symbol like <code>Save</code> or <code>Local</code> in
the mode line), in which mode-changing commands do not leave any
annotations at all.
</p>
<p>When Embedded mode is not enabled, mode-recording modes except
for <code>Save</code> have no effect.
</p>
<hr>
<a name="Customizing-Embedded-Mode"></a>
<div class="header">
<p>
Previous: <a href="#Mode-Settings-in-Embedded-Mode" accesskey="p" rel="prev">Mode Settings in Embedded Mode</a>, Up: <a href="#Embedded-Mode" accesskey="u" rel="up">Embedded Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Embedded-Mode-1"></a>
<h3 class="section">16.5 Customizing Embedded Mode</h3>

<p>You can modify Embedded mode&rsquo;s behavior by setting various Lisp
variables described here.  These variables are customizable
(see <a href="#Customizing-Calc">Customizing Calc</a>), or you can use <kbd>M-x set-variable</kbd>
or <kbd>M-x edit-options</kbd> to adjust a variable on the fly.
(Another possibility would be to use a file-local variable annotation at
the end of the file;
see <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#File-Variables">Local Variables in Files</a> in <cite>the Emacs manual</cite>.)
Many of the variables given mentioned here can be set to depend on the
major mode of the editing buffer (see <a href="#Customizing-Calc">Customizing Calc</a>).
</p>
<a name="index-calc_002dembedded_002dopen_002dformula"></a>
<p>The <code>calc-embedded-open-formula</code> variable holds a regular
expression for the opening delimiter of a formula.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Regexp-Search">Regular Expression Search</a> in <cite>the Emacs manual</cite>, to see
how regular expressions work.  Basically, a regular expression is a
pattern that Calc can search for.  A regular expression that considers
blank lines, &lsquo;<samp>$</samp>&rsquo;, and &lsquo;<samp>$$</samp>&rsquo; to be opening delimiters is
<code>&quot;\\`\\|^\n\\|\\$\\$?&quot;</code>.  Just in case the meaning of this
regular expression is not completely plain, let&rsquo;s go through it
in detail.
</p>
<p>The surrounding &lsquo;<samp>&quot; &quot;</samp>&rsquo; marks quote the text between them as a
Lisp string.  If you left them off, <code>set-variable</code> or
<code>edit-options</code> would try to read the regular expression as a
Lisp program.
</p>
<p>The most obvious property of this regular expression is that it
contains indecently many backslashes.  There are actually two levels
of backslash usage going on here.  First, when Lisp reads a quoted
string, all pairs of characters beginning with a backslash are
interpreted as special characters.  Here, <code>\n</code> changes to a
new-line character, and <code>\\</code> changes to a single backslash.
So the actual regular expression seen by Calc is
&lsquo;<samp>\`\|^ <span class="roman">(newline)</span> \|\$\$?</samp>&rsquo;.
</p>
<p>Regular expressions also consider pairs beginning with backslash
to have special meanings.  Sometimes the backslash is used to quote
a character that otherwise would have a special meaning in a regular
expression, like &lsquo;<samp>$</samp>&rsquo;, which normally means &ldquo;end-of-line,&rdquo;
or &lsquo;<samp>?</samp>&rsquo;, which means that the preceding item is optional.  So
&lsquo;<samp>\$\$?</samp>&rsquo; matches either one or two dollar signs.
</p>
<p>The other codes in this regular expression are &lsquo;<samp>^</samp>&rsquo;, which matches
&ldquo;beginning-of-line,&rdquo; &lsquo;<samp>\|</samp>&rsquo;, which means &ldquo;or,&rdquo; and &lsquo;<samp>\`</samp>&rsquo;,
which matches &ldquo;beginning-of-buffer.&rdquo;  So the whole pattern means
that a formula begins at the beginning of the buffer, or on a newline
that occurs at the beginning of a line (i.e., a blank line), or at
one or two dollar signs.
</p>
<p>The default value of <code>calc-embedded-open-formula</code> looks just
like this example, with several more alternatives added on to
recognize various other common kinds of delimiters.
</p>
<p>By the way, the reason to use &lsquo;<samp>^\n</samp>&rsquo; rather than &lsquo;<samp>^$</samp>&rsquo;
or &lsquo;<samp>\n\n</samp>&rsquo;, which also would appear to match blank lines,
is that the former expression actually &ldquo;consumes&rdquo; only one
newline character as <em>part of</em> the delimiter, whereas the
latter expressions consume zero or two newlines, respectively.
The former choice gives the most natural behavior when Calc
must operate on a whole formula including its delimiters.
</p>
<p>See the Emacs manual for complete details on regular expressions.
But just for your convenience, here is a list of all characters
which must be quoted with backslash (like &lsquo;<samp>\$</samp>&rsquo;) to avoid
some special interpretation:  &lsquo;<samp>. * + ? [ ] ^ $ \</samp>&rsquo;.  (Note
the backslash in this list; for example, to match &lsquo;<samp>\[</samp>&rsquo; you
must use <code>&quot;\\\\\\[&quot;</code>.  An exercise for the reader is to
account for each of these six backslashes!)
</p>
<a name="index-calc_002dembedded_002dclose_002dformula"></a>
<p>The <code>calc-embedded-close-formula</code> variable holds a regular
expression for the closing delimiter of a formula.  A closing
regular expression to match the above example would be
<code>&quot;\\'\\|\n$\\|\\$\\$?&quot;</code>.  This is almost the same as the
other one, except it now uses &lsquo;<samp>\'</samp>&rsquo; (&ldquo;end-of-buffer&rdquo;) and
&lsquo;<samp>\n$</samp>&rsquo; (newline occurring at end of line, yet another way
of describing a blank line that is more appropriate for this
case).
</p>
<a name="index-calc_002dembedded_002dword_002dregexp"></a>
<p>The <code>calc-embedded-word-regexp</code> variable holds a regular expression
used to define an expression to look for (a &ldquo;word&rdquo;) when you type
<kbd>C-x * w</kbd> to enable Embedded mode.
</p>
<a name="index-calc_002dembedded_002dopen_002dplain"></a>
<p>The <code>calc-embedded-open-plain</code> variable is a string which
begins a &ldquo;plain&rdquo; formula written in front of the formatted
formula when <kbd>d p</kbd> mode is turned on.  Note that this is an
actual string, not a regular expression, because Calc must be able
to write this string into a buffer as well as to recognize it.
The default string is <code>&quot;%%% &quot;</code> (note the trailing space), but may
be different for certain major modes.
</p>
<a name="index-calc_002dembedded_002dclose_002dplain"></a>
<p>The <code>calc-embedded-close-plain</code> variable is a string which
ends a &ldquo;plain&rdquo; formula.  The default is <code>&quot; %%%\n&quot;</code>, but may be
different for different major modes.  Without
the trailing newline here, the first line of a Big mode formula
that followed might be shifted over with respect to the other lines.
</p>
<a name="index-calc_002dembedded_002dopen_002dnew_002dformula"></a>
<p>The <code>calc-embedded-open-new-formula</code> variable is a string
which is inserted at the front of a new formula when you type
<kbd>C-x * f</kbd>.  Its default value is <code>&quot;\n\n&quot;</code>.  If this
string begins with a newline character and the <kbd>C-x * f</kbd> is
typed at the beginning of a line, <kbd>C-x * f</kbd> will skip this
first newline to avoid introducing unnecessary blank lines in
the file.
</p>
<a name="index-calc_002dembedded_002dclose_002dnew_002dformula"></a>
<p>The <code>calc-embedded-close-new-formula</code> variable is the corresponding
string which is inserted at the end of a new formula.  Its default
value is also <code>&quot;\n\n&quot;</code>.  The final newline is omitted by
<kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;f</kbd><!-- /@w --> if typed at the end of a line.  (It follows that if
<kbd>C-x * f</kbd> is typed on a blank line, both a leading opening
newline and a trailing closing newline are omitted.)
</p>
<a name="index-calc_002dembedded_002dannounce_002dformula"></a>
<p>The <code>calc-embedded-announce-formula</code> variable is a regular
expression which is sure to be followed by an embedded formula.
The <kbd>C-x * a</kbd> command searches for this pattern as well as for
&lsquo;<samp>=&gt;</samp>&rsquo; and &lsquo;<samp>:=</samp>&rsquo; operators.  Note that <kbd>C-x * a</kbd> will
not activate just anything surrounded by formula delimiters; after
all, blank lines are considered formula delimiters by default!
But if your language includes a delimiter which can only occur
actually in front of a formula, you can take advantage of it here.
The default pattern is <code>&quot;%Embed\n\\(% .*\n\\)*&quot;</code>, but may be
different for different major modes.
This pattern will check for &lsquo;<samp>%Embed</samp>&rsquo; followed by any number of
lines beginning with &lsquo;<samp>%</samp>&rsquo; and a space.  This last is important to
make Calc consider mode annotations part of the pattern, so that the
formula&rsquo;s opening delimiter really is sure to follow the pattern.
</p>
<a name="index-calc_002dembedded_002dopen_002dmode"></a>
<p>The <code>calc-embedded-open-mode</code> variable is a string (not a
regular expression) which should precede a mode annotation.
Calc never scans for this string; Calc always looks for the
annotation itself.  But this is the string that is inserted before
the opening bracket when Calc adds an annotation on its own.
The default is <code>&quot;% &quot;</code>, but may be different for different major
modes.
</p>
<a name="index-calc_002dembedded_002dclose_002dmode"></a>
<p>The <code>calc-embedded-close-mode</code> variable is a string which
follows a mode annotation written by Calc.  Its default value
is simply a newline, <code>&quot;\n&quot;</code>, but may be different for different
major modes.  If you change this, it is a good idea still to end with a
newline so that mode annotations will appear on lines by themselves.
</p>
<hr>
<a name="Programming"></a>
<div class="header">
<p>
Next: <a href="#Copying" accesskey="n" rel="next">Copying</a>, Previous: <a href="#Embedded-Mode" accesskey="p" rel="prev">Embedded Mode</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-1"></a>
<h2 class="chapter">17 Programming</h2>

<p>There are several ways to &ldquo;program&rdquo; the Emacs Calculator, depending
on the nature of the problem you need to solve.
</p>
<ol>
<li> <em>Keyboard macros</em> allow you to record a sequence of keystrokes
and play them back at a later time.  This is just the standard Emacs
keyboard macro mechanism, dressed up with a few more features such
as loops and conditionals.

</li><li> <em>Algebraic definitions</em> allow you to use any formula to define a
new function.  This function can then be used in algebraic formulas or
as an interactive command.

</li><li> <em>Rewrite rules</em> are discussed in the section on algebra commands.
See <a href="#Rewrite-Rules">Rewrite Rules</a>.  If you put your rewrite rules in the variable
<code>EvalRules</code>, they will be applied automatically to all Calc
results in just the same way as an internal &ldquo;rule&rdquo; is applied to
evaluate &lsquo;<samp>sqrt(9)</samp>&rsquo; to 3 and so on.  See <a href="#Automatic-Rewrites">Automatic Rewrites</a>.

</li><li> <em>Lisp</em> is the programming language that Calc (and most of Emacs)
is written in.  If the above techniques aren&rsquo;t powerful enough, you
can write Lisp functions to do anything that built-in Calc commands
can do.  Lisp code is also somewhat faster than keyboard macros or
rewrite rules.
</li></ol>

<a name="index-z"></a>
<p>Programming features are available through the <kbd>z</kbd> and <kbd>Z</kbd>
prefix keys.  New commands that you define are two-key sequences
beginning with <kbd>z</kbd>.  Commands for managing these definitions
use the shift-<kbd>Z</kbd> prefix.  (The <kbd>Z T</kbd> (<code>calc-timing</code>)
command is described elsewhere; see <a href="#Troubleshooting-Commands">Troubleshooting Commands</a>.
The <kbd>Z C</kbd> (<code>calc-user-define-composition</code>) command is also
described elsewhere; see <a href="#User_002dDefined-Compositions">User-Defined Compositions</a>.)
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Creating-User-Keys" accesskey="1">Creating User Keys</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Keyboard-Macros" accesskey="2">Keyboard Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Invocation-Macros" accesskey="3">Invocation Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Algebraic-Definitions" accesskey="4">Algebraic Definitions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lisp-Definitions" accesskey="5">Lisp Definitions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Creating-User-Keys"></a>
<div class="header">
<p>
Next: <a href="#Keyboard-Macros" accesskey="n" rel="next">Keyboard Macros</a>, Previous: <a href="#Programming" accesskey="p" rel="prev">Programming</a>, Up: <a href="#Programming" accesskey="u" rel="up">Programming</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Creating-User-Keys-1"></a>
<h3 class="section">17.1 Creating User Keys</h3>

<p><a name="index-Z-D"></a>
<a name="index-calc_002duser_002ddefine"></a>
Any Calculator command may be bound to a key using the <kbd>Z D</kbd>
(<code>calc-user-define</code>) command.  Actually, it is bound to a two-key
sequence beginning with the lower-case <kbd>z</kbd> prefix.
</p>
<p>The <kbd>Z D</kbd> command first prompts for the key to define.  For example,
press <kbd>Z D a</kbd> to define the new key sequence <kbd>z a</kbd>.  You are then
prompted for the name of the Calculator command that this key should
run.  For example, the <code>calc-sincos</code> command is not normally
available on a key.  Typing <kbd>Z D s sincos <span class="key">RET</span></kbd> programs the
<kbd>z s</kbd> key sequence to run <code>calc-sincos</code>.  This definition will remain
in effect for the rest of this Emacs session, or until you redefine
<kbd>z s</kbd> to be something else.
</p>
<p>You can actually bind any Emacs command to a <kbd>z</kbd> key sequence by
backspacing over the &lsquo;<samp>calc-</samp>&rsquo; when you are prompted for the command name.
</p>
<p>As with any other prefix key, you can type <kbd>z ?</kbd> to see a list of
all the two-key sequences you have defined that start with <kbd>z</kbd>.
Initially, no <kbd>z</kbd> sequences (except <kbd>z ?</kbd> itself) are defined.
</p>
<p>User keys are typically letters, but may in fact be any key.
(<tt class="key">META</tt>-keys are not permitted, nor are a terminal&rsquo;s special
function keys which generate multi-character sequences when pressed.)
You can define different commands on the shifted and unshifted versions
of a letter if you wish.
</p>
<a name="index-Z-U"></a>
<a name="index-calc_002duser_002dundefine"></a>
<p>The <kbd>Z U</kbd> (<code>calc-user-undefine</code>) command unbinds a user key.
For example, the key sequence <kbd>Z U s</kbd> will undefine the <code>sincos</code>
key we defined above.
</p>
<a name="index-Z-P"></a>
<a name="index-calc_002duser_002ddefine_002dpermanent"></a>
<a name="index-Storing-user-definitions"></a>
<a name="index-Permanent-user-definitions"></a>
<a name="index-Calc-init-file_002c-user_002ddefined-commands"></a>
<p>The <kbd>Z P</kbd> (<code>calc-user-define-permanent</code>) command makes a key
binding permanent so that it will remain in effect even in future Emacs
sessions.  (It does this by adding a suitable bit of Lisp code into
your Calc init file; that is, the file given by the variable
<code>calc-settings-file</code>, typically <samp>~/.emacs.d/calc.el</samp>.)  For example,
<kbd>Z P s</kbd> would register our <code>sincos</code> command permanently.  If
you later wish to unregister this command you must edit your Calc init
file by hand.  (See <a href="#General-Mode-Commands">General Mode Commands</a>, for a way to tell Calc to
use a different file for the Calc init file.)
</p>
<p>The <kbd>Z P</kbd> command also saves the user definition, if any, for the
command bound to the key.  After <kbd>Z F</kbd> and <kbd>Z C</kbd>, a given user
key could invoke a command, which in turn calls an algebraic function,
which might have one or more special display formats.  A single <kbd>Z P</kbd>
command will save all of these definitions.
To save an algebraic function, type <kbd>'</kbd> (the apostrophe)
when prompted for a key, and type the function name.  To save a command
without its key binding, type <kbd>M-x</kbd> and enter a function name.  (The
&lsquo;<samp>calc-</samp>&rsquo; prefix will automatically be inserted for you.)
(If the command you give implies a function, the function will be saved,
and if the function has any display formats, those will be saved, but
not the other way around:  Saving a function will not save any commands
or key bindings associated with the function.)
</p>
<a name="index-Z-E"></a>
<a name="index-calc_002duser_002ddefine_002dedit"></a>
<a name="index-Editing-user-definitions"></a>
<p>The <kbd>Z E</kbd> (<code>calc-user-define-edit</code>) command edits the definition
of a user key.  This works for keys that have been defined by either
keyboard macros or formulas; further details are contained in the relevant
following sections.
</p>
<hr>
<a name="Keyboard-Macros"></a>
<div class="header">
<p>
Next: <a href="#Invocation-Macros" accesskey="n" rel="next">Invocation Macros</a>, Previous: <a href="#Creating-User-Keys" accesskey="p" rel="prev">Creating User Keys</a>, Up: <a href="#Programming" accesskey="u" rel="up">Programming</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-with-Keyboard-Macros"></a>
<h3 class="section">17.2 Programming with Keyboard Macros</h3>

<p><a name="index-X"></a>
<a name="index-Programming-with-keyboard-macros"></a>
<a name="index-Keyboard-macros"></a>
The easiest way to &ldquo;program&rdquo; the Emacs Calculator is to use standard
keyboard macros.  Press <kbd><span class="nolinebreak">C-x</span>&nbsp;(</kbd><!-- /@w --> to begin recording a macro.  From
this point on, keystrokes you type will be saved away as well as
performing their usual functions.  Press <kbd>C-x )</kbd> to end recording.
Press shift-<kbd>X</kbd> (or the standard Emacs key sequence <kbd>C-x e</kbd>) to
execute your keyboard macro by replaying the recorded keystrokes.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Keyboard-Macros">Keyboard Macros</a> in <cite>the Emacs Manual</cite>, for further
information.
</p>
<p>When you use <kbd>X</kbd> to invoke a keyboard macro, the entire macro is
treated as a single command by the undo and trail features.  The stack
display buffer is not updated during macro execution, but is instead
fixed up once the macro completes.  Thus, commands defined with keyboard
macros are convenient and efficient.  The <kbd>C-x e</kbd> command, on the
other hand, invokes the keyboard macro with no special treatment: Each
command in the macro will record its own undo information and trail entry,
and update the stack buffer accordingly.  If your macro uses features
outside of Calc&rsquo;s control to operate on the contents of the Calc stack
buffer, or if it includes Undo, Redo, or last-arguments commands, you
must use <kbd>C-x e</kbd> to make sure the buffer and undo list are up-to-date
at all times.  You could also consider using <kbd>K</kbd> (<code>calc-keep-args</code>)
instead of <kbd>M-<span class="key">RET</span></kbd> (<code>calc-last-args</code>).
</p>
<p>Calc extends the standard Emacs keyboard macros in several ways.
Keyboard macros can be used to create user-defined commands.  Keyboard
macros can include conditional and iteration structures, somewhat
analogous to those provided by a traditional programmable calculator.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Naming-Keyboard-Macros" accesskey="1">Naming Keyboard Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditionals-in-Macros" accesskey="2">Conditionals in Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Loops-in-Macros" accesskey="3">Loops in Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Local-Values-in-Macros" accesskey="4">Local Values in Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Queries-in-Macros" accesskey="5">Queries in Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Naming-Keyboard-Macros"></a>
<div class="header">
<p>
Next: <a href="#Conditionals-in-Macros" accesskey="n" rel="next">Conditionals in Macros</a>, Previous: <a href="#Keyboard-Macros" accesskey="p" rel="prev">Keyboard Macros</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Naming-Keyboard-Macros-1"></a>
<h4 class="subsection">17.2.1 Naming Keyboard Macros</h4>

<p><a name="index-Z-K"></a>
<a name="index-calc_002duser_002ddefine_002dkbd_002dmacro"></a>
Once you have defined a keyboard macro, you can bind it to a <kbd>z</kbd>
key sequence with the <kbd>Z K</kbd> (<code>calc-user-define-kbd-macro</code>) command.
This command prompts first for a key, then for a command name.  For
example, if you type <kbd>C-x ( n <span class="key">TAB</span> n <span class="key">TAB</span> C-x )</kbd> you will
define a keyboard macro which negates the top two numbers on the stack
(<tt class="key">TAB</tt> swaps the top two stack elements).  Now you can type
<kbd>Z K n <span class="key">RET</span></kbd> to define this keyboard macro onto the <kbd>z n</kbd> key
sequence.  The default command name (if you answer the second prompt with
just the <tt class="key">RET</tt> key as in this example) will be something like
&lsquo;<samp>calc-User-n</samp>&rsquo;.  The keyboard macro will now be available as both
<kbd>z n</kbd> and <kbd>M-x calc-User-n</kbd>.  You can backspace and enter a more
descriptive command name if you wish.
</p>
<p>Macros defined by <kbd>Z K</kbd> act like single commands; they are executed
in the same way as by the <kbd>X</kbd> key.  If you wish to define the macro
as a standard no-frills Emacs macro (to be executed as if by <kbd>C-x e</kbd>),
give a negative prefix argument to <kbd>Z K</kbd>.
</p>
<p>Once you have bound your keyboard macro to a key, you can use
<kbd>Z P</kbd> to register it permanently with Emacs.  See <a href="#Creating-User-Keys">Creating User Keys</a>.
</p>
<a name="index-Keyboard-macros_002c-editing"></a>
<p>The <kbd>Z E</kbd> (<code>calc-user-define-edit</code>) command on a key that has
been defined by a keyboard macro tries to use the <code>edmacro</code> package
edit the macro.  Type <kbd>C-c C-c</kbd> to finish editing and update
the definition stored on the key, or, to cancel the edit, kill the
buffer with <kbd>C-x k</kbd>.
The special characters <code>RET</code>, <code>LFD</code>, <code>TAB</code>, <code>SPC</code>,
<code>DEL</code>, and <code>NUL</code> must be entered as these three character
sequences, written in all uppercase, as must the prefixes <code>C-</code> and
<code>M-</code>.  Spaces and line breaks are ignored.  Other characters are
copied verbatim into the keyboard macro.  Basically, the notation is the
same as is used in all of this manual&rsquo;s examples, except that the manual
takes some liberties with spaces: When we say <kbd>' [1 2 3] <span class="key">RET</span></kbd>,
we take it for granted that it is clear we really mean
<kbd>' [1 <span class="key">SPC</span> 2 <span class="key">SPC</span> 3] <span class="key">RET</span></kbd>.
</p>
<a name="index-C_002dx-_002a-m"></a>
<a name="index-read_002dkbd_002dmacro"></a>
<p>The <kbd>C-x * m</kbd> (<code>read-kbd-macro</code>) command reads an Emacs &ldquo;region&rdquo;
of spelled-out keystrokes and defines it as the current keyboard macro.
It is a convenient way to define a keyboard macro that has been stored
in a file, or to define a macro without executing it at the same time.
</p>
<hr>
<a name="Conditionals-in-Macros"></a>
<div class="header">
<p>
Next: <a href="#Loops-in-Macros" accesskey="n" rel="next">Loops in Macros</a>, Previous: <a href="#Naming-Keyboard-Macros" accesskey="p" rel="prev">Naming Keyboard Macros</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditionals-in-Keyboard-Macros"></a>
<h4 class="subsection">17.2.2 Conditionals in Keyboard Macros</h4>

<p><a name="index-Z-_005b"></a>
<a name="index-Z-_005d"></a>
<a name="index-calc_002dkbd_002dif"></a>
<a name="index-calc_002dkbd_002delse"></a>
<a name="index-calc_002dkbd_002delse_002dif"></a>
<a name="index-calc_002dkbd_002dend_002dif"></a>
<a name="index-Conditional-structures"></a>
The <kbd>Z [</kbd> (<code>calc-kbd-if</code>) and <kbd>Z ]</kbd> (<code>calc-kbd-end-if</code>)
commands allow you to put simple tests in a keyboard macro.  When Calc
sees the <kbd>Z [</kbd>, it pops an object from the stack and, if the object is
a non-zero value, continues executing keystrokes.  But if the object is
zero, or if it is not provably nonzero, Calc skips ahead to the matching
<kbd>Z ]</kbd> keystroke.  See <a href="#Logical-Operations">Logical Operations</a>, for a set of commands for
performing tests which conveniently produce 1 for true and 0 for false.
</p>
<p>For example, <kbd><span class="key">RET</span> 0 a &lt; Z [ n Z ]</kbd> implements an absolute-value
function in the form of a keyboard macro.  This macro duplicates the
number on the top of the stack, pushes zero and compares using <kbd>a &lt;</kbd>
(<code>calc-less-than</code>), then, if the number was less than zero,
executes <kbd>n</kbd> (<code>calc-change-sign</code>).  Otherwise, the change-sign
command is skipped.
</p>
<p>To program this macro, type <kbd>C-x (</kbd>, type the above sequence of
keystrokes, then type <kbd>C-x )</kbd>.  Note that the keystrokes will be
executed while you are making the definition as well as when you later
re-execute the macro by typing <kbd>X</kbd>.  Thus you should make sure a
suitable number is on the stack before defining the macro so that you
don&rsquo;t get a stack-underflow error during the definition process.
</p>
<p>Conditionals can be nested arbitrarily.  However, there should be exactly
one <kbd>Z ]</kbd> for each <kbd>Z [</kbd> in a keyboard macro.
</p>
<a name="index-Z-_003a"></a>
<p>The <kbd>Z :</kbd> (<code>calc-kbd-else</code>) command allows you to choose between
two keystroke sequences.  The general format is <kbd><var>cond</var> Z [
<var>then-part</var> Z : <var>else-part</var> Z ]</kbd>.  If <var>cond</var> is true
(i.e., if the top of stack contains a non-zero number after <var>cond</var>
has been executed), the <var>then-part</var> will be executed and the
<var>else-part</var> will be skipped.  Otherwise, the <var>then-part</var> will
be skipped and the <var>else-part</var> will be executed.
</p>
<a name="index-Z-_007c"></a>
<p>The <kbd>Z |</kbd> (<code>calc-kbd-else-if</code>) command allows you to choose
between any number of alternatives.  For example,
<kbd><var>cond1</var> Z [ <var>part1</var> Z : <var>cond2</var> Z | <var>part2</var> Z :
<var>part3</var> Z ]</kbd> will execute <var>part1</var> if <var>cond1</var> is true,
otherwise it will execute <var>part2</var> if <var>cond2</var> is true, otherwise
it will execute <var>part3</var>.
</p>
<p>More precisely, <kbd>Z [</kbd> pops a number and conditionally skips to the
next matching <kbd>Z :</kbd> or <kbd>Z ]</kbd> key.  <kbd>Z&nbsp;]</kbd><!-- /@w --> has no effect when
actually executed.  <kbd>Z :</kbd> skips to the next matching <kbd>Z ]</kbd>.
<kbd>Z |</kbd> pops a number and conditionally skips to the next matching
<kbd>Z :</kbd> or <kbd>Z ]</kbd>; thus, <kbd>Z [</kbd> and <kbd>Z |</kbd> are functionally
equivalent except that <kbd>Z [</kbd> participates in nesting but <kbd>Z |</kbd>
does not.
</p>
<p>Calc&rsquo;s conditional and looping constructs work by scanning the
keyboard macro for occurrences of character sequences like &lsquo;<samp>Z:</samp>&rsquo;
and &lsquo;<samp>Z]</samp>&rsquo;.  One side-effect of this is that if you use these
constructs you must be careful that these character pairs do not
occur by accident in other parts of the macros.  Since Calc rarely
uses shift-<kbd>Z</kbd> for any purpose except as a prefix character, this
is not likely to be a problem.  Another side-effect is that it will
not work to define your own custom key bindings for these commands.
Only the standard shift-<kbd>Z</kbd> bindings will work correctly.
</p>
<a name="index-Z-C_002dg"></a>
<p>If Calc gets stuck while skipping characters during the definition of a
macro, type <kbd>Z C-g</kbd> to cancel the definition.  (Typing plain <kbd>C-g</kbd>
actually adds a <kbd>C-g</kbd> keystroke to the macro.)
</p>
<hr>
<a name="Loops-in-Macros"></a>
<div class="header">
<p>
Next: <a href="#Local-Values-in-Macros" accesskey="n" rel="next">Local Values in Macros</a>, Previous: <a href="#Conditionals-in-Macros" accesskey="p" rel="prev">Conditionals in Macros</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Loops-in-Keyboard-Macros"></a>
<h4 class="subsection">17.2.3 Loops in Keyboard Macros</h4>

<p><a name="index-Z-_003c"></a>
<a name="index-Z-_003e"></a>
<a name="index-calc_002dkbd_002drepeat"></a>
<a name="index-calc_002dkbd_002dend_002drepeat"></a>
<a name="index-Looping-structures"></a>
<a name="index-Iterative-structures"></a>
The <kbd>Z &lt;</kbd> (<code>calc-kbd-repeat</code>) and <kbd>Z &gt;</kbd>
(<code>calc-kbd-end-repeat</code>) commands pop a number from the stack,
which must be an integer, then repeat the keystrokes between the brackets
the specified number of times.  If the integer is zero or negative, the
body is skipped altogether.  For example, <kbd>1 <span class="key">TAB</span> Z &lt; 2 * Z &gt;</kbd>
computes two to a nonnegative integer power.  First, we push 1 on the
stack and then swap the integer argument back to the top.  The <kbd>Z &lt;</kbd>
pops that argument leaving the 1 back on top of the stack.  Then, we
repeat a multiply-by-two step however many times.
</p>
<p>Once again, the keyboard macro is executed as it is being entered.
In this case it is especially important to set up reasonable initial
conditions before making the definition:  Suppose the integer 1000 just
happened to be sitting on the stack before we typed the above definition!
Another approach is to enter a harmless dummy definition for the macro,
then go back and edit in the real one with a <kbd>Z E</kbd> command.  Yet
another approach is to type the macro as written-out keystroke names
in a buffer, then use <kbd>C-x * m</kbd> (<code>read-kbd-macro</code>) to read the
macro.
</p>
<a name="index-Z-_002f"></a>
<a name="index-calc_002dbreak"></a>
<p>The <kbd>Z /</kbd> (<code>calc-kbd-break</code>) command allows you to break out
of a keyboard macro loop prematurely.  It pops an object from the stack;
if that object is true (a non-zero number), control jumps out of the
innermost enclosing <kbd>Z &lt;</kbd> &hellip; <kbd>Z &gt;</kbd> loop and continues
after the <kbd>Z &gt;</kbd>.  If the object is false, the <kbd>Z /</kbd> has no
effect.  Thus <kbd><var>cond</var> Z /</kbd> is similar to &lsquo;<samp>if (<var>cond</var>) break;</samp>&rsquo;
in the C language.
</p>
<a name="index-Z-_0028"></a>
<a name="index-Z-_0029"></a>
<a name="index-calc_002dkbd_002dfor"></a>
<a name="index-calc_002dkbd_002dend_002dfor"></a>
<p>The <kbd>Z (</kbd> (<code>calc-kbd-for</code>) and <kbd>Z )</kbd> (<code>calc-kbd-end-for</code>)
commands are similar to <kbd>Z &lt;</kbd> and <kbd>Z &gt;</kbd>, except that they make the
value of the counter available inside the loop.  The general layout is
<kbd><var>init</var> <var>final</var> Z ( <var>body</var> <var>step</var> Z )</kbd>.  The <kbd>Z (</kbd>
command pops initial and final values from the stack.  It then creates
a temporary internal counter and initializes it with the value <var>init</var>.
The <kbd>Z (</kbd> command then repeatedly pushes the counter value onto the
stack and executes <var>body</var> and <var>step</var>, adding <var>step</var> to the
counter each time until the loop finishes.
</p>
<a name="index-Summations-_0028by-keyboard-macros_0029"></a>
<p>By default, the loop finishes when the counter becomes greater than (or
less than) <var>final</var>, assuming <var>initial</var> is less than (greater
than) <var>final</var>.  If <var>initial</var> is equal to <var>final</var>, the body
executes exactly once.  The body of the loop always executes at least
once.  For example, <kbd>0 1 10 Z ( 2 ^ + 1 Z )</kbd> computes the sum of the
squares of the integers from 1 to 10, in steps of 1.
</p>
<p>If you give a numeric prefix argument of 1 to <kbd>Z (</kbd>, the loop is
forced to use upward-counting conventions.  In this case, if <var>initial</var>
is greater than <var>final</var> the body will not be executed at all.
Note that <var>step</var> may still be negative in this loop; the prefix
argument merely constrains the loop-finished test.  Likewise, a prefix
argument of <i>-1</i> forces downward-counting conventions.
</p>
<a name="index-Z-_007b"></a>
<a name="index-Z-_007d"></a>
<a name="index-calc_002dkbd_002dloop"></a>
<a name="index-calc_002dkbd_002dend_002dloop"></a>
<p>The <kbd>Z {</kbd> (<code>calc-kbd-loop</code>) and <kbd>Z }</kbd>
(<code>calc-kbd-end-loop</code>) commands are similar to <kbd>Z &lt;</kbd> and
<kbd>Z &gt;</kbd>, except that they do not pop a count from the stack&mdash;they
effectively create an infinite loop.  Every <kbd>Z {</kbd> &hellip; <kbd>Z }</kbd>
loop ought to include at least one <kbd>Z /</kbd> to make sure the loop
doesn&rsquo;t run forever.  (If any error message occurs which causes Emacs
to beep, the keyboard macro will also be halted; this is a standard
feature of Emacs.  You can also generally press <kbd>C-g</kbd> to halt a
running keyboard macro, although not all versions of Unix support
this feature.)
</p>
<p>The conditional and looping constructs are not actually tied to
keyboard macros, but they are most often used in that context.
For example, the keystrokes <kbd>10 Z &lt; 23 <span class="key">RET</span> Z &gt;</kbd> push
ten copies of 23 onto the stack.  This can be typed &ldquo;live&rdquo; just
as easily as in a macro definition.
</p>
<p>See <a href="#Conditionals-in-Macros">Conditionals in Macros</a>, for some additional notes about
conditional and looping commands.
</p>
<hr>
<a name="Local-Values-in-Macros"></a>
<div class="header">
<p>
Next: <a href="#Queries-in-Macros" accesskey="n" rel="next">Queries in Macros</a>, Previous: <a href="#Loops-in-Macros" accesskey="p" rel="prev">Loops in Macros</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Local-Values-in-Macros-1"></a>
<h4 class="subsection">17.2.4 Local Values in Macros</h4>

<p><a name="index-Local-variables"></a>
<a name="index-Restoring-saved-modes"></a>
Keyboard macros sometimes want to operate under known conditions
without affecting surrounding conditions.  For example, a keyboard
macro may wish to turn on Fraction mode, or set a particular
precision, independent of the user&rsquo;s normal setting for those
modes.
</p>
<a name="index-Z-_0060"></a>
<a name="index-Z-_0027"></a>
<a name="index-calc_002dkbd_002dpush"></a>
<a name="index-calc_002dkbd_002dpop"></a>
<p>Macros also sometimes need to use local variables.  Assignments to
local variables inside the macro should not affect any variables
outside the macro.  The <kbd>Z `</kbd> (<code>calc-kbd-push</code>) and <kbd>Z '</kbd>
(<code>calc-kbd-pop</code>) commands give you both of these capabilities.
</p>
<p>When you type <kbd>Z `</kbd> (with a grave accent),
the values of various mode settings are saved away.  The ten &ldquo;quick&rdquo;
variables <code>q0</code> through <code>q9</code> are also saved.  When
you type <kbd>Z&nbsp;'</kbd><!-- /@w --> (with an apostrophe), these values are restored.
Pairs of <kbd>Z `</kbd> and <kbd>Z '</kbd> commands may be nested.
</p>
<p>If a keyboard macro halts due to an error in between a <kbd>Z `</kbd> and
a <kbd>Z '</kbd>, the saved values will be restored correctly even though
the macro never reaches the <kbd>Z '</kbd> command.  Thus you can use
<kbd>Z `</kbd> and <kbd>Z '</kbd> without having to worry about what happens
in exceptional conditions.
</p>
<p>If you type <kbd>Z `</kbd> &ldquo;live&rdquo; (not in a keyboard macro), Calc puts
you into a &ldquo;recursive edit.&rdquo;  You can tell you are in a recursive
edit because there will be extra square brackets in the mode line,
as in &lsquo;<samp>[(Calculator)]</samp>&rsquo;.  These brackets will go away when you
type the matching <kbd>Z '</kbd> command.  The modes and quick variables
will be saved and restored in just the same way as if actual keyboard
macros were involved.
</p>
<p>The modes saved by <kbd>Z `</kbd> and <kbd>Z '</kbd> are the current precision
and binary word size, the angular mode (Deg, Rad, or HMS), the
simplification mode, Algebraic mode, Symbolic mode, Infinite mode,
Matrix or Scalar mode, Fraction mode, and the current complex mode
(Polar or Rectangular).  The ten &ldquo;quick&rdquo; variables&rsquo; values (or lack
thereof) are also saved.
</p>
<p>Most mode-setting commands act as toggles, but with a numeric prefix
they force the mode either on (positive prefix) or off (negative
or zero prefix).  Since you don&rsquo;t know what the environment might
be when you invoke your macro, it&rsquo;s best to use prefix arguments
for all mode-setting commands inside the macro.
</p>
<p>In fact, <kbd>C-u Z `</kbd> is like <kbd>Z `</kbd> except that it sets the modes
listed above to their default values.  As usual, the matching <kbd>Z '</kbd>
will restore the modes to their settings from before the <kbd>C-u Z `</kbd>.
Also, <kbd>Z&nbsp;`</kbd><!-- /@w --> with a negative prefix argument resets the algebraic mode
to its default (off) but leaves the other modes the same as they were
outside the construct.
</p>
<p>The contents of the stack and trail, values of non-quick variables, and
other settings such as the language mode and the various display modes,
are <em>not</em> affected by <kbd>Z `</kbd> and <kbd>Z '</kbd>.
</p>
<hr>
<a name="Queries-in-Macros"></a>
<div class="header">
<p>
Previous: <a href="#Local-Values-in-Macros" accesskey="p" rel="prev">Local Values in Macros</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Queries-in-Keyboard-Macros"></a>
<h4 class="subsection">17.2.5 Queries in Keyboard Macros</h4>


<p><a name="index-Z-_0023"></a>
<a name="index-calc_002dkbd_002dquery"></a>
The <kbd>Z #</kbd> (<code>calc-kbd-query</code>) command prompts for an algebraic
entry which takes its input from the keyboard, even during macro
execution.  All the normal conventions of algebraic input, including the
use of <kbd>$</kbd> characters, are supported.  The prompt message itself is
taken from the top of the stack, and so must be entered (as a string)
before the <kbd>Z #</kbd> command.  (Recall, as a string it can be entered by
pressing the <kbd>&quot;</kbd> key and will appear as a vector when it is put on
the stack.  The prompt message is only put on the stack to provide a
prompt for the <kbd>Z #</kbd> command; it will not play any role in any
subsequent calculations.)  This command allows your keyboard macros to
accept numbers or formulas as interactive input.
</p>
<p>As an example,
<kbd>2 <span class="key">RET</span> &quot;Power: &quot; <span class="key">RET</span> Z # 3 <span class="key">RET</span> ^</kbd> will prompt for
input with &ldquo;Power: &rdquo; in the minibuffer, then return 2 to the provided
power.  (The response to the prompt that&rsquo;s given, 3 in this example,
will not be part of the macro.)
</p>
<p>See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Keyboard-Macro-Query">Keyboard Macro Query</a> in <cite>the Emacs Manual</cite>, for a description of
<kbd>C-x q</kbd> (<code>kbd-macro-query</code>), the standard Emacs way to accept
keyboard input during a keyboard macro.  In particular, you can use
<kbd>C-x q</kbd> to enter a recursive edit, which allows the user to perform
any Calculator operations interactively before pressing <kbd>C-M-c</kbd> to
return control to the keyboard macro.
</p>
<hr>
<a name="Invocation-Macros"></a>
<div class="header">
<p>
Next: <a href="#Algebraic-Definitions" accesskey="n" rel="next">Algebraic Definitions</a>, Previous: <a href="#Keyboard-Macros" accesskey="p" rel="prev">Keyboard Macros</a>, Up: <a href="#Programming" accesskey="u" rel="up">Programming</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Invocation-Macros-1"></a>
<h3 class="section">17.3 Invocation Macros</h3>

<a name="index-C_002dx-_002a-z"></a>
<a name="index-Z-I"></a>
<a name="index-calc_002duser_002dinvocation"></a>
<a name="index-calc_002duser_002ddefine_002dinvocation"></a>
<p>Calc provides one special keyboard macro, called up by <kbd>C-x * z</kbd>
(<code>calc-user-invocation</code>), that is intended to allow you to define
your own special way of starting Calc.  To define this &ldquo;invocation
macro,&rdquo; create the macro in the usual way with <kbd>C-x (</kbd> and
<kbd>C-x )</kbd>, then type <kbd>Z I</kbd> (<code>calc-user-define-invocation</code>).
There is only one invocation macro, so you don&rsquo;t need to type any
additional letters after <kbd>Z I</kbd>.  From now on, you can type
<kbd>C-x * z</kbd> at any time to execute your invocation macro.
</p>
<p>For example, suppose you find yourself often grabbing rectangles of
numbers into Calc and multiplying their columns.  You can do this
by typing <kbd>C-x * r</kbd> to grab, and <kbd>V R : *</kbd> to multiply columns.
To make this into an invocation macro, just type <kbd>C-x ( C-x * r
V R : * C-x )</kbd>, then <kbd>Z I</kbd>.  Then, to multiply a rectangle of data,
just mark the data in its buffer in the usual way and type <kbd>C-x * z</kbd>.
</p>
<p>Invocation macros are treated like regular Emacs keyboard macros;
all the special features described above for <kbd>Z K</kbd>-style macros
do not apply.  <kbd>C-x * z</kbd> is just like <kbd>C-x e</kbd>, except that it
uses the macro that was last stored by <kbd>Z I</kbd>.  (In fact, the
macro does not even have to have anything to do with Calc!)
</p>
<p>The <kbd>m m</kbd> command saves the last invocation macro defined by
<kbd>Z I</kbd> along with all the other Calc mode settings.
See <a href="#General-Mode-Commands">General Mode Commands</a>.
</p>
<hr>
<a name="Algebraic-Definitions"></a>
<div class="header">
<p>
Next: <a href="#Lisp-Definitions" accesskey="n" rel="next">Lisp Definitions</a>, Previous: <a href="#Invocation-Macros" accesskey="p" rel="prev">Invocation Macros</a>, Up: <a href="#Programming" accesskey="u" rel="up">Programming</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-with-Formulas"></a>
<h3 class="section">17.4 Programming with Formulas</h3>

<p><a name="index-Z-F"></a>
<a name="index-calc_002duser_002ddefine_002dformula"></a>
<a name="index-Programming-with-algebraic-formulas"></a>
Another way to create a new Calculator command uses algebraic formulas.
The <kbd>Z F</kbd> (<code>calc-user-define-formula</code>) command stores the
formula at the top of the stack as the definition for a key.  This
command prompts for five things: The key, the command name, the function
name, the argument list, and the behavior of the command when given
non-numeric arguments.
</p>
<p>For example, suppose we type <kbd>' a+2b <span class="key">RET</span></kbd> to push the formula
&lsquo;<samp>a + 2*b</samp>&rsquo; onto the stack.  We now type <kbd>Z F m</kbd> to define this
formula on the <kbd>z m</kbd> key sequence.  The next prompt is for a command
name, beginning with &lsquo;<samp>calc-</samp>&rsquo;, which should be the long (<kbd>M-x</kbd>) form
for the new command.  If you simply press <tt class="key">RET</tt>, a default name like
<code>calc-User-m</code> will be constructed.  In our example, suppose we enter
<kbd>spam <span class="key">RET</span></kbd> to define the new command as <code>calc-spam</code>.
</p>
<p>If you want to give the formula a long-style name only, you can press
<tt class="key">SPC</tt> or <tt class="key">RET</tt> when asked which single key to use.  For example
<kbd>Z F <span class="key">RET</span> spam <span class="key">RET</span></kbd> defines the new command as
<kbd>M-x calc-spam</kbd>, with no keyboard equivalent.
</p>
<p>The third prompt is for an algebraic function name.  The default is to
use the same name as the command name but without the &lsquo;<samp>calc-</samp>&rsquo;
prefix.  (If this is of the form &lsquo;<samp>User-m</samp>&rsquo;, the hyphen is removed so
it won&rsquo;t be taken for a minus sign in algebraic formulas.)
This is the name you will use if you want to enter your
new function in an algebraic formula.  Suppose we enter <kbd>yow <span class="key">RET</span></kbd>.
Then the new function can be invoked by pushing two numbers on the
stack and typing <kbd>z m</kbd> or <kbd>x spam</kbd>, or by entering the algebraic
formula &lsquo;<samp>yow(x,y)</samp>&rsquo;.
</p>
<p>The fourth prompt is for the function&rsquo;s argument list.  This is used to
associate values on the stack with the variables that appear in the formula.
The default is a list of all variables which appear in the formula, sorted
into alphabetical order.  In our case, the default would be &lsquo;<samp>(a b)</samp>&rsquo;.
This means that, when the user types <kbd>z m</kbd>, the Calculator will remove
two numbers from the stack, substitute these numbers for &lsquo;<samp>a</samp>&rsquo; and
&lsquo;<samp>b</samp>&rsquo; (respectively) in the formula, then simplify the formula and
push the result on the stack.  In other words, <kbd>10 <span class="key">RET</span> 100 z m</kbd>
would replace the 10 and 100 on the stack with the number 210, which is
&lsquo;<samp>a + 2 b</samp>&rsquo; with &lsquo;<samp>a=10</samp>&rsquo; and &lsquo;<samp>b=100</samp>&rsquo;.  Likewise, the formula
&lsquo;<samp>yow(10, 100)</samp>&rsquo; will be evaluated by substituting &lsquo;<samp>a=10</samp>&rsquo; and
&lsquo;<samp>b=100</samp>&rsquo; in the definition.
</p>
<p>You can rearrange the order of the names before pressing <tt class="key">RET</tt> to
control which stack positions go to which variables in the formula.  If
you remove a variable from the argument list, that variable will be left
in symbolic form by the command.  Thus using an argument list of &lsquo;<samp>(b)</samp>&rsquo;
for our function would cause <kbd>10 z m</kbd> to replace the 10 on the stack
with the formula &lsquo;<samp>a + 20</samp>&rsquo;.  If we had used an argument list of
&lsquo;<samp>(b a)</samp>&rsquo;, the result with inputs 10 and 100 would have been 120.
</p>
<p>You can also put a nameless function on the stack instead of just a
formula, as in &lsquo;<samp>&lt;a, b : a + 2 b&gt;</samp>&rsquo;.  See <a href="#Specifying-Operators">Specifying Operators</a>.
In this example, the command will be defined by the formula &lsquo;<samp>a + 2 b</samp>&rsquo;
using the argument list &lsquo;<samp>(a b)</samp>&rsquo;.
</p>
<p>The final prompt is a y-or-n question concerning what to do if symbolic
arguments are given to your function.  If you answer <kbd>y</kbd>, then
executing <kbd>z m</kbd> (using the original argument list &lsquo;<samp>(a b)</samp>&rsquo;) with
arguments &lsquo;<samp>10</samp>&rsquo; and &lsquo;<samp>x</samp>&rsquo; will leave the function in symbolic
form, i.e., &lsquo;<samp>yow(10,x)</samp>&rsquo;.  On the other hand, if you answer <kbd>n</kbd>,
then the formula will always be expanded, even for non-constant
arguments: &lsquo;<samp>10 + 2 x</samp>&rsquo;.  If you never plan to feed algebraic
formulas to your new function, it doesn&rsquo;t matter how you answer this
question.
</p>
<p>If you answered <kbd>y</kbd> to this question you can still cause a function
call to be expanded by typing <kbd>a &quot;</kbd> (<code>calc-expand-formula</code>).
Also, Calc will expand the function if necessary when you take a
derivative or integral or solve an equation involving the function.
</p>
<a name="index-Z-G"></a>
<a name="index-calc_002dget_002duser_002ddefn"></a>
<p>Once you have defined a formula on a key, you can retrieve this formula
with the <kbd>Z G</kbd> (<code>calc-user-define-get-defn</code>) command.  Press a
key, and this command pushes the formula that was used to define that
key onto the stack.  Actually, it pushes a nameless function that
specifies both the argument list and the defining formula.  You will get
an error message if the key is undefined, or if the key was not defined
by a <kbd>Z F</kbd> command.
</p>
<p>The <kbd>Z E</kbd> (<code>calc-user-define-edit</code>) command on a key that has
been defined by a formula uses a variant of the <code>calc-edit</code> command
to edit the defining formula.  Press <kbd>C-c C-c</kbd> to finish editing and
store the new formula back in the definition, or kill the buffer with
<kbd>C-x k</kbd> to
cancel the edit.  (The argument list and other properties of the
definition are unchanged; to adjust the argument list, you can use
<kbd>Z G</kbd> to grab the function onto the stack, edit with <kbd>`</kbd>, and
then re-execute the <kbd>Z F</kbd> command.)
</p>
<p>As usual, the <kbd>Z P</kbd> command records your definition permanently.
In this case it will permanently record all three of the relevant
definitions: the key, the command, and the function.
</p>
<p>You may find it useful to turn off the default simplifications with
<kbd>m O</kbd> (<code>calc-no-simplify-mode</code>) when entering a formula to be
used as a function definition.  For example, the formula &lsquo;<samp>deriv(a^2,v)</samp>&rsquo;
which might be used to define a new function &lsquo;<samp>dsqr(a,v)</samp>&rsquo; will be
&ldquo;simplified&rdquo; to 0 immediately upon entry since <code>deriv</code> considers
&lsquo;<samp>a</samp>&rsquo; to be constant with respect to &lsquo;<samp>v</samp>&rsquo;.  Turning off
default simplifications cures this problem:  The definition will be stored
in symbolic form without ever activating the <code>deriv</code> function.  Press
<kbd>m D</kbd> to turn the default simplifications back on afterwards.
</p>
<hr>
<a name="Lisp-Definitions"></a>
<div class="header">
<p>
Previous: <a href="#Algebraic-Definitions" accesskey="p" rel="prev">Algebraic Definitions</a>, Up: <a href="#Programming" accesskey="u" rel="up">Programming</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programming-with-Lisp"></a>
<h3 class="section">17.5 Programming with Lisp</h3>

<p>The Calculator can be programmed quite extensively in Lisp.  All you
do is write a normal Lisp function definition, but with <code>defmath</code>
in place of <code>defun</code>.  This has the same form as <code>defun</code>, but it
automagically replaces calls to standard Lisp functions like <code>+</code> and
<code>zerop</code> with calls to the corresponding functions in Calc&rsquo;s own library.
Thus you can write natural-looking Lisp code which operates on all of the
standard Calculator data types.  You can then use <kbd>Z D</kbd> if you wish to
bind your new command to a <kbd>z</kbd>-prefix key sequence.  The <kbd>Z E</kbd> command
will not edit a Lisp-based definition.
</p>
<p>Emacs Lisp is described in the GNU Emacs Lisp Reference Manual.  This section
assumes a familiarity with Lisp programming concepts; if you do not know
Lisp, you may find keyboard macros or rewrite rules to be an easier way
to program the Calculator.
</p>
<p>This section first discusses ways to write commands, functions, or
small programs to be executed inside of Calc.  Then it discusses how
your own separate programs are able to call Calc from the outside.
Finally, there is a list of internal Calc functions and data structures
for the true Lisp enthusiast.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Defining-Functions" accesskey="1">Defining Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Defining-Simple-Commands" accesskey="2">Defining Simple Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Defining-Stack-Commands" accesskey="3">Defining Stack Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Argument-Qualifiers" accesskey="4">Argument Qualifiers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Example-Definitions" accesskey="5">Example Definitions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Calling-Calc-from-Your-Programs" accesskey="6">Calling Calc from Your Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Internals" accesskey="7">Internals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Defining-Functions"></a>
<div class="header">
<p>
Next: <a href="#Defining-Simple-Commands" accesskey="n" rel="next">Defining Simple Commands</a>, Previous: <a href="#Lisp-Definitions" accesskey="p" rel="prev">Lisp Definitions</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Defining-New-Functions"></a>
<h4 class="subsection">17.5.1 Defining New Functions</h4>

<p><a name="index-defmath"></a>
The <code>defmath</code> function (actually a Lisp macro) is like <code>defun</code>
except that code in the body of the definition can make use of the full
range of Calculator data types.  The prefix &lsquo;<samp>calcFunc-</samp>&rsquo; is added
to the specified name to get the actual Lisp function name.  As a simple
example,
</p>
<div class="example">
<pre class="example">(defmath myfact (n)
  (if (&gt; n 0)
      (* n (myfact (1- n)))
    1))
</pre></div>

<p>This actually expands to the code,
</p>
<div class="example">
<pre class="example">(defun calcFunc-myfact (n)
  (if (math-posp n)
      (math-mul n (calcFunc-myfact (math-add n -1)))
    1))
</pre></div>

<p>This function can be used in algebraic expressions, e.g., &lsquo;<samp>myfact(5)</samp>&rsquo;.
</p>
<p>The &lsquo;<samp>myfact</samp>&rsquo; function as it is defined above has the bug that an
expression &lsquo;<samp>myfact(a+b)</samp>&rsquo; will be simplified to 1 because the
formula &lsquo;<samp>a+b</samp>&rsquo; is not considered to be <code>posp</code>.  A robust
factorial function would be written along the following lines:
</p>
<div class="smallexample">
<pre class="smallexample">(defmath myfact (n)
  (if (&gt; n 0)
      (* n (myfact (1- n)))
    (if (= n 0)
        1
      nil)))    ; this could be simplified as: (and (= n 0) 1)
</pre></div>

<p>If a function returns <code>nil</code>, it is left unsimplified by the Calculator
(except that its arguments will be simplified).  Thus, &lsquo;<samp>myfact(a+1+2)</samp>&rsquo;
will be simplified to &lsquo;<samp>myfact(a+3)</samp>&rsquo; but no further.  Beware that every
time the Calculator reexamines this formula it will attempt to resimplify
it, so your function ought to detect the returning-<code>nil</code> case as
efficiently as possible.
</p>
<p>The following standard Lisp functions are treated by <code>defmath</code>:
<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>^</code> or
<code>expt</code>, <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>,
<code>/=</code>, <code>1+</code>, <code>1-</code>, <code>logand</code>, <code>logior</code>, <code>logxor</code>,
<code>logandc2</code>, <code>lognot</code>.  Also, <code>~=</code> is an abbreviation for
<code>math-nearly-equal</code>, which is useful in implementing Taylor series.
</p>
<p>For other functions <var>func</var>, if a function by the name
&lsquo;<samp>calcFunc-<var>func</var></samp>&rsquo; exists it is used, otherwise if a function by the
name &lsquo;<samp>math-<var>func</var></samp>&rsquo; exists it is used, otherwise if <var>func</var> itself
is defined as a function it is used, otherwise &lsquo;<samp>calcFunc-<var>func</var></samp>&rsquo; is
used on the assumption that this is a to-be-defined math function.  Also, if
the function name is quoted as in &lsquo;<samp>('integerp a)</samp>&rsquo; the function name is
always used exactly as written (but not quoted).
</p>
<p>Variable names have &lsquo;<samp>var-</samp>&rsquo; prepended to them unless they appear in
the function&rsquo;s argument list or in an enclosing <code>let</code>, <code>let*</code>,
<code>for</code>, or <code>foreach</code> form,
or their names already contain a &lsquo;<samp>-</samp>&rsquo; character.  Thus a reference to
&lsquo;<samp>foo</samp>&rsquo; is the same as a reference to &lsquo;<samp>var-foo</samp>&rsquo;.
</p>
<p>A few other Lisp extensions are available in <code>defmath</code> definitions:
</p>
<ul>
<li> The <code>elt</code> function accepts any number of index variables.
Note that Calc vectors are stored as Lisp lists whose first
element is the symbol <code>vec</code>; thus, &lsquo;<samp>(elt v 2)</samp>&rsquo; yields
the second element of vector <code>v</code>, and &lsquo;<samp>(elt m i j)</samp>&rsquo;
yields one element of a Calc matrix.

</li><li> The <code>setq</code> function has been extended to act like the Common
Lisp <code>setf</code> function.  (The name <code>setf</code> is recognized as
a synonym of <code>setq</code>.)  Specifically, the first argument of
<code>setq</code> can be an <code>nth</code>, <code>elt</code>, <code>car</code>, or <code>cdr</code> form,
in which case the effect is to store into the specified
element of a list.  Thus, &lsquo;<samp>(setq (elt m i j) x)</samp>&rsquo; stores &lsquo;<samp>x</samp>&rsquo;
into one element of a matrix.

</li><li> A <code>for</code> looping construct is available.  For example,
&lsquo;<samp>(for ((i 0 10)) body)</samp>&rsquo; executes <code>body</code> once for each
binding of &lsquo;<samp>i</samp>&rsquo; from zero to 10.  This is like a <code>let</code>
form in that &lsquo;<samp>i</samp>&rsquo; is temporarily bound to the loop count
without disturbing its value outside the <code>for</code> construct.
Nested loops, as in &lsquo;<samp>(for ((i 0 10) (j 0 (1- i) 2)) body)</samp>&rsquo;,
are also available.  For each value of &lsquo;<samp>i</samp>&rsquo; from zero to 10,
&lsquo;<samp>j</samp>&rsquo; counts from 0 to &lsquo;<samp>i-1</samp>&rsquo; in steps of two.  Note that
<code>for</code> has the same general outline as <code>let*</code>, except
that each element of the header is a list of three or four
things, not just two.

</li><li> The <code>foreach</code> construct loops over elements of a list.
For example, &lsquo;<samp>(foreach ((x (cdr v))) body)</samp>&rsquo; executes
<code>body</code> with &lsquo;<samp>x</samp>&rsquo; bound to each element of Calc vector
&lsquo;<samp>v</samp>&rsquo; in turn.  The purpose of <code>cdr</code> here is to skip over
the initial <code>vec</code> symbol in the vector.

</li><li> The <code>break</code> function breaks out of the innermost enclosing
<code>while</code>, <code>for</code>, or <code>foreach</code> loop.  If given a
value, as in &lsquo;<samp>(break x)</samp>&rsquo;, this value is returned by the
loop.  (Lisp loops otherwise always return <code>nil</code>.)

</li><li> The <code>return</code> function prematurely returns from the enclosing
function.  For example, &lsquo;<samp>(return (+ x y))</samp>&rsquo; returns &lsquo;<samp>x+y</samp>&rsquo;
as the value of a function.  You can use <code>return</code> anywhere
inside the body of the function.
</li></ul>

<p>Non-integer numbers (and extremely large integers) cannot be included
directly into a <code>defmath</code> definition.  This is because the Lisp
reader will fail to parse them long before <code>defmath</code> ever gets control.
Instead, use the notation, &lsquo;<samp>:&quot;3.1415&quot;</samp>&rsquo;.  In fact, any algebraic
formula can go between the quotes.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">(defmath sqexp (x)     ; sqexp(x) == sqrt(exp(x)) == exp(x*0.5)
  (and (numberp x)
       (exp :&quot;x * 0.5&quot;)))
</pre></div>

<p>expands to
</p>
<div class="smallexample">
<pre class="smallexample">(defun calcFunc-sqexp (x)
  (and (math-numberp x)
       (calcFunc-exp (math-mul x '(float 5 -1)))))
</pre></div>

<p>Note the use of <code>numberp</code> as a guard to ensure that the argument is
a number first, returning <code>nil</code> if not.  The exponential function
could itself have been included in the expression, if we had preferred:
&lsquo;<samp>:&quot;exp(x * 0.5)&quot;</samp>&rsquo;.  As another example, the multiplication-and-recursion
step of <code>myfact</code> could have been written
</p>
<div class="example">
<pre class="example">:&quot;n * myfact(n-1)&quot;
</pre></div>

<p>A good place to put your <code>defmath</code> commands is your Calc init file
(the file given by <code>calc-settings-file</code>, typically
<samp>~/.emacs.d/calc.el</samp>), which will not be loaded until Calc starts.
If a file named <samp>.emacs</samp> exists in your home directory, Emacs reads
and executes the Lisp forms in this file as it starts up.  While it may
seem reasonable to put your favorite <code>defmath</code> commands there,
this has the unfortunate side-effect that parts of the Calculator must be
loaded in to process the <code>defmath</code> commands whether or not you will
actually use the Calculator!  If you want to put the <code>defmath</code>
commands there (for example, if you redefine <code>calc-settings-file</code>
to be <samp>.emacs</samp>), a better effect can be had by writing
</p>
<div class="example">
<pre class="example">(put 'calc-define 'thing '(progn
 (defmath ... )
 (defmath ... )
))
</pre></div>

<p><a name="index-calc_002ddefine"></a>
The <code>put</code> function adds a <em>property</em> to a symbol.  Each Lisp
symbol has a list of properties associated with it.  Here we add a
property with a name of <code>thing</code> and a &lsquo;<samp>(progn ...)</samp>&rsquo; form as
its value.  When Calc starts up, and at the start of every Calc command,
the property list for the symbol <code>calc-define</code> is checked and the
values of any properties found are evaluated as Lisp forms.  The
properties are removed as they are evaluated.  The property names
(like <code>thing</code>) are not used; you should choose something like the
name of your project so as not to conflict with other properties.
</p>
<p>The net effect is that you can put the above code in your <samp>.emacs</samp>
file and it will not be executed until Calc is loaded.  Or, you can put
that same code in another file which you load by hand either before or
after Calc itself is loaded.
</p>
<p>The properties of <code>calc-define</code> are evaluated in the same order
that they were added.  They can assume that the Calc modules <samp>calc.el</samp>,
<samp>calc-ext.el</samp>, and <samp>calc-macs.el</samp> have been fully loaded, and
that the <samp>*Calculator*</samp> buffer will be the current buffer.
</p>
<p>If your <code>calc-define</code> property only defines algebraic functions,
you can be sure that it will have been evaluated before Calc tries to
call your function, even if the file defining the property is loaded
after Calc is loaded.  But if the property defines commands or key
sequences, it may not be evaluated soon enough.  (Suppose it defines the
new command <code>tweak-calc</code>; the user can load your file, then type
<kbd>M-x tweak-calc</kbd> before Calc has had chance to do anything.)  To
protect against this situation, you can put
</p>
<div class="example">
<pre class="example">(run-hooks 'calc-check-defines)
</pre></div>

<a name="index-calc_002dcheck_002ddefines"></a>
<p>at the end of your file.  The <code>calc-check-defines</code> function is what
looks for and evaluates properties on <code>calc-define</code>; <code>run-hooks</code>
has the advantage that it is quietly ignored if <code>calc-check-defines</code>
is not yet defined because Calc has not yet been loaded.
</p>
<p>Examples of things that ought to be enclosed in a <code>calc-define</code>
property are <code>defmath</code> calls, <code>define-key</code> calls that modify
the Calc key map, and any calls that redefine things defined inside Calc.
Ordinary <code>defun</code>s need not be enclosed with <code>calc-define</code>.
</p>
<hr>
<a name="Defining-Simple-Commands"></a>
<div class="header">
<p>
Next: <a href="#Defining-Stack-Commands" accesskey="n" rel="next">Defining Stack Commands</a>, Previous: <a href="#Defining-Functions" accesskey="p" rel="prev">Defining Functions</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Defining-New-Simple-Commands"></a>
<h4 class="subsection">17.5.2 Defining New Simple Commands</h4>

<p><a name="index-interactive"></a>
If a <code>defmath</code> form contains an <code>interactive</code> clause, it defines
a Calculator command.  Actually such a <code>defmath</code> results in <em>two</em>
function definitions:  One, a &lsquo;<samp>calcFunc-</samp>&rsquo; function as was just described,
with the <code>interactive</code> clause removed.  Two, a &lsquo;<samp>calc-</samp>&rsquo; function
with a suitable <code>interactive</code> clause and some sort of wrapper to make
the command work in the Calc environment.
</p>
<p>In the simple case, the <code>interactive</code> clause has the same form as
for normal Emacs Lisp commands:
</p>
<div class="smallexample">
<pre class="smallexample">(defmath increase-precision (delta)
  &quot;Increase precision by DELTA.&quot;     ; This is the &quot;documentation string&quot;
  (interactive &quot;p&quot;)                  ; Register this as a M-x-able command
  (setq calc-internal-prec (+ calc-internal-prec delta)))
</pre></div>

<p>This expands to the pair of definitions,
</p>
<div class="smallexample">
<pre class="smallexample">(defun calc-increase-precision (delta)
  &quot;Increase precision by DELTA.&quot;
  (interactive &quot;p&quot;)
  (calc-wrapper
   (setq calc-internal-prec (math-add calc-internal-prec delta))))

(defun calcFunc-increase-precision (delta)
  &quot;Increase precision by DELTA.&quot;
  (setq calc-internal-prec (math-add calc-internal-prec delta)))
</pre></div>

<p>where in this case the latter function would never really be used!  Note
that since the Calculator stores small integers as plain Lisp integers,
the <code>math-add</code> function will work just as well as the native
<code>+</code> even when the intent is to operate on native Lisp integers.
</p>
<a name="index-calc_002dwrapper"></a>
<p>The &lsquo;<samp>calc-wrapper</samp>&rsquo; call invokes a macro which surrounds the body of
the function with code that looks roughly like this:
</p>
<div class="smallexample">
<pre class="smallexample">(let ((calc-command-flags nil))
  (unwind-protect
      (save-current-buffer
        (calc-select-buffer)
        <em>body of function</em>
        <em>renumber stack</em>
        <em>clear</em> Working <em>message</em>)
    <em>realign cursor and window</em>
    <em>clear Inverse, Hyperbolic, and Keep Args flags</em>
    <em>update Emacs mode line</em>))
</pre></div>

<a name="index-calc_002dselect_002dbuffer"></a>
<p>The <code>calc-select-buffer</code> function selects the <samp>*Calculator*</samp>
buffer if necessary, say, because the command was invoked from inside
the <samp>*Calc Trail*</samp> window.
</p>
<a name="index-calc_002dset_002dcommand_002dflag"></a>
<p>You can call, for example, <code>(calc-set-command-flag 'no-align)</code> to
set the above-mentioned command flags.  Calc routines recognize the
following command flags:
</p>
<dl compact="compact">
<dt><code>renum-stack</code></dt>
<dd><p>Stack line numbers &lsquo;<samp>1:</samp>&rsquo;, &lsquo;<samp>2:</samp>&rsquo;, and so on must be renumbered
after this command completes.  This is set by routines like
<code>calc-push</code>.
</p>
</dd>
<dt><code>clear-message</code></dt>
<dd><p>Calc should call &lsquo;<samp>(message &quot;&quot;)</samp>&rsquo; if this command completes normally
(to clear a &ldquo;Working&hellip;&rdquo; message out of the echo area).
</p>
</dd>
<dt><code>no-align</code></dt>
<dd><p>Do not move the cursor back to the &lsquo;<samp>.</samp>&rsquo; top-of-stack marker.
</p>
</dd>
<dt><code>position-point</code></dt>
<dd><p>Use the variables <code>calc-position-point-line</code> and
<code>calc-position-point-column</code> to position the cursor after
this command finishes.
</p>
</dd>
<dt><code>keep-flags</code></dt>
<dd><p>Do not clear <code>calc-inverse-flag</code>, <code>calc-hyperbolic-flag</code>,
and <code>calc-keep-args-flag</code> at the end of this command.
</p>
</dd>
<dt><code>do-edit</code></dt>
<dd><p>Switch to buffer <samp>*Calc Edit*</samp> after this command.
</p>
</dd>
<dt><code>hold-trail</code></dt>
<dd><p>Do not move trail pointer to end of trail when something is recorded
there.
</p></dd>
</dl>

<a name="index-Y"></a>
<a name="index-Y-_003f"></a>
<a name="index-calc_002dY_002dhelp_002dmsgs"></a>
<p>Calc reserves a special prefix key, shift-<kbd>Y</kbd>, for user-written
extensions to Calc.  There are no built-in commands that work with
this prefix key; you must call <code>define-key</code> from Lisp (probably
from inside a <code>calc-define</code> property) to add to it.  Initially only
<kbd>Y ?</kbd> is defined; it takes help messages from a list of strings
(initially <code>nil</code>) in the variable <code>calc-Y-help-msgs</code>.  All
other undefined keys except for <kbd>Y</kbd> are reserved for use by
future versions of Calc.
</p>
<p>If you are writing a Calc enhancement which you expect to give to
others, it is best to minimize the number of <kbd>Y</kbd>-key sequences
you use.  In fact, if you have more than one key sequence you should
consider defining three-key sequences with a <kbd>Y</kbd>, then a key that
stands for your package, then a third key for the particular command
within your package.
</p>
<p>Users may wish to install several Calc enhancements, and it is possible
that several enhancements will choose to use the same key.  In the
example below, a variable <code>inc-prec-base-key</code> has been defined
to contain the key that identifies the <code>inc-prec</code> package.  Its
value is initially <code>&quot;P&quot;</code>, but a user can change this variable
if necessary without having to modify the file.
</p>
<p>Here is a complete file, <samp>inc-prec.el</samp>, which makes a <kbd>Y P I</kbd>
command that increases the precision, and a <kbd>Y P D</kbd> command that
decreases the precision.
</p>
<div class="smallexample">
<pre class="smallexample">;;; Increase and decrease Calc precision.  Dave Gillespie, 5/31/91.
;; (Include copyright or copyleft stuff here.)

(defvar inc-prec-base-key &quot;P&quot;
  &quot;Base key for inc-prec.el commands.&quot;)

(put 'calc-define 'inc-prec '(progn

(define-key calc-mode-map (format &quot;Y%sI&quot; inc-prec-base-key)
            'increase-precision)
(define-key calc-mode-map (format &quot;Y%sD&quot; inc-prec-base-key)
            'decrease-precision)

(setq calc-Y-help-msgs
      (cons (format &quot;%s + Inc-prec, Dec-prec&quot; inc-prec-base-key)
            calc-Y-help-msgs))

(defmath increase-precision (delta)
  &quot;Increase precision by DELTA.&quot;
  (interactive &quot;p&quot;)
  (setq calc-internal-prec (+ calc-internal-prec delta)))

(defmath decrease-precision (delta)
  &quot;Decrease precision by DELTA.&quot;
  (interactive &quot;p&quot;)
  (setq calc-internal-prec (- calc-internal-prec delta)))

))  ; end of calc-define property

(run-hooks 'calc-check-defines)
</pre></div>

<hr>
<a name="Defining-Stack-Commands"></a>
<div class="header">
<p>
Next: <a href="#Argument-Qualifiers" accesskey="n" rel="next">Argument Qualifiers</a>, Previous: <a href="#Defining-Simple-Commands" accesskey="p" rel="prev">Defining Simple Commands</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Defining-New-Stack_002dBased-Commands"></a>
<h4 class="subsection">17.5.3 Defining New Stack-Based Commands</h4>

<p>To define a new computational command which takes and/or leaves arguments
on the stack, a special form of <code>interactive</code> clause is used.
</p>
<div class="example">
<pre class="example">(interactive <var>num</var> <var>tag</var>)
</pre></div>

<p>where <var>num</var> is an integer, and <var>tag</var> is a string.  The effect is
to pop <var>num</var> values off the stack, resimplify them by calling
<code>calc-normalize</code>, and hand them to your function according to the
function&rsquo;s argument list.  Your function may include <code>&amp;optional</code> and
<code>&amp;rest</code> parameters, so long as calling the function with <var>num</var>
parameters is valid.
</p>
<p>Your function must return either a number or a formula in a form
acceptable to Calc, or a list of such numbers or formulas.  These value(s)
are pushed onto the stack when the function completes.  They are also
recorded in the Calc Trail buffer on a line beginning with <var>tag</var>,
a string of (normally) four characters or less.  If you omit <var>tag</var>
or use <code>nil</code> as a tag, the result is not recorded in the trail.
</p>
<p>As an example, the definition
</p>
<div class="smallexample">
<pre class="smallexample">(defmath myfact (n)
  &quot;Compute the factorial of the integer at the top of the stack.&quot;
  (interactive 1 &quot;fact&quot;)
  (if (&gt; n 0)
      (* n (myfact (1- n)))
    (and (= n 0) 1)))
</pre></div>

<p>is a version of the factorial function shown previously which can be used
as a command as well as an algebraic function.  It expands to
</p>
<div class="smallexample">
<pre class="smallexample">(defun calc-myfact ()
  &quot;Compute the factorial of the integer at the top of the stack.&quot;
  (interactive)
  (calc-slow-wrapper
   (calc-enter-result 1 &quot;fact&quot;
     (cons 'calcFunc-myfact (calc-top-list-n 1)))))

(defun calcFunc-myfact (n)
  &quot;Compute the factorial of the integer at the top of the stack.&quot;
  (if (math-posp n)
      (math-mul n (calcFunc-myfact (math-add n -1)))
    (and (math-zerop n) 1)))
</pre></div>

<a name="index-calc_002dslow_002dwrapper"></a>
<p>The <code>calc-slow-wrapper</code> function is a version of <code>calc-wrapper</code>
that automatically puts up a &lsquo;<samp>Working...</samp>&rsquo; message before the
computation begins.  (This message can be turned off by the user
with an <kbd>m w</kbd> (<code>calc-working</code>) command.)
</p>
<a name="index-calc_002dtop_002dlist_002dn"></a>
<p>The <code>calc-top-list-n</code> function returns a list of the specified number
of values from the top of the stack.  It resimplifies each value by
calling <code>calc-normalize</code>.  If its argument is zero it returns an
empty list.  It does not actually remove these values from the stack.
</p>
<a name="index-calc_002denter_002dresult"></a>
<p>The <code>calc-enter-result</code> function takes an integer <var>num</var> and string
<var>tag</var> as described above, plus a third argument which is either a
Calculator data object or a list of such objects.  These objects are
resimplified and pushed onto the stack after popping the specified number
of values from the stack.  If <var>tag</var> is non-<code>nil</code>, the values
being pushed are also recorded in the trail.
</p>
<p>Note that if <code>calcFunc-myfact</code> returns <code>nil</code> this represents
&ldquo;leave the function in symbolic form.&rdquo;  To return an actual empty list,
in the sense that <code>calc-enter-result</code> will push zero elements back
onto the stack, you should return the special value &lsquo;<samp>'(nil)</samp>&rsquo;, a list
containing the single symbol <code>nil</code>.
</p>
<p>The <code>interactive</code> declaration can actually contain a limited
Emacs-style code string as well which comes just before <var>num</var> and
<var>tag</var>.  Currently the only Emacs code supported is &lsquo;<samp>&quot;p&quot;</samp>&rsquo;, as in
</p>
<div class="example">
<pre class="example">(defmath foo (a b &amp;optional c)
  (interactive &quot;p&quot; 2 &quot;foo&quot;)
  <var>body</var>)
</pre></div>

<p>In this example, the command <code>calc-foo</code> will evaluate the expression
&lsquo;<samp>foo(a,b)</samp>&rsquo; if executed with no argument, or &lsquo;<samp>foo(a,b,n)</samp>&rsquo; if
executed with a numeric prefix argument of &lsquo;<samp>n</samp>&rsquo;.
</p>
<p>The other code string allowed is &lsquo;<samp>&quot;m&quot;</samp>&rsquo; (unrelated to the usual &lsquo;<samp>&quot;m&quot;</samp>&rsquo;
code as used with <code>defun</code>).  It uses the numeric prefix argument as the
number of objects to remove from the stack and pass to the function.
In this case, the integer <var>num</var> serves as a default number of
arguments to be used when no prefix is supplied.
</p>
<hr>
<a name="Argument-Qualifiers"></a>
<div class="header">
<p>
Next: <a href="#Example-Definitions" accesskey="n" rel="next">Example Definitions</a>, Previous: <a href="#Defining-Stack-Commands" accesskey="p" rel="prev">Defining Stack Commands</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Argument-Qualifiers-1"></a>
<h4 class="subsection">17.5.4 Argument Qualifiers</h4>

<p>Anywhere a parameter name can appear in the parameter list you can also use
an <em>argument qualifier</em>.  Thus the general form of a definition is:
</p>
<div class="example">
<pre class="example">(defmath <var>name</var> (<var>param</var> <var>param...</var>
               &amp;optional <var>param</var> <var>param...</var>
               &amp;rest <var>param</var>)
  <var>body</var>)
</pre></div>

<p>where each <var>param</var> is either a symbol or a list of the form
</p>
<div class="example">
<pre class="example">(<var>qual</var> <var>param</var>)
</pre></div>

<p>The following qualifiers are recognized:
</p>
<dl compact="compact">
<dt>&lsquo;<samp>complete</samp>&rsquo;</dt>
<dd><a name="index-complete"></a>
<p>The argument must not be an incomplete vector, interval, or complex number.
(This is rarely needed since the Calculator itself will never call your
function with an incomplete argument.  But there is nothing stopping your
own Lisp code from calling your function with an incomplete argument.)
</p>
</dd>
<dt>&lsquo;<samp>integer</samp>&rsquo;</dt>
<dd><a name="index-integer"></a>
<p>The argument must be an integer.  If it is an integer-valued float
it will be accepted but converted to integer form.  Non-integers and
formulas are rejected.
</p>
</dd>
<dt>&lsquo;<samp>natnum</samp>&rsquo;</dt>
<dd><a name="index-natnum"></a>
<p>Like &lsquo;<samp>integer</samp>&rsquo;, but the argument must be non-negative.
</p>
</dd>
<dt>&lsquo;<samp>fixnum</samp>&rsquo;</dt>
<dd><a name="index-fixnum"></a>
<p>Like &lsquo;<samp>integer</samp>&rsquo;, but the argument must fit into a native Lisp integer,
which on most systems means less than 2^23 in absolute value.  The
argument is converted into Lisp-integer form if necessary.
</p>
</dd>
<dt>&lsquo;<samp>float</samp>&rsquo;</dt>
<dd><a name="index-float"></a>
<p>The argument is converted to floating-point format if it is a number or
vector.  If it is a formula it is left alone.  (The argument is never
actually rejected by this qualifier.)
</p>
</dd>
<dt>&lsquo;<samp><var>pred</var></samp>&rsquo;</dt>
<dd><p>The argument must satisfy predicate <var>pred</var>, which is one of the
standard Calculator predicates.  See <a href="#Predicates">Predicates</a>.
</p>
</dd>
<dt>&lsquo;<samp>not-<var>pred</var></samp>&rsquo;</dt>
<dd><p>The argument must <em>not</em> satisfy predicate <var>pred</var>.
</p></dd>
</dl>

<p>For example,
</p>
<div class="example">
<pre class="example">(defmath foo (a (constp (not-matrixp b)) &amp;optional (float c)
              &amp;rest (integer d))
  <var>body</var>)
</pre></div>

<p>expands to
</p>
<div class="example">
<pre class="example">(defun calcFunc-foo (a b &amp;optional c &amp;rest d)
  (and (math-matrixp b)
       (math-reject-arg b 'not-matrixp))
  (or (math-constp b)
      (math-reject-arg b 'constp))
  (and c (setq c (math-check-float c)))
  (setq d (mapcar 'math-check-integer d))
  <var>body</var>)
</pre></div>

<p>which performs the necessary checks and conversions before executing the
body of the function.
</p>
<hr>
<a name="Example-Definitions"></a>
<div class="header">
<p>
Next: <a href="#Calling-Calc-from-Your-Programs" accesskey="n" rel="next">Calling Calc from Your Programs</a>, Previous: <a href="#Argument-Qualifiers" accesskey="p" rel="prev">Argument Qualifiers</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Example-Definitions-1"></a>
<h4 class="subsection">17.5.5 Example Definitions</h4>

<p>This section includes some Lisp programming examples on a larger scale.
These programs make use of some of the Calculator&rsquo;s internal functions;
see <a href="#Internals">Internals</a>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Bit-Counting-Example" accesskey="1">Bit Counting Example</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Sine-Example" accesskey="2">Sine Example</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Bit-Counting-Example"></a>
<div class="header">
<p>
Next: <a href="#Sine-Example" accesskey="n" rel="next">Sine Example</a>, Previous: <a href="#Example-Definitions" accesskey="p" rel="prev">Example Definitions</a>, Up: <a href="#Example-Definitions" accesskey="u" rel="up">Example Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Bit_002dCounting"></a>
<h4 class="subsubsection">17.5.5.1 Bit-Counting</h4>

<p><a name="index-bcount"></a>
Calc does not include a built-in function for counting the number of
&ldquo;one&rdquo; bits in a binary integer.  It&rsquo;s easy to invent one using <kbd>b u</kbd>
to convert the integer to a set, and <kbd>V #</kbd> to count the elements of
that set; let&rsquo;s write a function that counts the bits without having to
create an intermediate set.
</p>
<div class="smallexample">
<pre class="smallexample">(defmath bcount ((natnum n))
  (interactive 1 &quot;bcnt&quot;)
  (let ((count 0))
    (while (&gt; n 0)
      (if (oddp n)
          (setq count (1+ count)))
      (setq n (lsh n -1)))
    count))
</pre></div>

<p>When this is expanded by <code>defmath</code>, it will become the following
Emacs Lisp function:
</p>
<div class="smallexample">
<pre class="smallexample">(defun calcFunc-bcount (n)
  (setq n (math-check-natnum n))
  (let ((count 0))
    (while (math-posp n)
      (if (math-oddp n)
          (setq count (math-add count 1)))
      (setq n (calcFunc-lsh n -1)))
    count))
</pre></div>

<p>If the input numbers are large, this function involves a fair amount
of arithmetic.  A binary right shift is essentially a division by two;
recall that Calc stores integers in decimal form so bit shifts must
involve actual division.
</p>
<p>To gain a bit more efficiency, we could divide the integer into
<var>n</var>-bit chunks, each of which can be handled quickly because
they fit into Lisp integers.  It turns out that Calc&rsquo;s arithmetic
routines are especially fast when dividing by an integer less than
1000, so we can set <var>n = 9</var> bits and use repeated division by 512:
</p>
<div class="smallexample">
<pre class="smallexample">(defmath bcount ((natnum n))
  (interactive 1 &quot;bcnt&quot;)
  (let ((count 0))
    (while (not (fixnump n))
      (let ((qr (idivmod n 512)))
        (setq count (+ count (bcount-fixnum (cdr qr)))
              n (car qr))))
    (+ count (bcount-fixnum n))))

(defun bcount-fixnum (n)
  (let ((count 0))
    (while (&gt; n 0)
      (setq count (+ count (logand n 1))
            n (lsh n -1)))
    count))
</pre></div>

<p>Note that the second function uses <code>defun</code>, not <code>defmath</code>.
Because this function deals only with native Lisp integers (&ldquo;fixnums&rdquo;),
it can use the actual Emacs <code>+</code> and related functions rather
than the slower but more general Calc equivalents which <code>defmath</code>
uses.
</p>
<p>The <code>idivmod</code> function does an integer division, returning both
the quotient and the remainder at once.  Again, note that while it
might seem that &lsquo;<samp>(logand n 511)</samp>&rsquo; and &lsquo;<samp>(lsh n -9)</samp>&rsquo; are
more efficient ways to split off the bottom nine bits of <code>n</code>,
actually they are less efficient because each operation is really
a division by 512 in disguise; <code>idivmod</code> allows us to do the
same thing with a single division by 512.
</p>
<hr>
<a name="Sine-Example"></a>
<div class="header">
<p>
Previous: <a href="#Bit-Counting-Example" accesskey="p" rel="prev">Bit Counting Example</a>, Up: <a href="#Example-Definitions" accesskey="u" rel="up">Example Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Sine-Function"></a>
<h4 class="subsubsection">17.5.5.2 The Sine Function</h4>

<p><a name="index-mysin"></a>
A somewhat limited sine function could be defined as follows, using the
well-known Taylor series expansion for
&lsquo;<samp>sin(x)</samp>&rsquo;:
</p>
<div class="smallexample">
<pre class="smallexample">(defmath mysin ((float (anglep x)))
  (interactive 1 &quot;mysn&quot;)
  (setq x (to-radians x))    ; Convert from current angular mode.
  (let ((sum x)              ; Initial term of Taylor expansion of sin.
        newsum
        (nfact 1)            ; &quot;nfact&quot; equals &quot;n&quot; factorial at all times.
        (xnegsqr :&quot;-(x^2)&quot;)) ; &quot;xnegsqr&quot; equals -x^2.
    (for ((n 3 100 2))       ; Upper limit of 100 is a good precaution.
      (working &quot;mysin&quot; sum)  ; Display &quot;Working&quot; message, if enabled.
      (setq nfact (* nfact (1- n) n)
            x (* x xnegsqr)
            newsum (+ sum (/ x nfact)))
      (if (~= newsum sum)    ; If newsum is &quot;nearly equal to&quot; sum,
          (break))           ;  then we are done.
      (setq sum newsum))
    sum))
</pre></div>

<p>The actual <code>sin</code> function in Calc works by first reducing the problem
to a sine or cosine of a nonnegative number less than &lsquo;<samp>pi/4</samp>&rsquo;.  This
ensures that the Taylor series will converge quickly.  Also, the calculation
is carried out with two extra digits of precision to guard against cumulative
round-off in &lsquo;<samp>sum</samp>&rsquo;.  Finally, complex arguments are allowed and handled
by a separate algorithm.
</p>
<div class="smallexample">
<pre class="smallexample">(defmath mysin ((float (scalarp x)))
  (interactive 1 &quot;mysn&quot;)
  (setq x (to-radians x))    ; Convert from current angular mode.
  (with-extra-prec 2         ; Evaluate with extra precision.
    (cond ((complexp x)
           (mysin-complex x))
          ((&lt; x 0)
           (- (mysin-raw (- x)))    ; Always call mysin-raw with x &gt;= 0.
          (t (mysin-raw x))))))

(defmath mysin-raw (x)
  (cond ((&gt;= x 7)
         (mysin-raw (% x (two-pi))))     ; Now x &lt; 7.
        ((&gt; x (pi-over-2))
         (- (mysin-raw (- x (pi)))))     ; Now -pi/2 &lt;= x &lt;= pi/2.
        ((&gt; x (pi-over-4))
         (mycos-raw (- x (pi-over-2))))  ; Now -pi/2 &lt;= x &lt;= pi/4.
        ((&lt; x (- (pi-over-4)))
         (- (mycos-raw (+ x (pi-over-2)))))  ; Now -pi/4 &lt;= x &lt;= pi/4,
        (t (mysin-series x))))           ; so the series will be efficient.
</pre></div>

<p>where <code>mysin-complex</code> is an appropriate function to handle complex
numbers, <code>mysin-series</code> is the routine to compute the sine Taylor
series as before, and <code>mycos-raw</code> is a function analogous to
<code>mysin-raw</code> for cosines.
</p>
<p>The strategy is to ensure that &lsquo;<samp>x</samp>&rsquo; is nonnegative before calling
<code>mysin-raw</code>.  This function then recursively reduces its argument
to a suitable range, namely, plus-or-minus &lsquo;<samp>pi/4</samp>&rsquo;.  Note that each
test, and particularly the first comparison against 7, is designed so
that small roundoff errors cannot produce an infinite loop.  (Suppose
we compared with &lsquo;<samp>(two-pi)</samp>&rsquo; instead; if due to roundoff problems
the modulo operator ever returned &lsquo;<samp>(two-pi)</samp>&rsquo; exactly, an infinite
recursion could result!)  We use modulo only for arguments that will
clearly get reduced, knowing that the next rule will catch any reductions
that this rule misses.
</p>
<p>If a program is being written for general use, it is important to code
it carefully as shown in this second example.  For quick-and-dirty programs,
when you know that your own use of the sine function will never encounter
a large argument, a simpler program like the first one shown is fine.
</p>
<hr>
<a name="Calling-Calc-from-Your-Programs"></a>
<div class="header">
<p>
Next: <a href="#Internals" accesskey="n" rel="next">Internals</a>, Previous: <a href="#Example-Definitions" accesskey="p" rel="prev">Example Definitions</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Calling-Calc-from-Your-Lisp-Programs"></a>
<h4 class="subsection">17.5.6 Calling Calc from Your Lisp Programs</h4>

<p>A later section (see <a href="#Internals">Internals</a>) gives a full description of
Calc&rsquo;s internal Lisp functions.  It&rsquo;s not hard to call Calc from
inside your programs, but the number of these functions can be daunting.
So Calc provides one special &ldquo;programmer-friendly&rdquo; function called
<code>calc-eval</code> that can be made to do just about everything you
need.  It&rsquo;s not as fast as the low-level Calc functions, but it&rsquo;s
much simpler to use!
</p>
<p>It may seem that <code>calc-eval</code> itself has a daunting number of
options, but they all stem from one simple operation.
</p>
<p>In its simplest manifestation, &lsquo;<samp>(calc-eval &quot;1+2&quot;)</samp>&rsquo; parses the
string <code>&quot;1+2&quot;</code> as if it were a Calc algebraic entry and returns
the result formatted as a string: <code>&quot;3&quot;</code>.
</p>
<p>Since <code>calc-eval</code> is on the list of recommended <code>autoload</code>
functions, you don&rsquo;t need to make any special preparations to load
Calc before calling <code>calc-eval</code> the first time.  Calc will be
loaded and initialized for you.
</p>
<p>All the Calc modes that are currently in effect will be used when
evaluating the expression and formatting the result.
</p>
<a name="Additional-Arguments-to-calc_002deval"></a>
<h4 class="subsubsection">17.5.6.1 Additional Arguments to <code>calc-eval</code></h4>

<p>If the input string parses to a list of expressions, Calc returns
the results separated by <code>&quot;, &quot;</code>.  You can specify a different
separator by giving a second string argument to <code>calc-eval</code>:
&lsquo;<samp>(calc-eval &quot;1+2,3+4&quot; &quot;;&quot;)</samp>&rsquo; returns <code>&quot;3;7&quot;</code>.
</p>
<p>The &ldquo;separator&rdquo; can also be any of several Lisp symbols which
request other behaviors from <code>calc-eval</code>.  These are discussed
one by one below.
</p>
<p>You can give additional arguments to be substituted for
&lsquo;<samp>$</samp>&rsquo;, &lsquo;<samp>$$</samp>&rsquo;, and so on in the main expression.  For
example, &lsquo;<samp>(calc-eval &quot;$/$$&quot; nil &quot;7&quot; &quot;1+1&quot;)</samp>&rsquo; evaluates the
expression <code>&quot;7/(1+1)&quot;</code> to yield the result <code>&quot;3.5&quot;</code>
(assuming Fraction mode is not in effect).  Note the <code>nil</code>
used as a placeholder for the item-separator argument.
</p>
<a name="Error-Handling"></a>
<h4 class="subsubsection">17.5.6.2 Error Handling</h4>

<p>If <code>calc-eval</code> encounters an error, it returns a list containing
the character position of the error, plus a suitable message as a
string.  Note that &lsquo;<samp>1 / 0</samp>&rsquo; is <em>not</em> an error by Calc&rsquo;s
standards; it simply returns the string <code>&quot;1 / 0&quot;</code> which is the
division left in symbolic form.  But &lsquo;<samp>(calc-eval &quot;1/&quot;)</samp>&rsquo; will
return the list &lsquo;<samp>(2 &quot;Expected a number&quot;)</samp>&rsquo;.
</p>
<p>If you bind the variable <code>calc-eval-error</code> to <code>t</code>
using a <code>let</code> form surrounding the call to <code>calc-eval</code>,
errors instead call the Emacs <code>error</code> function which aborts
to the Emacs command loop with a beep and an error message.
</p>
<p>If you bind this variable to the symbol <code>string</code>, error messages
are returned as strings instead of lists.  The character position is
ignored.
</p>
<p>As a courtesy to other Lisp code which may be using Calc, be sure
to bind <code>calc-eval-error</code> using <code>let</code> rather than changing
it permanently with <code>setq</code>.
</p>
<a name="Numbers-Only"></a>
<h4 class="subsubsection">17.5.6.3 Numbers Only</h4>

<p>Sometimes it is preferable to treat &lsquo;<samp>1 / 0</samp>&rsquo; as an error
rather than returning a symbolic result.  If you pass the symbol
<code>num</code> as the second argument to <code>calc-eval</code>, results
that are not constants are treated as errors.  The error message
reported is the first <code>calc-why</code> message if there is one,
or otherwise &ldquo;Number expected.&rdquo;
</p>
<p>A result is &ldquo;constant&rdquo; if it is a number, vector, or other
object that does not include variables or function calls.  If it
is a vector, the components must themselves be constants.
</p>
<a name="Default-Modes"></a>
<h4 class="subsubsection">17.5.6.4 Default Modes</h4>

<p>If the first argument to <code>calc-eval</code> is a list whose first
element is a formula string, then <code>calc-eval</code> sets all the
various Calc modes to their default values while the formula is
evaluated and formatted.  For example, the precision is set to 12
digits, digit grouping is turned off, and the Normal language
mode is used.
</p>
<p>This same principle applies to the other options discussed below.
If the first argument would normally be <var>x</var>, then it can also
be the list &lsquo;<samp>(<var>x</var>)</samp>&rsquo; to use the default mode settings.
</p>
<p>If there are other elements in the list, they are taken as
variable-name/value pairs which override the default mode
settings.  Look at the documentation at the front of the
<samp>calc.el</samp> file to find the names of the Lisp variables for
the various modes.  The mode settings are restored to their
original values when <code>calc-eval</code> is done.
</p>
<p>For example, &lsquo;<samp>(calc-eval '(&quot;$+$$&quot; calc-internal-prec 8) 'num a b)</samp>&rsquo;
computes the sum of two numbers, requiring a numeric result, and
using default mode settings except that the precision is 8 instead
of the default of 12.
</p>
<p>It&rsquo;s usually best to use this form of <code>calc-eval</code> unless your
program actually considers the interaction with Calc&rsquo;s mode settings
to be a feature.  This will avoid all sorts of potential &ldquo;gotchas&rdquo;;
consider what happens with &lsquo;<samp>(calc-eval &quot;sqrt(2)&quot; 'num)</samp>&rsquo;
when the user has left Calc in Symbolic mode or No-Simplify mode.
</p>
<p>As another example, &lsquo;<samp>(equal (calc-eval '(&quot;$&lt;$$&quot;) nil a b) &quot;1&quot;)</samp>&rsquo;
checks if the number in string &lsquo;<samp>a</samp>&rsquo; is less than the one in
string &lsquo;<samp>b</samp>&rsquo;.  Without using a list, the integer 1 might
come out in a variety of formats which would be hard to test for
conveniently: <code>&quot;1&quot;</code>, <code>&quot;8#1&quot;</code>, <code>&quot;00001&quot;</code>.  (But
see &ldquo;Predicates&rdquo; mode, below.)
</p>
<a name="Raw-Numbers"></a>
<h4 class="subsubsection">17.5.6.5 Raw Numbers</h4>

<p>Normally all input and output for <code>calc-eval</code> is done with strings.
You can do arithmetic with, say, &lsquo;<samp>(calc-eval &quot;$+$$&quot; nil a b)</samp>&rsquo;
in place of &lsquo;<samp>(+ a b)</samp>&rsquo;, but this is very inefficient since the
numbers must be converted to and from string format as they are passed
from one <code>calc-eval</code> to the next.
</p>
<p>If the separator is the symbol <code>raw</code>, the result will be returned
as a raw Calc data structure rather than a string.  You can read about
how these objects look in the following sections, but usually you can
treat them as &ldquo;black box&rdquo; objects with no important internal
structure.
</p>
<p>There is also a <code>rawnum</code> symbol, which is a combination of
<code>raw</code> (returning a raw Calc object) and <code>num</code> (signaling
an error if that object is not a constant).
</p>
<p>You can pass a raw Calc object to <code>calc-eval</code> in place of a
string, either as the formula itself or as one of the &lsquo;<samp>$</samp>&rsquo;
arguments.  Thus &lsquo;<samp>(calc-eval &quot;$+$$&quot; 'raw a b)</samp>&rsquo; is an
addition function that operates on raw Calc objects.  Of course
in this case it would be easier to call the low-level <code>math-add</code>
function in Calc, if you can remember its name.
</p>
<p>In particular, note that a plain Lisp integer is acceptable to Calc
as a raw object.  (All Lisp integers are accepted on input, but
integers of more than six decimal digits are converted to &ldquo;big-integer&rdquo;
form for output.  See <a href="#Data-Type-Formats">Data Type Formats</a>.)
</p>
<p>When it comes time to display the object, just use &lsquo;<samp>(calc-eval a)</samp>&rsquo;
to format it as a string.
</p>
<p>It is an error if the input expression evaluates to a list of
values.  The separator symbol <code>list</code> is like <code>raw</code>
except that it returns a list of one or more raw Calc objects.
</p>
<p>Note that a Lisp string is not a valid Calc object, nor is a list
containing a string.  Thus you can still safely distinguish all the
various kinds of error returns discussed above.
</p>
<a name="Predicates-1"></a>
<h4 class="subsubsection">17.5.6.6 Predicates</h4>

<p>If the separator symbol is <code>pred</code>, the result of the formula is
treated as a true/false value; <code>calc-eval</code> returns <code>t</code> or
<code>nil</code>, respectively.  A value is considered &ldquo;true&rdquo; if it is a
non-zero number, or false if it is zero or if it is not a number.
</p>
<p>For example, &lsquo;<samp>(calc-eval &quot;$&lt;$$&quot; 'pred a b)</samp>&rsquo; tests whether
one value is less than another.
</p>
<p>As usual, it is also possible for <code>calc-eval</code> to return one of
the error indicators described above.  Lisp will interpret such an
indicator as &ldquo;true&rdquo; if you don&rsquo;t check for it explicitly.  If you
wish to have an error register as &ldquo;false&rdquo;, use something like
&lsquo;<samp>(eq (calc-eval ...) t)</samp>&rsquo;.
</p>
<a name="Variable-Values"></a>
<h4 class="subsubsection">17.5.6.7 Variable Values</h4>

<p>Variables in the formula passed to <code>calc-eval</code> are not normally
replaced by their values.  If you wish this, you can use the
<code>evalv</code> function (see <a href="#Algebraic-Manipulation">Algebraic Manipulation</a>).  For example,
if 4 is stored in Calc variable <code>a</code> (i.e., in Lisp variable
<code>var-a</code>), then &lsquo;<samp>(calc-eval &quot;a+pi&quot;)</samp>&rsquo; will return the
formula <code>&quot;a + pi&quot;</code>, but &lsquo;<samp>(calc-eval &quot;evalv(a+pi)&quot;)</samp>&rsquo;
will return <code>&quot;7.14159265359&quot;</code>.
</p>
<p>To store in a Calc variable, just use <code>setq</code> to store in the
corresponding Lisp variable.  (This is obtained by prepending
&lsquo;<samp>var-</samp>&rsquo; to the Calc variable name.)  Calc routines will
understand either string or raw form values stored in variables,
although raw data objects are much more efficient.  For example,
to increment the Calc variable <code>a</code>:
</p>
<div class="example">
<pre class="example">(setq var-a (calc-eval &quot;evalv(a+1)&quot; 'raw))
</pre></div>

<a name="Stack-Access"></a>
<h4 class="subsubsection">17.5.6.8 Stack Access</h4>

<p>If the separator symbol is <code>push</code>, the formula argument is
evaluated (with possible &lsquo;<samp>$</samp>&rsquo; expansions, as usual).  The
result is pushed onto the Calc stack.  The return value is <code>nil</code>
(unless there is an error from evaluating the formula, in which
case the return value depends on <code>calc-eval-error</code> in the
usual way).
</p>
<p>If the separator symbol is <code>pop</code>, the first argument to
<code>calc-eval</code> must be an integer instead of a string.  That
many values are popped from the stack and thrown away.  A negative
argument deletes the entry at that stack level.  The return value
is the number of elements remaining in the stack after popping;
&lsquo;<samp>(calc-eval 0 'pop)</samp>&rsquo; is a good way to measure the size of
the stack.
</p>
<p>If the separator symbol is <code>top</code>, the first argument to
<code>calc-eval</code> must again be an integer.  The value at that
stack level is formatted as a string and returned.  Thus
&lsquo;<samp>(calc-eval 1 'top)</samp>&rsquo; returns the top-of-stack value.  If the
integer is out of range, <code>nil</code> is returned.
</p>
<p>The separator symbol <code>rawtop</code> is just like <code>top</code> except
that the stack entry is returned as a raw Calc object instead of
as a string.
</p>
<p>In all of these cases the first argument can be made a list in
order to force the default mode settings, as described above.
Thus &lsquo;<samp>(calc-eval '(2 calc-number-radix 16) 'top)</samp>&rsquo; returns the
second-to-top stack entry, formatted as a string using the default
instead of current display modes, except that the radix is
hexadecimal instead of decimal.
</p>
<p>It is, of course, polite to put the Calc stack back the way you
found it when you are done, unless the user of your program is
actually expecting it to affect the stack.
</p>
<p>Note that you do not actually have to switch into the <samp>*Calculator*</samp>
buffer in order to use <code>calc-eval</code>; it temporarily switches into
the stack buffer if necessary.
</p>
<a name="Keyboard-Macros-1"></a>
<h4 class="subsubsection">17.5.6.9 Keyboard Macros</h4>

<p>If the separator symbol is <code>macro</code>, the first argument must be a
string of characters which Calc can execute as a sequence of keystrokes.
This switches into the Calc buffer for the duration of the macro.
For example, &lsquo;<samp>(calc-eval &quot;vx5\rVR+&quot; 'macro)</samp>&rsquo; pushes the
vector &lsquo;<samp>[1,2,3,4,5]</samp>&rsquo; on the stack and then replaces it
with the sum of those numbers.  Note that &lsquo;<samp>\r</samp>&rsquo; is the Lisp
notation for the carriage-return, <tt class="key">RET</tt>, character.
</p>
<p>If your keyboard macro wishes to pop the stack, &lsquo;<samp>\C-d</samp>&rsquo; is
safer than &lsquo;<samp>\177</samp>&rsquo; (the <tt class="key">DEL</tt> character) because some
installations may have switched the meanings of <tt class="key">DEL</tt> and
<kbd>C-h</kbd>.  Calc always interprets <kbd>C-d</kbd> as a synonym for
&ldquo;pop-stack&rdquo; regardless of key mapping.
</p>
<p>If you provide a third argument to <code>calc-eval</code>, evaluation
of the keyboard macro will leave a record in the Trail using
that argument as a tag string.  Normally the Trail is unaffected.
</p>
<p>The return value in this case is always <code>nil</code>.
</p>
<a name="Lisp-Evaluation"></a>
<h4 class="subsubsection">17.5.6.10 Lisp Evaluation</h4>

<p>Finally, if the separator symbol is <code>eval</code>, then the Lisp
<code>eval</code> function is called on the first argument, which must
be a Lisp expression rather than a Calc formula.  Remember to
quote the expression so that it is not evaluated until inside
<code>calc-eval</code>.
</p>
<p>The difference from plain <code>eval</code> is that <code>calc-eval</code>
switches to the Calc buffer before evaluating the expression.
For example, &lsquo;<samp>(calc-eval '(setq calc-internal-prec 17) 'eval)</samp>&rsquo;
will correctly affect the buffer-local Calc precision variable.
</p>
<p>An alternative would be &lsquo;<samp>(calc-eval '(calc-precision 17) 'eval)</samp>&rsquo;.
This is evaluating a call to the function that is normally invoked
by the <kbd>p</kbd> key, giving it 17 as its &ldquo;numeric prefix argument.&rdquo;
Note that this function will leave a message in the echo area as
a side effect.  Also, all Calc functions switch to the Calc buffer
automatically if not invoked from there, so the above call is
also equivalent to &lsquo;<samp>(calc-precision 17)</samp>&rsquo; by itself.
In all cases, Calc uses <code>save-excursion</code> to switch back to
your original buffer when it is done.
</p>
<p>As usual the first argument can be a list that begins with a Lisp
expression to use default instead of current mode settings.
</p>
<p>The result of <code>calc-eval</code> in this usage is just the result
returned by the evaluated Lisp expression.
</p>
<a name="Example"></a>
<h4 class="subsubsection">17.5.6.11 Example</h4>

<p><a name="index-convert_002dtemp"></a>
Here is a sample Emacs command that uses <code>calc-eval</code>.  Suppose
you have a document with lots of references to temperatures on the
Fahrenheit scale, say &ldquo;98.6 F&rdquo;, and you wish to convert these
references to Centigrade.  The following command does this conversion.
Place the Emacs cursor right after the letter &ldquo;F&rdquo; and invoke the
command to change &ldquo;98.6 F&rdquo; to &ldquo;37 C&rdquo;.  Or, if the temperature is
already in Centigrade form, the command changes it back to Fahrenheit.
</p>
<div class="example">
<pre class="example">(defun convert-temp ()
  (interactive)
  (save-excursion
    (re-search-backward &quot;[^-.0-9]\\([-.0-9]+\\) *\\([FC]\\)&quot;)
    (let* ((top1 (match-beginning 1))
           (bot1 (match-end 1))
           (number (buffer-substring top1 bot1))
           (top2 (match-beginning 2))
           (bot2 (match-end 2))
           (type (buffer-substring top2 bot2)))
      (if (equal type &quot;F&quot;)
          (setq type &quot;C&quot;
                number (calc-eval &quot;($ - 32)*5/9&quot; nil number))
        (setq type &quot;F&quot;
              number (calc-eval &quot;$*9/5 + 32&quot; nil number)))
      (goto-char top2)
      (delete-region top2 bot2)
      (insert-before-markers type)
      (goto-char top1)
      (delete-region top1 bot1)
      (if (string-match &quot;\\.$&quot; number)   ; change &quot;37.&quot; to &quot;37&quot;
          (setq number (substring number 0 -1)))
      (insert number))))
</pre></div>

<p>Note the use of <code>insert-before-markers</code> when changing between
&ldquo;F&rdquo; and &ldquo;C&rdquo;, so that the character winds up before the cursor
instead of after it.
</p>
<hr>
<a name="Internals"></a>
<div class="header">
<p>
Previous: <a href="#Calling-Calc-from-Your-Programs" accesskey="p" rel="prev">Calling Calc from Your Programs</a>, Up: <a href="#Lisp-Definitions" accesskey="u" rel="up">Lisp Definitions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Calculator-Internals"></a>
<h4 class="subsection">17.5.7 Calculator Internals</h4>

<p>This section describes the Lisp functions defined by the Calculator that
may be of use to user-written Calculator programs (as described in the
rest of this chapter).  These functions are shown by their names as they
conventionally appear in <code>defmath</code>.  Their full Lisp names are
generally gotten by prepending &lsquo;<samp>calcFunc-</samp>&rsquo; or &lsquo;<samp>math-</samp>&rsquo; to their
apparent names.  (Names that begin with &lsquo;<samp>calc-</samp>&rsquo; are already in
their full Lisp form.)  You can use the actual full names instead if you
prefer them, or if you are calling these functions from regular Lisp.
</p>
<p>The functions described here are scattered throughout the various
Calc component files.  Note that <samp>calc.el</samp> includes <code>autoload</code>s
for only a few component files; when Calc wants to call an advanced
function it calls &lsquo;<samp>(calc-extensions)</samp>&rsquo; first; this function
autoloads <samp>calc-ext.el</samp>, which in turn autoloads all the functions
in the remaining component files.
</p>
<p>Because <code>defmath</code> itself uses the extensions, user-written code
generally always executes with the extensions already loaded, so
normally you can use any Calc function and be confident that it will
be autoloaded for you when necessary.  If you are doing something
special, check carefully to make sure each function you are using is
from <samp>calc.el</samp> or its components, and call &lsquo;<samp>(calc-extensions)</samp>&rsquo;
before using any function based in <samp>calc-ext.el</samp> if you can&rsquo;t
prove this file will already be loaded.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Data-Type-Formats" accesskey="1">Data Type Formats</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Interactive-Lisp-Functions" accesskey="2">Interactive Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Stack-Lisp-Functions" accesskey="3">Stack Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Predicates" accesskey="4">Predicates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Computational-Lisp-Functions" accesskey="5">Computational Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vector-Lisp-Functions" accesskey="6">Vector Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Symbolic-Lisp-Functions" accesskey="7">Symbolic Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Formatting-Lisp-Functions" accesskey="8">Formatting Lisp Functions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Hooks" accesskey="9">Hooks</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Data-Type-Formats"></a>
<div class="header">
<p>
Next: <a href="#Interactive-Lisp-Functions" accesskey="n" rel="next">Interactive Lisp Functions</a>, Previous: <a href="#Internals" accesskey="p" rel="prev">Internals</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Data-Type-Formats-1"></a>
<h4 class="subsubsection">17.5.7.1 Data Type Formats</h4>

<p>Integers are stored in either of two ways, depending on their magnitude.
Integers less than one million in absolute value are stored as standard
Lisp integers.  This is the only storage format for Calc data objects
which is not a Lisp list.
</p>
<p>Large integers are stored as lists of the form &lsquo;<samp>(bigpos <var>d0</var>
<var>d1</var> <var>d2</var> &hellip;)</samp>&rsquo; for sufficiently large positive integers
(where &ldquo;sufficiently large&rdquo; depends on the machine), or
&lsquo;<samp>(bigneg <var>d0</var> <var>d1</var> <var>d2</var> &hellip;)</samp>&rsquo; for negative
integers.  Each <var>d</var> is a base-&lsquo;<samp>10^n</samp>&rsquo; &ldquo;digit&rdquo; (where again,
&lsquo;<samp>n</samp>&rsquo; depends on the machine), a Lisp integer from 0 to
99&hellip;9.  The least significant digit is <var>d0</var>; the last digit,
<var>dn</var>, which is always nonzero, is the most significant digit.  For
example, the integer <i>-12345678</i> might be stored as
&lsquo;<samp>(bigneg 678 345 12)</samp>&rsquo;.
</p>
<p>The distinction between small and large integers is entirely hidden from
the user.  In <code>defmath</code> definitions, the Lisp predicate <code>integerp</code>
returns true for either kind of integer, and in general both big and small
integers are accepted anywhere the word &ldquo;integer&rdquo; is used in this manual.
If the distinction must be made, native Lisp integers are called <em>fixnums</em>
and large integers are called <em>bignums</em>.
</p>
<p>Fractions are stored as a list of the form, &lsquo;<samp>(frac <var>n</var> <var>d</var>)</samp>&rsquo;
where <var>n</var> is an integer (big or small) numerator, <var>d</var> is an
integer denominator greater than one, and <var>n</var> and <var>d</var> are relatively
prime.  Note that fractions where <var>d</var> is one are automatically converted
to plain integers by all math routines; fractions where <var>d</var> is negative
are normalized by negating the numerator and denominator.
</p>
<p>Floating-point numbers are stored in the form, &lsquo;<samp>(float <var>mant</var>
<var>exp</var>)</samp>&rsquo;, where <var>mant</var> (the &ldquo;mantissa&rdquo;) is an integer less than
&lsquo;<samp>10^<var>p</var></samp>&rsquo; in absolute value (<var>p</var> represents the current
precision), and <var>exp</var> (the &ldquo;exponent&rdquo;) is a fixnum.  The value of
the float is &lsquo;<samp><var>mant</var> * 10^<var>exp</var></samp>&rsquo;.  For example, the number
<i>-3.14</i> is stored as &lsquo;<samp>(float -314 -2) = -314*10^-2</samp>&rsquo;.  Other constraints
are that the number 0.0 is always stored as &lsquo;<samp>(float 0 0)</samp>&rsquo;, and,
except for the 0.0 case, the rightmost base-10 digit of <var>mant</var> is
always nonzero.  (If the rightmost digit is zero, the number is
rearranged by dividing <var>mant</var> by ten and incrementing <var>exp</var>.)
</p>
<p>Rectangular complex numbers are stored in the form &lsquo;<samp>(cplx <var>re</var>
<var>im</var>)</samp>&rsquo;, where <var>re</var> and <var>im</var> are each real numbers, either
integers, fractions, or floats.  The value is &lsquo;<samp><var>re</var> + <var>im</var>i</samp>&rsquo;.
The <var>im</var> part is nonzero; complex numbers with zero imaginary
components are converted to real numbers automatically.
</p>
<p>Polar complex numbers are stored in the form &lsquo;<samp>(polar <var>r</var>
<var>theta</var>)</samp>&rsquo;, where <var>r</var> is a positive real value and <var>theta</var>
is a real value or HMS form representing an angle.  This angle is
usually normalized to lie in the interval &lsquo;<samp>(-180 .. 180)</samp>&rsquo; degrees,
or &lsquo;<samp>(-pi .. pi)</samp>&rsquo; radians, according to the current angular mode.
If the angle is 0 the value is converted to a real number automatically.
(If the angle is 180 degrees, the value is usually also converted to a
negative real number.)
</p>
<p>Hours-minutes-seconds forms are stored as &lsquo;<samp>(hms <var>h</var> <var>m</var>
<var>s</var>)</samp>&rsquo;, where <var>h</var> is an integer or an integer-valued float (i.e.,
a float with &lsquo;<samp><var>exp</var> &gt;= 0</samp>&rsquo;), <var>m</var> is an integer or integer-valued
float in the range &lsquo;<samp>[0&nbsp;..&nbsp;60)</samp>&rsquo;<!-- /@w -->, and <var>s</var> is any real number
in the range &lsquo;<samp>[0 .. 60)</samp>&rsquo;.
</p>
<p>Date forms are stored as &lsquo;<samp>(date <var>n</var>)</samp>&rsquo;, where <var>n</var> is
a real number that counts days since midnight on the morning of
January 1, 1 AD.  If <var>n</var> is an integer, this is a pure date
form.  If <var>n</var> is a fraction or float, this is a date/time form.
</p>
<p>Modulo forms are stored as &lsquo;<samp>(mod <var>n</var> <var>m</var>)</samp>&rsquo;, where <var>m</var> is a
positive real number or HMS form, and <var>n</var> is a real number or HMS
form in the range &lsquo;<samp>[0 .. <var>m</var>)</samp>&rsquo;.
</p>
<p>Error forms are stored as &lsquo;<samp>(sdev <var>x</var> <var>sigma</var>)</samp>&rsquo;, where <var>x</var>
is the mean value and <var>sigma</var> is the standard deviation.  Each
component is either a number, an HMS form, or a symbolic object
(a variable or function call).  If <var>sigma</var> is zero, the value is
converted to a plain real number.  If <var>sigma</var> is negative or
complex, it is automatically normalized to be a positive real.
</p>
<p>Interval forms are stored as &lsquo;<samp>(intv <var>mask</var> <var>lo</var> <var>hi</var>)</samp>&rsquo;,
where <var>mask</var> is one of the integers 0, 1, 2, or 3, and <var>lo</var> and
<var>hi</var> are real numbers, HMS forms, or symbolic objects.  The <var>mask</var>
is a binary integer where 1 represents the fact that the interval is
closed on the high end, and 2 represents the fact that it is closed on
the low end.  (Thus 3 represents a fully closed interval.)  The interval
&lsquo;<samp>(intv&nbsp;3&nbsp;<var>x</var>&nbsp;<var>x</var>)</samp>&rsquo;<!-- /@w --> is converted to the plain number <var>x</var>;
intervals &lsquo;<samp>(intv <var>mask</var> <var>x</var> <var>x</var>)</samp>&rsquo; for any other <var>mask</var>
represent empty intervals.  If <var>hi</var> is less than <var>lo</var>, the interval
is converted to a standard empty interval by replacing <var>hi</var> with <var>lo</var>.
</p>
<p>Vectors are stored as &lsquo;<samp>(vec <var>v1</var> <var>v2</var> &hellip;)</samp>&rsquo;, where <var>v1</var>
is the first element of the vector, <var>v2</var> is the second, and so on.
An empty vector is stored as &lsquo;<samp>(vec)</samp>&rsquo;.  A matrix is simply a vector
where all <var>v</var>&rsquo;s are themselves vectors of equal lengths.  Note that
Calc vectors are unrelated to the Emacs Lisp &ldquo;vector&rdquo; type, which is
generally unused by Calc data structures.
</p>
<p>Variables are stored as &lsquo;<samp>(var <var>name</var> <var>sym</var>)</samp>&rsquo;, where
<var>name</var> is a Lisp symbol whose print name is used as the visible name
of the variable, and <var>sym</var> is a Lisp symbol in which the variable&rsquo;s
value is actually stored.  Thus, &lsquo;<samp>(var pi var-pi)</samp>&rsquo; represents the
special constant &lsquo;<samp>pi</samp>&rsquo;.  Almost always, the form is &lsquo;<samp>(var
<var>v</var> var-<var>v</var>)</samp>&rsquo;.  If the variable name was entered with <code>#</code>
signs (which are converted to hyphens internally), the form is
&lsquo;<samp>(var <var>u</var> <var>v</var>)</samp>&rsquo;, where <var>u</var> is a symbol whose name
contains <code>#</code> characters, and <var>v</var> is a symbol that contains
<code>-</code> characters instead.  The value of a variable is the Calc
object stored in its <var>sym</var> symbol&rsquo;s value cell.  If the symbol&rsquo;s
value cell is void or if it contains <code>nil</code>, the variable has no
value.  Special constants have the form &lsquo;<samp>(special-const
<var>value</var>)</samp>&rsquo; stored in their value cell, where <var>value</var> is a formula
which is evaluated when the constant&rsquo;s value is requested.  Variables
which represent units are not stored in any special way; they are units
only because their names appear in the units table.  If the value
cell contains a string, it is parsed to get the variable&rsquo;s value when
the variable is used.
</p>
<p>A Lisp list with any other symbol as the first element is a function call.
The symbols <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>^</code>,
and <code>|</code> represent special binary operators; these lists are always
of the form &lsquo;<samp>(<var>op</var> <var>lhs</var> <var>rhs</var>)</samp>&rsquo; where <var>lhs</var> is the
sub-formula on the lefthand side and <var>rhs</var> is the sub-formula on the
right.  The symbol <code>neg</code> represents unary negation; this list is always
of the form &lsquo;<samp>(neg <var>arg</var>)</samp>&rsquo;.  Any other symbol <var>func</var> represents a
function that would be displayed in function-call notation; the symbol
<var>func</var> is in general always of the form &lsquo;<samp>calcFunc-<var>name</var></samp>&rsquo;.
The function cell of the symbol <var>func</var> should contain a Lisp function
for evaluating a call to <var>func</var>.  This function is passed the remaining
elements of the list (themselves already evaluated) as arguments; such
functions should return <code>nil</code> or call <code>reject-arg</code> to signify
that they should be left in symbolic form, or they should return a Calc
object which represents their value, or a list of such objects if they
wish to return multiple values.  (The latter case is allowed only for
functions which are the outer-level call in an expression whose value is
about to be pushed on the stack; this feature is considered obsolete
and is not used by any built-in Calc functions.)
</p>
<hr>
<a name="Interactive-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Stack-Lisp-Functions" accesskey="n" rel="next">Stack Lisp Functions</a>, Previous: <a href="#Data-Type-Formats" accesskey="p" rel="prev">Data Type Formats</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Interactive-Functions"></a>
<h4 class="subsubsection">17.5.7.2 Interactive Functions</h4>

<p>The functions described here are used in implementing interactive Calc
commands.  Note that this list is not exhaustive!  If there is an
existing command that behaves similarly to the one you want to define,
you may find helpful tricks by checking the source code for that command.
</p>
<dl>
<dt><a name="index-calc_002dset_002dcommand_002dflag-1"></a>Function: <strong>calc-set-command-flag</strong> <em>flag</em></dt>
<dd><p>Set the command flag <var>flag</var>.  This is generally a Lisp symbol, but
may in fact be anything.  The effect is to add <var>flag</var> to the list
stored in the variable <code>calc-command-flags</code>, unless it is already
there.  See <a href="#Defining-Simple-Commands">Defining Simple Commands</a>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dclear_002dcommand_002dflag"></a>Function: <strong>calc-clear-command-flag</strong> <em>flag</em></dt>
<dd><p>If <var>flag</var> appears among the list of currently-set command flags,
remove it from that list.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002drecord_002dundo"></a>Function: <strong>calc-record-undo</strong> <em>rec</em></dt>
<dd><p>Add the &ldquo;undo record&rdquo; <var>rec</var> to the list of steps to take if the
current operation should need to be undone.  Stack push and pop functions
automatically call <code>calc-record-undo</code>, so the kinds of undo records
you might need to create take the form &lsquo;<samp>(set <var>sym</var> <var>value</var>)</samp>&rsquo;,
which says that the Lisp variable <var>sym</var> was changed and had previously
contained <var>value</var>; &lsquo;<samp>(store <var>var</var> <var>value</var>)</samp>&rsquo; which says that
the Calc variable <var>var</var> (a string which is the name of the symbol that
contains the variable&rsquo;s value) was stored and its previous value was
<var>value</var> (either a Calc data object, or <code>nil</code> if the variable was
previously void); or &lsquo;<samp>(eval <var>undo</var> <var>redo</var> <var>args</var> &hellip;)</samp>&rsquo;,
which means that to undo requires calling the function &lsquo;<samp>(<var>undo</var>
<var>args</var> &hellip;)</samp>&rsquo; and, if the undo is later redone, calling
&lsquo;<samp>(<var>redo</var> <var>args</var> &hellip;)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002drecord_002dwhy"></a>Function: <strong>calc-record-why</strong> <em>msg args</em></dt>
<dd><p>Record the error or warning message <var>msg</var>, which is normally a string.
This message will be replayed if the user types <kbd>w</kbd> (<code>calc-why</code>);
if the message string begins with a &lsquo;<samp>*</samp>&rsquo;, it is considered important
enough to display even if the user doesn&rsquo;t type <kbd>w</kbd>.  If one or more
<var>args</var> are present, the displayed message will be of the form,
&lsquo;<samp><var>msg</var>: <var>arg1</var>, <var>arg2</var>, &hellip;</samp>&rsquo;, where the arguments are
formatted on the assumption that they are either strings or Calc objects of
some sort.  If <var>msg</var> is a symbol, it is the name of a Calc predicate
(such as <code>integerp</code> or <code>numvecp</code>) which the arguments did not
satisfy; it is expanded to a suitable string such as &ldquo;Expected an
integer.&rdquo;  The <code>reject-arg</code> function calls <code>calc-record-why</code>
automatically; see <a href="#Predicates">Predicates</a>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dis_002dinverse"></a>Function: <strong>calc-is-inverse</strong></dt>
<dd><p>This predicate returns true if the current command is inverse,
i.e., if the Inverse (<kbd>I</kbd> key) flag was set.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dis_002dhyperbolic"></a>Function: <strong>calc-is-hyperbolic</strong></dt>
<dd><p>This predicate is the analogous function for the <kbd>H</kbd> key.
</p></dd></dl>

<hr>
<a name="Stack-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Predicates" accesskey="n" rel="next">Predicates</a>, Previous: <a href="#Interactive-Lisp-Functions" accesskey="p" rel="prev">Interactive Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Stack_002dOriented-Functions"></a>
<h4 class="subsubsection">17.5.7.3 Stack-Oriented Functions</h4>

<p>The functions described here perform various operations on the Calc
stack and trail.  They are to be used in interactive Calc commands.
</p>
<dl>
<dt><a name="index-calc_002dpush_002dlist"></a>Function: <strong>calc-push-list</strong> <em>vals n</em></dt>
<dd><p>Push the Calc objects in list <var>vals</var> onto the stack at stack level
<var>n</var>.  If <var>n</var> is omitted it defaults to 1, so that the elements
are pushed at the top of the stack.  If <var>n</var> is greater than 1, the
elements will be inserted into the stack so that the last element will
end up at level <var>n</var>, the next-to-last at level <var>n</var>+1, etc.
The elements of <var>vals</var> are assumed to be valid Calc objects, and
are not evaluated, rounded, or renormalized in any way.  If <var>vals</var>
is an empty list, nothing happens.
</p>
<p>The stack elements are pushed without any sub-formula selections.
You can give an optional third argument to this function, which must
be a list the same size as <var>vals</var> of selections.  Each selection
must be <code>eq</code> to some sub-formula of the corresponding formula
in <var>vals</var>, or <code>nil</code> if that formula should have no selection.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dtop_002dlist"></a>Function: <strong>calc-top-list</strong> <em>n m</em></dt>
<dd><p>Return a list of the <var>n</var> objects starting at level <var>m</var> of the
stack.  If <var>m</var> is omitted it defaults to 1, so that the elements are
taken from the top of the stack.  If <var>n</var> is omitted, it also
defaults to 1, so that the top stack element (in the form of a
one-element list) is returned.  If <var>m</var> is greater than 1, the
<var>m</var>th stack element will be at the end of the list, the <var>m</var>+1st
element will be next-to-last, etc.  If <var>n</var> or <var>m</var> are out of
range, the command is aborted with a suitable error message.  If <var>n</var>
is zero, the function returns an empty list.  The stack elements are not
evaluated, rounded, or renormalized.
</p>
<p>If any stack elements contain selections, and selections have not
been disabled by the <kbd>j e</kbd> (<code>calc-enable-selections</code>) command,
this function returns the selected portions rather than the entire
stack elements.  It can be given a third &ldquo;selection-mode&rdquo; argument
which selects other behaviors.  If it is the symbol <code>t</code>, then
a selection in any of the requested stack elements produces an
&ldquo;invalid operation on selections&rdquo; error.  If it is the symbol <code>full</code>,
the whole stack entry is always returned regardless of selections.
If it is the symbol <code>sel</code>, the selected portion is always returned,
or <code>nil</code> if there is no selection.  (This mode ignores the <kbd>j e</kbd>
command.)  If the symbol is <code>entry</code>, the complete stack entry in
list form is returned; the first element of this list will be the whole
formula, and the third element will be the selection (or <code>nil</code>).
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dpop_002dstack"></a>Function: <strong>calc-pop-stack</strong> <em>n m</em></dt>
<dd><p>Remove the specified elements from the stack.  The parameters <var>n</var>
and <var>m</var> are defined the same as for <code>calc-top-list</code>.  The return
value of <code>calc-pop-stack</code> is uninteresting.
</p>
<p>If there are any selected sub-formulas among the popped elements, and
<kbd>j e</kbd> has not been used to disable selections, this produces an
error without changing the stack.  If you supply an optional third
argument of <code>t</code>, the stack elements are popped even if they
contain selections.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002drecord_002dlist"></a>Function: <strong>calc-record-list</strong> <em>vals tag</em></dt>
<dd><p>This function records one or more results in the trail.  The <var>vals</var>
are a list of strings or Calc objects.  The <var>tag</var> is the four-character
tag string to identify the values.  If <var>tag</var> is omitted, a blank tag
will be used.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dnormalize"></a>Function: <strong>calc-normalize</strong> <em>n</em></dt>
<dd><p>This function takes a Calc object and &ldquo;normalizes&rdquo; it.  At the very
least this involves re-rounding floating-point values according to the
current precision and other similar jobs.  Also, unless the user has
selected No-Simplify mode (see <a href="#Simplification-Modes">Simplification Modes</a>), this involves
actually evaluating a formula object by executing the function calls
it contains, and possibly also doing algebraic simplification, etc.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dtop_002dlist_002dn-1"></a>Function: <strong>calc-top-list-n</strong> <em>n m</em></dt>
<dd><p>This function is identical to <code>calc-top-list</code>, except that it calls
<code>calc-normalize</code> on the values that it takes from the stack.  They
are also passed through <code>check-complete</code>, so that incomplete
objects will be rejected with an error message.  All computational
commands should use this in preference to <code>calc-top-list</code>; the only
standard Calc commands that operate on the stack without normalizing
are stack management commands like <code>calc-enter</code> and <code>calc-roll-up</code>.
This function accepts the same optional selection-mode argument as
<code>calc-top-list</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dtop_002dn"></a>Function: <strong>calc-top-n</strong> <em>m</em></dt>
<dd><p>This function is a convenient form of <code>calc-top-list-n</code> in which only
a single element of the stack is taken and returned, rather than a list
of elements.  This also accepts an optional selection-mode argument.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002denter_002dresult-1"></a>Function: <strong>calc-enter-result</strong> <em>n tag vals</em></dt>
<dd><p>This function is a convenient interface to most of the above functions.
The <var>vals</var> argument should be either a single Calc object, or a list
of Calc objects; the object or objects are normalized, and the top <var>n</var>
stack entries are replaced by the normalized objects.  If <var>tag</var> is
non-<code>nil</code>, the normalized objects are also recorded in the trail.
A typical stack-based computational command would take the form,
</p>
<div class="smallexample">
<pre class="smallexample">(calc-enter-result <var>n</var> <var>tag</var> (cons 'calcFunc-<var>func</var>
                               (calc-top-list-n <var>n</var>)))
</pre></div>

<p>If any of the <var>n</var> stack elements replaced contain sub-formula
selections, and selections have not been disabled by <kbd>j e</kbd>,
this function takes one of two courses of action.  If <var>n</var> is
equal to the number of elements in <var>vals</var>, then each element of
<var>vals</var> is spliced into the corresponding selection; this is what
happens when you use the <tt class="key">TAB</tt> key, or when you use a unary
arithmetic operation like <code>sqrt</code>.  If <var>vals</var> has only one
element but <var>n</var> is greater than one, there must be only one
selection among the top <var>n</var> stack elements; the element from
<var>vals</var> is spliced into that selection.  This is what happens when
you use a binary arithmetic operation like <kbd>+</kbd>.  Any other
combination of <var>n</var> and <var>vals</var> is an error when selections
are present.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dunary_002dop"></a>Function: <strong>calc-unary-op</strong> <em>tag func arg</em></dt>
<dd><p>This function implements a unary operator that allows a numeric prefix
argument to apply the operator over many stack entries.  If the prefix
argument <var>arg</var> is <code>nil</code>, this uses <code>calc-enter-result</code>
as outlined above.  Otherwise, it maps the function over several stack
elements; see <a href="#Prefix-Arguments">Prefix Arguments</a>.  For example,
</p>
<div class="smallexample">
<pre class="smallexample">(defun calc-zeta (arg)
  (interactive &quot;P&quot;)
  (calc-unary-op &quot;zeta&quot; 'calcFunc-zeta arg))
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-calc_002dbinary_002dop"></a>Function: <strong>calc-binary-op</strong> <em>tag func arg ident unary</em></dt>
<dd><p>This function implements a binary operator, analogously to
<code>calc-unary-op</code>.  The optional <var>ident</var> and <var>unary</var>
arguments specify the behavior when the prefix argument is zero or
one, respectively.  If the prefix is zero, the value <var>ident</var>
is pushed onto the stack, if specified, otherwise an error message
is displayed.  If the prefix is one, the unary function <var>unary</var>
is applied to the top stack element, or, if <var>unary</var> is not
specified, nothing happens.  When the argument is two or more,
the binary function <var>func</var> is reduced across the top <var>arg</var>
stack elements; when the argument is negative, the function is
mapped between the next-to-top <i>-<var>arg</var></i> stack elements and the
top element.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dstack_002dsize"></a>Function: <strong>calc-stack-size</strong></dt>
<dd><p>Return the number of elements on the stack as an integer.  This count
does not include elements that have been temporarily hidden by stack
truncation; see <a href="#Truncating-the-Stack">Truncating the Stack</a>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dcursor_002dstack_002dindex"></a>Function: <strong>calc-cursor-stack-index</strong> <em>n</em></dt>
<dd><p>Move the point to the <var>n</var>th stack entry.  If <var>n</var> is zero, this
will be the &lsquo;<samp>.</samp>&rsquo; line.  If <var>n</var> is from 1 to the current stack size,
this will be the beginning of the first line of that stack entry&rsquo;s display.
If line numbers are enabled, this will move to the first character of the
line number, not the stack entry itself.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dsubstack_002dheight"></a>Function: <strong>calc-substack-height</strong> <em>n</em></dt>
<dd><p>Return the number of lines between the beginning of the <var>n</var>th stack
entry and the bottom of the buffer.  If <var>n</var> is zero, this
will be one (assuming no stack truncation).  If all stack entries are
one line long (i.e., no matrices are displayed), the return value will
be equal <var>n</var>+1 as long as <var>n</var> is in range.  (Note that in Big
mode, the return value includes the blank lines that separate stack
entries.)
</p></dd></dl>

<dl>
<dt><a name="index-calc_002drefresh"></a>Function: <strong>calc-refresh</strong></dt>
<dd><p>Erase the <samp>*Calculator*</samp> buffer and reformat its contents from memory.
This must be called after changing any parameter, such as the current
display radix, which might change the appearance of existing stack
entries.  (During a keyboard macro invoked by the <kbd>X</kbd> key, refreshing
is suppressed, but a flag is set so that the entire stack will be refreshed
rather than just the top few elements when the macro finishes.)
</p></dd></dl>

<hr>
<a name="Predicates"></a>
<div class="header">
<p>
Next: <a href="#Computational-Lisp-Functions" accesskey="n" rel="next">Computational Lisp Functions</a>, Previous: <a href="#Stack-Lisp-Functions" accesskey="p" rel="prev">Stack Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Predicates-2"></a>
<h4 class="subsubsection">17.5.7.4 Predicates</h4>

<p>The functions described here are predicates, that is, they return a
true/false value where <code>nil</code> means false and anything else means
true.  These predicates are expanded by <code>defmath</code>, for example,
from <code>zerop</code> to <code>math-zerop</code>.  In many cases they correspond
to native Lisp functions by the same name, but are extended to cover
the full range of Calc data types.
</p>
<dl>
<dt><a name="index-zerop"></a>Function: <strong>zerop</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is numerically zero, in any of the Calc data
types.  (Note that for some types, such as error forms and intervals,
it never makes sense to return true.)  In <code>defmath</code>, the expression
&lsquo;<samp>(= x 0)</samp>&rsquo; will automatically be converted to &lsquo;<samp>(math-zerop x)</samp>&rsquo;,
and &lsquo;<samp>(/= x 0)</samp>&rsquo; will be converted to &lsquo;<samp>(not (math-zerop x))</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-negp"></a>Function: <strong>negp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is negative.  This accepts negative real numbers
of various types, negative HMS and date forms, and intervals in which
all included values are negative.  In <code>defmath</code>, the expression
&lsquo;<samp>(&lt; x 0)</samp>&rsquo; will automatically be converted to &lsquo;<samp>(math-negp x)</samp>&rsquo;,
and &lsquo;<samp>(&gt;= x 0)</samp>&rsquo; will be converted to &lsquo;<samp>(not (math-negp x))</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-posp"></a>Function: <strong>posp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is positive (and non-zero).  For complex
numbers, none of these three predicates will return true.
</p></dd></dl>

<dl>
<dt><a name="index-looks_002dnegp"></a>Function: <strong>looks-negp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is &ldquo;negative-looking.&rdquo;  This returns true if
<var>x</var> is a negative number, or a formula with a leading minus sign
such as &lsquo;<samp>-a/b</samp>&rsquo;.  In other words, this is an object which can be
made simpler by calling <code>(- <var>x</var>)</code>.
</p></dd></dl>

<dl>
<dt><a name="index-integerp"></a>Function: <strong>integerp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is an integer of any size.
</p></dd></dl>

<dl>
<dt><a name="index-fixnump"></a>Function: <strong>fixnump</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a native Lisp integer.
</p></dd></dl>

<dl>
<dt><a name="index-natnump"></a>Function: <strong>natnump</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a nonnegative integer of any size.
</p></dd></dl>

<dl>
<dt><a name="index-fixnatnump"></a>Function: <strong>fixnatnump</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a nonnegative Lisp integer.
</p></dd></dl>

<dl>
<dt><a name="index-num_002dintegerp"></a>Function: <strong>num-integerp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is numerically an integer, i.e., either a
true integer or a float with no significant digits to the right of
the decimal point.
</p></dd></dl>

<dl>
<dt><a name="index-messy_002dintegerp"></a>Function: <strong>messy-integerp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is numerically, but not literally, an integer.
A value is <code>num-integerp</code> if it is <code>integerp</code> or
<code>messy-integerp</code> (but it is never both at once).
</p></dd></dl>

<dl>
<dt><a name="index-num_002dnatnump"></a>Function: <strong>num-natnump</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is numerically a nonnegative integer.
</p></dd></dl>

<dl>
<dt><a name="index-evenp"></a>Function: <strong>evenp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is an even integer.
</p></dd></dl>

<dl>
<dt><a name="index-looks_002devenp"></a>Function: <strong>looks-evenp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is an even integer, or a formula with a leading
multiplicative coefficient which is an even integer.
</p></dd></dl>

<dl>
<dt><a name="index-oddp"></a>Function: <strong>oddp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is an odd integer.
</p></dd></dl>

<dl>
<dt><a name="index-ratp"></a>Function: <strong>ratp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a rational number, i.e., an integer or a
fraction.
</p></dd></dl>

<dl>
<dt><a name="index-realp"></a>Function: <strong>realp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a real number, i.e., an integer, fraction,
or floating-point number.
</p></dd></dl>

<dl>
<dt><a name="index-anglep"></a>Function: <strong>anglep</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a real number or HMS form.
</p></dd></dl>

<dl>
<dt><a name="index-floatp"></a>Function: <strong>floatp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a float, or a complex number, error form,
interval, date form, or modulo form in which at least one component
is a float.
</p></dd></dl>

<dl>
<dt><a name="index-complexp"></a>Function: <strong>complexp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a rectangular or polar complex number
(but not a real number).
</p></dd></dl>

<dl>
<dt><a name="index-rect_002dcomplexp"></a>Function: <strong>rect-complexp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a rectangular complex number.
</p></dd></dl>

<dl>
<dt><a name="index-polar_002dcomplexp"></a>Function: <strong>polar-complexp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a polar complex number.
</p></dd></dl>

<dl>
<dt><a name="index-numberp"></a>Function: <strong>numberp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a real number or a complex number.
</p></dd></dl>

<dl>
<dt><a name="index-scalarp"></a>Function: <strong>scalarp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a real or complex number or an HMS form.
</p></dd></dl>

<dl>
<dt><a name="index-vectorp"></a>Function: <strong>vectorp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a vector (this simply checks if its argument
is a list whose first element is the symbol <code>vec</code>).
</p></dd></dl>

<dl>
<dt><a name="index-numvecp"></a>Function: <strong>numvecp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a number or vector.
</p></dd></dl>

<dl>
<dt><a name="index-matrixp"></a>Function: <strong>matrixp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a matrix, i.e., a vector of one or more vectors,
all of the same size.
</p></dd></dl>

<dl>
<dt><a name="index-square_002dmatrixp"></a>Function: <strong>square-matrixp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a square matrix.
</p></dd></dl>

<dl>
<dt><a name="index-objectp"></a>Function: <strong>objectp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is any numeric Calc object, including real and
complex numbers, HMS forms, date forms, error forms, intervals, and
modulo forms.  (Note that error forms and intervals may include formulas
as their components; see <code>constp</code> below.)
</p></dd></dl>

<dl>
<dt><a name="index-objvecp"></a>Function: <strong>objvecp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is an object or a vector.  This also accepts
incomplete objects, but it rejects variables and formulas (except as
mentioned above for <code>objectp</code>).
</p></dd></dl>

<dl>
<dt><a name="index-primp"></a>Function: <strong>primp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is a &ldquo;primitive&rdquo; or &ldquo;atomic&rdquo; Calc object,
i.e., one whose components cannot be regarded as sub-formulas.  This
includes variables, and all <code>objectp</code> types except error forms
and intervals.
</p></dd></dl>

<dl>
<dt><a name="index-constp"></a>Function: <strong>constp</strong> <em>x</em></dt>
<dd><p>Returns true if <var>x</var> is constant, i.e., a real or complex number,
HMS form, date form, or error form, interval, or vector all of whose
components are <code>constp</code>.
</p></dd></dl>

<dl>
<dt><a name="index-lessp"></a>Function: <strong>lessp</strong> <em>x y</em></dt>
<dd><p>Returns true if <var>x</var> is numerically less than <var>y</var>.  Returns false
if <var>x</var> is greater than or equal to <var>y</var>, or if the order is
undefined or cannot be determined.  Generally speaking, this works
by checking whether &lsquo;<samp><var>x</var> - <var>y</var></samp>&rsquo; is <code>negp</code>.  In
<code>defmath</code>, the expression &lsquo;<samp>(&lt; x y)</samp>&rsquo; will automatically be
converted to &lsquo;<samp>(lessp x y)</samp>&rsquo;; expressions involving <code>&gt;</code>, <code>&lt;=</code>,
and <code>&gt;=</code> are similarly converted in terms of <code>lessp</code>.
</p></dd></dl>

<dl>
<dt><a name="index-beforep"></a>Function: <strong>beforep</strong> <em>x y</em></dt>
<dd><p>Returns true if <var>x</var> comes before <var>y</var> in a canonical ordering
of Calc objects.  If <var>x</var> and <var>y</var> are both real numbers, this
will be the same as <code>lessp</code>.  But whereas <code>lessp</code> considers
other types of objects to be unordered, <code>beforep</code> puts any two
objects into a definite, consistent order.  The <code>beforep</code>
function is used by the <kbd>V S</kbd> vector-sorting command, and also
by Calc&rsquo;s algebraic simplifications to put the terms of a product into
canonical order: This allows &lsquo;<samp>x y + y x</samp>&rsquo; to be simplified easily to
&lsquo;<samp>2 x y</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-equal"></a>Function: <strong>equal</strong> <em>x y</em></dt>
<dd><p>This is the standard Lisp <code>equal</code> predicate; it returns true if
<var>x</var> and <var>y</var> are structurally identical.  This is the usual way
to compare numbers for equality, but note that <code>equal</code> will treat
0 and 0.0 as different.
</p></dd></dl>

<dl>
<dt><a name="index-math_002dequal"></a>Function: <strong>math-equal</strong> <em>x y</em></dt>
<dd><p>Returns true if <var>x</var> and <var>y</var> are numerically equal, either because
they are <code>equal</code>, or because their difference is <code>zerop</code>.  In
<code>defmath</code>, the expression &lsquo;<samp>(= x y)</samp>&rsquo; will automatically be
converted to &lsquo;<samp>(math-equal x y)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-equal_002dint"></a>Function: <strong>equal-int</strong> <em>x n</em></dt>
<dd><p>Returns true if <var>x</var> and <var>n</var> are numerically equal, where <var>n</var>
is a fixnum which is not a multiple of 10.  This will automatically be
used by <code>defmath</code> in place of the more general <code>math-equal</code>
whenever possible.
</p></dd></dl>

<dl>
<dt><a name="index-nearly_002dequal"></a>Function: <strong>nearly-equal</strong> <em>x y</em></dt>
<dd><p>Returns true if <var>x</var> and <var>y</var>, as floating-point numbers, are
equal except possibly in the last decimal place.  For example,
314.159 and 314.166 are considered nearly equal if the current
precision is 6 (since they differ by 7 units), but not if the current
precision is 7 (since they differ by 70 units).  Most functions which
use series expansions use <code>with-extra-prec</code> to evaluate the
series with 2 extra digits of precision, then use <code>nearly-equal</code>
to decide when the series has converged; this guards against cumulative
error in the series evaluation without doing extra work which would be
lost when the result is rounded back down to the current precision.
In <code>defmath</code>, this can be written &lsquo;<samp>(~= <var>x</var> <var>y</var>)</samp>&rsquo;.
The <var>x</var> and <var>y</var> can be numbers of any kind, including complex.
</p></dd></dl>

<dl>
<dt><a name="index-nearly_002dzerop"></a>Function: <strong>nearly-zerop</strong> <em>x y</em></dt>
<dd><p>Returns true if <var>x</var> is nearly zero, compared to <var>y</var>.  This
checks whether <var>x</var> plus <var>y</var> would by be <code>nearly-equal</code>
to <var>y</var> itself, to within the current precision, in other words,
if adding <var>x</var> to <var>y</var> would have a negligible effect on <var>y</var>
due to roundoff error.  <var>X</var> may be a real or complex number, but
<var>y</var> must be real.
</p></dd></dl>

<dl>
<dt><a name="index-is_002dtrue"></a>Function: <strong>is-true</strong> <em>x</em></dt>
<dd><p>Return true if the formula <var>x</var> represents a true value in
Calc, not Lisp, terms.  It tests if <var>x</var> is a non-zero number
or a provably non-zero formula.
</p></dd></dl>

<dl>
<dt><a name="index-reject_002darg"></a>Function: <strong>reject-arg</strong> <em>val pred</em></dt>
<dd><p>Abort the current function evaluation due to unacceptable argument values.
This calls &lsquo;<samp>(calc-record-why <var>pred</var> <var>val</var>)</samp>&rsquo;, then signals a
Lisp error which <code>normalize</code> will trap.  The net effect is that the
function call which led here will be left in symbolic form.
</p></dd></dl>

<dl>
<dt><a name="index-inexact_002dvalue"></a>Function: <strong>inexact-value</strong></dt>
<dd><p>If Symbolic mode is enabled, this will signal an error that causes
<code>normalize</code> to leave the formula in symbolic form, with the message
&ldquo;Inexact result.&rdquo;  (This function has no effect when not in Symbolic mode.)
Note that if your function calls &lsquo;<samp>(sin 5)</samp>&rsquo; in Symbolic mode, the
<code>sin</code> function will call <code>inexact-value</code>, which will cause your
function to be left unsimplified.  You may instead wish to call
&lsquo;<samp>(normalize (list 'calcFunc-sin 5))</samp>&rsquo;, which in Symbolic mode will
return the formula &lsquo;<samp>sin(5)</samp>&rsquo; to your function.
</p></dd></dl>

<dl>
<dt><a name="index-overflow"></a>Function: <strong>overflow</strong></dt>
<dd><p>This signals an error that will be reported as a floating-point overflow.
</p></dd></dl>

<dl>
<dt><a name="index-underflow"></a>Function: <strong>underflow</strong></dt>
<dd><p>This signals a floating-point underflow.
</p></dd></dl>

<hr>
<a name="Computational-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Vector-Lisp-Functions" accesskey="n" rel="next">Vector Lisp Functions</a>, Previous: <a href="#Predicates" accesskey="p" rel="prev">Predicates</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Computational-Functions"></a>
<h4 class="subsubsection">17.5.7.5 Computational Functions</h4>

<p>The functions described here do the actual computational work of the
Calculator.  In addition to these, note that any function described in
the main body of this manual may be called from Lisp; for example, if
the documentation refers to the <code>calc-sqrt</code> [<code>sqrt</code>] command,
this means <code>calc-sqrt</code> is an interactive stack-based square-root
command and <code>sqrt</code> (which <code>defmath</code> expands to <code>calcFunc-sqrt</code>)
is the actual Lisp function for taking square roots.
</p>
<p>The functions <code>math-add</code>, <code>math-sub</code>, <code>math-mul</code>,
<code>math-div</code>, <code>math-mod</code>, and <code>math-neg</code> are not included
in this list, since <code>defmath</code> allows you to write native Lisp
<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, and unary <code>-</code>,
respectively, instead.
</p>
<dl>
<dt><a name="index-normalize"></a>Function: <strong>normalize</strong> <em>val</em></dt>
<dd><p>(Full form: <code>math-normalize</code>.)
Reduce the value <var>val</var> to standard form.  For example, if <var>val</var>
is a fixnum, it will be converted to a bignum if it is too large, and
if <var>val</var> is a bignum it will be normalized by clipping off trailing
(i.e., most-significant) zero digits and converting to a fixnum if it is
small.  All the various data types are similarly converted to their standard
forms.  Variables are left alone, but function calls are actually evaluated
in formulas.  For example, normalizing &lsquo;<samp>(+ 2 (calcFunc-abs -4))</samp>&rsquo; will
return 6.
</p>
<p>If a function call fails, because the function is void or has the wrong
number of parameters, or because it returns <code>nil</code> or calls
<code>reject-arg</code> or <code>inexact-result</code>, <code>normalize</code> returns
the formula still in symbolic form.
</p>
<p>If the current simplification mode is &ldquo;none&rdquo; or &ldquo;numeric arguments
only,&rdquo; <code>normalize</code> will act appropriately.  However, the more
powerful simplification modes (like Algebraic Simplification) are
not handled by <code>normalize</code>.  They are handled by <code>calc-normalize</code>,
which calls <code>normalize</code> and possibly some other routines, such
as <code>simplify</code> or <code>simplify-units</code>.  Programs generally will
never call <code>calc-normalize</code> except when popping or pushing values
on the stack.
</p></dd></dl>

<dl>
<dt><a name="index-evaluate_002dexpr"></a>Function: <strong>evaluate-expr</strong> <em>expr</em></dt>
<dd><p>Replace all variables in <var>expr</var> that have values with their values,
then use <code>normalize</code> to simplify the result.  This is what happens
when you press the <kbd>=</kbd> key interactively.
</p></dd></dl>

<dl>
<dt><a name="index-with_002dextra_002dprec"></a>Macro: <strong>with-extra-prec</strong> <em>n body</em></dt>
<dd><p>Evaluate the Lisp forms in <var>body</var> with precision increased by <var>n</var>
digits.  This is a macro which expands to
</p>
<div class="smallexample">
<pre class="smallexample">(math-normalize
  (let ((calc-internal-prec (+ calc-internal-prec <var>n</var>)))
    <var>body</var>))
</pre></div>

<p>The surrounding call to <code>math-normalize</code> causes a floating-point
result to be rounded down to the original precision afterwards.  This
is important because some arithmetic operations assume a number&rsquo;s
mantissa contains no more digits than the current precision allows.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dfrac"></a>Function: <strong>make-frac</strong> <em>n d</em></dt>
<dd><p>Build a fraction &lsquo;<samp><var>n</var>:<var>d</var></samp>&rsquo;.  This is equivalent to calling
&lsquo;<samp>(normalize (list 'frac <var>n</var> <var>d</var>))</samp>&rsquo;, but more efficient.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dfloat"></a>Function: <strong>make-float</strong> <em>mant exp</em></dt>
<dd><p>Build a floating-point value out of <var>mant</var> and <var>exp</var>, both
of which are arbitrary integers.  This function will return a
properly normalized float value, or signal an overflow or underflow
if <var>exp</var> is out of range.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dsdev"></a>Function: <strong>make-sdev</strong> <em>x sigma</em></dt>
<dd><p>Build an error form out of <var>x</var> and the absolute value of <var>sigma</var>.
If <var>sigma</var> is zero, the result is the number <var>x</var> directly.
If <var>sigma</var> is negative or complex, its absolute value is used.
If <var>x</var> or <var>sigma</var> is not a valid type of object for use in
error forms, this calls <code>reject-arg</code>.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dintv"></a>Function: <strong>make-intv</strong> <em>mask lo hi</em></dt>
<dd><p>Build an interval form out of <var>mask</var> (which is assumed to be an
integer from 0 to 3), and the limits <var>lo</var> and <var>hi</var>.  If
<var>lo</var> is greater than <var>hi</var>, an empty interval form is returned.
This calls <code>reject-arg</code> if <var>lo</var> or <var>hi</var> is unsuitable.
</p></dd></dl>

<dl>
<dt><a name="index-sort_002dintv"></a>Function: <strong>sort-intv</strong> <em>mask lo hi</em></dt>
<dd><p>Build an interval form, similar to <code>make-intv</code>, except that if
<var>lo</var> is less than <var>hi</var> they are simply exchanged, and the
bits of <var>mask</var> are swapped accordingly.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dmod"></a>Function: <strong>make-mod</strong> <em>n m</em></dt>
<dd><p>Build a modulo form out of <var>n</var> and the modulus <var>m</var>.  Since modulo
forms do not allow formulas as their components, if <var>n</var> or <var>m</var>
is not a real number or HMS form the result will be a formula which
is a call to <code>makemod</code>, the algebraic version of this function.
</p></dd></dl>

<dl>
<dt><a name="index-float-1"></a>Function: <strong>float</strong> <em>x</em></dt>
<dd><p>Convert <var>x</var> to floating-point form.  Integers and fractions are
converted to numerically equivalent floats; components of complex
numbers, vectors, HMS forms, date forms, error forms, intervals, and
modulo forms are recursively floated.  If the argument is a variable
or formula, this calls <code>reject-arg</code>.
</p></dd></dl>

<dl>
<dt><a name="index-compare"></a>Function: <strong>compare</strong> <em>x y</em></dt>
<dd><p>Compare the numbers <var>x</var> and <var>y</var>, and return <i>-1</i> if
&lsquo;<samp>(lessp <var>x</var> <var>y</var>)</samp>&rsquo;, 1 if &lsquo;<samp>(lessp <var>y</var> <var>x</var>)</samp>&rsquo;,
0 if &lsquo;<samp>(math-equal <var>x</var> <var>y</var>)</samp>&rsquo;, or 2 if the order is
undefined or cannot be determined.
</p></dd></dl>

<dl>
<dt><a name="index-numdigs"></a>Function: <strong>numdigs</strong> <em>n</em></dt>
<dd><p>Return the number of digits of integer <var>n</var>, effectively
&lsquo;<samp>ceil(log10(<var>n</var>))</samp>&rsquo;, but much more efficient.  Zero is
considered to have zero digits.
</p></dd></dl>

<dl>
<dt><a name="index-scale_002dint"></a>Function: <strong>scale-int</strong> <em>x n</em></dt>
<dd><p>Shift integer <var>x</var> left <var>n</var> decimal digits, or right <i>-<var>n</var></i>
digits with truncation toward zero.
</p></dd></dl>

<dl>
<dt><a name="index-scale_002drounding"></a>Function: <strong>scale-rounding</strong> <em>x n</em></dt>
<dd><p>Like <code>scale-int</code>, except that a right shift rounds to the nearest
integer rather than truncating.
</p></dd></dl>

<dl>
<dt><a name="index-fixnum-1"></a>Function: <strong>fixnum</strong> <em>n</em></dt>
<dd><p>Return the integer <var>n</var> as a fixnum, i.e., a native Lisp integer.
If <var>n</var> is outside the permissible range for Lisp integers (usually
24 binary bits) the result is undefined.
</p></dd></dl>

<dl>
<dt><a name="index-sqr"></a>Function: <strong>sqr</strong> <em>x</em></dt>
<dd><p>Compute the square of <var>x</var>; short for &lsquo;<samp>(* <var>x</var> <var>x</var>)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-quotient"></a>Function: <strong>quotient</strong> <em>x y</em></dt>
<dd><p>Divide integer <var>x</var> by integer <var>y</var>; return an integer quotient
and discard the remainder.  If <var>x</var> or <var>y</var> is negative, the
direction of rounding is undefined.
</p></dd></dl>

<dl>
<dt><a name="index-idiv"></a>Function: <strong>idiv</strong> <em>x y</em></dt>
<dd><p>Perform an integer division; if <var>x</var> and <var>y</var> are both nonnegative
integers, this uses the <code>quotient</code> function, otherwise it computes
&lsquo;<samp>floor(<var>x</var>/<var>y</var>)</samp>&rsquo;.  Thus the result is well-defined but
slower than for <code>quotient</code>.
</p></dd></dl>

<dl>
<dt><a name="index-imod"></a>Function: <strong>imod</strong> <em>x y</em></dt>
<dd><p>Divide integer <var>x</var> by integer <var>y</var>; return the integer remainder
and discard the quotient.  Like <code>quotient</code>, this works only for
integer arguments and is not well-defined for negative arguments.
For a more well-defined result, use &lsquo;<samp>(% <var>x</var> <var>y</var>)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-idivmod"></a>Function: <strong>idivmod</strong> <em>x y</em></dt>
<dd><p>Divide integer <var>x</var> by integer <var>y</var>; return a cons cell whose
<code>car</code> is &lsquo;<samp>(quotient <var>x</var> <var>y</var>)</samp>&rsquo; and whose <code>cdr</code>
is &lsquo;<samp>(imod <var>x</var> <var>y</var>)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-pow"></a>Function: <strong>pow</strong> <em>x y</em></dt>
<dd><p>Compute <var>x</var> to the power <var>y</var>.  In <code>defmath</code> code, this can
also be written &lsquo;<samp>(^ <var>x</var> <var>y</var>)</samp>&rsquo; or
&lsquo;<samp>(expt&nbsp;<var>x</var>&nbsp;<var>y</var>)</samp>&rsquo;<!-- /@w -->.
</p></dd></dl>

<dl>
<dt><a name="index-abs_002dapprox"></a>Function: <strong>abs-approx</strong> <em>x</em></dt>
<dd><p>Compute a fast approximation to the absolute value of <var>x</var>.  For
example, for a rectangular complex number the result is the sum of
the absolute values of the components.
</p></dd></dl>

<a name="index-e"></a>
<a name="index-gamma_002dconst"></a>
<a name="index-ln_002d2"></a>
<a name="index-ln_002d10"></a>
<a name="index-phi"></a>
<a name="index-pi_002dover_002d2"></a>
<a name="index-pi_002dover_002d4"></a>
<a name="index-pi_002dover_002d180"></a>
<a name="index-sqrt_002dtwo_002dpi"></a>
<a name="index-sqrt_002de"></a>
<a name="index-two_002dpi"></a>
<dl>
<dt><a name="index-pi"></a>Function: <strong>pi</strong></dt>
<dd><p>The function &lsquo;<samp>(pi)</samp>&rsquo; computes &lsquo;<samp>pi</samp>&rsquo; to the current precision.
Other related constant-generating functions are <code>two-pi</code>,
<code>pi-over-2</code>, <code>pi-over-4</code>, <code>pi-over-180</code>, <code>sqrt-two-pi</code>,
<code>e</code>, <code>sqrt-e</code>, <code>ln-2</code>, <code>ln-10</code>, <code>phi</code> and
<code>gamma-const</code>.  Each function returns a floating-point value in the
current precision, and each uses caching so that all calls after the
first are essentially free.
</p></dd></dl>

<dl>
<dt><a name="index-math_002ddefcache"></a>Macro: <strong>math-defcache</strong> <em><var>func</var> <var>initial</var> <var>form</var></em></dt>
<dd><p>This macro, usually used as a top-level call like <code>defun</code> or
<code>defvar</code>, defines a new cached constant analogous to <code>pi</code>, etc.
It defines a function <code>func</code> which returns the requested value;
if <var>initial</var> is non-<code>nil</code> it must be a &lsquo;<samp>(float &hellip;)</samp>&rsquo;
form which serves as an initial value for the cache.  If <var>func</var>
is called when the cache is empty or does not have enough digits to
satisfy the current precision, the Lisp expression <var>form</var> is evaluated
with the current precision increased by four, and the result minus its
two least significant digits is stored in the cache.  For example,
calling &lsquo;<samp>(pi)</samp>&rsquo; with a precision of 30 computes &lsquo;<samp>pi</samp>&rsquo; to 34
digits, rounds it down to 32 digits for future use, then rounds it
again to 30 digits for use in the present request.
</p></dd></dl>

<a name="index-half_002dcircle"></a>
<a name="index-quarter_002dcircle"></a>
<dl>
<dt><a name="index-full_002dcircle"></a>Function: <strong>full-circle</strong> <em>symb</em></dt>
<dd><p>If the current angular mode is Degrees or HMS, this function returns the
integer 360.  In Radians mode, this function returns either the
corresponding value in radians to the current precision, or the formula
&lsquo;<samp>2*pi</samp>&rsquo;, depending on the Symbolic mode.  There are also similar
function <code>half-circle</code> and <code>quarter-circle</code>.
</p></dd></dl>

<dl>
<dt><a name="index-power_002dof_002d2"></a>Function: <strong>power-of-2</strong> <em>n</em></dt>
<dd><p>Compute two to the integer power <var>n</var>, as a (potentially very large)
integer.  Powers of two are cached, so only the first call for a
particular <var>n</var> is expensive.
</p></dd></dl>

<dl>
<dt><a name="index-integer_002dlog2"></a>Function: <strong>integer-log2</strong> <em>n</em></dt>
<dd><p>Compute the base-2 logarithm of <var>n</var>, which must be an integer which
is a power of two.  If <var>n</var> is not a power of two, this function will
return <code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-div_002dmod"></a>Function: <strong>div-mod</strong> <em>a b m</em></dt>
<dd><p>Divide <var>a</var> by <var>b</var>, modulo <var>m</var>.  This returns <code>nil</code> if
there is no solution, or if any of the arguments are not integers.
</p></dd></dl>

<dl>
<dt><a name="index-pow_002dmod"></a>Function: <strong>pow-mod</strong> <em>a b m</em></dt>
<dd><p>Compute <var>a</var> to the power <var>b</var>, modulo <var>m</var>.  If <var>a</var>,
<var>b</var>, and <var>m</var> are integers, this uses an especially efficient
algorithm.  Otherwise, it simply computes &lsquo;<samp>(% (^ a b) m)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-isqrt"></a>Function: <strong>isqrt</strong> <em>n</em></dt>
<dd><p>Compute the integer square root of <var>n</var>.  This is the square root
of <var>n</var> rounded down toward zero, i.e., &lsquo;<samp>floor(sqrt(<var>n</var>))</samp>&rsquo;.
If <var>n</var> is itself an integer, the computation is especially efficient.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dhms"></a>Function: <strong>to-hms</strong> <em>a ang</em></dt>
<dd><p>Convert the argument <var>a</var> into an HMS form.  If <var>ang</var> is specified,
it is the angular mode in which to interpret <var>a</var>, either <code>deg</code>
or <code>rad</code>.  Otherwise, the current angular mode is used.  If <var>a</var>
is already an HMS form it is returned as-is.
</p></dd></dl>

<dl>
<dt><a name="index-from_002dhms"></a>Function: <strong>from-hms</strong> <em>a ang</em></dt>
<dd><p>Convert the HMS form <var>a</var> into a real number.  If <var>ang</var> is specified,
it is the angular mode in which to express the result, otherwise the
current angular mode is used.  If <var>a</var> is already a real number, it
is returned as-is.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dradians"></a>Function: <strong>to-radians</strong> <em>a</em></dt>
<dd><p>Convert the number or HMS form <var>a</var> to radians from the current
angular mode.
</p></dd></dl>

<dl>
<dt><a name="index-from_002dradians"></a>Function: <strong>from-radians</strong> <em>a</em></dt>
<dd><p>Convert the number <var>a</var> from radians to the current angular mode.
If <var>a</var> is a formula, this returns the formula &lsquo;<samp>deg(<var>a</var>)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dradians_002d2"></a>Function: <strong>to-radians-2</strong> <em>a</em></dt>
<dd><p>Like <code>to-radians</code>, except that in Symbolic mode a degrees to
radians conversion yields a formula like &lsquo;<samp><var>a</var>*pi/180</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-from_002dradians_002d2"></a>Function: <strong>from-radians-2</strong> <em>a</em></dt>
<dd><p>Like <code>from-radians</code>, except that in Symbolic mode a radians to
degrees conversion yields a formula like &lsquo;<samp><var>a</var>*180/pi</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-random_002ddigit"></a>Function: <strong>random-digit</strong></dt>
<dd><p>Produce a random base-1000 digit in the range 0 to 999.
</p></dd></dl>

<dl>
<dt><a name="index-random_002ddigits"></a>Function: <strong>random-digits</strong> <em>n</em></dt>
<dd><p>Produce a random <var>n</var>-digit integer; this will be an integer
in the interval &lsquo;<samp>[0, 10^<var>n</var>)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-random_002dfloat"></a>Function: <strong>random-float</strong></dt>
<dd><p>Produce a random float in the interval &lsquo;<samp>[0, 1)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-prime_002dtest"></a>Function: <strong>prime-test</strong> <em>n iters</em></dt>
<dd><p>Determine whether the integer <var>n</var> is prime.  Return a list which has
one of these forms: &lsquo;<samp>(nil <var>f</var>)</samp>&rsquo; means the number is non-prime
because it was found to be divisible by <var>f</var>; &lsquo;<samp>(nil)</samp>&rsquo; means it
was found to be non-prime by table look-up (so no factors are known);
&lsquo;<samp>(nil unknown)</samp>&rsquo; means it is definitely non-prime but no factors
are known because <var>n</var> was large enough that Fermat&rsquo;s probabilistic
test had to be used; &lsquo;<samp>(t)</samp>&rsquo; means the number is definitely prime;
and &lsquo;<samp>(maybe <var>i</var> <var>p</var>)</samp>&rsquo; means that Fermat&rsquo;s test, after <var>i</var>
iterations, is <var>p</var> percent sure that the number is prime.  The
<var>iters</var> parameter is the number of Fermat iterations to use, in the
case that this is necessary.  If <code>prime-test</code> returns &ldquo;maybe,&rdquo;
you can call it again with the same <var>n</var> to get a greater certainty;
<code>prime-test</code> remembers where it left off.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dsimple_002dfraction"></a>Function: <strong>to-simple-fraction</strong> <em>f</em></dt>
<dd><p>If <var>f</var> is a floating-point number which can be represented exactly
as a small rational number, return that number, else return <var>f</var>.
For example, 0.75 would be converted to 3:4.  This function is very
fast.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dfraction"></a>Function: <strong>to-fraction</strong> <em>f tol</em></dt>
<dd><p>Find a rational approximation to floating-point number <var>f</var> to within
a specified tolerance <var>tol</var>; this corresponds to the algebraic
function <code>frac</code>, and can be rather slow.
</p></dd></dl>

<dl>
<dt><a name="index-quarter_002dinteger"></a>Function: <strong>quarter-integer</strong> <em>n</em></dt>
<dd><p>If <var>n</var> is an integer or integer-valued float, this function
returns zero.  If <var>n</var> is a half-integer (i.e., an integer plus
<i>1:2</i> or 0.5), it returns 2.  If <var>n</var> is a quarter-integer,
it returns 1 or 3.  If <var>n</var> is anything else, this function
returns <code>nil</code>.
</p></dd></dl>

<hr>
<a name="Vector-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Symbolic-Lisp-Functions" accesskey="n" rel="next">Symbolic Lisp Functions</a>, Previous: <a href="#Computational-Lisp-Functions" accesskey="p" rel="prev">Computational Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vector-Functions"></a>
<h4 class="subsubsection">17.5.7.6 Vector Functions</h4>

<p>The functions described here perform various operations on vectors and
matrices.
</p>
<dl>
<dt><a name="index-math_002dconcat"></a>Function: <strong>math-concat</strong> <em>x y</em></dt>
<dd><p>Do a vector concatenation; this operation is written &lsquo;<samp><var>x</var> | <var>y</var></samp>&rsquo;
in a symbolic formula.  See <a href="#Building-Vectors">Building Vectors</a>.
</p></dd></dl>

<dl>
<dt><a name="index-vec_002dlength"></a>Function: <strong>vec-length</strong> <em>v</em></dt>
<dd><p>Return the length of vector <var>v</var>.  If <var>v</var> is not a vector, the
result is zero.  If <var>v</var> is a matrix, this returns the number of
rows in the matrix.
</p></dd></dl>

<dl>
<dt><a name="index-mat_002ddimens"></a>Function: <strong>mat-dimens</strong> <em>m</em></dt>
<dd><p>Determine the dimensions of vector or matrix <var>m</var>.  If <var>m</var> is not
a vector, the result is an empty list.  If <var>m</var> is a plain vector
but not a matrix, the result is a one-element list containing the length
of the vector.  If <var>m</var> is a matrix with <var>r</var> rows and <var>c</var> columns,
the result is the list &lsquo;<samp>(<var>r</var> <var>c</var>)</samp>&rsquo;.  Higher-order tensors
produce lists of more than two dimensions.  Note that the object
&lsquo;<samp>[[1, 2, 3], [4, 5]]</samp>&rsquo; is a vector of vectors not all the same size,
and is treated by this and other Calc routines as a plain vector of two
elements.
</p></dd></dl>

<dl>
<dt><a name="index-dimension_002derror"></a>Function: <strong>dimension-error</strong></dt>
<dd><p>Abort the current function with a message of &ldquo;Dimension error.&rdquo;
The Calculator will leave the function being evaluated in symbolic
form; this is really just a special case of <code>reject-arg</code>.
</p></dd></dl>

<dl>
<dt><a name="index-build_002dvector"></a>Function: <strong>build-vector</strong> <em>args</em></dt>
<dd><p>Return a Calc vector with <var>args</var> as elements.
For example, &lsquo;<samp>(build-vector 1 2 3)</samp>&rsquo; returns the Calc vector
&lsquo;<samp>[1, 2, 3]</samp>&rsquo;, stored internally as the list &lsquo;<samp>(vec 1 2 3)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-make_002dvec"></a>Function: <strong>make-vec</strong> <em>obj dims</em></dt>
<dd><p>Return a Calc vector or matrix all of whose elements are equal to
<var>obj</var>.  For example, &lsquo;<samp>(make-vec 27 3 4)</samp>&rsquo; returns a 3x4 matrix
filled with 27&rsquo;s.
</p></dd></dl>

<dl>
<dt><a name="index-row_002dmatrix"></a>Function: <strong>row-matrix</strong> <em>v</em></dt>
<dd><p>If <var>v</var> is a plain vector, convert it into a row matrix, i.e.,
a matrix whose single row is <var>v</var>.  If <var>v</var> is already a matrix,
leave it alone.
</p></dd></dl>

<dl>
<dt><a name="index-col_002dmatrix"></a>Function: <strong>col-matrix</strong> <em>v</em></dt>
<dd><p>If <var>v</var> is a plain vector, convert it into a column matrix, i.e., a
matrix with each element of <var>v</var> as a separate row.  If <var>v</var> is
already a matrix, leave it alone.
</p></dd></dl>

<dl>
<dt><a name="index-map_002dvec"></a>Function: <strong>map-vec</strong> <em>f v</em></dt>
<dd><p>Map the Lisp function <var>f</var> over the Calc vector <var>v</var>.  For example,
&lsquo;<samp>(map-vec 'math-floor v)</samp>&rsquo; returns a vector of the floored components
of vector <var>v</var>.
</p></dd></dl>

<dl>
<dt><a name="index-map_002dvec_002d2"></a>Function: <strong>map-vec-2</strong> <em>f a b</em></dt>
<dd><p>Map the Lisp function <var>f</var> over the two vectors <var>a</var> and <var>b</var>.
If <var>a</var> and <var>b</var> are vectors of equal length, the result is a
vector of the results of calling &lsquo;<samp>(<var>f</var> <var>ai</var> <var>bi</var>)</samp>&rsquo;
for each pair of elements <var>ai</var> and <var>bi</var>.  If either <var>a</var> or
<var>b</var> is a scalar, it is matched with each value of the other vector.
For example, &lsquo;<samp>(map-vec-2 'math-add v 1)</samp>&rsquo; returns the vector <var>v</var>
with each element increased by one.  Note that using &lsquo;<samp>'+</samp>&rsquo; would not
work here, since <code>defmath</code> does not expand function names everywhere,
just where they are in the function position of a Lisp expression.
</p></dd></dl>

<dl>
<dt><a name="index-reduce_002dvec"></a>Function: <strong>reduce-vec</strong> <em>f v</em></dt>
<dd><p>Reduce the function <var>f</var> over the vector <var>v</var>.  For example, if
<var>v</var> is &lsquo;<samp>[10, 20, 30, 40]</samp>&rsquo;, this calls &lsquo;<samp>(f (f (f 10 20) 30) 40)</samp>&rsquo;.
If <var>v</var> is a matrix, this reduces over the rows of <var>v</var>.
</p></dd></dl>

<dl>
<dt><a name="index-reduce_002dcols"></a>Function: <strong>reduce-cols</strong> <em>f m</em></dt>
<dd><p>Reduce the function <var>f</var> over the columns of matrix <var>m</var>.  For
example, if <var>m</var> is &lsquo;<samp>[[1, 2], [3, 4], [5, 6]]</samp>&rsquo;, the result
is a vector of the two elements &lsquo;<samp>(f (f 1 3) 5)</samp>&rsquo; and &lsquo;<samp>(f (f 2 4) 6)</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-mat_002drow"></a>Function: <strong>mat-row</strong> <em>m n</em></dt>
<dd><p>Return the <var>n</var>th row of matrix <var>m</var>.  This is equivalent to
&lsquo;<samp>(elt m n)</samp>&rsquo;.  For a slower but safer version, use <code>mrow</code>.
(See <a href="#Extracting-Elements">Extracting Elements</a>.)
</p></dd></dl>

<dl>
<dt><a name="index-mat_002dcol"></a>Function: <strong>mat-col</strong> <em>m n</em></dt>
<dd><p>Return the <var>n</var>th column of matrix <var>m</var>, in the form of a vector.
The arguments are not checked for correctness.
</p></dd></dl>

<dl>
<dt><a name="index-mat_002dless_002drow"></a>Function: <strong>mat-less-row</strong> <em>m n</em></dt>
<dd><p>Return a copy of matrix <var>m</var> with its <var>n</var>th row deleted.  The
number <var>n</var> must be in range from 1 to the number of rows in <var>m</var>.
</p></dd></dl>

<dl>
<dt><a name="index-mat_002dless_002dcol"></a>Function: <strong>mat-less-col</strong> <em>m n</em></dt>
<dd><p>Return a copy of matrix <var>m</var> with its <var>n</var>th column deleted.
</p></dd></dl>

<dl>
<dt><a name="index-transpose"></a>Function: <strong>transpose</strong> <em>m</em></dt>
<dd><p>Return the transpose of matrix <var>m</var>.
</p></dd></dl>

<dl>
<dt><a name="index-flatten_002dvector"></a>Function: <strong>flatten-vector</strong> <em>v</em></dt>
<dd><p>Flatten nested vector <var>v</var> into a vector of scalars.  For example,
if <var>v</var> is &lsquo;<samp>[[1, 2, 3], [4, 5]]</samp>&rsquo; the result is &lsquo;<samp>[1, 2, 3, 4, 5]</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-copy_002dmatrix"></a>Function: <strong>copy-matrix</strong> <em>m</em></dt>
<dd><p>If <var>m</var> is a matrix, return a copy of <var>m</var>.  This maps
<code>copy-sequence</code> over the rows of <var>m</var>; in Lisp terms, each
element of the result matrix will be <code>eq</code> to the corresponding
element of <var>m</var>, but none of the <code>cons</code> cells that make up
the structure of the matrix will be <code>eq</code>.  If <var>m</var> is a plain
vector, this is the same as <code>copy-sequence</code>.
</p></dd></dl>

<dl>
<dt><a name="index-swap_002drows"></a>Function: <strong>swap-rows</strong> <em>m r1 r2</em></dt>
<dd><p>Exchange rows <var>r1</var> and <var>r2</var> of matrix <var>m</var> in-place.  In
other words, unlike most of the other functions described here, this
function changes <var>m</var> itself rather than building up a new result
matrix.  The return value is <var>m</var>, i.e., &lsquo;<samp>(eq (swap-rows m 1 2) m)</samp>&rsquo;
is true, with the side effect of exchanging the first two rows of
<var>m</var>.
</p></dd></dl>

<hr>
<a name="Symbolic-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Formatting-Lisp-Functions" accesskey="n" rel="next">Formatting Lisp Functions</a>, Previous: <a href="#Vector-Lisp-Functions" accesskey="p" rel="prev">Vector Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Symbolic-Functions"></a>
<h4 class="subsubsection">17.5.7.7 Symbolic Functions</h4>

<p>The functions described here operate on symbolic formulas in the
Calculator.
</p>
<dl>
<dt><a name="index-calc_002dprepare_002dselection"></a>Function: <strong>calc-prepare-selection</strong> <em>num</em></dt>
<dd><p>Prepare a stack entry for selection operations.  If <var>num</var> is
omitted, the stack entry containing the cursor is used; otherwise,
it is the number of the stack entry to use.  This function stores
useful information about the current stack entry into a set of
variables.  <code>calc-selection-cache-num</code> contains the number of
the stack entry involved (equal to <var>num</var> if you specified it);
<code>calc-selection-cache-entry</code> contains the stack entry as a
list (such as <code>calc-top-list</code> would return with <code>entry</code>
as the selection mode); and <code>calc-selection-cache-comp</code> contains
a special &ldquo;tagged&rdquo; composition (see <a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a>)
which allows Calc to relate cursor positions in the buffer with
their corresponding sub-formulas.
</p>
<p>A slight complication arises in the selection mechanism because
formulas may contain small integers.  For example, in the vector
&lsquo;<samp>[1, 2, 1]</samp>&rsquo; the first and last elements are <code>eq</code> to each
other; selections are recorded as the actual Lisp object that
appears somewhere in the tree of the whole formula, but storing
<code>1</code> would falsely select both <code>1</code>&rsquo;s in the vector.  So
<code>calc-prepare-selection</code> also checks the stack entry and
replaces any plain integers with &ldquo;complex number&rdquo; lists of the form
&lsquo;<samp>(cplx <var>n</var> 0)</samp>&rsquo;.  This list will be displayed the same as a
plain <var>n</var> and the change will be completely invisible to the
user, but it will guarantee that no two sub-formulas of the stack
entry will be <code>eq</code> to each other.  Next time the stack entry
is involved in a computation, <code>calc-normalize</code> will replace
these lists with plain numbers again, again invisibly to the user.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dencase_002datoms"></a>Function: <strong>calc-encase-atoms</strong> <em>x</em></dt>
<dd><p>This modifies the formula <var>x</var> to ensure that each part of the
formula is a unique atom, using the &lsquo;<samp>(cplx <var>n</var> 0)</samp>&rsquo; trick
described above.  This function may use <code>setcar</code> to modify
the formula in-place.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dfind_002dselected_002dpart"></a>Function: <strong>calc-find-selected-part</strong></dt>
<dd><p>Find the smallest sub-formula of the current formula that contains
the cursor.  This assumes <code>calc-prepare-selection</code> has been
called already.  If the cursor is not actually on any part of the
formula, this returns <code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dchange_002dcurrent_002dselection"></a>Function: <strong>calc-change-current-selection</strong> <em>selection</em></dt>
<dd><p>Change the currently prepared stack element&rsquo;s selection to
<var>selection</var>, which should be <code>eq</code> to some sub-formula
of the stack element, or <code>nil</code> to unselect the formula.
The stack element&rsquo;s appearance in the Calc buffer is adjusted
to reflect the new selection.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dfind_002dnth_002dpart"></a>Function: <strong>calc-find-nth-part</strong> <em>expr n</em></dt>
<dd><p>Return the <var>n</var>th sub-formula of <var>expr</var>.  This function is used
by the selection commands, and (unless <kbd>j b</kbd> has been used) treats
sums and products as flat many-element formulas.  Thus if <var>expr</var>
is &lsquo;<samp>((a + b) - c) + d</samp>&rsquo;, calling <code>calc-find-nth-part</code> with
<var>n</var> equal to four will return &lsquo;<samp>d</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dfind_002dparent_002dformula"></a>Function: <strong>calc-find-parent-formula</strong> <em>expr part</em></dt>
<dd><p>Return the sub-formula of <var>expr</var> which immediately contains
<var>part</var>.  If <var>expr</var> is &lsquo;<samp>a*b + (c+1)*d</samp>&rsquo; and <var>part</var>
is <code>eq</code> to the &lsquo;<samp>c+1</samp>&rsquo; term of <var>expr</var>, then this function
will return &lsquo;<samp>(c+1)*d</samp>&rsquo;.  If <var>part</var> turns out not to be a
sub-formula of <var>expr</var>, the function returns <code>nil</code>.  If
<var>part</var> is <code>eq</code> to <var>expr</var>, the function returns <code>t</code>.
This function does not take associativity into account.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dfind_002dassoc_002dparent_002dformula"></a>Function: <strong>calc-find-assoc-parent-formula</strong> <em>expr part</em></dt>
<dd><p>This is the same as <code>calc-find-parent-formula</code>, except that
(unless <kbd>j b</kbd> has been used) it continues widening the selection
to contain a complete level of the formula.  Given &lsquo;<samp>a</samp>&rsquo; from
&lsquo;<samp>((a + b) - c) + d</samp>&rsquo;, <code>calc-find-parent-formula</code> will
return &lsquo;<samp>a + b</samp>&rsquo; but <code>calc-find-assoc-parent-formula</code> will
return the whole expression.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dgrow_002dassoc_002dformula"></a>Function: <strong>calc-grow-assoc-formula</strong> <em>expr part</em></dt>
<dd><p>This expands sub-formula <var>part</var> of <var>expr</var> to encompass a
complete level of the formula.  If <var>part</var> and its immediate
parent are not compatible associative operators, or if <kbd>j b</kbd>
has been used, this simply returns <var>part</var>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dfind_002dsub_002dformula"></a>Function: <strong>calc-find-sub-formula</strong> <em>expr part</em></dt>
<dd><p>This finds the immediate sub-formula of <var>expr</var> which contains
<var>part</var>.  It returns an index <var>n</var> such that
&lsquo;<samp>(calc-find-nth-part <var>expr</var> <var>n</var>)</samp>&rsquo; would return <var>part</var>.
If <var>part</var> is not a sub-formula of <var>expr</var>, it returns <code>nil</code>.
If <var>part</var> is <code>eq</code> to <var>expr</var>, it returns <code>t</code>.  This
function does not take associativity into account.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dreplace_002dsub_002dformula"></a>Function: <strong>calc-replace-sub-formula</strong> <em>expr old new</em></dt>
<dd><p>This function returns a copy of formula <var>expr</var>, with the
sub-formula that is <code>eq</code> to <var>old</var> replaced by <var>new</var>.
</p></dd></dl>

<dl>
<dt><a name="index-simplify"></a>Function: <strong>simplify</strong> <em>expr</em></dt>
<dd><p>Simplify the expression <var>expr</var> by applying Calc&rsquo;s algebraic
simplifications.  This  always returns a copy of the expression; the
structure <var>expr</var> points to remains unchanged in memory.
</p>
<p>More precisely, here is what <code>simplify</code> does:  The expression is
first normalized and evaluated by calling <code>normalize</code>.  If any
<code>AlgSimpRules</code> have been defined, they are then applied.  Then
the expression is traversed in a depth-first, bottom-up fashion; at
each level, any simplifications that can be made are made until no
further changes are possible.  Once the entire formula has been
traversed in this way, it is compared with the original formula (from
before the call to <code>normalize</code>) and, if it has changed,
the entire procedure is repeated (starting with <code>normalize</code>)
until no further changes occur.  Usually only two iterations are
needed: one to simplify the formula, and another to verify that no
further simplifications were possible.
</p></dd></dl>

<dl>
<dt><a name="index-simplify_002dextended"></a>Function: <strong>simplify-extended</strong> <em>expr</em></dt>
<dd><p>Simplify the expression <var>expr</var>, with additional rules enabled that
help do a more thorough job, while not being entirely &ldquo;safe&rdquo; in all
circumstances.  (For example, this mode will simplify &lsquo;<samp>sqrt(x^2)</samp>&rsquo;
to &lsquo;<samp>x</samp>&rsquo;, which is only valid when <var>x</var> is positive.)  This is
implemented by temporarily binding the variable <code>math-living-dangerously</code>
to <code>t</code> (using a <code>let</code> form) and calling <code>simplify</code>.
Dangerous simplification rules are written to check this variable
before taking any action.
</p></dd></dl>

<dl>
<dt><a name="index-simplify_002dunits"></a>Function: <strong>simplify-units</strong> <em>expr</em></dt>
<dd><p>Simplify the expression <var>expr</var>, treating variable names as units
whenever possible.  This works by binding the variable
<code>math-simplifying-units</code> to <code>t</code> while calling <code>simplify</code>.
</p></dd></dl>

<dl>
<dt><a name="index-math_002ddefsimplify"></a>Macro: <strong>math-defsimplify</strong> <em>funcs body</em></dt>
<dd><p>Register a new simplification rule; this is normally called as a top-level
form, like <code>defun</code> or <code>defmath</code>.  If <var>funcs</var> is a symbol
(like <code>+</code> or <code>calcFunc-sqrt</code>), this simplification rule is
applied to the formulas which are calls to the specified function.  Or,
<var>funcs</var> can be a list of such symbols; the rule applies to all
functions on the list.  The <var>body</var> is written like the body of a
function with a single argument called <code>expr</code>.  The body will be
executed with <code>expr</code> bound to a formula which is a call to one of
the functions <var>funcs</var>.  If the function body returns <code>nil</code>, or
if it returns a result <code>equal</code> to the original <code>expr</code>, it is
ignored and Calc goes on to try the next simplification rule that applies.
If the function body returns something different, that new formula is
substituted for <var>expr</var> in the original formula.
</p>
<p>At each point in the formula, rules are tried in the order of the
original calls to <code>math-defsimplify</code>; the search stops after the
first rule that makes a change.  Thus later rules for that same
function will not have a chance to trigger until the next iteration
of the main <code>simplify</code> loop.
</p>
<p>Note that, since <code>defmath</code> is not being used here, <var>body</var> must
be written in true Lisp code without the conveniences that <code>defmath</code>
provides.  If you prefer, you can have <var>body</var> simply call another
function (defined with <code>defmath</code>) which does the real work.
</p>
<p>The arguments of a function call will already have been simplified
before any rules for the call itself are invoked.  Since a new argument
list is consed up when this happens, this means that the rule&rsquo;s body is
allowed to rearrange the function&rsquo;s arguments destructively if that is
convenient.  Here is a typical example of a simplification rule:
</p>
<div class="smallexample">
<pre class="smallexample">(math-defsimplify calcFunc-arcsinh
  (or (and (math-looks-negp (nth 1 expr))
           (math-neg (list 'calcFunc-arcsinh
                           (math-neg (nth 1 expr)))))
      (and (eq (car-safe (nth 1 expr)) 'calcFunc-sinh)
           (or math-living-dangerously
               (math-known-realp (nth 1 (nth 1 expr))))
           (nth 1 (nth 1 expr)))))
</pre></div>

<p>This is really a pair of rules written with one <code>math-defsimplify</code>
for convenience; the first replaces &lsquo;<samp>arcsinh(-x)</samp>&rsquo; with
&lsquo;<samp>-arcsinh(x)</samp>&rsquo;, and the second, which is safe only for real &lsquo;<samp>x</samp>&rsquo;,
replaces &lsquo;<samp>arcsinh(sinh(x))</samp>&rsquo; with &lsquo;<samp>x</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-common_002dconstant_002dfactor"></a>Function: <strong>common-constant-factor</strong> <em>expr</em></dt>
<dd><p>Check <var>expr</var> to see if it is a sum of terms all multiplied by the
same rational value.  If so, return this value.  If not, return <code>nil</code>.
For example, if called on &lsquo;<samp>6x + 9y + 12z</samp>&rsquo;, it would return 3, since
3 is a common factor of all the terms.
</p></dd></dl>

<dl>
<dt><a name="index-cancel_002dcommon_002dfactor"></a>Function: <strong>cancel-common-factor</strong> <em>expr factor</em></dt>
<dd><p>Assuming <var>expr</var> is a sum with <var>factor</var> as a common factor,
divide each term of the sum by <var>factor</var>.  This is done by
destructively modifying parts of <var>expr</var>, on the assumption that
it is being used by a simplification rule (where such things are
allowed; see above).  For example, consider this built-in rule for
square roots:
</p>
<div class="smallexample">
<pre class="smallexample">(math-defsimplify calcFunc-sqrt
  (let ((fac (math-common-constant-factor (nth 1 expr))))
    (and fac (not (eq fac 1))
         (math-mul (math-normalize (list 'calcFunc-sqrt fac))
                   (math-normalize
                    (list 'calcFunc-sqrt
                          (math-cancel-common-factor
                           (nth 1 expr) fac)))))))
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-frac_002dgcd"></a>Function: <strong>frac-gcd</strong> <em>a b</em></dt>
<dd><p>Compute a &ldquo;rational GCD&rdquo; of <var>a</var> and <var>b</var>, which must both be
rational numbers.  This is the fraction composed of the GCD of the
numerators of <var>a</var> and <var>b</var>, over the GCD of the denominators.
It is used by <code>common-constant-factor</code>.  Note that the standard
<code>gcd</code> function uses the LCM to combine the denominators.
</p></dd></dl>

<dl>
<dt><a name="index-map_002dtree"></a>Function: <strong>map-tree</strong> <em>func expr many</em></dt>
<dd><p>Try applying Lisp function <var>func</var> to various sub-expressions of
<var>expr</var>.  Initially, call <var>func</var> with <var>expr</var> itself as an
argument.  If this returns an expression which is not <code>equal</code> to
<var>expr</var>, apply <var>func</var> again until eventually it does return
<var>expr</var> with no changes.  Then, if <var>expr</var> is a function call,
recursively apply <var>func</var> to each of the arguments.  This keeps going
until no changes occur anywhere in the expression; this final expression
is returned by <code>map-tree</code>.  Note that, unlike simplification rules,
<var>func</var> functions may <em>not</em> make destructive changes to
<var>expr</var>.  If a third argument <var>many</var> is provided, it is an
integer which says how many times <var>func</var> may be applied; the
default, as described above, is infinitely many times.
</p></dd></dl>

<dl>
<dt><a name="index-compile_002drewrites"></a>Function: <strong>compile-rewrites</strong> <em>rules</em></dt>
<dd><p>Compile the rewrite rule set specified by <var>rules</var>, which should
be a formula that is either a vector or a variable name.  If the latter,
the compiled rules are saved so that later <code>compile-rules</code> calls
for that same variable can return immediately.  If there are problems
with the rules, this function calls <code>error</code> with a suitable
message.
</p></dd></dl>

<dl>
<dt><a name="index-apply_002drewrites"></a>Function: <strong>apply-rewrites</strong> <em>expr crules heads</em></dt>
<dd><p>Apply the compiled rewrite rule set <var>crules</var> to the expression
<var>expr</var>.  This will make only one rewrite and only checks at the
top level of the expression.  The result <code>nil</code> if no rules
matched, or if the only rules that matched did not actually change
the expression.  The <var>heads</var> argument is optional; if is given,
it should be a list of all function names that (may) appear in
<var>expr</var>.  The rewrite compiler tags each rule with the
rarest-looking function name in the rule; if you specify <var>heads</var>,
<code>apply-rewrites</code> can use this information to narrow its search
down to just a few rules in the rule set.
</p></dd></dl>

<dl>
<dt><a name="index-rewrite_002dheads"></a>Function: <strong>rewrite-heads</strong> <em>expr</em></dt>
<dd><p>Compute a <var>heads</var> list for <var>expr</var> suitable for use with
<code>apply-rewrites</code>, as discussed above.
</p></dd></dl>

<dl>
<dt><a name="index-rewrite"></a>Function: <strong>rewrite</strong> <em>expr rules many</em></dt>
<dd><p>This is an all-in-one rewrite function.  It compiles the rule set
specified by <var>rules</var>, then uses <code>map-tree</code> to apply the
rules throughout <var>expr</var> up to <var>many</var> (default infinity)
times.
</p></dd></dl>

<dl>
<dt><a name="index-match_002dpatterns"></a>Function: <strong>match-patterns</strong> <em>pat vec not-flag</em></dt>
<dd><p>Given a Calc vector <var>vec</var> and an uncompiled pattern set or
pattern set variable <var>pat</var>, this function returns a new vector
of all elements of <var>vec</var> which do (or don&rsquo;t, if <var>not-flag</var> is
non-<code>nil</code>) match any of the patterns in <var>pat</var>.
</p></dd></dl>

<dl>
<dt><a name="index-deriv"></a>Function: <strong>deriv</strong> <em>expr var value symb</em></dt>
<dd><p>Compute the derivative of <var>expr</var> with respect to variable <var>var</var>
(which may actually be any sub-expression).  If <var>value</var> is specified,
the derivative is evaluated at the value of <var>var</var>; otherwise, the
derivative is left in terms of <var>var</var>.  If the expression contains
functions for which no derivative formula is known, new derivative
functions are invented by adding primes to the names; see <a href="#Calculus">Calculus</a>.
However, if <var>symb</var> is non-<code>nil</code>, the presence of nondifferentiable
functions in <var>expr</var> instead cancels the whole differentiation, and
<code>deriv</code> returns <code>nil</code> instead.
</p>
<p>Derivatives of an <var>n</var>-argument function can be defined by
adding a <code>math-derivative-<var>n</var></code> property to the property list
of the symbol for the function&rsquo;s derivative, which will be the
function name followed by an apostrophe.  The value of the property
should be a Lisp function; it is called with the same arguments as the
original function call that is being differentiated.  It should return
a formula for the derivative.  For example, the derivative of <code>ln</code>
is defined by
</p>
<div class="smallexample">
<pre class="smallexample">(put 'calcFunc-ln\' 'math-derivative-1
     (function (lambda (u) (math-div 1 u))))
</pre></div>

<p>The two-argument <code>log</code> function has two derivatives,
</p><div class="smallexample">
<pre class="smallexample">(put 'calcFunc-log\' 'math-derivative-2     ; d(log(x,b)) / dx
     (function (lambda (x b) ... )))
(put 'calcFunc-log\'2 'math-derivative-2    ; d(log(x,b)) / db
     (function (lambda (x b) ... )))
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-tderiv"></a>Function: <strong>tderiv</strong> <em>expr var value symb</em></dt>
<dd><p>Compute the total derivative of <var>expr</var>.  This is the same as
<code>deriv</code>, except that variables other than <var>var</var> are not
assumed to be constant with respect to <var>var</var>.
</p></dd></dl>

<dl>
<dt><a name="index-integ"></a>Function: <strong>integ</strong> <em>expr var low high</em></dt>
<dd><p>Compute the integral of <var>expr</var> with respect to <var>var</var>.
See <a href="#Calculus">Calculus</a>, for further details.
</p></dd></dl>

<dl>
<dt><a name="index-math_002ddefintegral"></a>Macro: <strong>math-defintegral</strong> <em>funcs body</em></dt>
<dd><p>Define a rule for integrating a function or functions of one argument;
this macro is very similar in format to <code>math-defsimplify</code>.
The main difference is that here <var>body</var> is the body of a function
with a single argument <code>u</code> which is bound to the argument to the
function being integrated, not the function call itself.  Also, the
variable of integration is available as <code>math-integ-var</code>.  If
evaluation of the integral requires doing further integrals, the body
should call &lsquo;<samp>(math-integral <var>x</var>)</samp>&rsquo; to find the integral of
<var>x</var> with respect to <code>math-integ-var</code>; this function returns
<code>nil</code> if the integral could not be done.  Some examples:
</p>
<div class="smallexample">
<pre class="smallexample">(math-defintegral calcFunc-conj
  (let ((int (math-integral u)))
    (and int
         (list 'calcFunc-conj int))))

(math-defintegral calcFunc-cos
  (and (equal u math-integ-var)
       (math-from-radians-2 (list 'calcFunc-sin u))))
</pre></div>

<p>In the <code>cos</code> example, we define only the integral of &lsquo;<samp>cos(x) dx</samp>&rsquo;,
relying on the general integration-by-substitution facility to handle
cosines of more complicated arguments.  An integration rule should return
<code>nil</code> if it can&rsquo;t do the integral; if several rules are defined for
the same function, they are tried in order until one returns a non-<code>nil</code>
result.
</p></dd></dl>

<dl>
<dt><a name="index-math_002ddefintegral_002d2"></a>Macro: <strong>math-defintegral-2</strong> <em>funcs body</em></dt>
<dd><p>Define a rule for integrating a function or functions of two arguments.
This is exactly analogous to <code>math-defintegral</code>, except that <var>body</var>
is written as the body of a function with two arguments, <var>u</var> and
<var>v</var>.
</p></dd></dl>

<dl>
<dt><a name="index-solve_002dfor"></a>Function: <strong>solve-for</strong> <em>lhs rhs var full</em></dt>
<dd><p>Attempt to solve the equation &lsquo;<samp><var>lhs</var> = <var>rhs</var></samp>&rsquo; by isolating
the variable <var>var</var> on the lefthand side; return the resulting righthand
side, or <code>nil</code> if the equation cannot be solved.  The variable
<var>var</var> must appear at least once in <var>lhs</var> or <var>rhs</var>.  Note that
the return value is a formula which does not contain <var>var</var>; this is
different from the user-level <code>solve</code> and <code>finv</code> functions,
which return a rearranged equation or a functional inverse, respectively.
If <var>full</var> is non-<code>nil</code>, a full solution including dummy signs
and dummy integers will be produced.  User-defined inverses are provided
as properties in a manner similar to derivatives:
</p>
<div class="smallexample">
<pre class="smallexample">(put 'calcFunc-ln 'math-inverse
     (function (lambda (x) (list 'calcFunc-exp x))))
</pre></div>

<p>This function can call &lsquo;<samp>(math-solve-get-sign <var>x</var>)</samp>&rsquo; to create
a new arbitrary sign variable, returning <var>x</var> times that sign, and
&lsquo;<samp>(math-solve-get-int <var>x</var>)</samp>&rsquo; to create a new arbitrary integer
variable multiplied by <var>x</var>.  These functions simply return <var>x</var>
if the caller requested a non-&ldquo;full&rdquo; solution.
</p></dd></dl>

<dl>
<dt><a name="index-solve_002deqn"></a>Function: <strong>solve-eqn</strong> <em>expr var full</em></dt>
<dd><p>This version of <code>solve-for</code> takes an expression which will
typically be an equation or inequality.  (If it is not, it will be
interpreted as the equation &lsquo;<samp><var>expr</var> = 0</samp>&rsquo;.)  It returns an
equation or inequality, or <code>nil</code> if no solution could be found.
</p></dd></dl>

<dl>
<dt><a name="index-solve_002dsystem"></a>Function: <strong>solve-system</strong> <em>exprs vars full</em></dt>
<dd><p>This function solves a system of equations.  Generally, <var>exprs</var>
and <var>vars</var> will be vectors of equal length.
See <a href="#Solving-Systems-of-Equations">Solving Systems of Equations</a>, for other options.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dcontains"></a>Function: <strong>expr-contains</strong> <em>expr var</em></dt>
<dd><p>Returns a non-<code>nil</code> value if <var>var</var> occurs as a subexpression
of <var>expr</var>.
</p>
<p>This function might seem at first to be identical to
<code>calc-find-sub-formula</code>.  The key difference is that
<code>expr-contains</code> uses <code>equal</code> to test for matches, whereas
<code>calc-find-sub-formula</code> uses <code>eq</code>.  In the formula
&lsquo;<samp>f(a, a)</samp>&rsquo;, the two &lsquo;<samp>a</samp>&rsquo;s will be <code>equal</code> but not
<code>eq</code> to each other.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dcontains_002dcount"></a>Function: <strong>expr-contains-count</strong> <em>expr var</em></dt>
<dd><p>Returns the number of occurrences of <var>var</var> as a subexpression
of <var>expr</var>, or <code>nil</code> if there are no occurrences.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002ddepends"></a>Function: <strong>expr-depends</strong> <em>expr var</em></dt>
<dd><p>Returns true if <var>expr</var> refers to any variable the occurs in <var>var</var>.
In other words, it checks if <var>expr</var> and <var>var</var> have any variables
in common.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dcontains_002dvars"></a>Function: <strong>expr-contains-vars</strong> <em>expr</em></dt>
<dd><p>Return true if <var>expr</var> contains any variables, or <code>nil</code> if <var>expr</var>
contains only constants and functions with constant arguments.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dsubst"></a>Function: <strong>expr-subst</strong> <em>expr old new</em></dt>
<dd><p>Returns a copy of <var>expr</var>, with all occurrences of <var>old</var> replaced
by <var>new</var>.  This treats <code>lambda</code> forms specially with respect
to the dummy argument variables, so that the effect is always to return
<var>expr</var> evaluated at <var>old</var> = <var>new</var>.
</p></dd></dl>

<dl>
<dt><a name="index-multi_002dsubst"></a>Function: <strong>multi-subst</strong> <em>expr old new</em></dt>
<dd><p>This is like <code>expr-subst</code>, except that <var>old</var> and <var>new</var>
are lists of expressions to be substituted simultaneously.  If one
list is shorter than the other, trailing elements of the longer list
are ignored.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dweight"></a>Function: <strong>expr-weight</strong> <em>expr</em></dt>
<dd><p>Returns the &ldquo;weight&rdquo; of <var>expr</var>, basically a count of the total
number of objects and function calls that appear in <var>expr</var>.  For
&ldquo;primitive&rdquo; objects, this will be one.
</p></dd></dl>

<dl>
<dt><a name="index-expr_002dheight"></a>Function: <strong>expr-height</strong> <em>expr</em></dt>
<dd><p>Returns the &ldquo;height&rdquo; of <var>expr</var>, which is the deepest level to
which function calls are nested.  (Note that &lsquo;<samp><var>a</var> + <var>b</var></samp>&rsquo;
counts as a function call.)  For primitive objects, this returns zero.
</p></dd></dl>

<dl>
<dt><a name="index-polynomial_002dp"></a>Function: <strong>polynomial-p</strong> <em>expr var</em></dt>
<dd><p>Check if <var>expr</var> is a polynomial in variable (or sub-expression)
<var>var</var>.  If so, return the degree of the polynomial, that is, the
highest power of <var>var</var> that appears in <var>expr</var>.  For example,
for &lsquo;<samp>(x^2 + 3)^3 + 4</samp>&rsquo; this would return 6.  This function returns
<code>nil</code> unless <var>expr</var>, when expanded out by <kbd>a x</kbd>
(<code>calc-expand</code>), would consist of a sum of terms in which <var>var</var>
appears only raised to nonnegative integer powers.  Note that if
<var>var</var> does not occur in <var>expr</var>, then <var>expr</var> is considered
a polynomial of degree 0.
</p></dd></dl>

<dl>
<dt><a name="index-is_002dpolynomial"></a>Function: <strong>is-polynomial</strong> <em>expr var degree loose</em></dt>
<dd><p>Check if <var>expr</var> is a polynomial in variable or sub-expression
<var>var</var>, and, if so, return a list representation of the polynomial
where the elements of the list are coefficients of successive powers of
<var>var</var>: &lsquo;<samp><var>a</var> + <var>b</var> x + <var>c</var> x^3</samp>&rsquo; would produce the
list &lsquo;<samp>(<var>a</var> <var>b</var> 0 <var>c</var>)</samp>&rsquo;, and &lsquo;<samp>(x + 1)^2</samp>&rsquo; would
produce the list &lsquo;<samp>(1 2 1)</samp>&rsquo;.  The highest element of the list will
be non-zero, with the special exception that if <var>expr</var> is the
constant zero, the returned value will be &lsquo;<samp>(0)</samp>&rsquo;.  Return <code>nil</code>
if <var>expr</var> is not a polynomial in <var>var</var>.  If <var>degree</var> is
specified, this will not consider polynomials of degree higher than that
value.  This is a good precaution because otherwise an input of
&lsquo;<samp>(x+1)^1000</samp>&rsquo; will cause a huge coefficient list to be built.  If
<var>loose</var> is non-<code>nil</code>, then a looser definition of a polynomial
is used in which coefficients are no longer required not to depend on
<var>var</var>, but are only required not to take the form of polynomials
themselves.  For example, &lsquo;<samp>sin(x) x^2 + cos(x)</samp>&rsquo; is a loose
polynomial with coefficients &lsquo;<samp>((calcFunc-cos x) 0 (calcFunc-sin
x))</samp>&rsquo;.  The result will never be <code>nil</code> in loose mode, since any
expression can be interpreted as a &ldquo;constant&rdquo; loose polynomial.
</p></dd></dl>

<dl>
<dt><a name="index-polynomial_002dbase"></a>Function: <strong>polynomial-base</strong> <em>expr pred</em></dt>
<dd><p>Check if <var>expr</var> is a polynomial in any variable that occurs in it;
if so, return that variable.  (If <var>expr</var> is a multivariate polynomial,
this chooses one variable arbitrarily.)  If <var>pred</var> is specified, it should
be a Lisp function which is called as &lsquo;<samp>(<var>pred</var> <var>subexpr</var>)</samp>&rsquo;,
and which should return true if <code>mpb-top-expr</code> (a global name for
the original <var>expr</var>) is a suitable polynomial in <var>subexpr</var>.
The default predicate uses &lsquo;<samp>(polynomial-p mpb-top-expr <var>subexpr</var>)</samp>&rsquo;;
you can use <var>pred</var> to specify additional conditions.  Or, you could
have <var>pred</var> build up a list of every suitable <var>subexpr</var> that
is found.
</p></dd></dl>

<dl>
<dt><a name="index-poly_002dsimplify"></a>Function: <strong>poly-simplify</strong> <em>poly</em></dt>
<dd><p>Simplify polynomial coefficient list <var>poly</var> by (destructively)
clipping off trailing zeros.
</p></dd></dl>

<dl>
<dt><a name="index-poly_002dmix"></a>Function: <strong>poly-mix</strong> <em>a ac b bc</em></dt>
<dd><p>Mix two polynomial lists <var>a</var> and <var>b</var> (in the form returned by
<code>is-polynomial</code>) in a linear combination with coefficient expressions
<var>ac</var> and <var>bc</var>.  The result is a (not necessarily simplified)
polynomial list representing &lsquo;<samp><var>ac</var> <var>a</var> + <var>bc</var> <var>b</var></samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-poly_002dmul"></a>Function: <strong>poly-mul</strong> <em>a b</em></dt>
<dd><p>Multiply two polynomial coefficient lists <var>a</var> and <var>b</var>.  The
result will be in simplified form if the inputs were simplified.
</p></dd></dl>

<dl>
<dt><a name="index-build_002dpolynomial_002dexpr"></a>Function: <strong>build-polynomial-expr</strong> <em>poly var</em></dt>
<dd><p>Construct a Calc formula which represents the polynomial coefficient
list <var>poly</var> applied to variable <var>var</var>.  The <kbd>a c</kbd>
(<code>calc-collect</code>) command uses <code>is-polynomial</code> to turn an
expression into a coefficient list, then <code>build-polynomial-expr</code>
to turn the list back into an expression in regular form.
</p></dd></dl>

<dl>
<dt><a name="index-check_002dunit_002dname"></a>Function: <strong>check-unit-name</strong> <em>var</em></dt>
<dd><p>Check if <var>var</var> is a variable which can be interpreted as a unit
name.  If so, return the units table entry for that unit.  This
will be a list whose first element is the unit name (not counting
prefix characters) as a symbol and whose second element is the
Calc expression which defines the unit.  (Refer to the Calc sources
for details on the remaining elements of this list.)  If <var>var</var>
is not a variable or is not a unit name, return <code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-units_002din_002dexpr_002dp"></a>Function: <strong>units-in-expr-p</strong> <em>expr sub-exprs</em></dt>
<dd><p>Return true if <var>expr</var> contains any variables which can be
interpreted as units.  If <var>sub-exprs</var> is <code>t</code>, the entire
expression is searched.  If <var>sub-exprs</var> is <code>nil</code>, this
checks whether <var>expr</var> is directly a units expression.
</p></dd></dl>

<dl>
<dt><a name="index-single_002dunits_002din_002dexpr_002dp"></a>Function: <strong>single-units-in-expr-p</strong> <em>expr</em></dt>
<dd><p>Check whether <var>expr</var> contains exactly one units variable.  If so,
return the units table entry for the variable.  If <var>expr</var> does
not contain any units, return <code>nil</code>.  If <var>expr</var> contains
two or more units, return the symbol <code>wrong</code>.
</p></dd></dl>

<dl>
<dt><a name="index-to_002dstandard_002dunits"></a>Function: <strong>to-standard-units</strong> <em>expr which</em></dt>
<dd><p>Convert units expression <var>expr</var> to base units.  If <var>which</var>
is <code>nil</code>, use Calc&rsquo;s native base units.  Otherwise, <var>which</var>
can specify a units system, which is a list of two-element lists,
where the first element is a Calc base symbol name and the second
is an expression to substitute for it.
</p></dd></dl>

<dl>
<dt><a name="index-remove_002dunits"></a>Function: <strong>remove-units</strong> <em>expr</em></dt>
<dd><p>Return a copy of <var>expr</var> with all units variables replaced by ones.
This expression is generally normalized before use.
</p></dd></dl>

<dl>
<dt><a name="index-extract_002dunits"></a>Function: <strong>extract-units</strong> <em>expr</em></dt>
<dd><p>Return a copy of <var>expr</var> with everything but units variables replaced
by ones.
</p></dd></dl>

<hr>
<a name="Formatting-Lisp-Functions"></a>
<div class="header">
<p>
Next: <a href="#Hooks" accesskey="n" rel="next">Hooks</a>, Previous: <a href="#Symbolic-Lisp-Functions" accesskey="p" rel="prev">Symbolic Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="I_002fO-and-Formatting-Functions"></a>
<h4 class="subsubsection">17.5.7.8 I/O and Formatting Functions</h4>

<p>The functions described here are responsible for parsing and formatting
Calc numbers and formulas.
</p>
<dl>
<dt><a name="index-calc_002deval"></a>Function: <strong>calc-eval</strong> <em>str sep arg1 arg2 &hellip;</em></dt>
<dd><p>This is the simplest interface to the Calculator from another Lisp program.
See <a href="#Calling-Calc-from-Your-Programs">Calling Calc from Your Programs</a>.
</p></dd></dl>

<dl>
<dt><a name="index-read_002dnumber"></a>Function: <strong>read-number</strong> <em>str</em></dt>
<dd><p>If string <var>str</var> contains a valid Calc number, either integer,
fraction, float, or HMS form, this function parses and returns that
number.  Otherwise, it returns <code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-read_002dexpr"></a>Function: <strong>read-expr</strong> <em>str</em></dt>
<dd><p>Read an algebraic expression from string <var>str</var>.  If <var>str</var> does
not have the form of a valid expression, return a list of the form
&lsquo;<samp>(error <var>pos</var> <var>msg</var>)</samp>&rsquo; where <var>pos</var> is an integer index
into <var>str</var> of the general location of the error, and <var>msg</var> is
a string describing the problem.
</p></dd></dl>

<dl>
<dt><a name="index-read_002dexprs"></a>Function: <strong>read-exprs</strong> <em>str</em></dt>
<dd><p>Read a list of expressions separated by commas, and return it as a
Lisp list.  If an error occurs in any expressions, an error list as
shown above is returned instead.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002ddo_002dalg_002dentry"></a>Function: <strong>calc-do-alg-entry</strong> <em>initial prompt no-norm</em></dt>
<dd><p>Read an algebraic formula or formulas using the minibuffer.  All
conventions of regular algebraic entry are observed.  The return value
is a list of Calc formulas; there will be more than one if the user
entered a list of values separated by commas.  The result is <code>nil</code>
if the user presses Return with a blank line.  If <var>initial</var> is
given, it is a string which the minibuffer will initially contain.
If <var>prompt</var> is given, it is the prompt string to use; the default
is &ldquo;Algebraic:&rdquo;.  If <var>no-norm</var> is <code>t</code>, the formulas will
be returned exactly as parsed; otherwise, they will be passed through
<code>calc-normalize</code> first.
</p>
<p>To support the use of <kbd>$</kbd> characters in the algebraic entry, use
<code>let</code> to bind <code>calc-dollar-values</code> to a list of the values
to be substituted for <kbd>$</kbd>, <kbd>$$</kbd>, and so on, and bind
<code>calc-dollar-used</code> to 0.  Upon return, <code>calc-dollar-used</code>
will have been changed to the highest number of consecutive <kbd>$</kbd>s
that actually appeared in the input.
</p></dd></dl>

<dl>
<dt><a name="index-format_002dnumber"></a>Function: <strong>format-number</strong> <em>a</em></dt>
<dd><p>Convert the real or complex number or HMS form <var>a</var> to string form.
</p></dd></dl>

<dl>
<dt><a name="index-format_002dflat_002dexpr"></a>Function: <strong>format-flat-expr</strong> <em>a prec</em></dt>
<dd><p>Convert the arbitrary Calc number or formula <var>a</var> to string form,
in the style used by the trail buffer and the <code>calc-edit</code> command.
This is a simple format designed
mostly to guarantee the string is of a form that can be re-parsed by
<code>read-expr</code>.  Most formatting modes, such as digit grouping,
complex number format, and point character, are ignored to ensure the
result will be re-readable.  The <var>prec</var> parameter is normally 0; if
you pass a large integer like 1000 instead, the expression will be
surrounded by parentheses unless it is a plain number or variable name.
</p></dd></dl>

<dl>
<dt><a name="index-format_002dnice_002dexpr"></a>Function: <strong>format-nice-expr</strong> <em>a width</em></dt>
<dd><p>This is like <code>format-flat-expr</code> (with <var>prec</var> equal to 0),
except that newlines will be inserted to keep lines down to the
specified <var>width</var>, and vectors that look like matrices or rewrite
rules are written in a pseudo-matrix format.  The <code>calc-edit</code>
command uses this when only one stack entry is being edited.
</p></dd></dl>

<dl>
<dt><a name="index-format_002dvalue"></a>Function: <strong>format-value</strong> <em>a width</em></dt>
<dd><p>Convert the Calc number or formula <var>a</var> to string form, using the
format seen in the stack buffer.  Beware the string returned may
not be re-readable by <code>read-expr</code>, for example, because of digit
grouping.  Multi-line objects like matrices produce strings that
contain newline characters to separate the lines.  The <var>w</var>
parameter, if given, is the target window size for which to format
the expressions.  If <var>w</var> is omitted, the width of the Calculator
window is used.
</p></dd></dl>

<dl>
<dt><a name="index-compose_002dexpr"></a>Function: <strong>compose-expr</strong> <em>a prec</em></dt>
<dd><p>Format the Calc number or formula <var>a</var> according to the current
language mode, returning a &ldquo;composition.&rdquo;  To learn about the
structure of compositions, see the comments in the Calc source code.
You can specify the format of a given type of function call by putting
a <code>math-compose-<var>lang</var></code> property on the function&rsquo;s symbol,
whose value is a Lisp function that takes <var>a</var> and <var>prec</var> as
arguments and returns a composition.  Here <var>lang</var> is a language
mode name, one of <code>normal</code>, <code>big</code>, <code>c</code>, <code>pascal</code>,
<code>fortran</code>, <code>tex</code>, <code>eqn</code>, <code>math</code>, or <code>maple</code>.
In Big mode, Calc actually tries <code>math-compose-big</code> first, then
tries <code>math-compose-normal</code>.  If this property does not exist,
or if the function returns <code>nil</code>, the function is written in the
normal function-call notation for that language.
</p></dd></dl>

<dl>
<dt><a name="index-composition_002dto_002dstring"></a>Function: <strong>composition-to-string</strong> <em>c w</em></dt>
<dd><p>Convert a composition structure returned by <code>compose-expr</code> into
a string.  Multi-line compositions convert to strings containing
newline characters.  The target window size is given by <var>w</var>.
The <code>format-value</code> function basically calls <code>compose-expr</code>
followed by <code>composition-to-string</code>.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002dwidth"></a>Function: <strong>comp-width</strong> <em>c</em></dt>
<dd><p>Compute the width in characters of composition <var>c</var>.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002dheight"></a>Function: <strong>comp-height</strong> <em>c</em></dt>
<dd><p>Compute the height in lines of composition <var>c</var>.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002dascent"></a>Function: <strong>comp-ascent</strong> <em>c</em></dt>
<dd><p>Compute the portion of the height of composition <var>c</var> which is on or
above the baseline.  For a one-line composition, this will be one.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002ddescent"></a>Function: <strong>comp-descent</strong> <em>c</em></dt>
<dd><p>Compute the portion of the height of composition <var>c</var> which is below
the baseline.  For a one-line composition, this will be zero.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002dfirst_002dchar"></a>Function: <strong>comp-first-char</strong> <em>c</em></dt>
<dd><p>If composition <var>c</var> is a &ldquo;flat&rdquo; composition, return the first
(leftmost) character of the composition as an integer.  Otherwise,
return <code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-comp_002dlast_002dchar"></a>Function: <strong>comp-last-char</strong> <em>c</em></dt>
<dd><p>If composition <var>c</var> is a &ldquo;flat&rdquo; composition, return the last
(rightmost) character, otherwise return <code>nil</code>.
</p></dd></dl>


<hr>
<a name="Hooks"></a>
<div class="header">
<p>
Previous: <a href="#Formatting-Lisp-Functions" accesskey="p" rel="prev">Formatting Lisp Functions</a>, Up: <a href="#Internals" accesskey="u" rel="up">Internals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Hooks-1"></a>
<h4 class="subsubsection">17.5.7.9 Hooks</h4>

<p>Hooks are variables which contain Lisp functions (or lists of functions)
which are called at various times.  Calc defines a number of hooks
that help you to customize it in various ways.  Calc uses the Lisp
function <code>run-hooks</code> to invoke the hooks shown below.  Several
other customization-related variables are also described here.
</p>
<dl>
<dt><a name="index-calc_002dload_002dhook"></a>Variable: <strong>calc-load-hook</strong></dt>
<dd><p>This hook is called at the end of <samp>calc.el</samp>, after the file has
been loaded, before any functions in it have been called, but after
<code>calc-mode-map</code> and similar variables have been set up.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dext_002dload_002dhook"></a>Variable: <strong>calc-ext-load-hook</strong></dt>
<dd><p>This hook is called at the end of <samp>calc-ext.el</samp>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dstart_002dhook"></a>Variable: <strong>calc-start-hook</strong></dt>
<dd><p>This hook is called as the last step in a <kbd>M-x calc</kbd> command.
At this point, the Calc buffer has been created and initialized if
necessary, the Calc window and trail window have been created,
and the &ldquo;Welcome to Calc&rdquo; message has been displayed.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dmode_002dhook"></a>Variable: <strong>calc-mode-hook</strong></dt>
<dd><p>This hook is called when the Calc buffer is being created.  Usually
this will only happen once per Emacs session.  The hook is called
after Emacs has switched to the new buffer, the mode-settings file
has been read if necessary, and all other buffer-local variables
have been set up.  After this hook returns, Calc will perform a
<code>calc-refresh</code> operation, set up the mode line display, then
evaluate any deferred <code>calc-define</code> properties that have not
been evaluated yet.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dtrail_002dmode_002dhook"></a>Variable: <strong>calc-trail-mode-hook</strong></dt>
<dd><p>This hook is called when the Calc Trail buffer is being created.
It is called as the very last step of setting up the Trail buffer.
Like <code>calc-mode-hook</code>, this will normally happen only once
per Emacs session.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dend_002dhook"></a>Variable: <strong>calc-end-hook</strong></dt>
<dd><p>This hook is called by <code>calc-quit</code>, generally because the user
presses <kbd>q</kbd> or <kbd>C-x * c</kbd> while in Calc.  The Calc buffer will
be the current buffer.  The hook is called as the very first
step, before the Calc window is destroyed.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dwindow_002dhook"></a>Variable: <strong>calc-window-hook</strong></dt>
<dd><p>If this hook is non-<code>nil</code>, it is called to create the Calc window.
Upon return, this new Calc window should be the current window.
(The Calc buffer will already be the current buffer when the
hook is called.)  If the hook is not defined, Calc will
generally use <code>split-window</code>, <code>set-window-buffer</code>,
and <code>select-window</code> to create the Calc window.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dtrail_002dwindow_002dhook"></a>Variable: <strong>calc-trail-window-hook</strong></dt>
<dd><p>If this hook is non-<code>nil</code>, it is called to create the Calc Trail
window.  The variable <code>calc-trail-buffer</code> will contain the buffer
which the window should use.  Unlike <code>calc-window-hook</code>, this hook
must <em>not</em> switch into the new window.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dmode_002dhook"></a>Variable: <strong>calc-embedded-mode-hook</strong></dt>
<dd><p>This hook is called the first time that Embedded mode is entered.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dnew_002dbuffer_002dhook"></a>Variable: <strong>calc-embedded-new-buffer-hook</strong></dt>
<dd><p>This hook is called each time that Embedded mode is entered in a
new buffer.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dnew_002dformula_002dhook"></a>Variable: <strong>calc-embedded-new-formula-hook</strong></dt>
<dd><p>This hook is called each time that Embedded mode is enabled for a
new formula.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dedit_002dmode_002dhook"></a>Variable: <strong>calc-edit-mode-hook</strong></dt>
<dd><p>This hook is called by <code>calc-edit</code> (and the other &ldquo;edit&rdquo;
commands) when the temporary editing buffer is being created.
The buffer will have been selected and set up to be in
<code>calc-edit-mode</code>, but will not yet have been filled with
text.  (In fact it may still have leftover text from a previous
<code>calc-edit</code> command.)
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dmode_002dsave_002dhook"></a>Variable: <strong>calc-mode-save-hook</strong></dt>
<dd><p>This hook is called by the <code>calc-save-modes</code> command,
after Calc&rsquo;s own mode features have been inserted into the
Calc init file and just before the &ldquo;End of mode settings&rdquo;
message is inserted.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dreset_002dhook"></a>Variable: <strong>calc-reset-hook</strong></dt>
<dd><p>This hook is called after <kbd>C-x * 0</kbd> (<code>calc-reset</code>) has
reset all modes.  The Calc buffer will be the current buffer.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dother_002dmodes"></a>Variable: <strong>calc-other-modes</strong></dt>
<dd><p>This variable contains a list of strings.  The strings are
concatenated at the end of the modes portion of the Calc
mode line (after standard modes such as &ldquo;Deg&rdquo;, &ldquo;Inv&rdquo; and
&ldquo;Hyp&rdquo;).  Each string should be a short, single word followed
by a space.  The variable is <code>nil</code> by default.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dmode_002dmap"></a>Variable: <strong>calc-mode-map</strong></dt>
<dd><p>This is the keymap that is used by Calc mode.  The best time
to adjust it is probably in a <code>calc-mode-hook</code>.  If the
Calc extensions package (<samp>calc-ext.el</samp>) has not yet been
loaded, many of these keys will be bound to <code>calc-missing-key</code>,
which is a command that loads the extensions package and
&ldquo;retypes&rdquo; the key.  If your <code>calc-mode-hook</code> rebinds
one of these keys, it will probably be overridden when the
extensions are loaded.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002ddigit_002dmap"></a>Variable: <strong>calc-digit-map</strong></dt>
<dd><p>This is the keymap that is used during numeric entry.  Numeric
entry uses the minibuffer, but this map binds every non-numeric
key to <code>calcDigit-nondigit</code> which generally calls
<code>exit-minibuffer</code> and &ldquo;retypes&rdquo; the key.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dalg_002dent_002dmap"></a>Variable: <strong>calc-alg-ent-map</strong></dt>
<dd><p>This is the keymap that is used during algebraic entry.  This is
mostly a copy of <code>minibuffer-local-map</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dstore_002dvar_002dmap"></a>Variable: <strong>calc-store-var-map</strong></dt>
<dd><p>This is the keymap that is used during entry of variable names for
commands like <code>calc-store</code> and <code>calc-recall</code>.  This is
mostly a copy of <code>minibuffer-local-completion-map</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dedit_002dmode_002dmap"></a>Variable: <strong>calc-edit-mode-map</strong></dt>
<dd><p>This is the (sparse) keymap used by <code>calc-edit</code> and other
temporary editing commands.  It binds <tt class="key">RET</tt>, <tt class="key">LFD</tt>,
and <kbd>C-c C-c</kbd> to <code>calc-edit-finish</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dmode_002dvar_002dlist"></a>Variable: <strong>calc-mode-var-list</strong></dt>
<dd><p>This is a list of variables which are saved by <code>calc-save-modes</code>.
Each entry is a list of two items, the variable (as a Lisp symbol)
and its default value.  When modes are being saved, each variable
is compared with its default value (using <code>equal</code>) and any
non-default variables are written out.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dlocal_002dvar_002dlist"></a>Variable: <strong>calc-local-var-list</strong></dt>
<dd><p>This is a list of variables which should be buffer-local to the
Calc buffer.  Each entry is a variable name (as a Lisp symbol).
These variables also have their default values manipulated by
the <code>calc</code> and <code>calc-quit</code> commands; see <a href="#Multiple-Calculators">Multiple Calculators</a>.
Since <code>calc-mode-hook</code> is called after this list has been
used the first time, your hook should add a variable to the
list and also call <code>make-local-variable</code> itself.
</p></dd></dl>

<hr>
<a name="Copying"></a>
<div class="header">
<p>
Next: <a href="#GNU-Free-Documentation-License" accesskey="n" rel="next">GNU Free Documentation License</a>, Previous: <a href="#Programming" accesskey="p" rel="prev">Programming</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-GENERAL-PUBLIC-LICENSE"></a>
<h2 class="appendix">Appendix A GNU GENERAL PUBLIC LICENSE</h2>
<div align="center">Version 3, 29 June 2007
</div>

<div class="display">
<pre class="display">Copyright &copy; 2007 Free Software Foundation, Inc. <a href="https://fsf.org/">https://fsf.org/</a>

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
</pre></div>

<a name="Preamble"></a>
<h3 class="heading">Preamble</h3>

<p>The GNU General Public License is a free, copyleft license for
software and other kinds of works.
</p>
<p>The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program&mdash;to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.
</p>
<p>When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.
</p>
<p>To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.
</p>
<p>For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.
</p>
<p>Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.
</p>
<p>For the developers&rsquo; and authors&rsquo; protection, the GPL clearly explains
that there is no warranty for this free software.  For both users&rsquo; and
authors&rsquo; sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.
</p>
<p>Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users&rsquo; freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.
</p>
<p>Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.
</p>
<p>The precise terms and conditions for copying, distribution and
modification follow.
</p>
<a name="TERMS-AND-CONDITIONS"></a>
<h3 class="heading">TERMS AND CONDITIONS</h3>

<ol start="0">
<li> Definitions.

<p>&ldquo;This License&rdquo; refers to version 3 of the GNU General Public License.
</p>
<p>&ldquo;Copyright&rdquo; also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.
</p>
<p>&ldquo;The Program&rdquo; refers to any copyrightable work licensed under this
License.  Each licensee is addressed as &ldquo;you&rdquo;.  &ldquo;Licensees&rdquo; and
&ldquo;recipients&rdquo; may be individuals or organizations.
</p>
<p>To &ldquo;modify&rdquo; a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a &ldquo;modified version&rdquo; of
the earlier work or a work &ldquo;based on&rdquo; the earlier work.
</p>
<p>A &ldquo;covered work&rdquo; means either the unmodified Program or a work based
on the Program.
</p>
<p>To &ldquo;propagate&rdquo; a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.
</p>
<p>To &ldquo;convey&rdquo; a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.
</p>
<p>An interactive user interface displays &ldquo;Appropriate Legal Notices&rdquo; to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.
</p>
</li><li> Source Code.

<p>The &ldquo;source code&rdquo; for a work means the preferred form of the work for
making modifications to it.  &ldquo;Object code&rdquo; means any non-source form
of a work.
</p>
<p>A &ldquo;Standard Interface&rdquo; means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.
</p>
<p>The &ldquo;System Libraries&rdquo; of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
&ldquo;Major Component&rdquo;, in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.
</p>
<p>The &ldquo;Corresponding Source&rdquo; for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work&rsquo;s
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.
</p>
<p>The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.
</p>
<p>The Corresponding Source for a work in source code form is that same
work.
</p>
</li><li> Basic Permissions.

<p>All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.
</p>
<p>You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.
</p>
<p>Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.
</p>
</li><li> Protecting Users&rsquo; Legal Rights From Anti-Circumvention Law.

<p>No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.
</p>
<p>When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work&rsquo;s users, your or third parties&rsquo; legal rights to forbid
circumvention of technological measures.
</p>
</li><li> Conveying Verbatim Copies.

<p>You may convey verbatim copies of the Program&rsquo;s source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.
</p>
<p>You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.
</p>
</li><li> Conveying Modified Source Versions.

<p>You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:
</p>
<ol type="a" start="1">
<li> The work must carry prominent notices stating that you modified it,
and giving a relevant date.

</li><li> The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to &ldquo;keep intact all
notices&rdquo;.

</li><li> You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

</li><li> If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
</li></ol>

<p>A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
&ldquo;aggregate&rdquo; if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation&rsquo;s users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.
</p>
</li><li> Conveying Non-Source Forms.

<p>You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:
</p>
<ol type="a" start="1">
<li> Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

</li><li> Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

</li><li> Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

</li><li> Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

</li><li> Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

</li></ol>

<p>A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.
</p>
<p>A &ldquo;User Product&rdquo; is either (1) a &ldquo;consumer product&rdquo;, which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
&ldquo;normally used&rdquo; refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.
</p>
<p>&ldquo;Installation Information&rdquo; for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.
</p>
<p>If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).
</p>
<p>The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.
</p>
<p>Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.
</p>
</li><li> Additional Terms.

<p>&ldquo;Additional permissions&rdquo; are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.
</p>
<p>When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.
</p>
<p>Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:
</p>
<ol type="a" start="1">
<li> Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

</li><li> Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

</li><li> Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

</li><li> Limiting the use for publicity purposes of names of licensors or
authors of the material; or

</li><li> Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

</li><li> Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
</li></ol>

<p>All other non-permissive additional terms are considered &ldquo;further
restrictions&rdquo; within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.
</p>
<p>If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.
</p>
<p>Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.
</p>
</li><li> Termination.

<p>You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).
</p>
<p>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.
</p>
</li><li> Acceptance Not Required for Having Copies.

<p>You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.
</p>
</li><li> Automatic Licensing of Downstream Recipients.

<p>Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.
</p>
<p>An &ldquo;entity transaction&rdquo; is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party&rsquo;s predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.
</p>
<p>You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.
</p>
</li><li> Patents.

<p>A &ldquo;contributor&rdquo; is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor&rsquo;s &ldquo;contributor version&rdquo;.
</p>
<p>A contributor&rsquo;s &ldquo;essential patent claims&rdquo; are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, &ldquo;control&rdquo; includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.
</p>
<p>Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor&rsquo;s essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.
</p>
<p>In the following three paragraphs, a &ldquo;patent license&rdquo; is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To &ldquo;grant&rdquo; such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.
</p>
<p>If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  &ldquo;Knowingly relying&rdquo; means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient&rsquo;s use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.
</p>
<p>If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.
</p>
<p>A patent license is &ldquo;discriminatory&rdquo; if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.
</p>
<p>Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.
</p>
</li><li> No Surrender of Others&rsquo; Freedom.

<p>If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.
</p>
</li><li> Use with the GNU Affero General Public License.

<p>Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.
</p>
</li><li> Revised Versions of this License.

<p>The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.
</p>
<p>Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.
</p>
<p>If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy&rsquo;s public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.
</p>
<p>Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.
</p>
</li><li> Disclaimer of Warranty.

<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &ldquo;AS IS&rdquo; WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.
</p>
</li><li> Limitation of Liability.

<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
</p>
</li><li> Interpretation of Sections 15 and 16.

<p>If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.
</p>
</li></ol>

<a name="END-OF-TERMS-AND-CONDITIONS"></a>
<h3 class="heading">END OF TERMS AND CONDITIONS</h3>

<a name="How-to-Apply-These-Terms-to-Your-New-Programs"></a>
<h3 class="heading">How to Apply These Terms to Your New Programs</h3>

<p>If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.
</p>
<p>To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the &ldquo;copyright&rdquo; line and a pointer to where the full notice is found.
</p>
<div class="smallexample">
<pre class="smallexample"><var>one line to give the program's name and a brief idea of what it does.</var>
Copyright (C) <var>year</var> <var>name of author</var>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</pre></div>

<p>Also add information on how to contact you by electronic and paper mail.
</p>
<p>If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:
</p>
<div class="smallexample">
<pre class="smallexample"><var>program</var> Copyright (C) <var>year</var> <var>name of author</var>
This program comes with ABSOLUTELY NO WARRANTY; for details type &lsquo;<samp>show w</samp>&rsquo;.
This is free software, and you are welcome to redistribute it
under certain conditions; type &lsquo;<samp>show c</samp>&rsquo; for details.
</pre></div>

<p>The hypothetical commands &lsquo;<samp>show w</samp>&rsquo; and &lsquo;<samp>show c</samp>&rsquo; should show
the appropriate parts of the General Public License.  Of course, your
program&rsquo;s commands might be different; for a GUI interface, you would
use an &ldquo;about box&rdquo;.
</p>
<p>You should also get your employer (if you work as a programmer) or school,
if any, to sign a &ldquo;copyright disclaimer&rdquo; for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</p>
<p>The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read <a href="https://www.gnu.org/licenses/why-not-lgpl.html">https://www.gnu.org/licenses/why-not-lgpl.html</a>.
</p>
<hr>
<a name="GNU-Free-Documentation-License"></a>
<div class="header">
<p>
Next: <a href="#Customizing-Calc" accesskey="n" rel="next">Customizing Calc</a>, Previous: <a href="#Copying" accesskey="p" rel="prev">Copying</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-Free-Documentation-License-1"></a>
<h2 class="appendix">Appendix B GNU Free Documentation License</h2>
<div align="center">Version 1.3, 3 November 2008
</div>

<div class="display">
<pre class="display">Copyright &copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<a href="https://fsf.org/">https://fsf.org/</a>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></div>

<ol start="0">
<li> PREAMBLE

<p>The purpose of this License is to make a manual, textbook, or other
functional and useful document <em>free</em> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</p>
<p>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</p>
<p>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</p>
</li><li> APPLICABILITY AND DEFINITIONS

<p>This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The &ldquo;Document&rdquo;, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as &ldquo;you&rdquo;.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</p>
<p>A &ldquo;Modified Version&rdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</p>
<p>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document&rsquo;s overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</p>
<p>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</p>
<p>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</p>
<p>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.
</p>
<p>Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input
format, SGML or XML using a publicly available
DTD, and standard-conforming simple HTML,
PostScript or PDF designed for human modification.  Examples
of transparent image formats include PNG, XCF and
JPG.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, SGML or
XML for which the DTD and/or processing tools are
not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for
output purposes only.
</p>
<p>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &ldquo;Title Page&rdquo; means
the text near the most prominent appearance of the work&rsquo;s title,
preceding the beginning of the body of the text.
</p>
<p>The &ldquo;publisher&rdquo; means any person or entity that distributes copies
of the Document to the public.
</p>
<p>A section &ldquo;Entitled XYZ&rdquo; means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, &ldquo;Endorsements&rdquo;, or &ldquo;History&rdquo;.)  To &ldquo;Preserve the Title&rdquo;
of such a section when you modify the Document means that it remains a
section &ldquo;Entitled XYZ&rdquo; according to this definition.
</p>
<p>The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</p>
</li><li> VERBATIM COPYING

<p>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</p>
<p>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</p>
</li><li> COPYING IN QUANTITY

<p>If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document&rsquo;s license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</p>
<p>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</p>
<p>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</p>
<p>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</p>
</li><li> MODIFICATIONS

<p>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</p>
<ol type="A" start="1">
<li> Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

</li><li> List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

</li><li> State on the Title page the name of the publisher of the
Modified Version, as the publisher.

</li><li> Preserve all the copyright notices of the Document.

</li><li> Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

</li><li> Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

</li><li> Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document&rsquo;s license notice.

</li><li> Include an unaltered copy of this License.

</li><li> Preserve the section Entitled &ldquo;History&rdquo;, Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled &ldquo;History&rdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

</li><li> Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &ldquo;History&rdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

</li><li> For any section Entitled &ldquo;Acknowledgements&rdquo; or &ldquo;Dedications&rdquo;, Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

</li><li> Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

</li><li> Delete any section Entitled &ldquo;Endorsements&rdquo;.  Such a section
may not be included in the Modified Version.

</li><li> Do not retitle any existing section to be Entitled &ldquo;Endorsements&rdquo; or
to conflict in title with any Invariant Section.

</li><li> Preserve any Warranty Disclaimers.
</li></ol>

<p>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version&rsquo;s license notice.
These titles must be distinct from any other section titles.
</p>
<p>You may add a section Entitled &ldquo;Endorsements&rdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&mdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</p>
<p>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</p>
<p>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</p>
</li><li> COMBINING DOCUMENTS

<p>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</p>
<p>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</p>
<p>In the combination, you must combine any sections Entitled &ldquo;History&rdquo;
in the various original documents, forming one section Entitled
&ldquo;History&rdquo;; likewise combine any sections Entitled &ldquo;Acknowledgements&rdquo;,
and any sections Entitled &ldquo;Dedications&rdquo;.  You must delete all
sections Entitled &ldquo;Endorsements.&rdquo;
</p>
</li><li> COLLECTIONS OF DOCUMENTS

<p>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</p>
<p>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</p>
</li><li> AGGREGATION WITH INDEPENDENT WORKS

<p>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an &ldquo;aggregate&rdquo; if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation&rsquo;s users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</p>
<p>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document&rsquo;s Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</p>
</li><li> TRANSLATION

<p>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</p>
<p>If a section in the Document is Entitled &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, or &ldquo;History&rdquo;, the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</p>
</li><li> TERMINATION

<p>You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.
</p>
<p>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.
</p>
</li><li> FUTURE REVISIONS OF THIS LICENSE

<p>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</p>
<p>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy&rsquo;s public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.
</p>
</li><li> RELICENSING

<p>&ldquo;Massive Multiauthor Collaboration Site&rdquo; (or &ldquo;MMC Site&rdquo;) means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
&ldquo;Massive Multiauthor Collaboration&rdquo; (or &ldquo;MMC&rdquo;) contained in the
site means any set of copyrightable works thus published on the MMC
site.
</p>
<p>&ldquo;CC-BY-SA&rdquo; means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.
</p>
<p>&ldquo;Incorporate&rdquo; means to publish or republish a Document, in whole or
in part, as part of another Document.
</p>
<p>An MMC is &ldquo;eligible for relicensing&rdquo; if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.
</p>
<p>The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.
</p>
</li></ol>

<a name="ADDENDUM_003a-How-to-use-this-License-for-your-documents"></a>
<h3 class="heading">ADDENDUM: How to use this License for your documents</h3>

<p>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</p>
<div class="smallexample">
<pre class="smallexample">  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</pre></div>

<p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the &ldquo;with&hellip;Texts.&rdquo; line with this:
</p>
<div class="smallexample">
<pre class="smallexample">    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.
</pre></div>

<p>If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</p>
<p>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</p>

<hr>
<a name="Customizing-Calc"></a>
<div class="header">
<p>
Next: <a href="#Reporting-Bugs" accesskey="n" rel="next">Reporting Bugs</a>, Previous: <a href="#GNU-Free-Documentation-License" accesskey="p" rel="prev">GNU Free Documentation License</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Calc-1"></a>
<h2 class="appendix">Appendix C Customizing Calc</h2>

<p>The usual prefix for Calc is the key sequence <kbd>C-x *</kbd>.  If you wish
to use a different prefix, you can put
</p>
<div class="example">
<pre class="example">(global-set-key &quot;NEWPREFIX&quot; 'calc-dispatch)
</pre></div>

<p>in your .emacs file.
(See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Key-Bindings">Customizing Key Bindings</a> in <cite>The GNU Emacs Manual</cite>, for more information on binding keys.)
A convenient way to start Calc is with <kbd>C-x * *</kbd>; to make it equally
convenient for users who use a different prefix, the prefix can be
followed by  <kbd>=</kbd>, <kbd>&amp;</kbd>, <kbd>#</kbd>, <kbd>\</kbd>, <kbd>/</kbd>, <kbd>+</kbd> or
<kbd>-</kbd> as well as <kbd>*</kbd> to start Calc, and so in many cases the last
character of the prefix can simply be typed twice.
</p>
<p>Calc is controlled by many variables, most of which can be reset
from within Calc.  Some variables are less involved with actual
calculation and can be set outside of Calc using Emacs&rsquo;s
customization facilities.  These variables are listed below.
Typing <kbd>M-x customize-variable RET <var>variable-name</var> RET</kbd>
will bring up a buffer in which the variable&rsquo;s value can be redefined.
Typing <kbd>M-x customize-group RET calc RET</kbd> will bring up a buffer which
contains all of Calc&rsquo;s customizable variables.  (These variables can
also be reset by putting the appropriate lines in your .emacs file;
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Init-File">Init File</a> in <cite>The GNU Emacs Manual</cite>.)
</p>
<p>Some of the customizable variables are regular expressions.  A regular
expression is basically a pattern that Calc can search for.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Regexp-Search">Regular Expression Search</a> in <cite>The GNU Emacs Manual</cite>
to see how regular expressions work.
</p>
<dl>
<dt><a name="index-calc_002dsettings_002dfile"></a>Variable: <strong>calc-settings-file</strong></dt>
<dd><p>The variable <code>calc-settings-file</code> holds the file name in
which commands like <kbd>m m</kbd> and <kbd>Z P</kbd> store &ldquo;permanent&rdquo;
definitions.
If <code>calc-settings-file</code> is not your user init file (typically
<samp>~/.emacs</samp>) and if the variable <code>calc-loaded-settings-file</code> is
<code>nil</code>, then Calc will automatically load your settings file (if it
exists) the first time Calc is invoked.
</p>
<p>The default value for this variable is <code>&quot;~/.emacs.d/calc.el&quot;</code>
unless the file <samp>~/.calc.el</samp> exists, in which case the default
value will be <code>&quot;~/.calc.el&quot;</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dgnuplot_002dname-1"></a>Variable: <strong>calc-gnuplot-name</strong></dt>
<dd><p>See <a href="#Graphics">Graphics</a>.<br>
The variable <code>calc-gnuplot-name</code> should be the name of the
GNUPLOT program (a string).  If you have GNUPLOT installed on your
system but Calc is unable to find it, you may need to set this
variable.  You may also need to set some Lisp variables to show Calc how
to run GNUPLOT on your system, see <a href="#Devices">Graphical Devices</a> .
The default value of <code>calc-gnuplot-name</code> is <code>&quot;gnuplot&quot;</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dgnuplot_002dplot_002dcommand-1"></a>Variable: <strong>calc-gnuplot-plot-command</strong></dt>
<dt><a name="index-calc_002dgnuplot_002dprint_002dcommand-1"></a>Variable: <strong>calc-gnuplot-print-command</strong></dt>
<dd><p>See <a href="#Devices">Graphical Devices</a>.<br>
The variables <code>calc-gnuplot-plot-command</code> and
<code>calc-gnuplot-print-command</code> represent system commands to
display and print the output of GNUPLOT, respectively.  These may be
<code>nil</code> if no command is necessary, or strings which can include
&lsquo;<samp>%s</samp>&rsquo; to signify the name of the file to be displayed or printed.
Or, these variables may contain Lisp expressions which are evaluated
to display or print the output.
</p>
<p>The default value of <code>calc-gnuplot-plot-command</code> is <code>nil</code>,
and the default value of <code>calc-gnuplot-print-command</code> is
<code>&quot;lp %s&quot;</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dlanguage_002dalist"></a>Variable: <strong>calc-language-alist</strong></dt>
<dd><p>See <a href="#Basic-Embedded-Mode">Basic Embedded Mode</a>.<br>
The variable <code>calc-language-alist</code> controls the languages that
Calc will associate with major modes.  When Calc embedded mode is
enabled, it will try to use the current major mode to
determine what language should be used.  (This can be overridden using
Calc&rsquo;s mode changing commands, See <a href="#Mode-Settings-in-Embedded-Mode">Mode Settings in Embedded Mode</a>.)
The variable <code>calc-language-alist</code> consists of a list of pairs of
the form  <code>(<var>MAJOR-MODE</var> . <var>LANGUAGE</var>)</code>; for example,
<code>(latex-mode . latex)</code> is one such pair.  If Calc embedded is
activated in a buffer whose major mode is <var>MAJOR-MODE</var>, it will set itself
to use the language <var>LANGUAGE</var>.
</p>
<p>The default value of <code>calc-language-alist</code> is
</p><div class="example">
<pre class="example">   ((latex-mode . latex)
    (tex-mode   . tex)
    (plain-tex-mode . tex)
    (context-mode . tex)
    (nroff-mode . eqn)
    (pascal-mode . pascal)
    (c-mode . c)
    (c++-mode . c)
    (fortran-mode . fortran)
    (f90-mode . fortran))
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dannounce_002dformula-1"></a>Variable: <strong>calc-embedded-announce-formula</strong></dt>
<dt><a name="index-calc_002dembedded_002dannounce_002dformula_002dalist"></a>Variable: <strong>calc-embedded-announce-formula-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variable <code>calc-embedded-announce-formula</code> helps determine
what formulas <kbd>C-x * a</kbd> will activate in a buffer.  It is a
regular expression, and when activating embedded formulas with
<kbd>C-x * a</kbd>, it will tell Calc that what follows is a formula to be
activated.  (Calc also uses other patterns to find formulas, such as
&lsquo;<samp>=&gt;</samp>&rsquo; and &lsquo;<samp>:=</samp>&rsquo;.)
</p>
<p>The default pattern is <code>&quot;%Embed\n\\(% .*\n\\)*&quot;</code>, which checks
for &lsquo;<samp>%Embed</samp>&rsquo; followed by any number of lines beginning with
&lsquo;<samp>%</samp>&rsquo; and a space.
</p>
<p>The variable <code>calc-embedded-announce-formula-alist</code> is used to
set <code>calc-embedded-announce-formula</code> to different regular
expressions depending on the major mode of the editing buffer.
It consists of a list of pairs of the form <code>(<var>MAJOR-MODE</var> .
<var>REGEXP</var>)</code>, and its default value is
</p><div class="example">
<pre class="example">   ((c++-mode     . &quot;//Embed\n\\(// .*\n\\)*&quot;)
    (c-mode       . &quot;/\\*Embed\\*/\n\\(/\\* .*\\*/\n\\)*&quot;)
    (f90-mode     . &quot;!Embed\n\\(! .*\n\\)*&quot;)
    (fortran-mode . &quot;C Embed\n\\(C .*\n\\)*&quot;)
    (html-helper-mode . &quot;&lt;!-- Embed --&gt;\n\\(&lt;!-- .* --&gt;\n\\)*&quot;)
    (html-mode    . &quot;&lt;!-- Embed --&gt;\n\\(&lt;!-- .* --&gt;\n\\)*&quot;)
    (nroff-mode   . &quot;\\\\\&quot;Embed\n\\(\\\\\&quot; .*\n\\)*&quot;)
    (pascal-mode  . &quot;{Embed}\n\\({.*}\n\\)*&quot;)
    (sgml-mode    . &quot;&lt;!-- Embed --&gt;\n\\(&lt;!-- .* --&gt;\n\\)*&quot;)
    (xml-mode     . &quot;&lt;!-- Embed --&gt;\n\\(&lt;!-- .* --&gt;\n\\)*&quot;)
    (texinfo-mode . &quot;@c Embed\n\\(@c .*\n\\)*&quot;))
</pre></div>
<p>Any major modes added to <code>calc-embedded-announce-formula-alist</code>
should also be added to <code>calc-embedded-open-close-plain-alist</code>
and <code>calc-embedded-open-close-mode-alist</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dopen_002dformula-1"></a>Variable: <strong>calc-embedded-open-formula</strong></dt>
<dt><a name="index-calc_002dembedded_002dclose_002dformula-1"></a>Variable: <strong>calc-embedded-close-formula</strong></dt>
<dt><a name="index-calc_002dembedded_002dopen_002dclose_002dformula_002dalist"></a>Variable: <strong>calc-embedded-open-close-formula-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variables <code>calc-embedded-open-formula</code> and
<code>calc-embedded-close-formula</code> control the region that Calc will
activate as a formula when Embedded mode is entered with <kbd>C-x * e</kbd>.
They are regular expressions;
Calc normally scans backward and forward in the buffer for the
nearest text matching these regular expressions to be the &ldquo;formula
delimiters&rdquo;.
</p>
<p>The simplest delimiters are blank lines.  Other delimiters that
Embedded mode understands by default are:
</p><ol>
<li> The TeX and LaTeX math delimiters &lsquo;<samp>$ $</samp>&rsquo;, &lsquo;<samp>$$ $$</samp>&rsquo;,
&lsquo;<samp>\[ \]</samp>&rsquo;, and &lsquo;<samp>\( \)</samp>&rsquo;;
</li><li> Lines beginning with &lsquo;<samp>\begin</samp>&rsquo; and &lsquo;<samp>\end</samp>&rsquo; (except matrix delimiters);
</li><li> Lines beginning with &lsquo;<samp>@</samp>&rsquo; (Texinfo delimiters).
</li><li> Lines beginning with &lsquo;<samp>.EQ</samp>&rsquo; and &lsquo;<samp>.EN</samp>&rsquo; (<em>eqn</em> delimiters);
</li><li> Lines containing a single &lsquo;<samp>%</samp>&rsquo; or &lsquo;<samp>.\&quot;</samp>&rsquo; symbol and nothing else.
</li></ol>

<p>The variable <code>calc-embedded-open-close-formula-alist</code> is used to
set <code>calc-embedded-open-formula</code> and
<code>calc-embedded-close-formula</code> to different regular
expressions depending on the major mode of the editing buffer.
It consists of a list of lists of the form
<code>(<var>MAJOR-MODE</var>  <var>OPEN-FORMULA-REGEXP</var>
<var>CLOSE-FORMULA-REGEXP</var>)</code>, and its default value is
<code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dword_002dregexp-1"></a>Variable: <strong>calc-embedded-word-regexp</strong></dt>
<dt><a name="index-calc_002dembedded_002dword_002dregexp_002dalist"></a>Variable: <strong>calc-embedded-word-regexp-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variable <code>calc-embedded-word-regexp</code> determines the expression
that Calc will activate when Embedded mode is entered with <kbd>C-x *
w</kbd>.  It is a regular expressions.
</p>
<p>The default value of <code>calc-embedded-word-regexp</code> is
<code>&quot;[-+]?[0-9]+\\(\\.[0-9]+\\)?\\([eE][-+]?[0-9]+\\)?&quot;</code>.
</p>
<p>The variable <code>calc-embedded-word-regexp-alist</code> is used to
set <code>calc-embedded-word-regexp</code> to a different regular
expression depending on the major mode of the editing buffer.
It consists of a list of lists of the form
<code>(<var>MAJOR-MODE</var>  <var>WORD-REGEXP</var>)</code>, and its default value is
<code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dopen_002dplain-1"></a>Variable: <strong>calc-embedded-open-plain</strong></dt>
<dt><a name="index-calc_002dembedded_002dclose_002dplain-1"></a>Variable: <strong>calc-embedded-close-plain</strong></dt>
<dt><a name="index-calc_002dembedded_002dopen_002dclose_002dplain_002dalist"></a>Variable: <strong>calc-embedded-open-close-plain-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variables <code>calc-embedded-open-plain</code> and
<code>calc-embedded-open-plain</code> are used to delimit &ldquo;plain&rdquo;
formulas.  Note that these are actual strings, not regular
expressions, because Calc must be able to write these string into a
buffer as well as to recognize them.
</p>
<p>The default string for <code>calc-embedded-open-plain</code> is
<code>&quot;%%% &quot;</code>, note the trailing space.  The default string for
<code>calc-embedded-close-plain</code> is <code>&quot; %%%\n&quot;</code>, without
the trailing newline here, the first line of a Big mode formula
that followed might be shifted over with respect to the other lines.
</p>
<p>The variable <code>calc-embedded-open-close-plain-alist</code> is used to
set <code>calc-embedded-open-plain</code> and
<code>calc-embedded-close-plain</code> to different strings
depending on the major mode of the editing buffer.
It consists of a list of lists of the form
<code>(<var>MAJOR-MODE</var>  <var>OPEN-PLAIN-STRING</var>
<var>CLOSE-PLAIN-STRING</var>)</code>, and its default value is
</p><div class="example">
<pre class="example">   ((c++-mode     &quot;// %% &quot;   &quot; %%\n&quot;)
    (c-mode       &quot;/* %% &quot;   &quot; %% */\n&quot;)
    (f90-mode     &quot;! %% &quot;    &quot; %%\n&quot;)
    (fortran-mode &quot;C %% &quot;    &quot; %%\n&quot;)
    (html-helper-mode &quot;&lt;!-- %% &quot; &quot; %% --&gt;\n&quot;)
    (html-mode &quot;&lt;!-- %% &quot; &quot; %% --&gt;\n&quot;)
    (nroff-mode   &quot;\\\&quot; %% &quot; &quot; %%\n&quot;)
    (pascal-mode  &quot;{%% &quot;    &quot; %%}\n&quot;)
    (sgml-mode     &quot;&lt;!-- %% &quot; &quot; %% --&gt;\n&quot;)
    (xml-mode     &quot;&lt;!-- %% &quot; &quot; %% --&gt;\n&quot;)
    (texinfo-mode &quot;@c %% &quot;   &quot; %%\n&quot;))
</pre></div>
<p>Any major modes added to <code>calc-embedded-open-close-plain-alist</code>
should also be added to <code>calc-embedded-announce-formula-alist</code>
and <code>calc-embedded-open-close-mode-alist</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dopen_002dnew_002dformula-1"></a>Variable: <strong>calc-embedded-open-new-formula</strong></dt>
<dt><a name="index-calc_002dembedded_002dclose_002dnew_002dformula-1"></a>Variable: <strong>calc-embedded-close-new-formula</strong></dt>
<dt><a name="index-calc_002dembedded_002dopen_002dclose_002dnew_002dformula_002dalist"></a>Variable: <strong>calc-embedded-open-close-new-formula-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variables <code>calc-embedded-open-new-formula</code> and
<code>calc-embedded-close-new-formula</code> are strings which are
inserted before and after a new formula when you type <kbd>C-x * f</kbd>.
</p>
<p>The default value of <code>calc-embedded-open-new-formula</code> is
<code>&quot;\n\n&quot;</code>.  If this string begins with a newline character and the
<kbd>C-x * f</kbd> is typed at the beginning of a line, <kbd>C-x * f</kbd> will skip
this first newline to avoid introducing unnecessary blank lines in the
file.  The default value of <code>calc-embedded-close-new-formula</code> is
also <code>&quot;\n\n&quot;</code>.  The final newline is omitted by <kbd><span class="nolinebreak">C-x</span>&nbsp;*&nbsp;f</kbd><!-- /@w -->
if typed at the end of a line.  (It follows that if <kbd>C-x * f</kbd> is
typed on a blank line, both a leading opening newline and a trailing
closing newline are omitted.)
</p>
<p>The variable <code>calc-embedded-open-close-new-formula-alist</code> is used to
set <code>calc-embedded-open-new-formula</code> and
<code>calc-embedded-close-new-formula</code> to different strings
depending on the major mode of the editing buffer.
It consists of a list of lists of the form
<code>(<var>MAJOR-MODE</var>  <var>OPEN-NEW-FORMULA-STRING</var>
<var>CLOSE-NEW-FORMULA-STRING</var>)</code>, and its default value is
<code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dembedded_002dopen_002dmode-1"></a>Variable: <strong>calc-embedded-open-mode</strong></dt>
<dt><a name="index-calc_002dembedded_002dclose_002dmode-1"></a>Variable: <strong>calc-embedded-close-mode</strong></dt>
<dt><a name="index-calc_002dembedded_002dopen_002dclose_002dmode_002dalist"></a>Variable: <strong>calc-embedded-open-close-mode-alist</strong></dt>
<dd><p>See <a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a>.<br>
The variables <code>calc-embedded-open-mode</code> and
<code>calc-embedded-close-mode</code> are strings which Calc will place before
and after any mode annotations that it inserts.  Calc never scans for
these strings; Calc always looks for the annotation itself, so it is not
necessary to add them to user-written annotations.
</p>
<p>The default value of <code>calc-embedded-open-mode</code> is <code>&quot;% &quot;</code>
and the default value of <code>calc-embedded-close-mode</code> is
<code>&quot;\n&quot;</code>.
If you change the value of <code>calc-embedded-close-mode</code>, it is a good
idea still to end with a newline so that mode annotations will appear on
lines by themselves.
</p>
<p>The variable <code>calc-embedded-open-close-mode-alist</code> is used to
set <code>calc-embedded-open-mode</code> and
<code>calc-embedded-close-mode</code> to different strings
expressions depending on the major mode of the editing buffer.
It consists of a list of lists of the form
<code>(<var>MAJOR-MODE</var>  <var>OPEN-MODE-STRING</var>
<var>CLOSE-MODE-STRING</var>)</code>, and its default value is
</p><div class="example">
<pre class="example">   ((c++-mode     &quot;// &quot;   &quot;\n&quot;)
    (c-mode       &quot;/* &quot;   &quot; */\n&quot;)
    (f90-mode     &quot;! &quot;    &quot;\n&quot;)
    (fortran-mode &quot;C &quot;    &quot;\n&quot;)
    (html-helper-mode &quot;&lt;!-- &quot; &quot; --&gt;\n&quot;)
    (html-mode    &quot;&lt;!-- &quot; &quot; --&gt;\n&quot;)
    (nroff-mode   &quot;\\\&quot; &quot; &quot;\n&quot;)
    (pascal-mode  &quot;{ &quot;    &quot; }\n&quot;)
    (sgml-mode    &quot;&lt;!-- &quot; &quot; --&gt;\n&quot;)
    (xml-mode     &quot;&lt;!-- &quot; &quot; --&gt;\n&quot;)
    (texinfo-mode &quot;@c &quot;   &quot;\n&quot;))
</pre></div>
<p>Any major modes added to <code>calc-embedded-open-close-mode-alist</code>
should also be added to <code>calc-embedded-announce-formula-alist</code>
and <code>calc-embedded-open-close-plain-alist</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dlu_002dpower_002dreference-1"></a>Variable: <strong>calc-lu-power-reference</strong></dt>
<dt><a name="index-calc_002dlu_002dfield_002dreference-1"></a>Variable: <strong>calc-lu-field-reference</strong></dt>
<dd><p>See <a href="#Logarithmic-Units">Logarithmic Units</a>.<br>
The variables <code>calc-lu-power-reference</code> and
<code>calc-lu-field-reference</code> are unit expressions (written as
strings) which Calc will use as reference quantities for logarithmic
units.
</p>
<p>The default value of <code>calc-lu-power-reference</code> is <code>&quot;mW&quot;</code>
and the default value of <code>calc-lu-field-reference</code> is
<code>&quot;20 uPa&quot;</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dnote_002dthreshold"></a>Variable: <strong>calc-note-threshold</strong></dt>
<dd><p>See <a href="#Musical-Notes">Musical Notes</a>.<br>
The variable <code>calc-note-threshold</code> is a number (written as a
string) which determines how close (in cents) a frequency needs to be
to a note to be recognized as that note.
</p>
<p>The default value of <code>calc-note-threshold</code> is 1.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dhighlight_002dselections_002dwith_002dfaces-1"></a>Variable: <strong>calc-highlight-selections-with-faces</strong></dt>
<dt><a name="index-calc_002dselected_002dface-1"></a>Variable: <strong>calc-selected-face</strong></dt>
<dt><a name="index-calc_002dnonselected_002dface-1"></a>Variable: <strong>calc-nonselected-face</strong></dt>
<dd><p>See <a href="#Displaying-Selections">Displaying Selections</a>.<br>
The variable <code>calc-highlight-selections-with-faces</code>
determines how selected sub-formulas are distinguished.
If <code>calc-highlight-selections-with-faces</code> is nil, then
a selected sub-formula is distinguished either by changing every
character not part of the sub-formula with a dot or by changing every
character in the sub-formula with a &lsquo;<samp>#</samp>&rsquo; sign.
If <code>calc-highlight-selections-with-faces</code> is t,
then a selected sub-formula is distinguished either by displaying the
non-selected portion of the formula with <code>calc-nonselected-face</code>
or by displaying the selected sub-formula with
<code>calc-nonselected-face</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dmultiplication_002dhas_002dprecedence"></a>Variable: <strong>calc-multiplication-has-precedence</strong></dt>
<dd><p>The variable <code>calc-multiplication-has-precedence</code> determines
whether multiplication has precedence over division in algebraic
formulas in normal language modes.  If
<code>calc-multiplication-has-precedence</code> is non-<code>nil</code>, then
multiplication has precedence (and, for certain obscure reasons, is
right associative), and so for example &lsquo;<samp>a/b*c</samp>&rsquo; will be interpreted
as &lsquo;<samp>a/(b*c)</samp>&rsquo;. If <code>calc-multiplication-has-precedence</code> is
<code>nil</code>, then multiplication has the same precedence as division
(and, like division, is left associative), and so for example
&lsquo;<samp>a/b*c</samp>&rsquo; will be interpreted as &lsquo;<samp>(a/b)*c</samp>&rsquo;.  The default value
of <code>calc-multiplication-has-precedence</code> is <code>t</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dcontext_002dsensitive_002denter"></a>Variable: <strong>calc-context-sensitive-enter</strong></dt>
<dd><p>The commands <code>calc-enter</code> and <code>calc-pop</code> will typically
duplicate the top of the stack.  If
<code>calc-context-sensitive-enter</code> is non-<code>nil</code>, then the
<code>calc-enter</code> will copy the element at the cursor to the
top of the stack and <code>calc-pop</code> will delete the element at the
cursor.  The default value of <code>calc-context-sensitive-enter</code> is
<code>nil</code>.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dundo_002dlength"></a>Variable: <strong>calc-undo-length</strong></dt>
<dd><p>The variable <code>calc-undo-length</code> determines the number of undo
steps that Calc will keep track of when <code>calc-quit</code> is called.
If <code>calc-undo-length</code> is a non-negative integer, then this is the
number of undo steps that will be preserved; if
<code>calc-undo-length</code> has any other value, then all undo steps will
be preserved.  The default value of <code>calc-undo-length</code> is &lsquo;<samp>100</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-calc_002dgregorian_002dswitch"></a>Variable: <strong>calc-gregorian-switch</strong></dt>
<dd><p>See <a href="#Date-Forms">Date Forms</a>.<br>
The variable <code>calc-gregorian-switch</code> is either a list of integers
<code>(<var>YEAR</var> <var>MONTH</var> <var>DAY</var>)</code> or <code>nil</code>.
If it is <code>nil</code>, then Calc&rsquo;s date forms always represent Gregorian dates.
Otherwise, <code>calc-gregorian-switch</code> represents the date that the
calendar switches from Julian dates to Gregorian dates;
<code>(<var>YEAR</var> <var>MONTH</var> <var>DAY</var>)</code> will be the first Gregorian
date.  The customization buffer will offer several standard dates to
choose from, or the user can enter their own date.
</p>
<p>The default value of <code>calc-gregorian-switch</code> is <code>nil</code>.
</p></dd></dl>

<hr>
<a name="Reporting-Bugs"></a>
<div class="header">
<p>
Next: <a href="#Summary" accesskey="n" rel="next">Summary</a>, Previous: <a href="#Customizing-Calc" accesskey="p" rel="prev">Customizing Calc</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Reporting-Bugs-1"></a>
<h2 class="appendix">Appendix D Reporting Bugs</h2>

<p>If you find a bug in Calc, send e-mail to Jay Belanger,
</p>
<div class="example">
<pre class="example">jay.p.belanger@gmail.com
</pre></div>

<p>There is an automatic command <kbd>M-x report-calc-bug</kbd> which helps
you to report bugs.  This command prompts you for a brief subject
line, then leaves you in a mail editing buffer.  Type <kbd>C-c C-c</kbd> to
send your mail.  Make sure your subject line indicates that you are
reporting a Calc bug; this command sends mail to the maintainer&rsquo;s
regular mailbox.
</p>
<p>If you have suggestions for additional features for Calc, please send
them.  Some have dared to suggest that Calc is already top-heavy with
features; this obviously cannot be the case, so if you have ideas, send
them right in.
</p>
<p>At the front of the source file, <samp>calc.el</samp>, is a list of ideas for
future work.  If any enthusiastic souls wish to take it upon themselves
to work on these, please send a message (using <kbd>M-x report-calc-bug</kbd>)
so any efforts can be coordinated.
</p>
<p>The latest version of Calc is available from Savannah, in the Emacs
repository.  See <a href="https://savannah.gnu.org/projects/emacs">https://savannah.gnu.org/projects/emacs</a>.
</p>
<hr>
<a name="Summary"></a>
<div class="header">
<p>
Next: <a href="#Key-Index" accesskey="n" rel="next">Key Index</a>, Previous: <a href="#Reporting-Bugs" accesskey="p" rel="prev">Reporting Bugs</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Calc-Summary"></a>
<h2 class="appendix">Appendix E Calc Summary</h2>

<p>This section includes a complete list of Calc keystroke commands.
Each line lists the stack entries used by the command (top-of-stack
last), the keystrokes themselves, the prompts asked by the command,
and the result of the command (also with top-of-stack last).
The result is expressed using the equivalent algebraic function.
Commands which put no results on the stack show the full <kbd>M-x</kbd>
command name in that position.  Numbers preceding the result or
command name refer to notes at the end.
</p>
<p>Algebraic functions and <kbd>M-x</kbd> commands that don&rsquo;t have corresponding
keystrokes are not listed in this summary.
See <a href="#Command-Index">Command Index</a>.  See <a href="#Function-Index">Function Index</a>.
</p>
<div class="format">
<pre class="format"><span class="roman">            C-x * a                   33  calc-embedded-activate</span>
<span class="roman">            C-x * b                       calc-big-or-small</span>
<span class="roman">            C-x * c                       calc</span>
<span class="roman">            C-x * d                       calc-embedded-duplicate</span>
<span class="roman">            C-x * e                   34  calc-embedded</span>
<span class="roman">            C-x * f  formula              calc-embedded-new-formula</span>
<span class="roman">            C-x * g                   35  calc-grab-region</span>
<span class="roman">            C-x * i                       calc-info</span>
<span class="roman">            C-x * j                       calc-embedded-select</span>
<span class="roman">            C-x * k                       calc-keypad</span>
<span class="roman">            C-x * l                       calc-load-everything</span>
<span class="roman">            C-x * m                       read-kbd-macro</span>
<span class="roman">            C-x * n                    4  calc-embedded-next</span>
<span class="roman">            C-x * o                       calc-other-window</span>
<span class="roman">            C-x * p                    4  calc-embedded-previous</span>
<span class="roman">            C-x * q  formula              quick-calc</span>
<span class="roman">            C-x * r                   36  calc-grab-rectangle</span>
<span class="roman">            C-x * s                       calc-info-summary</span>
<span class="roman">            C-x * t                       calc-tutorial</span>
<span class="roman">            C-x * u                       calc-embedded-update-formula</span>
<span class="roman">            C-x * w                       calc-embedded-word</span>
<span class="roman">            C-x * x                       calc-quit</span>
<span class="roman">            C-x * y              1,28,49  calc-copy-to-buffer</span>
<span class="roman">            C-x * z                       calc-user-invocation</span>
<span class="roman">            C-x * :                   36  calc-grab-sum-down</span>
<span class="roman">            C-x * _                   36  calc-grab-sum-across</span>
<span class="roman">            C-x * &lsquo;  editing          30  calc-embedded-edit</span>
<span class="roman">            C-x * 0  (zero)               calc-reset</span>

<span class="roman">             0-9   number               number</span>
<span class="roman">             .     number               0.number</span>
<span class="roman">             _     number               -number</span>
<span class="roman">             e     number               1e number</span>
<span class="roman">             #     number               current-radix<tt>#</tt>number</span>
<span class="roman">             P     (in number)          +/-</span>
<span class="roman">             M     (in number)          mod</span>
<span class="roman">             @ &rsquo; &quot;   (in number)        HMS form</span>
<span class="roman">             h m s   (in number)        HMS form</span>

<span class="roman">             &rsquo;     formula       37,46  formula</span>
<span class="roman">             $     formula       37,46  $formula</span>
<span class="roman">             &quot;     string        37,46  string</span>

<span class="roman">    a b      +                       2  add(a,b)  a+b</span>
<span class="roman">    a b      -                       2  sub(a,b)  a-b</span>
<span class="roman">    a b      *                       2  mul(a,b)  a b, a*b</span>
<span class="roman">    a b      /                       2  div(a,b)  a/b</span>
<span class="roman">    a b      ^                       2  pow(a,b)  a^b</span>
<span class="roman">    a b    I ^                       2  nroot(a,b)  a^(1/b)</span>
<span class="roman">    a b      %                       2  mod(a,b)  a%b</span>
<span class="roman">    a b      \                       2  idiv(a,b)  a\b</span>
<span class="roman">    a b      :                       2  fdiv(a,b)</span>
<span class="roman">    a b      |                       2  vconcat(a,b)  a|b</span>
<span class="roman">    a b    I |                          vconcat(b,a)  b|a</span>
<span class="roman">    a b    H |                       2  append(a,b)</span>
<span class="roman">    a b  I H |                          append(b,a)</span>
<span class="roman">      a      &amp;                       1  inv(a)  1/a</span>
<span class="roman">      a      !                       1  fact(a)  a!</span>
<span class="roman">      a      =                       1  evalv(a)</span>
<span class="roman">      a      M-%                        percent(a)  a%</span>

<span class="roman">  ... a      RET                     1  ... a a</span>
<span class="roman">  ... a      SPC                     1  ... a a</span>
<span class="roman">... a b      TAB                     3  ... b a</span>
<span class="roman">. a b c      M-TAB                   3  ... b c a</span>
<span class="roman">... a b      LFD                     1  ... a b a</span>
<span class="roman">  ... a      DEL                     1  ...</span>
<span class="roman">... a b      M-DEL                   1  ... b</span>
<span class="roman">             M-RET                   4  calc-last-args</span>
<span class="roman">      a      &lsquo;     editing        1,30  calc-edit</span>

<span class="roman">  ... a      C-d                     1  ...</span>
<span class="roman">             C-k                    27  calc-kill</span>
<span class="roman">             C-w                    27  calc-kill-region</span>
<span class="roman">             C-y                        calc-yank</span>
<span class="roman">             C-_                     4  calc-undo</span>
<span class="roman">             M-k                    27  calc-copy-as-kill</span>
<span class="roman">             M-w                    27  calc-copy-region-as-kill</span>

<span class="roman">             [                          [...</span>
<span class="roman">[.. a b      ]                          [a,b]</span>
<span class="roman">             (                          (...</span>
<span class="roman">(.. a b      )                          (a,b)</span>
<span class="roman">             ,                          vector or rect complex</span>
<span class="roman">             ;                          matrix or polar complex</span>
<span class="roman">             ..                         interval</span>

<span class="roman">             ~                          calc-num-prefix</span>
<span class="roman">             &lt;                       4  calc-scroll-left</span>
<span class="roman">             &gt;                       4  calc-scroll-right</span>
<span class="roman">             {                       4  calc-scroll-down</span>
<span class="roman">             }                       4  calc-scroll-up</span>
<span class="roman">             ?                          calc-help</span>

<span class="roman">      a      n                       1  neg(a)  -a</span>
<span class="roman">             o                       4  calc-realign</span>
<span class="roman">             p     precision        31  calc-precision</span>
<span class="roman">             q                          calc-quit</span>
<span class="roman">             w                          calc-why</span>
<span class="roman">             x     command              M-x calc-command</span>
<span class="roman">      a      y                 1,28,49  calc-copy-to-buffer</span>

<span class="roman">      a      A                       1  abs(a)</span>
<span class="roman">    a b      B                       2  log(a,b)</span>
<span class="roman">    a b    I B                       2  alog(a,b)  b^a</span>
<span class="roman">      a      C                       1  cos(a)</span>
<span class="roman">      a    I C                       1  arccos(a)</span>
<span class="roman">      a    H C                       1  cosh(a)</span>
<span class="roman">      a  I H C                       1  arccosh(a)</span>
<span class="roman">             D                       4  calc-redo</span>
<span class="roman">      a      E                       1  exp(a)</span>
<span class="roman">      a    H E                       1  exp10(a)  10.^a</span>
<span class="roman">      a      F                    1,11  floor(a,d)</span>
<span class="roman">      a    I F                    1,11  ceil(a,d)</span>
<span class="roman">      a    H F                    1,11  ffloor(a,d)</span>
<span class="roman">      a  I H F                    1,11  fceil(a,d)</span>
<span class="roman">      a      G                       1  arg(a)</span>
<span class="roman">             H     command          32  Hyperbolic</span>
<span class="roman">             I     command          32  Inverse</span>
<span class="roman">      a      J                       1  conj(a)</span>
<span class="roman">             K     command          32  Keep-args</span>
<span class="roman">      a      L                       1  ln(a)</span>
<span class="roman">      a    H L                       1  log10(a)</span>
<span class="roman">             M                          calc-more-recursion-depth</span>
<span class="roman">           I M                          calc-less-recursion-depth</span>
<span class="roman">      a      N                       5  evalvn(a)</span>
<span class="roman">             O     command          32  Option</span>
<span class="roman">             P                          pi</span>
<span class="roman">           I P                          gamma</span>
<span class="roman">           H P                          e</span>
<span class="roman">         I H P                          phi</span>
<span class="roman">      a      Q                       1  sqrt(a)</span>
<span class="roman">      a    I Q                       1  sqr(a)  a^2</span>
<span class="roman">      a      R                    1,11  round(a,d)</span>
<span class="roman">      a    I R                    1,11  trunc(a,d)</span>
<span class="roman">      a    H R                    1,11  fround(a,d)</span>
<span class="roman">      a  I H R                    1,11  ftrunc(a,d)</span>
<span class="roman">      a      S                       1  sin(a)</span>
<span class="roman">      a    I S                       1  arcsin(a)</span>
<span class="roman">      a    H S                       1  sinh(a)</span>
<span class="roman">      a  I H S                       1  arcsinh(a)</span>
<span class="roman">      a      T                       1  tan(a)</span>
<span class="roman">      a    I T                       1  arctan(a)</span>
<span class="roman">      a    H T                       1  tanh(a)</span>
<span class="roman">      a  I H T                       1  arctanh(a)</span>
<span class="roman">             U                       4  calc-undo</span>
<span class="roman">             X                       4  calc-call-last-kbd-macro</span>

<span class="roman">    a b      a =                     2  eq(a,b)  a=b</span>
<span class="roman">    a b      a #                     2  neq(a,b)  a!=b</span>
<span class="roman">    a b      a &lt;                     2  lt(a,b)  a&lt;b</span>
<span class="roman">    a b      a &gt;                     2  gt(a,b)  a&gt;b</span>
<span class="roman">    a b      a [                     2  leq(a,b)  a&lt;=b</span>
<span class="roman">    a b      a ]                     2  geq(a,b)  a&gt;=b</span>
<span class="roman">    a b      a {                     2  in(a,b)</span>
<span class="roman">    a b      a &amp;                  2,45  land(a,b)  a&amp;&amp;b</span>
<span class="roman">    a b      a |                  2,45  lor(a,b)  a||b</span>
<span class="roman">      a      a !                  1,45  lnot(a)  !a</span>
<span class="roman">  a b c      a :                    45  if(a,b,c)  a?b:c</span>
<span class="roman">      a      a .                     1  rmeq(a)</span>
<span class="roman">      a      a &quot;                   7,8  calc-expand-formula</span>

<span class="roman">      a      a +   i, l, h        6,38  sum(a,i,l,h)</span>
<span class="roman">      a      a -   i, l, h        6,38  asum(a,i,l,h)</span>
<span class="roman">      a      a *   i, l, h        6,38  prod(a,i,l,h)</span>
<span class="roman">    a b      a _                     2  subscr(a,b)  a_b</span>

<span class="roman">    a b      a \                     2  pdiv(a,b)</span>
<span class="roman">    a b      a %                     2  prem(a,b)</span>
<span class="roman">    a b      a /                     2  pdivrem(a,b)  [q,r]</span>
<span class="roman">    a b    H a /                     2  pdivide(a,b)  q+r/b</span>

<span class="roman">      a      a a                     1  apart(a)</span>
<span class="roman">      a      a b   old, new         38  subst(a,old,new)</span>
<span class="roman">      a      a c   v                38  collect(a,v)</span>
<span class="roman">      a      a d   v              4,38  deriv(a,v)</span>
<span class="roman">      a    H a d   v              4,38  tderiv(a,v)</span>
<span class="roman">      a      a e                        esimplify(a)</span>
<span class="roman">      a      a f                     1  factor(a)</span>
<span class="roman">      a    H a f                     1  factors(a)</span>
<span class="roman">    a b      a g                     2  pgcd(a,b)</span>
<span class="roman">      a      a i   v                38  integ(a,v)</span>
<span class="roman">      a      a m   pats             38  match(a,pats)</span>
<span class="roman">      a    I a m   pats             38  matchnot(a,pats)</span>
<span class="roman"> data x      a p                    28  polint(data,x)</span>
<span class="roman"> data x    H a p                    28  ratint(data,x)</span>
<span class="roman">      a      a n                     1  nrat(a)</span>
<span class="roman">      a      a r   rules        4,8,38  rewrite(a,rules,n)</span>
<span class="roman">      a      a s                        simplify(a)</span>
<span class="roman">      a      a t   v, n          31,39  taylor(a,v,n)</span>
<span class="roman">      a      a v                   7,8  calc-alg-evaluate</span>
<span class="roman">      a      a x                   4,8  expand(a)</span>

<span class="roman">   data      a F   model, vars      48  fit(m,iv,pv,data)</span>
<span class="roman">   data    I a F   model, vars      48  xfit(m,iv,pv,data)</span>
<span class="roman">   data    H a F   model, vars      48  efit(m,iv,pv,data)</span>
<span class="roman">      a      a I   v, l, h          38  ninteg(a,v,l,h)</span>
<span class="roman">    a b      a M   op               22  mapeq(op,a,b)</span>
<span class="roman">    a b    I a M   op               22  mapeqr(op,a,b)</span>
<span class="roman">    a b    H a M   op               22  mapeqp(op,a,b)</span>
<span class="roman">    a g      a N   v                38  minimize(a,v,g)</span>
<span class="roman">    a g    H a N   v                38  wminimize(a,v,g)</span>
<span class="roman">      a      a P   v                38  roots(a,v)</span>
<span class="roman">    a g      a R   v                38  root(a,v,g)</span>
<span class="roman">    a g    H a R   v                38  wroot(a,v,g)</span>
<span class="roman">      a      a S   v                38  solve(a,v)</span>
<span class="roman">      a    I a S   v                38  finv(a,v)</span>
<span class="roman">      a    H a S   v                38  fsolve(a,v)</span>
<span class="roman">      a  I H a S   v                38  ffinv(a,v)</span>
<span class="roman">      a      a T   i, l, h        6,38  table(a,i,l,h)</span>
<span class="roman">    a g      a X   v                38  maximize(a,v,g)</span>
<span class="roman">    a g    H a X   v                38  wmaximize(a,v,g)</span>

<span class="roman">    a b      b a                     9  and(a,b,w)</span>
<span class="roman">      a      b c                     9  clip(a,w)</span>
<span class="roman">    a b      b d                     9  diff(a,b,w)</span>
<span class="roman">      a      b l                    10  lsh(a,n,w)</span>
<span class="roman">    a n    H b l                     9  lsh(a,n,w)</span>
<span class="roman">      a      b n                     9  not(a,w)</span>
<span class="roman">    a b      b o                     9  or(a,b,w)</span>
<span class="roman">      v      b p                     1  vpack(v)</span>
<span class="roman">      a      b r                    10  rsh(a,n,w)</span>
<span class="roman">    a n    H b r                     9  rsh(a,n,w)</span>
<span class="roman">      a      b t                    10  rot(a,n,w)</span>
<span class="roman">    a n    H b t                     9  rot(a,n,w)</span>
<span class="roman">      a      b u                     1  vunpack(a)</span>
<span class="roman">             b w   w              9,50  calc-word-size</span>
<span class="roman">    a b      b x                     9  xor(a,b,w)</span>

<span class="roman">c s l p      b D                        ddb(c,s,l,p)</span>
<span class="roman">  r n p      b F                        fv(r,n,p)</span>
<span class="roman">  r n p    I b F                        fvb(r,n,p)</span>
<span class="roman">  r n p    H b F                        fvl(r,n,p)</span>
<span class="roman">      v      b I                    19  irr(v)</span>
<span class="roman">      v    I b I                    19  irrb(v)</span>
<span class="roman">      a      b L                    10  ash(a,n,w)</span>
<span class="roman">    a n    H b L                     9  ash(a,n,w)</span>
<span class="roman">  r n a      b M                        pmt(r,n,a)</span>
<span class="roman">  r n a    I b M                        pmtb(r,n,a)</span>
<span class="roman">  r n a    H b M                        pmtl(r,n,a)</span>
<span class="roman">    r v      b N                    19  npv(r,v)</span>
<span class="roman">    r v    I b N                    19  npvb(r,v)</span>
<span class="roman">  r n p      b P                        pv(r,n,p)</span>
<span class="roman">  r n p    I b P                        pvb(r,n,p)</span>
<span class="roman">  r n p    H b P                        pvl(r,n,p)</span>
<span class="roman">      a      b R                    10  rash(a,n,w)</span>
<span class="roman">    a n    H b R                     9  rash(a,n,w)</span>
<span class="roman">  c s l      b S                        sln(c,s,l)</span>
<span class="roman">  n p a      b T                        rate(n,p,a)</span>
<span class="roman">  n p a    I b T                        rateb(n,p,a)</span>
<span class="roman">  n p a    H b T                        ratel(n,p,a)</span>
<span class="roman">c s l p      b Y                        syd(c,s,l,p)</span>

<span class="roman">  r p a      b #                        nper(r,p,a)</span>
<span class="roman">  r p a    I b #                        nperb(r,p,a)</span>
<span class="roman">  r p a    H b #                        nperl(r,p,a)</span>
<span class="roman">    a b      b %                        relch(a,b)</span>

<span class="roman">      a      c c                     5  pclean(a,p)</span>
<span class="roman">      a      c 0-9                      pclean(a,p)</span>
<span class="roman">      a    H c c                     5  clean(a,p)</span>
<span class="roman">      a    H c 0-9                      clean(a,p)</span>
<span class="roman">      a      c d                     1  deg(a)</span>
<span class="roman">      a      c f                     1  pfloat(a)</span>
<span class="roman">      a    H c f                     1  float(a)</span>
<span class="roman">      a      c h                     1  hms(a)</span>
<span class="roman">      a      c p                        polar(a)</span>
<span class="roman">      a    I c p                        rect(a)</span>
<span class="roman">      a      c r                     1  rad(a)</span>

<span class="roman">      a      c F                     5  pfrac(a,p)</span>
<span class="roman">      a    H c F                     5  frac(a,p)</span>

<span class="roman">      a      c %                        percent(a*100)</span>

<span class="roman">             d .   char             50  calc-point-char</span>
<span class="roman">             d ,   char             50  calc-group-char</span>
<span class="roman">             d &lt;                 13,50  calc-left-justify</span>
<span class="roman">             d =                 13,50  calc-center-justify</span>
<span class="roman">             d &gt;                 13,50  calc-right-justify</span>
<span class="roman">             d {   label            50  calc-left-label</span>
<span class="roman">             d }   label            50  calc-right-label</span>
<span class="roman">             d [                     4  calc-truncate-up</span>
<span class="roman">             d ]                     4  calc-truncate-down</span>
<span class="roman">             d &quot;                 12,50  calc-display-strings</span>
<span class="roman">             d SPC                      calc-refresh</span>
<span class="roman">             d RET                   1  calc-refresh-top</span>

<span class="roman">             d 0                    50  calc-decimal-radix</span>
<span class="roman">             d 2                    50  calc-binary-radix</span>
<span class="roman">             d 6                    50  calc-hex-radix</span>
<span class="roman">             d 8                    50  calc-octal-radix</span>

<span class="roman">             d b              12,13,50  calc-line-breaking</span>
<span class="roman">             d c                    50  calc-complex-notation</span>
<span class="roman">             d d   format           50  calc-date-notation</span>
<span class="roman">             d e                  5,50  calc-eng-notation</span>
<span class="roman">             d f   num           31,50  calc-fix-notation</span>
<span class="roman">             d g              12,13,50  calc-group-digits</span>
<span class="roman">             d h   format           50  calc-hms-notation</span>
<span class="roman">             d i                    50  calc-i-notation</span>
<span class="roman">             d j                    50  calc-j-notation</span>
<span class="roman">             d l                 12,50  calc-line-numbering</span>
<span class="roman">             d n                  5,50  calc-normal-notation</span>
<span class="roman">             d o   format           50  calc-over-notation</span>
<span class="roman">             d p                 12,50  calc-show-plain</span>
<span class="roman">             d r   radix         31,50  calc-radix</span>
<span class="roman">             d s                  5,50  calc-sci-notation</span>
<span class="roman">             d t                    27  calc-truncate-stack</span>
<span class="roman">             d w                 12,13  calc-auto-why</span>
<span class="roman">             d z                 12,50  calc-leading-zeros</span>

<span class="roman">             d B                    50  calc-big-language</span>
<span class="roman">             d C                    50  calc-c-language</span>
<span class="roman">             d E                    50  calc-eqn-language</span>
<span class="roman">             d F                    50  calc-fortran-language</span>
<span class="roman">             d M                    50  calc-mathematica-language</span>
<span class="roman">             d N                    50  calc-normal-language</span>
<span class="roman">             d O                    50  calc-flat-language</span>
<span class="roman">             d P                    50  calc-pascal-language</span>
<span class="roman">             d T                    50  calc-tex-language</span>
<span class="roman">             d L                    50  calc-latex-language</span>
<span class="roman">             d U                    50  calc-unformatted-language</span>
<span class="roman">             d W                    50  calc-maple-language</span>

<span class="roman">      a      f [                     4  decr(a,n)</span>
<span class="roman">      a      f ]                     4  incr(a,n)</span>

<span class="roman">    a b      f b                     2  beta(a,b)</span>
<span class="roman">      a      f e                     1  erf(a)</span>
<span class="roman">      a    I f e                     1  erfc(a)</span>
<span class="roman">      a      f g                     1  gamma(a)</span>
<span class="roman">    a b      f h                     2  hypot(a,b)</span>
<span class="roman">      a      f i                     1  im(a)</span>
<span class="roman">    n a      f j                     2  besJ(n,a)</span>
<span class="roman">    a b      f n                     2  min(a,b)</span>
<span class="roman">      a      f r                     1  re(a)</span>
<span class="roman">      a      f s                     1  sign(a)</span>
<span class="roman">    a b      f x                     2  max(a,b)</span>
<span class="roman">    n a      f y                     2  besY(n,a)</span>

<span class="roman">      a      f A                     1  abssqr(a)</span>
<span class="roman">  x a b      f B                        betaI(x,a,b)</span>
<span class="roman">  x a b    H f B                        betaB(x,a,b)</span>
<span class="roman">      a      f E                     1  expm1(a)</span>
<span class="roman">    a x      f G                     2  gammaP(a,x)</span>
<span class="roman">    a x    I f G                     2  gammaQ(a,x)</span>
<span class="roman">    a x    H f G                     2  gammag(a,x)</span>
<span class="roman">    a x  I H f G                     2  gammaG(a,x)</span>
<span class="roman">    a b      f I                     2  ilog(a,b)</span>
<span class="roman">    a b    I f I                     2  alog(a,b)  b^a</span>
<span class="roman">      a      f L                     1  lnp1(a)</span>
<span class="roman">      a      f M                     1  mant(a)</span>
<span class="roman">      a      f Q                     1  isqrt(a)</span>
<span class="roman">      a    I f Q                     1  sqr(a)  a^2</span>
<span class="roman">    a n      f S                     2  scf(a,n)</span>
<span class="roman">    y x      f T                        arctan2(y,x)</span>
<span class="roman">      a      f X                     1  xpon(a)</span>

<span class="roman">    x y      g a                 28,40  calc-graph-add</span>
<span class="roman">             g b                    12  calc-graph-border</span>
<span class="roman">             g c                        calc-graph-clear</span>
<span class="roman">             g d                    41  calc-graph-delete</span>
<span class="roman">    x y      g f                 28,40  calc-graph-fast</span>
<span class="roman">             g g                    12  calc-graph-grid</span>
<span class="roman">             g h   title                calc-graph-header</span>
<span class="roman">             g j                     4  calc-graph-juggle</span>
<span class="roman">             g k                    12  calc-graph-key</span>
<span class="roman">             g l                    12  calc-graph-log-x</span>
<span class="roman">             g n   name                 calc-graph-name</span>
<span class="roman">             g p                    42  calc-graph-plot</span>
<span class="roman">             g q                        calc-graph-quit</span>
<span class="roman">             g r   range                calc-graph-range-x</span>
<span class="roman">             g s                 12,13  calc-graph-line-style</span>
<span class="roman">             g t   title                calc-graph-title-x</span>
<span class="roman">             g v                        calc-graph-view-commands</span>
<span class="roman">             g x   display              calc-graph-display</span>
<span class="roman">             g z                    12  calc-graph-zero-x</span>

<span class="roman">  x y z      g A                 28,40  calc-graph-add-3d</span>
<span class="roman">             g C   command              calc-graph-command</span>
<span class="roman">             g D   device        43,44  calc-graph-device</span>
<span class="roman">  x y z      g F                 28,40  calc-graph-fast-3d</span>
<span class="roman">             g H                    12  calc-graph-hide</span>
<span class="roman">             g K                        calc-graph-kill</span>
<span class="roman">             g L                    12  calc-graph-log-y</span>
<span class="roman">             g N   number        43,51  calc-graph-num-points</span>
<span class="roman">             g O   filename      43,44  calc-graph-output</span>
<span class="roman">             g P                    42  calc-graph-print</span>
<span class="roman">             g R   range                calc-graph-range-y</span>
<span class="roman">             g S                 12,13  calc-graph-point-style</span>
<span class="roman">             g T   title                calc-graph-title-y</span>
<span class="roman">             g V                        calc-graph-view-trail</span>
<span class="roman">             g X   format               calc-graph-geometry</span>
<span class="roman">             g Z                    12  calc-graph-zero-y</span>

<span class="roman">             g C-l                  12  calc-graph-log-z</span>
<span class="roman">             g C-r range                calc-graph-range-z</span>
<span class="roman">             g C-t title                calc-graph-title-z</span>

<span class="roman">             h b                        calc-describe-bindings</span>
<span class="roman">             h c   key                  calc-describe-key-briefly</span>
<span class="roman">             h f   function             calc-describe-function</span>
<span class="roman">             h h                        calc-full-help</span>
<span class="roman">             h i                        calc-info</span>
<span class="roman">             h k   key                  calc-describe-key</span>
<span class="roman">             h n                        calc-view-news</span>
<span class="roman">             h s                        calc-info-summary</span>
<span class="roman">             h t                        calc-tutorial</span>
<span class="roman">             h v   var                  calc-describe-variable</span>

<span class="roman">             j 1-9                      calc-select-part</span>
<span class="roman">             j RET                  27  calc-copy-selection</span>
<span class="roman">             j DEL                  27  calc-del-selection</span>
<span class="roman">             j &rsquo;   formula          27  calc-enter-selection</span>
<span class="roman">             j &lsquo;   editing       27,30  calc-edit-selection</span>
<span class="roman">             j &quot;                  7,27  calc-sel-expand-formula</span>

<span class="roman">             j +   formula          27  calc-sel-add-both-sides</span>
<span class="roman">             j -   formula          27  calc-sel-sub-both-sides</span>
<span class="roman">             j *   formula          27  calc-sel-mul-both-sides</span>
<span class="roman">             j /   formula          27  calc-sel-div-both-sides</span>
<span class="roman">             j &amp;                    27  calc-sel-invert</span>

<span class="roman">             j a                    27  calc-select-additional</span>
<span class="roman">             j b                    12  calc-break-selections</span>
<span class="roman">             j c                        calc-clear-selections</span>
<span class="roman">             j d                 12,50  calc-show-selections</span>
<span class="roman">             j e                    12  calc-enable-selections</span>
<span class="roman">             j l                  4,27  calc-select-less</span>
<span class="roman">             j m                  4,27  calc-select-more</span>
<span class="roman">             j n                     4  calc-select-next</span>
<span class="roman">             j o                  4,27  calc-select-once</span>
<span class="roman">             j p                     4  calc-select-previous</span>
<span class="roman">             j r   rules        4,8,27  calc-rewrite-selection</span>
<span class="roman">             j s                  4,27  calc-select-here</span>
<span class="roman">             j u                    27  calc-unselect</span>
<span class="roman">             j v                  7,27  calc-sel-evaluate</span>

<span class="roman">             j C                    27  calc-sel-commute</span>
<span class="roman">             j D                  4,27  calc-sel-distribute</span>
<span class="roman">             j E                    27  calc-sel-jump-equals</span>
<span class="roman">             j I                    27  calc-sel-isolate</span>
<span class="roman">           H j I                    27  calc-sel-isolate (full)</span>
<span class="roman">             j L                  4,27  calc-commute-left</span>
<span class="roman">             j M                    27  calc-sel-merge</span>
<span class="roman">             j N                    27  calc-sel-negate</span>
<span class="roman">             j O                  4,27  calc-select-once-maybe</span>
<span class="roman">             j R                  4,27  calc-commute-right</span>
<span class="roman">             j S                  4,27  calc-select-here-maybe</span>
<span class="roman">             j U                    27  calc-sel-unpack</span>

<span class="roman">             k a                        calc-random-again</span>
<span class="roman">      n      k b                     1  bern(n)</span>
<span class="roman">    n x    H k b                     2  bern(n,x)</span>
<span class="roman">    n m      k c                     2  choose(n,m)</span>
<span class="roman">    n m    H k c                     2  perm(n,m)</span>
<span class="roman">      n      k d                     1  dfact(n)  n!!</span>
<span class="roman">      n      k e                     1  euler(n)</span>
<span class="roman">    n x    H k e                     2  euler(n,x)</span>
<span class="roman">      n      k f                     4  prfac(n)</span>
<span class="roman">    n m      k g                     2  gcd(n,m)</span>
<span class="roman">    m n      k h                    14  shuffle(n,m)</span>
<span class="roman">    n m      k l                     2  lcm(n,m)</span>
<span class="roman">      n      k m                     1  moebius(n)</span>
<span class="roman">      n      k n                     4  nextprime(n)</span>
<span class="roman">      n    I k n                     4  prevprime(n)</span>
<span class="roman">      n      k p                  4,28  calc-prime-test</span>
<span class="roman">      m      k r                    14  random(m)</span>
<span class="roman">    n m      k s                     2  stir1(n,m)</span>
<span class="roman">    n m    H k s                     2  stir2(n,m)</span>
<span class="roman">      n      k t                     1  totient(n)</span>

<span class="roman">  n p x      k B                        utpb(x,n,p)</span>
<span class="roman">  n p x    I k B                        ltpb(x,n,p)</span>
<span class="roman">    v x      k C                        utpc(x,v)</span>
<span class="roman">    v x    I k C                        ltpc(x,v)</span>
<span class="roman">    n m      k E                        egcd(n,m)</span>
<span class="roman">v1 v2 x      k F                        utpf(x,v1,v2)</span>
<span class="roman">v1 v2 x    I k F                        ltpf(x,v1,v2)</span>
<span class="roman">  m s x      k N                        utpn(x,m,s)</span>
<span class="roman">  m s x    I k N                        ltpn(x,m,s)</span>
<span class="roman">    m x      k P                        utpp(x,m)</span>
<span class="roman">    m x    I k P                        ltpp(x,m)</span>
<span class="roman">    v x      k T                        utpt(x,v)</span>
<span class="roman">    v x    I k T                        ltpt(x,v)</span>

<span class="roman">    a b      l +                        lupadd(a,b)</span>
<span class="roman">    a b    H l +                        lufadd(a,b)</span>
<span class="roman">    a b      l -                        lupsub(a,b)</span>
<span class="roman">    a b    H l -                        lufsub(a,b)</span>
<span class="roman">    a b      l *                        lupmul(a,b)</span>
<span class="roman">    a b    H l *                        lufmul(a,b)</span>
<span class="roman">    a b      l /                        lupdiv(a,b)</span>
<span class="roman">    a b    H l /                        lufdiv(a,b)</span>
<span class="roman">      a      l d                        dbpower(a)</span>
<span class="roman">    a b    O l d                        dbpower(a,b)</span>
<span class="roman">      a    H l d                        dbfield(a)</span>
<span class="roman">    a b  O H l d                        dbfield(a,b)</span>
<span class="roman">      a      l n                        nppower(a)</span>
<span class="roman">    a b    O l n                        nppower(a,b)</span>
<span class="roman">      a    H l n                        npfield(a)</span>
<span class="roman">    a b  O H l n                        npfield(a,b)</span>
<span class="roman">      a      l q                        lupquant(a)</span>
<span class="roman">    a b    O l q                        lupquant(a,b)</span>
<span class="roman">      a    H l q                        lufquant(a)</span>
<span class="roman">    a b  O H l q                        lufquant(a,b)</span>
<span class="roman">      a      l s                        spn(a)</span>
<span class="roman">      a      l m                        midi(a)</span>
<span class="roman">      a      l f                        freq(a)</span>

<span class="roman">             m a                 12,13  calc-algebraic-mode</span>
<span class="roman">             m d                        calc-degrees-mode</span>
<span class="roman">             m e                        calc-embedded-preserve-modes</span>
<span class="roman">             m f                    12  calc-frac-mode</span>
<span class="roman">             m g                    52  calc-get-modes</span>
<span class="roman">             m h                        calc-hms-mode</span>
<span class="roman">             m i                 12,13  calc-infinite-mode</span>
<span class="roman">             m m                        calc-save-modes</span>
<span class="roman">             m p                    12  calc-polar-mode</span>
<span class="roman">             m r                        calc-radians-mode</span>
<span class="roman">             m s                    12  calc-symbolic-mode</span>
<span class="roman">             m t                    12  calc-total-algebraic-mode</span>
<span class="roman">             m v                 12,13  calc-matrix-mode</span>
<span class="roman">             m w                    13  calc-working</span>
<span class="roman">             m x                        calc-always-load-extensions</span>

<span class="roman">             m A                    12  calc-alg-simplify-mode</span>
<span class="roman">             m B                    12  calc-bin-simplify-mode</span>
<span class="roman">             m C                    12  calc-auto-recompute</span>
<span class="roman">             m D                        calc-default-simplify-mode</span>
<span class="roman">             m E                    12  calc-ext-simplify-mode</span>
<span class="roman">             m F   filename         13  calc-settings-file-name</span>
<span class="roman">             m N                    12  calc-num-simplify-mode</span>
<span class="roman">             m O                    12  calc-no-simplify-mode</span>
<span class="roman">             m R                 12,13  calc-mode-record-mode</span>
<span class="roman">             m S                    12  calc-shift-prefix</span>
<span class="roman">             m U                    12  calc-units-simplify-mode</span>

<span class="roman">             r s   register         27  calc-copy-to-register</span>
<span class="roman">             r i   register             calc-insert-register</span>

<span class="roman">             s c   var1, var2       29  calc-copy-variable</span>
<span class="roman">             s d   var, decl            calc-declare-variable</span>
<span class="roman">             s e   var, editing  29,30  calc-edit-variable</span>
<span class="roman">             s i   buffer               calc-insert-variables</span>
<span class="roman">             s k   const, var       29  calc-copy-special-constant</span>
<span class="roman">    a b      s l   var              29  a  (letting var=b)</span>
<span class="roman">  a ...      s m   op, var       22,29  calc-store-map</span>
<span class="roman">             s n   var           29,47  calc-store-neg  (v/-1)</span>
<span class="roman">             s p   var              29  calc-permanent-variable</span>
<span class="roman">             s r   var              29  v  (recalled value)</span>
<span class="roman">             r 0-9                      calc-recall-quick</span>
<span class="roman">      a      s s   var           28,29  calc-store</span>
<span class="roman">      a      s 0-9                      calc-store-quick</span>
<span class="roman">      a      s t   var              29  calc-store-into</span>
<span class="roman">      a      t 0-9                      calc-store-into-quick</span>
<span class="roman">             s u   var              29  calc-unstore</span>
<span class="roman">      a      s x   var              29  calc-store-exchange</span>

<span class="roman">             s A   editing          30  calc-edit-AlgSimpRules</span>
<span class="roman">             s D   editing          30  calc-edit-Decls</span>
<span class="roman">             s E   editing          30  calc-edit-EvalRules</span>
<span class="roman">             s F   editing          30  calc-edit-FitRules</span>
<span class="roman">             s G   editing          30  calc-edit-GenCount</span>
<span class="roman">             s H   editing          30  calc-edit-Holidays</span>
<span class="roman">             s I   editing          30  calc-edit-IntegLimit</span>
<span class="roman">             s L   editing          30  calc-edit-LineStyles</span>
<span class="roman">             s P   editing          30  calc-edit-PointStyles</span>
<span class="roman">             s R   editing          30  calc-edit-PlotRejects</span>
<span class="roman">             s T   editing          30  calc-edit-TimeZone</span>
<span class="roman">             s U   editing          30  calc-edit-Units</span>
<span class="roman">             s X   editing          30  calc-edit-ExtSimpRules</span>

<span class="roman">      a      s +   var           29,47  calc-store-plus  (v+a)</span>
<span class="roman">      a      s -   var           29,47  calc-store-minus  (v-a)</span>
<span class="roman">      a      s *   var           29,47  calc-store-times  (v*a)</span>
<span class="roman">      a      s /   var           29,47  calc-store-div  (v/a)</span>
<span class="roman">      a      s ^   var           29,47  calc-store-power  (v^a)</span>
<span class="roman">      a      s |   var           29,47  calc-store-concat  (v|a)</span>
<span class="roman">             s &amp;   var           29,47  calc-store-inv  (v^-1)</span>
<span class="roman">             s [   var           29,47  calc-store-decr  (v-1)</span>
<span class="roman">             s ]   var           29,47  calc-store-incr  (v-(-1))</span>
<span class="roman">    a b      s :                     2  assign(a,b)  a <tt>:=</tt> b</span>
<span class="roman">      a      s =                     1  evalto(a,b)  a <tt>=&gt;</tt></span>

<span class="roman">             t [                     4  calc-trail-first</span>
<span class="roman">             t ]                     4  calc-trail-last</span>
<span class="roman">             t &lt;                     4  calc-trail-scroll-left</span>
<span class="roman">             t &gt;                     4  calc-trail-scroll-right</span>
<span class="roman">             t .                    12  calc-full-trail-vectors</span>

<span class="roman">             t b                     4  calc-trail-backward</span>
<span class="roman">             t d                 12,50  calc-trail-display</span>
<span class="roman">             t f                     4  calc-trail-forward</span>
<span class="roman">             t h                        calc-trail-here</span>
<span class="roman">             t i                        calc-trail-in</span>
<span class="roman">             t k                     4  calc-trail-kill</span>
<span class="roman">             t m   string               calc-trail-marker</span>
<span class="roman">             t n                     4  calc-trail-next</span>
<span class="roman">             t o                        calc-trail-out</span>
<span class="roman">             t p                     4  calc-trail-previous</span>
<span class="roman">             t r   string               calc-trail-isearch-backward</span>
<span class="roman">             t s   string               calc-trail-isearch-forward</span>
<span class="roman">             t y                     4  calc-trail-yank</span>

<span class="roman">      d      t C   oz, nz               tzconv(d,oz,nz)</span>
<span class="roman">d oz nz      t C   $                    tzconv(d,oz,nz)</span>
<span class="roman">      d      t D                    15  date(d)</span>
<span class="roman">      d      t I                     4  incmonth(d,n)</span>
<span class="roman">      d      t J                    16  julian(d,z)</span>
<span class="roman">      d      t M                    17  newmonth(d,n)</span>
<span class="roman">             t N                    16  now(z)</span>
<span class="roman">      d      t P   1                31  year(d)</span>
<span class="roman">      d      t P   2                31  month(d)</span>
<span class="roman">      d      t P   3                31  day(d)</span>
<span class="roman">      d      t P   4                31  hour(d)</span>
<span class="roman">      d      t P   5                31  minute(d)</span>
<span class="roman">      d      t P   6                31  second(d)</span>
<span class="roman">      d      t P   7                31  weekday(d)</span>
<span class="roman">      d      t P   8                31  yearday(d)</span>
<span class="roman">      d      t P   9                31  time(d)</span>
<span class="roman">      d      t U                    16  unixtime(d,z)</span>
<span class="roman">      d      t W                    17  newweek(d,w)</span>
<span class="roman">      d      t Y                    17  newyear(d,n)</span>

<span class="roman">    a b      t +                     2  badd(a,b)</span>
<span class="roman">    a b      t -                     2  bsub(a,b)</span>

<span class="roman">             u a                    12  calc-autorange-units</span>
<span class="roman">      a      u b                        calc-base-units</span>
<span class="roman">      a      u c   units            18  calc-convert-units</span>
<span class="roman">   defn      u d   unit, descr          calc-define-unit</span>
<span class="roman">             u e                        calc-explain-units</span>
<span class="roman">             u g   unit                 calc-get-unit-definition</span>
<span class="roman">             u n   units            18  calc-convert-exact-units</span>
<span class="roman">             u p                        calc-permanent-units</span>
<span class="roman">      a      u r                        calc-remove-units</span>
<span class="roman">      a      u s                        usimplify(a)</span>
<span class="roman">      a      u t   units            18  calc-convert-temperature</span>
<span class="roman">             u u   unit                 calc-undefine-unit</span>
<span class="roman">             u v                        calc-enter-units-table</span>
<span class="roman">      a      u x                        calc-extract-units</span>
<span class="roman">      a      u 0-9                      calc-quick-units</span>

<span class="roman">  v1 v2      u C                    20  vcov(v1,v2)</span>
<span class="roman">  v1 v2    I u C                    20  vpcov(v1,v2)</span>
<span class="roman">  v1 v2    H u C                    20  vcorr(v1,v2)</span>
<span class="roman">      v      u G                    19  vgmean(v)</span>
<span class="roman">    a b    H u G                     2  agmean(a,b)</span>
<span class="roman">      v      u M                    19  vmean(v)</span>
<span class="roman">      v    I u M                    19  vmeane(v)</span>
<span class="roman">      v    H u M                    19  vmedian(v)</span>
<span class="roman">      v  I H u M                    19  vhmean(v)</span>
<span class="roman">      v      u N                    19  vmin(v)</span>
<span class="roman">      v      u R                        rms(v)</span>
<span class="roman">      v      u S                    19  vsdev(v)</span>
<span class="roman">      v    I u S                    19  vpsdev(v)</span>
<span class="roman">      v    H u S                    19  vvar(v)</span>
<span class="roman">      v  I H u S                    19  vpvar(v)</span>
<span class="roman">             u V                        calc-view-units-table</span>
<span class="roman">      v      u X                    19  vmax(v)</span>

<span class="roman">      v      u +                    19  vsum(v)</span>
<span class="roman">      v      u *                    19  vprod(v)</span>
<span class="roman">      v      u #                    19  vcount(v)</span>

<span class="roman">             V (                    50  calc-vector-parens</span>
<span class="roman">             V {                    50  calc-vector-braces</span>
<span class="roman">             V [                    50  calc-vector-brackets</span>
<span class="roman">             V ]   ROCP             50  calc-matrix-brackets</span>
<span class="roman">             V ,                    50  calc-vector-commas</span>
<span class="roman">             V &lt;                    50  calc-matrix-left-justify</span>
<span class="roman">             V =                    50  calc-matrix-center-justify</span>
<span class="roman">             V &gt;                    50  calc-matrix-right-justify</span>
<span class="roman">             V /                 12,50  calc-break-vectors</span>
<span class="roman">             V .                 12,50  calc-full-vectors</span>

<span class="roman">    s t      V ^                     2  vint(s,t)</span>
<span class="roman">    s t      V -                     2  vdiff(s,t)</span>
<span class="roman">      s      V ~                     1  vcompl(s)</span>
<span class="roman">      s      V #                     1  vcard(s)</span>
<span class="roman">      s      V :                     1  vspan(s)</span>
<span class="roman">      s      V +                     1  rdup(s)</span>

<span class="roman">      m      V &amp;                     1  inv(m)  1/m</span>

<span class="roman">      v      v a   n                    arrange(v,n)</span>
<span class="roman">      a      v b   n                    cvec(a,n)</span>
<span class="roman">      v      v c   n &gt;0          21,31  mcol(v,n)</span>
<span class="roman">      v      v c   n &lt;0             31  mrcol(v,-n)</span>
<span class="roman">      m      v c   0                31  getdiag(m)</span>
<span class="roman">      v      v d                    25  diag(v,n)</span>
<span class="roman">    v m      v e                     2  vexp(v,m)</span>
<span class="roman">  v m f    H v e                     2  vexp(v,m,f)</span>
<span class="roman">    v a      v f                    26  find(v,a,n)</span>
<span class="roman">      v      v h                     1  head(v)</span>
<span class="roman">      v    I v h                     1  tail(v)</span>
<span class="roman">      v    H v h                     1  rhead(v)</span>
<span class="roman">      v  I H v h                     1  rtail(v)</span>
<span class="roman">             v i   n                31  idn(1,n)</span>
<span class="roman">             v i   0                31  idn(1)</span>
<span class="roman">    h t      v k                     2  cons(h,t)</span>
<span class="roman">    h t    H v k                     2  rcons(h,t)</span>
<span class="roman">      v      v l                     1  vlen(v)</span>
<span class="roman">      v    H v l                     1  mdims(v)</span>
<span class="roman">    v m      v m                     2  vmask(v,m)</span>
<span class="roman">      v      v n                     1  rnorm(v)</span>
<span class="roman">  a b c      v p                    24  calc-pack</span>
<span class="roman">      v      v r   n &gt;0          21,31  mrow(v,n)</span>
<span class="roman">      v      v r   n &lt;0             31  mrrow(v,-n)</span>
<span class="roman">      m      v r   0                31  getdiag(m)</span>
<span class="roman">  v i j      v s                        subvec(v,i,j)</span>
<span class="roman">  v i j    I v s                        rsubvec(v,i,j)</span>
<span class="roman">      m      v t                     1  trn(m)</span>
<span class="roman">      v      v u                    24  calc-unpack</span>
<span class="roman">      v      v v                     1  rev(v)</span>
<span class="roman">             v x   n                31  index(n)</span>
<span class="roman">  n s i  C-u v x                        index(n,s,i)</span>

<span class="roman">      v      V A   op               22  apply(op,v)</span>
<span class="roman">  v1 v2      V C                     2  cross(v1,v2)</span>
<span class="roman">      m      V D                     1  det(m)</span>
<span class="roman">      s      V E                     1  venum(s)</span>
<span class="roman">      s      V F                     1  vfloor(s)</span>
<span class="roman">      v      V G                        grade(v)</span>
<span class="roman">      v    I V G                        rgrade(v)</span>
<span class="roman">      v      V H   n                31  histogram(v,n)</span>
<span class="roman">    v w    H V H   n                31  histogram(v,w,n)</span>
<span class="roman">  v1 v2      V I   mop aop          22  inner(mop,aop,v1,v2)</span>
<span class="roman">      m      V J                     1  ctrn(m)</span>
<span class="roman">  m1 m2      V K                        kron(m1,m2)</span>
<span class="roman">      m      V L                     1  lud(m)</span>
<span class="roman">      v      V M   op            22,23  map(op,v)</span>
<span class="roman">      v      V N                     1  cnorm(v)</span>
<span class="roman">  v1 v2      V O   op               22  outer(op,v1,v2)</span>
<span class="roman">      v      V R   op            22,23  reduce(op,v)</span>
<span class="roman">      v    I V R   op            22,23  rreduce(op,v)</span>
<span class="roman">    a n    H V R   op               22  nest(op,a,n)</span>
<span class="roman">      a  I H V R   op               22  fixp(op,a)</span>
<span class="roman">      v      V S                        sort(v)</span>
<span class="roman">      v    I V S                        rsort(v)</span>
<span class="roman">      m      V T                     1  tr(m)</span>
<span class="roman">      v      V U   op               22  accum(op,v)</span>
<span class="roman">      v    I V U   op               22  raccum(op,v)</span>
<span class="roman">    a n    H V U   op               22  anest(op,a,n)</span>
<span class="roman">      a  I H V U   op               22  afixp(op,a)</span>
<span class="roman">    s t      V V                     2  vunion(s,t)</span>
<span class="roman">    s t      V X                     2  vxor(s,t)</span>

<span class="roman">             Y                          user commands</span>

<span class="roman">             z                          user commands</span>

<span class="roman">      c      Z [                    45  calc-kbd-if</span>
<span class="roman">      c      Z |                    45  calc-kbd-else-if</span>
<span class="roman">             Z :                        calc-kbd-else</span>
<span class="roman">             Z ]                        calc-kbd-end-if</span>

<span class="roman">             Z {                     4  calc-kbd-loop</span>
<span class="roman">      c      Z /                    45  calc-kbd-break</span>
<span class="roman">             Z }                        calc-kbd-end-loop</span>
<span class="roman">      n      Z &lt;                        calc-kbd-repeat</span>
<span class="roman">             Z &gt;                        calc-kbd-end-repeat</span>
<span class="roman">    n m      Z (                        calc-kbd-for</span>
<span class="roman">      s      Z )                        calc-kbd-end-for</span>

<span class="roman">             Z C-g                      cancel if/loop command</span>

<span class="roman">             Z &lsquo;                        calc-kbd-push</span>
<span class="roman">             Z &rsquo;                        calc-kbd-pop</span>
<span class="roman">             Z #                        calc-kbd-query</span>

<span class="roman">   comp      Z C   func, args       50  calc-user-define-composition</span>
<span class="roman">             Z D   key, command         calc-user-define</span>
<span class="roman">             Z E   key, editing     30  calc-user-define-edit</span>
<span class="roman">   defn      Z F   k, c, f, a, n    28  calc-user-define-formula</span>
<span class="roman">             Z G   key                  calc-get-user-defn</span>
<span class="roman">             Z I                        calc-user-define-invocation</span>
<span class="roman">             Z K   key, command         calc-user-define-kbd-macro</span>
<span class="roman">             Z P   key                  calc-user-define-permanent</span>
<span class="roman">             Z S                    30  calc-edit-user-syntax</span>
<span class="roman">             Z T                    12  calc-timing</span>
<span class="roman">             Z U   key                  calc-user-undefine</span>

</pre></div>


<p>NOTES
</p>
<ol>
<li> Positive prefix arguments apply to &lsquo;<samp>n</samp>&rsquo; stack entries.
Negative prefix arguments apply to the &lsquo;<samp>-n</samp>&rsquo;th stack entry.
A prefix of zero applies to the entire stack.  (For <tt class="key">LFD</tt> and
<kbd>M-<span class="key">DEL</span></kbd>, the meaning of the sign is reversed.)

</li><li> Positive prefix arguments apply to &lsquo;<samp>n</samp>&rsquo; stack entries.
Negative prefix arguments apply to the top stack entry
and the next &lsquo;<samp>-n</samp>&rsquo; stack entries.

</li><li> Positive prefix arguments rotate top &lsquo;<samp>n</samp>&rsquo; stack entries by one.
Negative prefix arguments rotate the entire stack by &lsquo;<samp>-n</samp>&rsquo;.
A prefix of zero reverses the entire stack.

</li><li> Prefix argument specifies a repeat count or distance.

</li><li> Positive prefix arguments specify a precision &lsquo;<samp>p</samp>&rsquo;.
Negative prefix arguments reduce the current precision by &lsquo;<samp>-p</samp>&rsquo;.

</li><li> A prefix argument is interpreted as an additional step-size parameter.
A plain <kbd>C-u</kbd> prefix means to prompt for the step size.

</li><li> A prefix argument specifies simplification level and depth.
1=Basic simplifications, 2=Algebraic simplifications, 3=Extended simplifications

</li><li> A negative prefix operates only on the top level of the input formula.

</li><li> Positive prefix arguments specify a word size of &lsquo;<samp>w</samp>&rsquo; bits, unsigned.
Negative prefix arguments specify a word size of &lsquo;<samp>w</samp>&rsquo; bits, signed.

</li><li> Prefix arguments specify the shift amount &lsquo;<samp>n</samp>&rsquo;.  The &lsquo;<samp>w</samp>&rsquo; argument
cannot be specified in the keyboard version of this command.

</li><li> From the keyboard, &lsquo;<samp>d</samp>&rsquo; is omitted and defaults to zero.

</li><li> Mode is toggled; a positive prefix always sets the mode, and a negative
prefix always clears the mode.

</li><li> Some prefix argument values provide special variations of the mode.

</li><li> A prefix argument, if any, is used for &lsquo;<samp>m</samp>&rsquo; instead of taking
&lsquo;<samp>m</samp>&rsquo; from the stack.  &lsquo;<samp>M</samp>&rsquo; may take any of these values:
<dl compact="compact">
<dt>Integer</dt>
<dd><p>Random integer in the interval &lsquo;<samp>[0 .. m)</samp>&rsquo;.
</p></dd>
<dt>Float</dt>
<dd><p>Random floating-point number in the interval &lsquo;<samp>[0 .. m)</samp>&rsquo;.
</p></dd>
<dt>0.0</dt>
<dd><p>Gaussian with mean 1 and standard deviation 0.
</p></dd>
<dt>Error form</dt>
<dd><p>Gaussian with specified mean and standard deviation.
</p></dd>
<dt>Interval</dt>
<dd><p>Random integer or floating-point number in that interval.
</p></dd>
<dt>Vector</dt>
<dd><p>Random element from the vector.
</p></dd>
</dl>

</li><li> A prefix argument from 1 to 6 specifies number of date components
to remove from the stack.  See <a href="#Date-Conversions">Date Conversions</a>.

</li><li> A prefix argument specifies a time zone; <kbd>C-u</kbd> says to take the
time zone number or name from the top of the stack.  See <a href="#Time-Zones">Time Zones</a>.

</li><li> A prefix argument specifies a day number (0&ndash;6, 0&ndash;31, or 0&ndash;366).

</li><li> If the input has no units, you will be prompted for both the old and
the new units.

</li><li> With a prefix argument, collect that many stack entries to form the
input data set.  Each entry may be a single value or a vector of values.

</li><li> With a prefix argument of 1, take a single
<i><var>N</var>x2</i>
matrix from the stack instead of two separate data vectors.

</li><li> The row or column number &lsquo;<samp>n</samp>&rsquo; may be given as a numeric prefix
argument instead.  A plain <kbd>C-u</kbd> prefix says to take &lsquo;<samp>n</samp>&rsquo;
from the top of the stack.  If &lsquo;<samp>n</samp>&rsquo; is a vector or interval,
a subvector/submatrix of the input is created.

</li><li> The &lsquo;<samp>op</samp>&rsquo; prompt can be answered with the key sequence for the
desired function, or with <kbd>x</kbd> or <kbd>z</kbd> followed by a function name,
or with <kbd>$</kbd> to take a formula from the top of the stack, or with
<kbd>'</kbd> and a typed formula.  In the last two cases, the formula may
be a nameless function like &lsquo;<samp>&lt;#1+#2&gt;</samp>&rsquo; or &lsquo;<samp>&lt;x, y : x+y&gt;</samp>&rsquo;; or it
may include <kbd>$</kbd>, <kbd>$$</kbd>, etc., where <kbd>$</kbd> will correspond to the
last argument of the created function; or otherwise you will be
prompted for an argument list.  The number of vectors popped from the
stack by <kbd>V M</kbd> depends on the number of arguments of the function.

</li><li> One of the mapping direction keys <kbd>_</kbd> (horizontal, i.e., map
by rows or reduce across), <kbd>:</kbd> (vertical, i.e., map by columns or
reduce down), or <kbd>=</kbd> (map or reduce by rows) may be used before
entering &lsquo;<samp>op</samp>&rsquo;; these modify the function name by adding the letter
<code>r</code> for &ldquo;rows,&rdquo; <code>c</code> for &ldquo;columns,&rdquo; <code>a</code> for &ldquo;across,&rdquo;
or <code>d</code> for &ldquo;down.&rdquo;

</li><li> The prefix argument specifies a packing mode.  A nonnegative mode
is the number of items (for <kbd>v p</kbd>) or the number of levels
(for <kbd>v u</kbd>).  A negative mode is as described below.  With no
prefix argument, the mode is taken from the top of the stack and
may be an integer or a vector of integers.
<dl compact="compact">
<dt><cite>-1</cite></dt>
<dd><p>(<var>2</var>)  Rectangular complex number.
</p></dd>
<dt><cite>-2</cite></dt>
<dd><p>(<var>2</var>)  Polar complex number.
</p></dd>
<dt><cite>-3</cite></dt>
<dd><p>(<var>3</var>)  HMS form.
</p></dd>
<dt><cite>-4</cite></dt>
<dd><p>(<var>2</var>)  Error form.
</p></dd>
<dt><cite>-5</cite></dt>
<dd><p>(<var>2</var>)  Modulo form.
</p></dd>
<dt><cite>-6</cite></dt>
<dd><p>(<var>2</var>)  Closed interval.
</p></dd>
<dt><cite>-7</cite></dt>
<dd><p>(<var>2</var>)  Closed .. open interval.
</p></dd>
<dt><cite>-8</cite></dt>
<dd><p>(<var>2</var>)  Open .. closed interval.
</p></dd>
<dt><cite>-9</cite></dt>
<dd><p>(<var>2</var>)  Open interval.
</p></dd>
<dt><cite>-10</cite></dt>
<dd><p>(<var>2</var>)  Fraction.
</p></dd>
<dt><cite>-11</cite></dt>
<dd><p>(<var>2</var>)  Float with integer mantissa.
</p></dd>
<dt><cite>-12</cite></dt>
<dd><p>(<var>2</var>)  Float with mantissa in &lsquo;<samp>[1 .. 10)</samp>&rsquo;.
</p></dd>
<dt><cite>-13</cite></dt>
<dd><p>(<var>1</var>)  Date form (using date numbers).
</p></dd>
<dt><cite>-14</cite></dt>
<dd><p>(<var>3</var>)  Date form (using year, month, day).
</p></dd>
<dt><cite>-15</cite></dt>
<dd><p>(<var>6</var>)  Date form (using year, month, day, hour, minute, second).
</p></dd>
</dl>

</li><li> A prefix argument specifies the size &lsquo;<samp>n</samp>&rsquo; of the matrix.  With no
prefix argument, &lsquo;<samp>n</samp>&rsquo; is omitted and the size is inferred from
the input vector.

</li><li> The prefix argument specifies the starting position &lsquo;<samp>n</samp>&rsquo; (default 1).

</li><li> Cursor position within stack buffer affects this command.

</li><li> Arguments are not actually removed from the stack by this command.

</li><li> Variable name may be a single digit or a full name.

</li><li> Editing occurs in a separate buffer.  Press <kbd>C-c C-c</kbd> (or
<tt class="key">LFD</tt>, or in some cases <tt class="key">RET</tt>) to finish the edit, or kill the
buffer with <kbd>C-x k</kbd> to cancel the edit.  The <tt class="key">LFD</tt> key prevents evaluation
of the result of the edit.

</li><li> The number prompted for can also be provided as a prefix argument.

</li><li> Press this key a second time to cancel the prefix.

</li><li> With a negative prefix, deactivate all formulas.  With a positive
prefix, deactivate and then reactivate from scratch.

</li><li> Default is to scan for nearest formula delimiter symbols.  With a
prefix of zero, formula is delimited by mark and point.  With a
non-zero prefix, formula is delimited by scanning forward or
backward by that many lines.

</li><li> Parse the region between point and mark as a vector.  A nonzero prefix
parses <var>n</var> lines before or after point as a vector.  A zero prefix
parses the current line as a vector.  A <kbd>C-u</kbd> prefix parses the
region between point and mark as a single formula.

</li><li> Parse the rectangle defined by point and mark as a matrix.  A positive
prefix <var>n</var> divides the rectangle into columns of width <var>n</var>.
A zero or <kbd>C-u</kbd> prefix parses each line as one formula.  A negative
prefix suppresses special treatment of bracketed portions of a line.

</li><li> A numeric prefix causes the current language mode to be ignored.

</li><li> Responding to a prompt with a blank line answers that and all
later prompts by popping additional stack entries.

</li><li> Answer for &lsquo;<samp>v</samp>&rsquo; may also be of the form &lsquo;<samp>v = v_0</samp>&rsquo; or
&lsquo;<samp>v - v_0</samp>&rsquo;.

</li><li> With a positive prefix argument, stack contains many &lsquo;<samp>y</samp>&rsquo;&rsquo;s and one
common &lsquo;<samp>x</samp>&rsquo;.  With a zero prefix, stack contains a vector of
&lsquo;<samp>y</samp>&rsquo;s and a common &lsquo;<samp>x</samp>&rsquo;.  With a negative prefix, stack
contains many &lsquo;<samp>[x,y]</samp>&rsquo; vectors.  (For 3D plots, substitute
&lsquo;<samp>z</samp>&rsquo; for &lsquo;<samp>y</samp>&rsquo; and &lsquo;<samp>x,y</samp>&rsquo; for &lsquo;<samp>x</samp>&rsquo;.)

</li><li> With any prefix argument, all curves in the graph are deleted.

</li><li> With a positive prefix, refines an existing plot with more data points.
With a negative prefix, forces recomputation of the plot data.

</li><li> With any prefix argument, set the default value instead of the
value for this graph.

</li><li> With a negative prefix argument, set the value for the printer.

</li><li> Condition is considered &ldquo;true&rdquo; if it is a nonzero real or complex
number, or a formula whose value is known to be nonzero; it is &ldquo;false&rdquo;
otherwise.

</li><li> Several formulas separated by commas are pushed as multiple stack
entries.  Trailing <kbd>)</kbd>, <kbd>]</kbd>, <kbd>}</kbd>, <kbd>&gt;</kbd>, and <kbd>&quot;</kbd>
delimiters may be omitted.  The notation <kbd>$$$</kbd> refers to the value
in stack level three, and causes the formula to replace the top three
stack levels.  The notation <kbd>$3</kbd> refers to stack level three without
causing that value to be removed from the stack.  Use <tt class="key">LFD</tt> in place
of <tt class="key">RET</tt> to prevent evaluation; use <kbd>M-=</kbd> in place of <tt class="key">RET</tt>
to evaluate variables.

</li><li> The variable is replaced by the formula shown on the right.  The
Inverse flag reverses the order of the operands, e.g., <kbd>I s - x</kbd>
assigns
&lsquo;<samp>x := a-x</samp>&rsquo;.

</li><li> Press <kbd>?</kbd> repeatedly to see how to choose a model.  Answer the
variables prompt with &lsquo;<samp>iv</samp>&rsquo; or &lsquo;<samp>iv;pv</samp>&rsquo; to specify
independent and parameter variables.  A positive prefix argument
takes <i><var>n</var>+1</i> vectors from the stack; a zero prefix takes a matrix
and a vector from the stack.

</li><li> With a plain <kbd>C-u</kbd> prefix, replace the current region of the
destination buffer with the yanked text instead of inserting.

</li><li> All stack entries are reformatted; the <kbd>H</kbd> prefix inhibits this.
The <kbd>I</kbd> prefix sets the mode temporarily, redraws the top stack
entry, then restores the original setting of the mode.

</li><li> A negative prefix sets the default 3D resolution instead of the
default 2D resolution.

</li><li> This grabs a vector of the form [<var>prec</var>, <var>wsize</var>, <var>ssize</var>,
<var>radix</var>, <var>flfmt</var>, <var>ang</var>, <var>frac</var>, <var>symb</var>, <var>polar</var>,
<var>matrix</var>, <var>simp</var>, <var>inf</var>].  A prefix argument from 1 to 12
grabs the <var>n</var>th mode value only.
</li></ol>




<hr>
<a name="Key-Index"></a>
<div class="header">
<p>
Next: <a href="#Command-Index" accesskey="n" rel="next">Command Index</a>, Previous: <a href="#Summary" accesskey="p" rel="prev">Summary</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-of-Key-Sequences"></a>
<h2 class="unnumbered">Index of Key Sequences</h2>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Key-Index_ky_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-2"><b>&quot;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-3"><b>#</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-4"><b>$</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-5"><b>%</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-6"><b>&amp;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-7"><b>'</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-8"><b>(</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-9"><b>)</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-10"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-11"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-12"><b>,</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-13"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-14"><b>.</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-15"><b>/</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-16"><b>0</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-17"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-18"><b>;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-19"><b>&lt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-20"><b>=</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-21"><b>&gt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-22"><b>?</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-23"><b>@</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-24"><b>[</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-25"><b>\</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-26"><b>]</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-27"><b>^</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-28"><b>_</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-29"><b>`</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-30"><b>{</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-31"><b>|</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-32"><b>}</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-33"><b>~</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Key-Index_ky_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Y"><b>Y</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-ky" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-1">!</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021"><code>!</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-2">&quot;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0022"><code>&quot;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0022-_0028HMS-forms_0029"><code>&quot; (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-3">#</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0023"><code>#</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integers">Integers</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-4">$</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0024"><code>$</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-5">%</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0025"><code>%</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-6">&amp;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0026"><code>&amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0026-_0028matrices_0029"><code>&amp; (matrices)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-7">'</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0027"><code>'</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0027-_0028HMS-forms_0029"><code>' (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-8">(</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0028"><code>(</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-9">)</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0029"><code>)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-10">*</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002a"><code>*</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-11">+</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002b"><code>+</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-12">,</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002c"><code>,</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-13">-</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d"><code>-</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-14">.</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002e"><code>.</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002e_002e"><code>..</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-15">/</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002f"><code>/</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-16">0</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-0_002d9"><code>0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-17">:</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003a"><code>:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-18">;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003b"><code>;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-19">&lt;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003c"><code>&lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-20">=</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003d"><code>=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-21">&gt;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003e"><code>&gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-22">?</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003f"><code>?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-23">@</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0040"><code>@</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-24">[</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005b"><code>[</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-25">\</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005c"><code>\</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-26">]</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005d"><code>]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-27">^</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005e"><code>^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-28">_</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005f"><code>_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-29">`</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0060"><code>`</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Editing-Stack-Entries">Editing Stack Entries</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-30">{</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007b"><code>{</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-31">|</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007c"><code>|</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-32">}</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007d"><code>}</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_symbol-33">~</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007e"><code>~</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Prefix-Arguments">Prefix Arguments</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-A"><code>A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_0021"><code>a !</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_0022"><code>a &quot;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_0023"><code>a #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_0025"><code>a %</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_0026"><code>a &amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-A-_0028vectors_0029"><code>A (vectors)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_002a"><code>a *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_002b"><code>a +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_002d"><code>a -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_002e"><code>a .</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_002f"><code>a /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_003a"><code>a :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_003c"><code>a &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_003d"><code>a =</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_003e"><code>a &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_003f"><code>a ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-a"><code>a a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-b"><code>a b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-c"><code>a c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-d"><code>a d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Differentiation">Differentiation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-e"><code>a e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-f"><code>a f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-F"><code>a F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linear-Fits">Linear Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-g"><code>a g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-i"><code>a i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integration">Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-I"><code>a I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numerical-Integration">Numerical Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-M"><code>a M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-m"><code>a m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-n"><code>a n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-N"><code>a N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-P"><code>a P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-p"><code>a p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interpolation">Interpolation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-R"><code>a R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-r"><code>a r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-s"><code>a s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplifying-Formulas">Simplifying Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-s-1"><code>a s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Simplifications">Algebraic Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-S"><code>a S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Equations">Solving Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-t"><code>a t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Taylor-Series">Taylor Series</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-T"><code>a T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-v"><code>a v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-x"><code>a x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-X"><code>a X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_005b"><code>a [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_005c"><code>a \</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_005d"><code>a ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_005f"><code>a _</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_007b"><code>a {</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-a-_007c"><code>a |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-B"><code>B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-_0023"><code>b #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-_0025"><code>b %</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-_003f"><code>b ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-a"><code>b a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-c"><code>b c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-D"><code>b D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-d"><code>b d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-F"><code>b F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-I"><code>b I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-l"><code>b l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-L"><code>b L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-M"><code>b M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-N"><code>b N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-n"><code>b n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-o"><code>b o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-P"><code>b P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-p"><code>b p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-r"><code>b r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-R"><code>b R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-S"><code>b S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-T"><code>b T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-t"><code>b t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-u"><code>b u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-w"><code>b w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-x"><code>b x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-b-Y"><code>b Y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-C"><code>C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-_0025"><code>c %</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-0_002d9"><code>c 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-_003f"><code>c ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-c"><code>c c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-d"><code>c d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-f"><code>c f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-F"><code>c F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-h"><code>c h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-p"><code>c p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-c-r"><code>c r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dd"><code>C-d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dk"><code>C-k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dw"><code>C-w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-_0027"><code>C-x * '</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-_002a"><code>C-x * *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-0"><code>C-x * 0</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-_003a"><code>C-x * :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-a"><code>C-x * a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-b"><code>C-x * b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-c"><code>C-x * c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-d"><code>C-x * d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-e"><code>C-x * e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Embedded-Mode">Basic Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-f"><code>C-x * f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-g"><code>C-x * g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-i"><code>C-x * i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-j"><code>C-x * j</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-k"><code>C-x * k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keypad-Mode">Keypad Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-L"><code>C-x * L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Autoloading-Problems">Autoloading Problems</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-m"><code>C-x * m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Naming-Keyboard-Macros">Naming Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-n"><code>C-x * n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-o"><code>C-x * o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-p"><code>C-x * p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-q"><code>C-x * q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Quick-Calculator">Quick Calculator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-r"><code>C-x * r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-s"><code>C-x * s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-t"><code>C-x * t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-u"><code>C-x * u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-w"><code>C-x * w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Embedded-Mode">Basic Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-x"><code>C-x * x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-y"><code>C-x * y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yanking-Into-Buffers">Yanking Into Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-z"><code>C-x * z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Invocation-Macros">Invocation Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-_005f"><code>C-x * _</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dx-_002a-_0060"><code>C-x * `</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dxC_002dt"><code>C-xC-t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dy"><code>C-y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yanking-Into-Stack">Yanking Into Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002d_005f"><code>C-_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-D"><code>D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_0022"><code>d &quot;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_002c"><code>d ,</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_002e"><code>d .</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-0"><code>d 0</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-2"><code>d 2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-6"><code>d 6</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-8"><code>d 8</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_003c"><code>d &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_003d"><code>d =</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_003e"><code>d &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_003f"><code>d ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-A"><code>d A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Giac-Language-Mode">Giac Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-b"><code>d b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-B"><code>d B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-c"><code>d c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-C"><code>d C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-d"><code>d d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Formats">Date Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-e"><code>d e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-E"><code>d E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Eqn-Language-Mode">Eqn Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-f"><code>d f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-F"><code>d F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-g"><code>d g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-h"><code>d h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Formats">HMS Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-i"><code>d i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-j"><code>d j</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-l"><code>d l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Basics">Stack Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-L"><code>d L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-M"><code>d M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mathematica-Language-Mode">Mathematica Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-n"><code>d n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-N"><code>d N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-o"><code>d o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Formats">Fraction Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-O"><code>d O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-P"><code>d P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-p"><code>d p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-r"><code>d r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-RET"><code>d <span class="key">RET</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Display-Modes">Display Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-s"><code>d s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-SPC"><code>d <span class="key">SPC</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-t"><code>d t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-T"><code>d T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-U"><code>d U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-w"><code>d w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-W"><code>d W</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maple-Language-Mode">Maple Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-X"><code>d X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maxima-Language-Mode">Maxima Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-Y"><code>d Y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacas-Language-Mode">Yacas Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-z"><code>d z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_005b"><code>d [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_005d"><code>d ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_007b"><code>d {</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Labels">Labels</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-d-_007d"><code>d }</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Labels">Labels</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DEL"><code><span class="key">DEL</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-e-1"><code>e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-E"><code>E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-F"><code>F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-_003f"><code>f ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-A"><code>f A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-b"><code>f b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-B"><code>f B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-E"><code>f E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-e"><code>f e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-g"><code>f g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-G"><code>f G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-h"><code>f h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-i"><code>f i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-I"><code>f I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-j"><code>f j</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-L"><code>f L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-M"><code>f M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-n"><code>f n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-Q"><code>f Q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-r"><code>f r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-s"><code>f s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-S"><code>f S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-T"><code>f T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-x"><code>f x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-X"><code>f X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-y"><code>f y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-_005b"><code>f [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-f-_005d"><code>f ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-G"><code>G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-_003f"><code>g ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-a"><code>g a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-A"><code>g A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-b"><code>g b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-c"><code>g c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-C"><code>g C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-C_002dl"><code>g C-l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-C_002dr"><code>g C-r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-C_002dt"><code>g C-t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-d"><code>g d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-D"><code>g D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-f"><code>g f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-F"><code>g F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Three-Dimensional-Graphics">Three Dimensional Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-g"><code>g g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-H"><code>g H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-h"><code>g h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-j"><code>g j</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-k"><code>g k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-K"><code>g K</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-l"><code>g l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-L"><code>g L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-N"><code>g N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-n"><code>g n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-O"><code>g O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-p"><code>g p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-P"><code>g P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-q"><code>g q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-r"><code>g r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-R"><code>g R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-s"><code>g s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-S"><code>g S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-t"><code>g t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-T"><code>g T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-v"><code>g v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-V"><code>g V</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-x"><code>g x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-X"><code>g X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-z"><code>g z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-g-Z"><code>g Z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-H"><code>H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-_0028HMS-forms_0029"><code>h (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-_002f"><code>H a /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-d"><code>H a d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Differentiation">Differentiation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-f"><code>H a f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-F"><code>H a F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Estimates-for-Fits">Error Estimates for Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-M"><code>H a M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-N"><code>H a N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-p"><code>H a p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interpolation">Interpolation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-R"><code>H a R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-s"><code>H a s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplifying-Formulas">Simplifying Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-S"><code>H a S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-a-X"><code>H a X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-b"><code>h b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-_0023"><code>H b #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-F"><code>H b F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-l"><code>H b l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-L"><code>H b L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-M"><code>H b M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-P"><code>H b P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-r"><code>H b r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-R"><code>H b R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-T"><code>H b T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-b-t"><code>H b t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-c"><code>h c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-C"><code>H C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-c-0_002d9"><code>H c 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-c-c"><code>H c c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-c-f"><code>H c f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-c-F"><code>H c F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-C_002dc"><code>h C-c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-C_002dd"><code>h C-d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-C_002dw"><code>h C-w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-E"><code>H E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-f"><code>h f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-F"><code>H F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-f-B"><code>H f B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-f-G"><code>H f G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-h"><code>h h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-i"><code>h i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-a-S"><code>H I a S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-C"><code>H I C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-E"><code>H I E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-F"><code>H I F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-f-G"><code>H I f G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-L"><code>H I L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-P"><code>H I P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-R"><code>H I R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-S"><code>H I S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-T"><code>H I T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-u-M"><code>H I u M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-u-S"><code>H I u S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-v-h"><code>H I v h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-V-h"><code>H I V h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-v-R"><code>H I v R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-V-R"><code>H I V R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-v-U"><code>H I v U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-V-U"><code>H I V U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-I-_007c"><code>H I |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-j-I"><code>H j I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-k"><code>h k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-k-b"><code>H k b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-k-c"><code>H k c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-k-e"><code>H k e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-k-s"><code>H k s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-L"><code>H L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-n"><code>h n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-P"><code>H P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-R"><code>H R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-s"><code>h s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-S"><code>H S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-t"><code>h t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-T"><code>H T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-u-C"><code>H u C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-u-G"><code>H u G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-u-M"><code>H u M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-u-S"><code>H u S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-h-v"><code>h v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-e"><code>H v e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-e"><code>H V e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-h"><code>H v h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-h"><code>H V h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-H"><code>H v H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-H"><code>H V H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-k"><code>H v k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-k"><code>H V k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-l"><code>H v l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-l"><code>H V l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-R"><code>H v R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-R"><code>H V R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-v-U"><code>H v U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-V-U"><code>H V U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-H-_007c"><code>H |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-i"><code>i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I"><code>I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-a-F"><code>I a F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Estimates-for-Fits">Error Estimates for Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-a-M"><code>I a M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-a-m"><code>I a m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-a-s"><code>I a s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplifying-Formulas">Simplifying Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-a-S"><code>I a S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-B"><code>I B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-_0023"><code>I b #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-F"><code>I b F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-I"><code>I b I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-M"><code>I b M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-N"><code>I b N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-P"><code>I b P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-b-T"><code>I b T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-C"><code>I C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-c-p"><code>I c p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-E"><code>I E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-F"><code>I F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-f-e"><code>I f e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-f-G"><code>I f G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-B"><code>I k B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-C"><code>I k C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-F"><code>I k F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-n"><code>I k n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-N"><code>I k N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-P"><code>I k P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-k-T"><code>I k T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-L"><code>I L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-M"><code>I M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-P"><code>I P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-Q"><code>I Q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-R"><code>I R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-S"><code>I S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-T"><code>I T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-u-C"><code>I u C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-u-M"><code>I u M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-u-S"><code>I u S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-G"><code>I v G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-G"><code>I V G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-h"><code>I v h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-h"><code>I V h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-R"><code>I v R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-R"><code>I V R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-s"><code>I v s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-s"><code>I V s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-S"><code>I v S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-S"><code>I V S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-v-U"><code>I v U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-V-U"><code>I V U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-_005e"><code>I ^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-I-_007c"><code>I |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-J"><code>J</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_0022"><code>j &quot;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_0026"><code>j &amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_0027"><code>j '</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_002a"><code>j *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_002b"><code>j +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_002d"><code>j -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_002f"><code>j /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-1_002d9"><code>j 1-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_003f"><code>j ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-a"><code>j a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-b"><code>j b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-c"><code>j c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-C"><code>j C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-d"><code>j d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Displaying-Selections">Displaying Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-D"><code>j D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-DEL"><code>j <span class="key">DEL</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-e"><code>j e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-E"><code>j E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-I"><code>j I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-l"><code>j l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-L"><code>j L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-m"><code>j m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-M"><code>j M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-n"><code>j n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-N"><code>j N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-o"><code>j o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-O"><code>j O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-p"><code>j p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-R"><code>j R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-r"><code>j r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-RET"><code>j <span class="key">RET</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-s"><code>j s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-S"><code>j S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-u"><code>j u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-U"><code>j U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-v"><code>j v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-j-_0060"><code>j `</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-K">K</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-K"><code>K</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keep-Arguments">Keep Arguments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-_003f"><code>k ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-a"><code>k a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-b"><code>k b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-B"><code>k B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-c"><code>k c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-C"><code>k C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-d"><code>k d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-E"><code>k E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-e"><code>k e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-f"><code>k f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-F"><code>k F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-g"><code>k g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-h"><code>k h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-l"><code>k l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-m"><code>k m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-n"><code>k n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-N"><code>k N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-p"><code>k p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-P"><code>k P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-r"><code>k r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-s"><code>k s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-t"><code>k t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-k-T"><code>k T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-L"><code>L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-_002a"><code>l *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-_002b"><code>l +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-_002d"><code>l -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-_002f"><code>l /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-d"><code>l d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-f"><code>l f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-m"><code>l m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-n"><code>l n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-q"><code>l q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-l-s"><code>l s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LFD"><code><span class="key">LFD</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-M"><code>M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-_0028HMS-forms_0029"><code>m (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M-_0028modulo-forms_0029"><code>M (modulo forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modulo-Forms">Modulo Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-_003f"><code>m ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-a"><code>m a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-A"><code>m A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-A-1"><code>m A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Simplifications">Algebraic Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-B"><code>m B</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-C"><code>m C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Recomputation">Automatic Recomputation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-C-1"><code>m C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-d"><code>m d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-E"><code>m E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-E-1"><code>m E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-e"><code>m e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mode-Settings-in-Embedded-Mode">Mode Settings in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-F"><code>m F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-f"><code>m f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Mode">Fraction Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-g"><code>m g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Variable">Modes Variable</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-h"><code>m h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-i"><code>m i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinite-Mode">Infinite Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-I"><code>m I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-m"><code>m m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-N"><code>m N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-O"><code>m O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-p"><code>m p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polar-Mode">Polar Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-R"><code>m R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-r"><code>m r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-S"><code>m S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-s"><code>m s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-t"><code>m t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-U"><code>m U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-v"><code>m v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Mode">Matrix Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-w"><code>m w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Working-Message">Working Message</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m-x"><code>m x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002d_0025"><code>M-%</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dC_002dw"><code>M-C-w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dDEL"><code>M-<span class="key">DEL</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dk"><code>M-k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dRET"><code>M-<span class="key">RET</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dTAB"><code>M-<span class="key">TAB</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dw"><code>M-w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dx"><code>M-x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-N"><code>N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-n"><code>n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-o"><code>o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Basics">Stack Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-O"><code>O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-o-_0028HMS-forms_0029"><code>o (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-p"><code>p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Precision">Precision</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-P"><code>P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-p-_0028error-forms_0029"><code>p (error forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Forms">Error Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-q"><code>q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Q"><code>Q</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-R"><code>R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-r-0_002d9"><code>r 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recalling-Variables">Recalling Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-r-_003f"><code>r ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-r-i"><code>r i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inserting-From-Registers">Inserting From Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-r-s"><code>r s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Saving-Into-Registers">Saving Into Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RET"><code><span class="key">RET</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-S"><code>S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_0026"><code>s &amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_0028HMS-forms_0029"><code>s (HMS forms)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_002a"><code>s *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_002b"><code>s +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_002d"><code>s -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_002f"><code>s /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-0_002d9"><code>s 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_003a"><code>s :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_003d"><code>s =</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_003f"><code>s ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-A"><code>s A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-c"><code>s c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-d"><code>s d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaration-Basics">Declaration Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-D"><code>s D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-e"><code>s e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-E"><code>s E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-F"><code>s F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-G"><code>s G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-H"><code>s H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-I"><code>s I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-i"><code>s i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-k"><code>s k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-L"><code>s L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-l"><code>s l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Let-Command">Let Command</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-m"><code>s m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-n"><code>s n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-P"><code>s P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-p"><code>s p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-r"><code>s r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recalling-Variables">Recalling Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-R"><code>s R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-s"><code>s s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-t"><code>s t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-T"><code>s T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-u"><code>s u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-U"><code>s U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-x"><code>s x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-X"><code>s X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_005b"><code>s [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_005d"><code>s ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_005e"><code>s ^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-s-_007c"><code>s |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SPC"><code><span class="key">SPC</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-T"><code>T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_002b"><code>t +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_002d"><code>t -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_002e"><code>t .</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-0_002d9"><code>t 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_003c"><code>t &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_003e"><code>t &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_003f"><code>t ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-b"><code>t b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-C"><code>t C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-d"><code>t d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-D"><code>t D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-f"><code>t f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-h"><code>t h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-i"><code>t i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-I"><code>t I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-J"><code>t J</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-k"><code>t k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-m"><code>t m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-M"><code>t M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-n"><code>t n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-N"><code>t N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-o"><code>t o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-p"><code>t p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-P"><code>t P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-r"><code>t r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-s"><code>t s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-U"><code>t U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-W"><code>t W</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-y"><code>t y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-Y"><code>t Y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_005b"><code>t [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-t-_005d"><code>t ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TAB"><code><span class="key">TAB</span></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-U"><code>U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-_0023"><code>u #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-_002a"><code>u *</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-_002b"><code>u +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-0_002d9"><code>u 0-9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-_003f"><code>u ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-a"><code>u a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-b"><code>u b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-C"><code>u C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-c"><code>u c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-d"><code>u d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-e"><code>u e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-G"><code>u G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-g"><code>u g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-M"><code>u M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-N"><code>u N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-n"><code>u n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-p"><code>u p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-R"><code>u R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-r"><code>u r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-S"><code>u S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-s"><code>u s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-t"><code>u t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-u"><code>u u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-v"><code>u v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-V"><code>u V</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-X"><code>u X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-u-x"><code>u x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_0023"><code>v #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_0023"><code>V #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_0028"><code>v (</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_0028"><code>V (</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_0029"><code>V )</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_0029"><code>v )</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_002b"><code>v +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_002b"><code>V +</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_002c"><code>v ,</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_002c"><code>V ,</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_002d"><code>v -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_002d"><code>V -</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_002e"><code>v .</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_002e"><code>V .</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_002f"><code>v /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_002f"><code>V /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_003a"><code>v :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_003a"><code>V :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_003c"><code>v &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_003c"><code>V &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_003d"><code>v =</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_003d"><code>V =</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_003e"><code>v &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_003e"><code>V &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_003f"><code>v ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_003f"><code>V ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-a"><code>v a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-a"><code>V a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-A"><code>v A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing-and-Mapping">Reducing and Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-A"><code>V A</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing-and-Mapping">Reducing and Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-b"><code>v b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-b"><code>V b</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-c"><code>v c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-c"><code>V c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-C"><code>v C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-C"><code>V C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-d"><code>v d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-d"><code>V d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-D"><code>v D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-D"><code>V D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-e"><code>v e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-e"><code>V e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-E"><code>v E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-E"><code>V E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-f"><code>v f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-f"><code>V f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-F"><code>v F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-F"><code>V F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-G"><code>v G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-G"><code>V G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-h"><code>v h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-h"><code>V h</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-H"><code>v H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-H"><code>V H</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-i"><code>v i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-i"><code>V i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-I"><code>v I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-I"><code>V I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-J"><code>v J</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-J"><code>V J</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-k"><code>v k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-k"><code>V k</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-K"><code>v K</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-K"><code>V K</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-l"><code>v l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-l"><code>V l</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-L"><code>v L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-L"><code>V L</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-m"><code>v m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-m"><code>V m</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-M"><code>v M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-M"><code>V M</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-n"><code>v n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-n"><code>V n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-N"><code>v N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-N"><code>V N</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-O"><code>v O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-O"><code>V O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-p"><code>v p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-p"><code>V p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-p-_0028complex_0029"><code>v p (complex)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-p-_0028complex_0029"><code>V p (complex)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-r"><code>v r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-r"><code>V r</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-R"><code>v R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-R"><code>V R</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-s"><code>v s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-s"><code>V s</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-S"><code>v S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-S"><code>V S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-t"><code>v t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-t"><code>V t</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-T"><code>v T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-T"><code>V T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-u"><code>v u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-u"><code>V u</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-U"><code>v U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-U"><code>V U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-u-_0028complex_0029"><code>v u (complex)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-u-_0028complex_0029"><code>V u (complex)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-v"><code>v v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-v"><code>V v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-V"><code>v V</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-V"><code>V V</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-x"><code>v x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-x"><code>V x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-X"><code>v X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-X"><code>V X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_005b"><code>v [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_005b"><code>V [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_005d"><code>V ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_005d"><code>v ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_005e"><code>v ^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_005e"><code>V ^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_007b"><code>v {</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_007b"><code>V {</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_007d"><code>V }</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_007d"><code>v }</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-v-_007e"><code>v ~</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-V-_007e"><code>V ~</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-w"><code>w</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-X">X</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-x"><code>x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-X"><code>X</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keyboard-Macros">Keyboard Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-Y">Y</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-y"><code>y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yanking-Into-Buffers">Yanking Into Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Y"><code>Y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Y-_003f"><code>Y ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Key-Index_ky_letter-Z">Z</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-z"><code>z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming">Programming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_0023"><code>Z #</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Queries-in-Macros">Queries in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_0027"><code>Z '</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_0028"><code>Z (</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_0029"><code>Z )</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_002f"><code>Z /</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_003a"><code>Z :</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_003c"><code>Z &lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_003e"><code>Z &gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-z-_003f"><code>z ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_003f"><code>Z ?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-C"><code>Z C</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Compositions">User-Defined Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-C_002dg"><code>Z C-g</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-D"><code>Z D</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-E"><code>Z E</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-F"><code>Z F</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Definitions">Algebraic Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-G"><code>Z G</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Definitions">Algebraic Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-I"><code>Z I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Invocation-Macros">Invocation Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-K"><code>Z K</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Naming-Keyboard-Macros">Naming Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-P"><code>Z P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-S"><code>Z S</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Tables">Syntax Tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-T"><code>Z T</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-Calc">Debugging Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-U"><code>Z U</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_005b"><code>Z [</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_005d"><code>Z ]</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_0060"><code>Z `</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_007b"><code>Z {</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_007c"><code>Z |</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Z-_007d"><code>Z }</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Key-Index_ky_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-2"><b>&quot;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-3"><b>#</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-4"><b>$</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-5"><b>%</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-6"><b>&amp;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-7"><b>'</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-8"><b>(</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-9"><b>)</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-10"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-11"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-12"><b>,</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-13"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-14"><b>.</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-15"><b>/</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-16"><b>0</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-17"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-18"><b>;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-19"><b>&lt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-20"><b>=</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-21"><b>&gt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-22"><b>?</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-23"><b>@</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-24"><b>[</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-25"><b>\</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-26"><b>]</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-27"><b>^</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-28"><b>_</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-29"><b>`</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-30"><b>{</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-31"><b>|</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-32"><b>}</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_symbol-33"><b>~</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Key-Index_ky_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Y"><b>Y</b></a>
 &nbsp; 
<a class="summary-letter" href="#Key-Index_ky_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Command-Index"></a>
<div class="header">
<p>
Next: <a href="#Function-Index" accesskey="n" rel="next">Function Index</a>, Previous: <a href="#Key-Index" accesskey="p" rel="prev">Key Index</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-of-Calculator-Commands"></a>
<h2 class="unnumbered">Index of Calculator Commands</h2>

<p>Since all Calculator commands begin with the prefix &lsquo;<samp>calc-</samp>&rsquo;, the
<kbd>x</kbd> key has been provided as a variant of <kbd>M-x</kbd> which automatically
types &lsquo;<samp>calc-</samp>&rsquo; for you.  Thus, <kbd>x last-args</kbd> is short for
<kbd>M-x calc-last-args</kbd>.
</p>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Command-Index_pg_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-R"><b>R</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-pg" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-another_002dcalc"><code>another-calc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Calculators">Multiple Calculators</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc"><code>calc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dabs"><code>calc-abs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dabs-_0028vectors_0029"><code>calc-abs (vectors)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dabssqr"><code>calc-abssqr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalg_002devaluate"><code>calc-alg-evaluate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalg_002dsimplify_002dmode"><code>calc-alg-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalgebraic_002dentry"><code>calc-algebraic-entry</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalgebraic_002dmode"><code>calc-algebraic-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalt_002dsummation"><code>calc-alt-summation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalways_002dload_002dextensions"><code>calc-always-load-extensions</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dand"><code>calc-and</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dapart"><code>calc-apart</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dappend_002dto_002dregister"><code>calc-append-to-register</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Saving-Into-Registers">Saving Into Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dapply"><code>calc-apply</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing-and-Mapping">Reducing and Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darccos"><code>calc-arccos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darccosh"><code>calc-arccosh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darcsin"><code>calc-arcsin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darcsinh"><code>calc-arcsinh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darctan"><code>calc-arctan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darctan2"><code>calc-arctan2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darctanh"><code>calc-arctanh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dargument"><code>calc-argument</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002darrange_002dvector"><code>calc-arrange-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dassign"><code>calc-assign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dauto_002drecompute"><code>calc-auto-recompute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Recomputation">Automatic Recomputation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dauto_002drecompute-1"><code>calc-auto-recompute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dauto_002dwhy"><code>calc-auto-why</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dautorange_002dunits"><code>calc-autorange-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbase_002dunits"><code>calc-base-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbasic_002dsimplify_002dmode"><code>calc-basic-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbernoulli_002dnumber"><code>calc-bernoulli-number</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbessel_002dJ"><code>calc-bessel-J</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbessel_002dY"><code>calc-bessel-Y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbeta"><code>calc-beta</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbig_002dlanguage"><code>calc-big-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbin_002dsimplify_002dmode"><code>calc-bin-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbreak"><code>calc-break</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbreak_002dselections"><code>calc-break-selections</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbreak_002dvectors"><code>calc-break-vectors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbuild_002dvector"><code>calc-build-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbusiness_002ddays_002dminus"><code>calc-business-days-minus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbusiness_002ddays_002dplus"><code>calc-business-days-plus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dc_002dlanguage"><code>calc-c-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dceiling"><code>calc-ceiling</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcenter_002djustify"><code>calc-center-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dchange_002dsign"><code>calc-change-sign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dchoose"><code>calc-choose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dclean"><code>calc-clean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dclean_002dnum"><code>calc-clean-num</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dclear_002dselections"><code>calc-clear-selections</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dclip"><code>calc-clip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcnorm"><code>calc-cnorm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcollect"><code>calc-collect</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcommute_002dleft"><code>calc-commute-left</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcommute_002dright"><code>calc-commute-right</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcomplex_002dnotation"><code>calc-complex-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconcat"><code>calc-concat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconj"><code>calc-conj</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconj_002dtranspose"><code>calc-conj-transpose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcons"><code>calc-cons</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconvert_002dexact_002dunits"><code>calc-convert-exact-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconvert_002dpercent"><code>calc-convert-percent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconvert_002dtemperature"><code>calc-convert-temperature</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconvert_002dtime_002dzones"><code>calc-convert-time-zones</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dconvert_002dunits"><code>calc-convert-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002das_002dkill"><code>calc-copy-as-kill</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002dregion_002das_002dkill"><code>calc-copy-region-as-kill</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002dspecial_002dconstant"><code>calc-copy-special-constant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002dto_002dbuffer"><code>calc-copy-to-buffer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yanking-Into-Buffers">Yanking Into Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002dto_002dregister"><code>calc-copy-to-register</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Saving-Into-Registers">Saving Into Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcopy_002dvariable"><code>calc-copy-variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcos"><code>calc-cos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcosh"><code>calc-cosh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcot"><code>calc-cot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcoth"><code>calc-coth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcross"><code>calc-cross</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcsc"><code>calc-csc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcsch"><code>calc-csch</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcurve_002dfit"><code>calc-curve-fit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linear-Fits">Linear Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddate"><code>calc-date</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddate_002dnotation"><code>calc-date-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Formats">Date Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddate_002dpart"><code>calc-date-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddb"><code>calc-db</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddeclare_002dvariable"><code>calc-declare-variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaration-Basics">Declaration Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddecrement"><code>calc-decrement</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddefine_002dunit"><code>calc-define-unit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddegrees_002dmode"><code>calc-degrees-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddel_002dselection"><code>calc-del-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dderivative"><code>calc-derivative</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Differentiation">Differentiation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddescribe_002dfunction"><code>calc-describe-function</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddescribe_002dkey"><code>calc-describe-key</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddescribe_002dkey_002dbriefly"><code>calc-describe-key-briefly</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddescribe_002dvariable"><code>calc-describe-variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddiag"><code>calc-diag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddiff"><code>calc-diff</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddisplay_002dstrings"><code>calc-display-strings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddivide"><code>calc-divide</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddots"><code>calc-dots</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddouble_002dfactorial"><code>calc-double-factorial</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit"><code>calc-edit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Editing-Stack-Entries">Editing Stack Entries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002dfinish"><code>calc-edit-finish</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Editing-Stack-Entries">Editing Stack Entries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002dselection"><code>calc-edit-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002duser_002dsyntax"><code>calc-edit-user-syntax</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Tables">Syntax Tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002dvariable"><code>calc-edit-variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded"><code>calc-embedded</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Embedded-Mode">Basic Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dactivate"><code>calc-embedded-activate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dduplicate"><code>calc-embedded-duplicate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dedit"><code>calc-embedded-edit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dnew_002dformula"><code>calc-embedded-new-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dnext"><code>calc-embedded-next</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dpreserve_002dmodes"><code>calc-embedded-preserve-modes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mode-Settings-in-Embedded-Mode">Mode Settings in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dprevious"><code>calc-embedded-previous</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dselect"><code>calc-embedded-select</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dupdate_002dformula"><code>calc-embedded-update-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assignments-in-Embedded-Mode">Assignments in Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dword"><code>calc-embedded-word</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Embedded-Mode">Basic Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denable_002dselections"><code>calc-enable-selections</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002deng_002dnotation"><code>calc-eng-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denter"><code>calc-enter</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denter_002dselection"><code>calc-enter-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denter_002dunits_002dtable"><code>calc-enter-units-table</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002deqn_002dlanguage"><code>calc-eqn-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Eqn-Language-Mode">Eqn Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dequal_002dto"><code>calc-equal-to</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002derf"><code>calc-erf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002deuler_002dnumber"><code>calc-euler-number</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002deval_002dnum"><code>calc-eval-num</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002devalto"><code>calc-evalto</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002devaluate"><code>calc-evaluate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexecute_002dextended_002dcommand"><code>calc-execute-extended-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexp"><code>calc-exp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexpand"><code>calc-expand</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexpand_002dformula"><code>calc-expand-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexpand_002dvector"><code>calc-expand-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexplain_002dunits"><code>calc-explain-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dexpm1"><code>calc-expm1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dext_002dsimplify_002dmode"><code>calc-ext-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dextended_002dgcd"><code>calc-extended-gcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dextract_002dunits"><code>calc-extract-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfactor"><code>calc-factor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfactorial"><code>calc-factorial</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfdiv"><code>calc-fdiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dddb"><code>calc-fin-ddb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dfv"><code>calc-fin-fv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dirr"><code>calc-fin-irr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dnper"><code>calc-fin-nper</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dnpv"><code>calc-fin-npv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dpmt"><code>calc-fin-pmt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dpv"><code>calc-fin-pv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002drate"><code>calc-fin-rate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dsln"><code>calc-fin-sln</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfin_002dsyd"><code>calc-fin-syd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dmaximum"><code>calc-find-maximum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dminimum"><code>calc-find-minimum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002droot"><code>calc-find-root</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfix_002dnotation"><code>calc-fix-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dflat_002dlanguage"><code>calc-flat-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfloat"><code>calc-float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfloor"><code>calc-floor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dflush_002dcaches"><code>calc-flush-caches</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Caches">Caches</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfortran_002dlanguage"><code>calc-fortran-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfrac_002dmode"><code>calc-frac-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Mode">Fraction Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfraction"><code>calc-fraction</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfreq"><code>calc-freq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfrom_002dhms"><code>calc-from-hms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfull_002dhelp"><code>calc-full-help</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfull_002dtrail_002dvectors"><code>calc-full-trail-vectors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfull_002dvectors"><code>calc-full-vectors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgamma"><code>calc-gamma</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgcd"><code>calc-gcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dget_002dmodes"><code>calc-get-modes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Variable">Modes Variable</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dget_002dunit_002ddefinition"><code>calc-get-unit-definition</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dget_002duser_002ddefn"><code>calc-get-user-defn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Definitions">Algebraic Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgiac_002dlanguage"><code>calc-giac-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Giac-Language-Mode">Giac Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrab_002drectangle"><code>calc-grab-rectangle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrab_002dregion"><code>calc-grab-region</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrab_002dselection"><code>calc-grab-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operating-on-Selections">Operating on Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrab_002dsum_002dacross"><code>calc-grab-sum-across</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrab_002dsum_002ddown"><code>calc-grab-sum-down</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrade"><code>calc-grade</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dadd"><code>calc-graph-add</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dadd_002d3d"><code>calc-graph-add-3d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dborder"><code>calc-graph-border</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dclear"><code>calc-graph-clear</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dcommand"><code>calc-graph-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002ddelete"><code>calc-graph-delete</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002ddevice"><code>calc-graph-device</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002ddisplay"><code>calc-graph-display</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dfast"><code>calc-graph-fast</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dfast_002d3d"><code>calc-graph-fast-3d</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Three-Dimensional-Graphics">Three Dimensional Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dgeometry"><code>calc-graph-geometry</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dgrid"><code>calc-graph-grid</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dheader"><code>calc-graph-header</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dhide"><code>calc-graph-hide</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002djuggle"><code>calc-graph-juggle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dkey"><code>calc-graph-key</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dkill"><code>calc-graph-kill</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dline_002dstyle"><code>calc-graph-line-style</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dlog_002dx"><code>calc-graph-log-x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dlog_002dy"><code>calc-graph-log-y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dlog_002dz"><code>calc-graph-log-z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dname"><code>calc-graph-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dnum_002dpoints"><code>calc-graph-num-points</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002doutput"><code>calc-graph-output</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dplot"><code>calc-graph-plot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dpoint_002dstyle"><code>calc-graph-point-style</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dprint"><code>calc-graph-print</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dquit"><code>calc-graph-quit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002drange_002dx"><code>calc-graph-range-x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002drange_002dy"><code>calc-graph-range-y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002drange_002dz"><code>calc-graph-range-z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dtitle_002dx"><code>calc-graph-title-x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dtitle_002dy"><code>calc-graph-title-y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dtitle_002dz"><code>calc-graph-title-z</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dview_002dcommands"><code>calc-graph-view-commands</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dview_002dtrail"><code>calc-graph-view-trail</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dzero_002dx"><code>calc-graph-zero-x</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgraph_002dzero_002dy"><code>calc-graph-zero-y</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgreater_002dequal"><code>calc-greater-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgreater_002dthan"><code>calc-greater-than</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgroup_002dchar"><code>calc-group-char</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgroup_002ddigits"><code>calc-group-digits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhead"><code>calc-head</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhelp"><code>calc-help</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhistogram"><code>calc-histogram</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhms_002dmode"><code>calc-hms-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhms_002dnotation"><code>calc-hms-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Formats">HMS Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhyperbolic"><code>calc-hyperbolic</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhypot"><code>calc-hypot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002di_002dnotation"><code>calc-i-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dident"><code>calc-ident</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002didiv"><code>calc-idiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dilog"><code>calc-ilog</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dim"><code>calc-im</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dimaginary"><code>calc-imaginary</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002din_002dset"><code>calc-in-set</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinc_002dbeta"><code>calc-inc-beta</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinc_002dgamma"><code>calc-inc-gamma</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinc_002dmonth"><code>calc-inc-month</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dincrement"><code>calc-increment</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dindex"><code>calc-index</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinfinite_002dmode"><code>calc-infinite-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinite-Mode">Infinite Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinfo"><code>calc-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinfo_002dsummary"><code>calc-info-summary</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinner_002dproduct"><code>calc-inner-product</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinsert_002dregister"><code>calc-insert-register</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inserting-From-Registers">Inserting From Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinsert_002dvariables"><code>calc-insert-variables</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dintegral"><code>calc-integral</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integration">Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinv"><code>calc-inv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinv-_0028matrices_0029"><code>calc-inv (matrices)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dinverse"><code>calc-inverse</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002disqrt"><code>calc-isqrt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dj_002dnotation"><code>calc-j-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002djulian"><code>calc-julian</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002delse"><code>calc-kbd-else</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002delse_002dif"><code>calc-kbd-else-if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dend_002dfor"><code>calc-kbd-end-for</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dend_002dif"><code>calc-kbd-end-if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dend_002dloop"><code>calc-kbd-end-loop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dend_002drepeat"><code>calc-kbd-end-repeat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dfor"><code>calc-kbd-for</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dif"><code>calc-kbd-if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dloop"><code>calc-kbd-loop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dpop"><code>calc-kbd-pop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dpush"><code>calc-kbd-push</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002dquery"><code>calc-kbd-query</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Queries-in-Macros">Queries in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkbd_002drepeat"><code>calc-kbd-repeat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkeep_002dargs"><code>calc-keep-args</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keep-Arguments">Keep Arguments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkeypad"><code>calc-keypad</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keypad-Mode">Keypad Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkill"><code>calc-kill</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkill_002dregion"><code>calc-kill-region</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dkron"><code>calc-kron</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlast_002dargs"><code>calc-last-args</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlatex_002dlanguage"><code>calc-latex-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlcm"><code>calc-lcm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dleading_002dzeros"><code>calc-leading-zeros</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dleft_002djustify"><code>calc-left-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dleft_002dlabel"><code>calc-left-label</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Labels">Labels</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dless_002dequal"><code>calc-less-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dless_002drecursion_002ddepth"><code>calc-less-recursion-depth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dless_002dthan"><code>calc-less-than</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlet"><code>calc-let</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Let-Command">Let Command</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dline_002dbreaking"><code>calc-line-breaking</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dline_002dnumbering"><code>calc-line-numbering</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Basics">Stack Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dln"><code>calc-ln</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlnp1"><code>calc-lnp1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dload_002deverything"><code>calc-load-everything</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Autoloading-Problems">Autoloading Problems</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlog"><code>calc-log</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlog10"><code>calc-log10</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlogical_002dand"><code>calc-logical-and</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlogical_002dif"><code>calc-logical-if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlogical_002dnot"><code>calc-logical-not</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlogical_002dor"><code>calc-logical-or</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlshift_002darith"><code>calc-lshift-arith</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlshift_002dbinary"><code>calc-lshift-binary</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dltpt"><code>calc-ltpt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002ddivide"><code>calc-lu-divide</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dminus"><code>calc-lu-minus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dplus"><code>calc-lu-plus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dquant"><code>calc-lu-quant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dtimes"><code>calc-lu-times</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmant_002dpart"><code>calc-mant-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmap"><code>calc-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmap_002dequation"><code>calc-map-equation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmaple_002dlanguage"><code>calc-maple-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maple-Language-Mode">Maple Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmask_002dvector"><code>calc-mask-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatch"><code>calc-match</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmathematica_002dlanguage"><code>calc-mathematica-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mathematica-Language-Mode">Mathematica Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatrix_002dbrackets"><code>calc-matrix-brackets</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatrix_002dcenter_002djustify"><code>calc-matrix-center-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatrix_002dleft_002djustify"><code>calc-matrix-left-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatrix_002dmode"><code>calc-matrix-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Mode">Matrix Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmatrix_002dright_002djustify"><code>calc-matrix-right-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmax"><code>calc-max</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmaxima_002dlanguage"><code>calc-maxima-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maxima-Language-Mode">Maxima Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmcol"><code>calc-mcol</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmdet"><code>calc-mdet</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmidi"><code>calc-midi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmin"><code>calc-min</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dminus"><code>calc-minus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmlud"><code>calc-mlud</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmod"><code>calc-mod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode"><code>calc-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode_002drecord_002dmode"><code>calc-mode-record-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmoebius"><code>calc-moebius</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmore_002drecursion_002ddepth"><code>calc-more-recursion-depth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmrow"><code>calc-mrow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmtrace"><code>calc-mtrace</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnew_002dmonth"><code>calc-new-month</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnew_002dweek"><code>calc-new-week</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnew_002dyear"><code>calc-new-year</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnext_002dprime"><code>calc-next-prime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dno_002dsimplify_002dmode"><code>calc-no-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnormal_002dlanguage"><code>calc-normal-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnormal_002dnotation"><code>calc-normal-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnormalize_002drat"><code>calc-normalize-rat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnot"><code>calc-not</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnot_002dequal_002dto"><code>calc-not-equal-to</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnow"><code>calc-now</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnp"><code>calc-np</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnum_002dintegral"><code>calc-num-integral</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numerical-Integration">Numerical Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnum_002dprefix"><code>calc-num-prefix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Prefix-Arguments">Prefix Arguments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnum_002dsimplify_002dmode"><code>calc-num-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002doption"><code>calc-option</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Inverse-and-Hyperbolic">Inverse and Hyperbolic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dor"><code>calc-or</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dother_002dwindow"><code>calc-other-window</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002douter_002dproduct"><code>calc-outer-product</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dover"><code>calc-over</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dover_002dnotation"><code>calc-over-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Formats">Fraction Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpack"><code>calc-pack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpack-1"><code>calc-pack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpack_002dbits"><code>calc-pack-bits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpascal_002dlanguage"><code>calc-pascal-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpercent"><code>calc-percent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpercent_002dchange"><code>calc-percent-change</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dperm"><code>calc-perm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpermanent_002dunits"><code>calc-permanent-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpermanent_002dvariable"><code>calc-permanent-variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpi"><code>calc-pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dplus"><code>calc-plus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoint_002dchar"><code>calc-point-char</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpolar"><code>calc-polar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpolar_002dmode"><code>calc-polar-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polar-Mode">Polar Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002ddiv"><code>calc-poly-div</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002ddiv_002drem"><code>calc-poly-div-rem</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002dgcd"><code>calc-poly-gcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002dinterp"><code>calc-poly-interp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interpolation">Interpolation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002drem"><code>calc-poly-rem</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpoly_002droots"><code>calc-poly-roots</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpop"><code>calc-pop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpop_002dabove"><code>calc-pop-above</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpower"><code>calc-power</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprecision"><code>calc-precision</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Precision">Precision</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprepend_002dto_002dregister"><code>calc-prepend-to-register</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Saving-Into-Registers">Saving Into Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprev_002dprime"><code>calc-prev-prime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprime_002dfactors"><code>calc-prime-factors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprime_002dtest"><code>calc-prime-test</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dproduct"><code>calc-product</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dquick_002dunits"><code>calc-quick-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dquit"><code>calc-quit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dradians_002dmode"><code>calc-radians-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dradix"><code>calc-radix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drandom"><code>calc-random</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drandom_002dagain"><code>calc-random-again</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dre"><code>calc-re</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drealign"><code>calc-realign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Basics">Stack Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drecall"><code>calc-recall</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recalling-Variables">Recalling Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dredo"><code>calc-redo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dreduce"><code>calc-reduce</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drefresh-1"><code>calc-refresh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drefresh_002dtop"><code>calc-refresh-top</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Display-Modes">Display Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dremove_002dduplicates"><code>calc-remove-duplicates</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dremove_002dequal"><code>calc-remove-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dremove_002dunits"><code>calc-remove-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dreset"><code>calc-reset</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dreverse_002dvector"><code>calc-reverse-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drewrite"><code>calc-rewrite</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drewrite_002dselection"><code>calc-rewrite-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Selections-with-Rewrite-Rules">Selections with Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dright_002djustify"><code>calc-right-justify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Justification">Justification</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dright_002dlabel"><code>calc-right-label</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Labels">Labels</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drnorm"><code>calc-rnorm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002droll_002ddown"><code>calc-roll-down</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002droll_002dup"><code>calc-roll-up</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drotate_002dbinary"><code>calc-rotate-binary</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dround"><code>calc-round</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drrandom"><code>calc-rrandom</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drshift_002darith"><code>calc-rshift-arith</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drshift_002dbinary"><code>calc-rshift-binary</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsave_002dmodes"><code>calc-save-modes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dscale_002dfloat"><code>calc-scale-float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsci_002dnotation"><code>calc-sci-notation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dscroll_002ddown"><code>calc-scroll-down</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dscroll_002dleft"><code>calc-scroll-left</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dscroll_002dright"><code>calc-scroll-right</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dscroll_002dup"><code>calc-scroll-up</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsec"><code>calc-sec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsech"><code>calc-sech</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dadd_002dboth_002dsides"><code>calc-sel-add-both-sides</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dcommute"><code>calc-sel-commute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002ddistribute"><code>calc-sel-distribute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002ddiv_002dboth_002dsides"><code>calc-sel-div-both-sides</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002devaluate"><code>calc-sel-evaluate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dexpand_002dformula"><code>calc-sel-expand-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dinvert"><code>calc-sel-invert</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002disolate"><code>calc-sel-isolate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002djump_002dequals"><code>calc-sel-jump-equals</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dmerge"><code>calc-sel-merge</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dmult_002dboth_002dsides"><code>calc-sel-mult-both-sides</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dnegate"><code>calc-sel-negate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dsub_002dboth_002dsides"><code>calc-sel-sub-both-sides</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsel_002dunpack"><code>calc-sel-unpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dadditional"><code>calc-select-additional</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dhere"><code>calc-select-here</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dhere_002dmaybe"><code>calc-select-here-maybe</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dless"><code>calc-select-less</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dmore"><code>calc-select-more</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dnext"><code>calc-select-next</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002donce"><code>calc-select-once</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002donce_002dmaybe"><code>calc-select-once-maybe</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dpart"><code>calc-select-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dprevious"><code>calc-select-previous</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Changing-Selections">Changing Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dcardinality"><code>calc-set-cardinality</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dcomplement"><code>calc-set-complement</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002ddifference"><code>calc-set-difference</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002denumerate"><code>calc-set-enumerate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dfloor"><code>calc-set-floor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dintersect"><code>calc-set-intersect</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dspan"><code>calc-set-span</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dunion"><code>calc-set-union</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dxor"><code>calc-set-xor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsettings_002dfile_002dname"><code>calc-settings-file-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dshift_002dprefix"><code>calc-shift-prefix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dshow_002dplain"><code>calc-show-plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#More-About-Embedded-Mode">More About Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dshow_002dselections"><code>calc-show-selections</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Displaying-Selections">Displaying Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dshuffle"><code>calc-shuffle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsign"><code>calc-sign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsimplify"><code>calc-simplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplifying-Formulas">Simplifying Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsimplify_002dextended"><code>calc-simplify-extended</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsimplify_002dunits"><code>calc-simplify-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsin"><code>calc-sin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsincos"><code>calc-sincos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsinh"><code>calc-sinh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsolve_002dfor"><code>calc-solve-for</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Equations">Solving Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsort"><code>calc-sort</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dspn"><code>calc-spn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsqrt"><code>calc-sqrt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstirling_002dnumber"><code>calc-stirling-number</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore"><code>calc-store</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dAlgSimpRules"><code>calc-store-AlgSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dconcat"><code>calc-store-concat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dDecls"><code>calc-store-Decls</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002ddecr"><code>calc-store-decr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002ddiv"><code>calc-store-div</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dEvalRules"><code>calc-store-EvalRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dexchange"><code>calc-store-exchange</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dExtSimpRules"><code>calc-store-ExtSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dFitRules"><code>calc-store-FitRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dGenCount"><code>calc-store-GenCount</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dHolidays"><code>calc-store-Holidays</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dincr"><code>calc-store-incr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dIntegLimit"><code>calc-store-IntegLimit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dinto"><code>calc-store-into</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dinv"><code>calc-store-inv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dLineStyles"><code>calc-store-LineStyles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dmap"><code>calc-store-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dminus"><code>calc-store-minus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dneg"><code>calc-store-neg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dPlotRejects"><code>calc-store-PlotRejects</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dplus"><code>calc-store-plus</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dPointStyles"><code>calc-store-PointStyles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dpower"><code>calc-store-power</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dtimes"><code>calc-store-times</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dTimeZone"><code>calc-store-TimeZone</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dUnits"><code>calc-store-Units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsubscript"><code>calc-subscript</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsubstitute"><code>calc-substitute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsubvector"><code>calc-subvector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsummation"><code>calc-summation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsymbolic_002dmode"><code>calc-symbolic-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtabulate"><code>calc-tabulate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtail"><code>calc-tail</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtan"><code>calc-tan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtanh"><code>calc-tanh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtaylor"><code>calc-taylor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Taylor-Series">Taylor Series</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtex_002dlanguage"><code>calc-tex-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtime"><code>calc-time</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtime_002dzone"><code>calc-time-zone</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtimes"><code>calc-times</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtiming"><code>calc-timing</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-Calc">Debugging Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dto_002ddegrees"><code>calc-to-degrees</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dto_002dhms"><code>calc-to-hms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dto_002dradians"><code>calc-to-radians</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtotal_002dalgebraic_002dmode"><code>calc-total-algebraic-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtotient"><code>calc-totient</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dbackward"><code>calc-trail-backward</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002ddisplay"><code>calc-trail-display</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dfirst"><code>calc-trail-first</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dforward"><code>calc-trail-forward</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dhere"><code>calc-trail-here</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002din"><code>calc-trail-in</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002disearch_002dbackward"><code>calc-trail-isearch-backward</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002disearch_002dforward"><code>calc-trail-isearch-forward</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dkill"><code>calc-trail-kill</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dlast"><code>calc-trail-last</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dmarker"><code>calc-trail-marker</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dnext"><code>calc-trail-next</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dout"><code>calc-trail-out</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dprevious"><code>calc-trail-previous</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dscroll_002dleft"><code>calc-trail-scroll-left</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dscroll_002dright"><code>calc-trail-scroll-right</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dyank"><code>calc-trail-yank</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtranspose"><code>calc-transpose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtranspose_002dlines"><code>calc-transpose-lines</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrunc"><code>calc-trunc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtruncate_002ddown"><code>calc-truncate-down</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtruncate_002dstack"><code>calc-truncate-stack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtruncate_002dup"><code>calc-truncate-up</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtutorial"><code>calc-tutorial</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dundefine_002dunit"><code>calc-undefine-unit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dundo"><code>calc-undo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunformatted_002dlanguage"><code>calc-unformatted-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunits_002dsimplify_002dmode"><code>calc-units-simplify-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplification-Modes">Simplification Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunix_002dtime"><code>calc-unix-time</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunpack"><code>calc-unpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunpack-1"><code>calc-unpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunpack_002dbits"><code>calc-unpack-bits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunselect"><code>calc-unselect</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-Selections">Making Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunstore"><code>calc-unstore</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine"><code>calc-user-define</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dcomposition"><code>calc-user-define-composition</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Compositions">User-Defined Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dedit"><code>calc-user-define-edit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dformula"><code>calc-user-define-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Definitions">Algebraic Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dinvocation"><code>calc-user-define-invocation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Invocation-Macros">Invocation Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dkbd_002dmacro"><code>calc-user-define-kbd-macro</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Naming-Keyboard-Macros">Naming Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002ddefine_002dpermanent"><code>calc-user-define-permanent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002dinvocation"><code>calc-user-invocation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Invocation-Macros">Invocation Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002duser_002dundefine"><code>calc-user-undefine</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dutpb"><code>calc-utpb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dutpc"><code>calc-utpc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dutpf"><code>calc-utpf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dutpn"><code>calc-utpn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dutpp"><code>calc-utpp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dbraces"><code>calc-vector-braces</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dbrackets"><code>calc-vector-brackets</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dcommas"><code>calc-vector-commas</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dcorrelation"><code>calc-vector-correlation</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dcount"><code>calc-vector-count</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dcovariance"><code>calc-vector-covariance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dfind"><code>calc-vector-find</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dgeometric_002dmean"><code>calc-vector-geometric-mean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dharmonic_002dmean"><code>calc-vector-harmonic-mean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dmax"><code>calc-vector-max</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dmean"><code>calc-vector-mean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dmean_002derror"><code>calc-vector-mean-error</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dmedian"><code>calc-vector-median</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dmin"><code>calc-vector-min</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dparens"><code>calc-vector-parens</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Formats">Vector and Matrix Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dpop_002dcovariance"><code>calc-vector-pop-covariance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dpop_002dsdev"><code>calc-vector-pop-sdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dpop_002dvariance"><code>calc-vector-pop-variance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dprod"><code>calc-vector-prod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dsdev"><code>calc-vector-sdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dsum"><code>calc-vector-sum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvector_002dvariance"><code>calc-vector-variance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dview_002dunits_002dtable"><code>calc-view-units-table</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Units-Table">The Units Table</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dvlength"><code>calc-vlength</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dwhy"><code>calc-why</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dword_002dsize"><code>calc-word-size</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dworking"><code>calc-working</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Working-Message">Working Message</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dxor"><code>calc-xor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dxpon_002dpart"><code>calc-xpon-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dyacas_002dlanguage"><code>calc-yacas-language</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacas-Language-Mode">Yacas Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dyank"><code>calc-yank</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yanking-Into-Stack">Yanking Into Stack</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-describe_002dbindings"><code>describe-bindings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-full_002dcalc"><code>full-calc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-full_002dcalc_002dkeypad"><code>full-calc-keypad</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keypad-Mode">Keypad Mode</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-quick_002dcalc"><code>quick-calc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Quick-Calculator">Quick Calculator</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Command-Index_pg_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-read_002dkbd_002dmacro"><code>read-kbd-macro</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Naming-Keyboard-Macros">Naming Keyboard Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Command-Index_pg_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Command-Index_pg_letter-R"><b>R</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Function-Index"></a>
<div class="header">
<p>
Next: <a href="#Concept-Index" accesskey="n" rel="next">Concept Index</a>, Previous: <a href="#Command-Index" accesskey="p" rel="prev">Command Index</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-of-Algebraic-Functions"></a>
<h2 class="unnumbered">Index of Algebraic Functions</h2>

<p>This is a list of built-in functions and operators usable in algebraic
expressions.  Their full Lisp names are derived by adding the prefix
&lsquo;<samp>calcFunc-</samp>&rsquo;, as in <code>calcFunc-sqrt</code>.
</p>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Function-Index_tp_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-2"><b>%</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-3"><b>&amp;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-4"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-5"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-6"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-7"><b>/</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-8"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-9"><b>&lt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-10"><b>=</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-11"><b>&gt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-12"><b>?</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-13"><b>\</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-14"><b>^</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-15"><b>_</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-16"><b>|</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Function-Index_tp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-tp" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-1">!</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021-1"><code>!</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021-2"><code>!</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021_0021"><code>!!</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021_0021_0021"><code>!!!</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021_003d"><code>!=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-2">%</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0025-1"><code>%</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0025-2"><code>%</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-3">&amp;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0026_0026"><code>&amp;&amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0026_0026_0026"><code>&amp;&amp;&amp;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-4">*</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002a-1"><code>*</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-5">+</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002b-1"><code>+</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002b_002f_002d"><code>+/-</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Forms">Error Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-6">-</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d-1"><code>-</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-7">/</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002f-1"><code>/</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-8">:</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003a-1"><code>:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003a_003a"><code>::</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003a_003d"><code>:=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-9">&lt;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003c-1"><code>&lt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003c_003d"><code>&lt;=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-10">=</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003d-1"><code>=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003d_003d"><code>==</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003d_003e"><code>=&gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-11">&gt;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003e-1"><code>&gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003e_003d"><code>&gt;=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-12">?</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003f-1"><code>?</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-13">\</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005c-1"><code>\</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-14">^</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005e-1"><code>^</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-15">_</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005f-1"><code>_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_symbol-16">|</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007c-1"><code>|</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007c_007c"><code>||</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_007c_007c_007c"><code>|||</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-abs"><code>abs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-abs-_0028vectors_0029"><code>abs (vectors)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-abssqr"><code>abssqr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-accum"><code>accum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-acute"><code>acute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Acute"><code>Acute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-add"><code>add</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-afixp"><code>afixp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-agmean"><code>agmean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-alog"><code>alog</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-an"><code>an</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-and"><code>and</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-anest"><code>anest</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-apart"><code>apart</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-append"><code>append</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-apply"><code>apply</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing-and-Mapping">Reducing and Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-apply-_0028rewrites_0029"><code>apply (rewrites)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arccos"><code>arccos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arccosh"><code>arccosh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arcsin"><code>arcsin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arcsincos"><code>arcsincos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arcsinh"><code>arcsinh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arctan"><code>arctan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arctan2"><code>arctan2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arctanh"><code>arctanh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arg"><code>arg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-arrange"><code>arrange</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-as"><code>as</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ash"><code>ash</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-assign"><code>assign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-asum"><code>asum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-badd"><code>badd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bar"><code>bar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Bar"><code>Bar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bcount"><code>bcount</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Bit-Counting-Example">Bit Counting Example</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bern"><code>bern</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-besJ"><code>besJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-besY"><code>besY</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-beta"><code>beta</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-betaB"><code>betaB</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-betaI"><code>betaI</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-breve"><code>breve</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Breve"><code>Breve</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bstring"><code>bstring</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bsub"><code>bsub</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-call"><code>call</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cascent"><code>cascent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Information-about-Compositions">Information about Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cbase"><code>cbase</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cbbase"><code>cbbase</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cbspace"><code>cbspace</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cdescent"><code>cdescent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Information-about-Compositions">Information about Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ceil"><code>ceil</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cflat"><code>cflat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check"><code>check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Check"><code>Check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cheight"><code>cheight</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Information-about-Compositions">Information about Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-choose"><code>choose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-choriz"><code>choriz</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Horizontal-Compositions">Horizontal Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clean"><code>clean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clip"><code>clip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clvert"><code>clvert</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cnorm"><code>cnorm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-collect"><code>collect</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-condition"><code>condition</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-conj"><code>conj</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cons"><code>cons</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cons-_0028rewrites_0029"><code>cons (rewrites)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-constant"><code>constant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cos"><code>cos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cosh"><code>cosh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cot"><code>cot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-coth"><code>coth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cprec"><code>cprec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Composition-Basics">Composition Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cross"><code>cross</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-crule"><code>crule</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-crvert"><code>crvert</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-csc"><code>csc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-csch"><code>csch</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cspace"><code>cspace</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-csub"><code>csub</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-csup"><code>csup</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ctbase"><code>ctbase</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ctrn"><code>ctrn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ctspace"><code>ctspace</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-curve"><code>curve</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Composing-Patterns-in-Rewrite-Rules">Composing Patterns in Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cvec"><code>cvec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cvert"><code>cvert</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vertical-Compositions">Vertical Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cvspace"><code>cvspace</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Compositions">Other Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cwidth"><code>cwidth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Information-about-Compositions">Information about Compositions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-date"><code>date</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-day"><code>day</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dbfield"><code>dbfield</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dbpower"><code>dbpower</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ddb"><code>ddb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ddddot"><code>ddddot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dddot"><code>dddot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-decr"><code>decr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-deg"><code>deg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-deriv-1"><code>deriv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Differentiation">Differentiation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-det"><code>det</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-deven"><code>deven</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dfact"><code>dfact</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-diag"><code>diag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-diff"><code>diff</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dimag"><code>dimag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dint"><code>dint</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-div"><code>div</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dnatnum"><code>dnatnum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dneg"><code>dneg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dnonneg"><code>dnonneg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dnonzero"><code>dnonzero</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dnumint"><code>dnumint</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dodd"><code>dodd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dot"><code>dot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dot"><code>Dot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dotdot"><code>dotdot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DotDot"><code>DotDot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dpos"><code>dpos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-drange"><code>drange</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-drat"><code>drat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dreal"><code>dreal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dsadj"><code>dsadj</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dscalar"><code>dscalar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Functions-for-Declarations">Functions for Declarations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dyad"><code>dyad</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-efit"><code>efit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Estimates-for-Fits">Error Estimates for Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-egcd"><code>egcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Ei"><code>Ei</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-the-Integrator">Customizing the Integrator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-elim"><code>elim</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Systems-of-Equations">Solving Systems of Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ends"><code>ends</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Composing-Patterns-in-Rewrite-Rules">Composing Patterns in Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eq"><code>eq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-erf"><code>erf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-erfc"><code>erfc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-esimplify"><code>esimplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-euler"><code>euler</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eval"><code>eval</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evalextsimp"><code>evalextsimp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evalsimp"><code>evalsimp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evalto"><code>evalto</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evalv"><code>evalv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evalvn"><code>evalvn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-exp"><code>exp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-exp10"><code>exp10</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expand"><code>expand</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expm1"><code>expm1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-fact"><code>fact</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-factor"><code>factor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-factors"><code>factors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fceil"><code>fceil</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fdiv"><code>fdiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ffinv"><code>ffinv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ffloor"><code>ffloor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fib"><code>fib</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrites-Tutorial">Rewrites Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-find"><code>find</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-finv"><code>finv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fit"><code>fit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linear-Fits">Linear Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fitdummy"><code>fitdummy</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fitmodel"><code>fitmodel</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fitparam"><code>fitparam</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fitsystem"><code>fitsystem</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fitvar"><code>fitvar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fixp"><code>fixp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-float-2"><code>float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-floor"><code>floor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-frac"><code>frac</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-freq"><code>freq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fround"><code>fround</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-frounde"><code>frounde</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-froundu"><code>froundu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fsolve"><code>fsolve</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ftrunc"><code>ftrunc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fv"><code>fv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fvb"><code>fvb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fvl"><code>fvl</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-Value">Future Value</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma"><code>gamma</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gammag"><code>gammag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gammaG"><code>gammaG</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gammaP"><code>gammaP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gammaQ"><code>gammaQ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Advanced-Math-Functions">Advanced Math Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gcd"><code>gcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-geq"><code>geq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-getdiag"><code>getdiag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gpoly"><code>gpoly</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-grade"><code>grade</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-grave"><code>grave</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Grave"><code>Grave</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gt"><code>gt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-hasfitparams"><code>hasfitparams</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hasfitvars"><code>hasfitvars</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hat"><code>hat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hat"><code>Hat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-head"><code>head</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-histogram"><code>histogram</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hms"><code>hms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-holiday"><code>holiday</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hour"><code>hour</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hypot"><code>hypot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-idiv-1"><code>idiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idn"><code>idn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ierf"><code>ierf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-if"><code>if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ilog"><code>ilog</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-im"><code>im</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-import"><code>import</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-in"><code>in</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-incmonth"><code>incmonth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-incr"><code>incr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-incyear"><code>incyear</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-index"><code>index</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inner"><code>inner</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integ-1"><code>integ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integration">Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integer-1"><code>integer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-intv"><code>intv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interval-Forms">Interval Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inv"><code>inv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inv-_0028matrices_0029"><code>inv (matrices)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-irr"><code>irr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-irrb"><code>irrb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-islin"><code>islin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-islinnt"><code>islinnt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-isqrt-1"><code>isqrt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-istrue"><code>istrue</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-iterations"><code>iterations</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nested-Formulas-with-Rewrite-Rules">Nested Formulas with Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-julian"><code>julian</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-K">K</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-kron"><code>kron</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-lambda"><code>lambda</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-land"><code>land</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lcm"><code>lcm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-leq"><code>leq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-let"><code>let</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lin"><code>lin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-linnt"><code>linnt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ln"><code>ln</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lnot"><code>lnot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lnp1"><code>lnp1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-log"><code>log</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-log10"><code>log10</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Functions">Logarithmic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lor"><code>lor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lsh"><code>lsh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lt"><code>lt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpb"><code>ltpb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpc"><code>ltpc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpf"><code>ltpf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpn"><code>ltpn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpp"><code>ltpp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltpt"><code>ltpt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lud"><code>lud</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lufadd"><code>lufadd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lufdiv"><code>lufdiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lufmul"><code>lufmul</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lufquant"><code>lufquant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lufsub"><code>lufsub</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lupadd"><code>lupadd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lupdiv"><code>lupdiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lupmul"><code>lupmul</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lupquant"><code>lupquant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lupsub"><code>lupsub</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-makemod"><code>makemod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modulo-Forms">Modulo Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mant"><code>mant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-map"><code>map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapa"><code>mapa</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapc"><code>mapc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapd"><code>mapd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapeq"><code>mapeq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapeqp"><code>mapeqp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapeqr"><code>mapeqr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mapr"><code>mapr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mapping">Mapping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-match"><code>match</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-matches"><code>matches</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-matchnot"><code>matchnot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-max"><code>max</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maximize"><code>maximize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mcol"><code>mcol</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mdims"><code>mdims</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-midi"><code>midi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-min"><code>min</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-minimize"><code>minimize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-minute"><code>minute</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mod"><code>mod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mod-_0028operator_0029"><code>mod (operator)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modulo-Forms">Modulo Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-moebius"><code>moebius</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-month"><code>month</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mrcol"><code>mrcol</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mrow"><code>mrow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mrrow"><code>mrrow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mul"><code>mul</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mysin"><code>mysin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Sine-Example">Sine Example</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-neg"><code>neg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-negative"><code>negative</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-neq"><code>neq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nest"><code>nest</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-newmonth"><code>newmonth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-newweek"><code>newweek</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-newyear"><code>newyear</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nextprime"><code>nextprime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ninteg"><code>ninteg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numerical-Integration">Numerical Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nonvar"><code>nonvar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-not"><code>not</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-now"><code>now</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nper"><code>nper</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nperb"><code>nperb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nperl"><code>nperl</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-npfield"><code>npfield</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nppower"><code>nppower</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-npv"><code>npv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-npvb"><code>npvb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nrat"><code>nrat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nroot"><code>nroot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nterms"><code>nterms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrites-Answer-5">Rewrites Answer 5</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-opt"><code>opt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-or"><code>or</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-outer"><code>outer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalized-Products">Generalized Products</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-pack"><code>pack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pand"><code>pand</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pclean"><code>pclean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pcont"><code>pcont</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdeg"><code>pdeg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdiv"><code>pdiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdivide"><code>pdivide</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdivrem"><code>pdivrem</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-percent"><code>percent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-perm"><code>perm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pfloat"><code>pfloat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pfrac"><code>pfrac</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pgcd"><code>pgcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-phase"><code>phase</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multi_002dPhase-Rewrite-Rules">Multi-Phase Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-plain"><code>plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-plead"><code>plead</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pmt"><code>pmt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pmtb"><code>pmtb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pnot"><code>pnot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-polar"><code>polar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-polint"><code>polint</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interpolation">Interpolation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-poly"><code>poly</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-por"><code>por</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pow-1"><code>pow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pprim"><code>pprim</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prem"><code>prem</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prevprime"><code>prevprime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prfac"><code>prfac</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Prime"><code>Prime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prime"><code>prime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prod"><code>prod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pv"><code>pv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pvb"><code>pvb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pvl"><code>pvl</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Present-Value">Present Value</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pwday"><code>pwday</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-quote"><code>quote</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-raccum"><code>raccum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rad"><code>rad</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-random"><code>random</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rash"><code>rash</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rate"><code>rate</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rateb"><code>rateb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ratel"><code>ratel</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Related-Financial-Functions">Related Financial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ratint"><code>ratint</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interpolation">Interpolation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rcons"><code>rcons</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rcons-_0028rewrites_0029"><code>rcons (rewrites)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rdup"><code>rdup</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-re"><code>re</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Number-Functions">Complex Number Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-real"><code>real</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rect"><code>rect</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reduce"><code>reduce</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reducea"><code>reducea</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reducec"><code>reducec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reduced"><code>reduced</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reducer"><code>reducer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-refers"><code>refers</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-relch"><code>relch</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Percentages">Percentages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-remember"><code>remember</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rev"><code>rev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rewrite-1"><code>rewrite</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rgrade"><code>rgrade</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rhead"><code>rhead</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rmeq"><code>rmeq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rms"><code>rms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rnorm"><code>rnorm</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-root"><code>root</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-roots"><code>roots</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rot"><code>rot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-round"><code>round</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rounde"><code>rounde</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-roundu"><code>roundu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rreduce"><code>rreduce</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rreducea"><code>rreducea</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rreducec"><code>rreducec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rreduced"><code>rreduced</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rreducer"><code>rreducer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Reducing">Reducing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rsh"><code>rsh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rsort"><code>rsort</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rsubvec"><code>rsubvec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rtail"><code>rtail</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-scf"><code>scf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-schedule"><code>schedule</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multi_002dPhase-Rewrite-Rules">Multi-Phase Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sdev"><code>sdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Forms">Error Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sec"><code>sec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sech"><code>sech</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-second"><code>second</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-select"><code>select</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-seq"><code>seq</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrites-Answer-4">Rewrites Answer 4</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-shuffle"><code>shuffle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Si"><code>Si</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sign"><code>sign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-simplify-1"><code>simplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Simplifying-Formulas">Simplifying Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sin"><code>sin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sincos"><code>sincos</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sinh"><code>sinh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sln"><code>sln</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-solve"><code>solve</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Equations">Solving Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sort"><code>sort</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-spn"><code>spn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Musical-Notes">Musical Notes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sqr-1"><code>sqr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sqrt"><code>sqrt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-stir1"><code>stir1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-stir2"><code>stir2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-string"><code>string</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sub"><code>sub</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-subscr"><code>subscr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-subst"><code>subst</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Manipulation">Algebraic Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-subvec"><code>subvec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sum"><code>sum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-syd"><code>syd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Depreciation-Functions">Depreciation Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-table"><code>table</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tail"><code>tail</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Vectors">Building Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tan"><code>tan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tanh"><code>tanh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trigonometric-and-Hyperbolic-Functions">Trigonometric and Hyperbolic Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-taylor"><code>taylor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Taylor-Series">Taylor Series</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tderiv-1"><code>tderiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Differentiation">Differentiation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-thecoefs"><code>thecoefs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-thefactors"><code>thefactors</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tilde"><code>tilde</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Tilde"><code>Tilde</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-time"><code>time</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-totient"><code>totient</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tr"><code>tr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-and-Matrix-Arithmetic">Vector and Matrix Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-trn"><code>trn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-trunc"><code>trunc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-typeof"><code>typeof</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tzconv"><code>tzconv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tzone"><code>tzone</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-under"><code>under</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-unixtime"><code>unixtime</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-unpack"><code>unpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-unpackt"><code>unpackt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-usimplify"><code>usimplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpb"><code>utpb</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpc"><code>utpc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpf"><code>utpf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpn"><code>utpn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpp"><code>utpp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-utpt"><code>utpt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Probability-Distribution-Functions">Probability Distribution Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-variable"><code>variable</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vcard"><code>vcard</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vcompl"><code>vcompl</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vconcat"><code>vconcat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vcorr"><code>vcorr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vcount"><code>vcount</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vcov"><code>vcov</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vdiff"><code>vdiff</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vec"><code>vec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vectors-and-Matrices">Vectors and Matrices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Vec"><code>Vec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VEC"><code>VEC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-venum"><code>venum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vexp"><code>vexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vflat"><code>vflat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vfloor"><code>vfloor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vgmean"><code>vgmean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vhmean"><code>vhmean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vint"><code>vint</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vlen"><code>vlen</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmask"><code>vmask</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmatches"><code>vmatches</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matching-Commands">Matching Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmax"><code>vmax</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmean"><code>vmean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmeane"><code>vmeane</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmedian"><code>vmedian</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vmin"><code>vmin</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vpack"><code>vpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vpcov"><code>vpcov</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vprod"><code>vprod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vpsdev"><code>vpsdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vpvar"><code>vpvar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vsdev"><code>vsdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vspan"><code>vspan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vsum"><code>vsum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vunion"><code>vunion</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vunpack"><code>vunpack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vvar"><code>vvar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vxor"><code>vxor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-weekday"><code>weekday</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-wmaximize"><code>wmaximize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-wminimize"><code>wminimize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-wroot"><code>wroot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-X">X</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-xfit"><code>xfit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Estimates-for-Fits">Error Estimates for Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-xor"><code>xor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-xpon"><code>xpon</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-xy"><code>xy</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-xyz"><code>xyz</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Three-Dimensional-Graphics">Three Dimensional Graphics</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_tp_letter-Y">Y</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-year"><code>year</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-yearday"><code>yearday</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Functions">Date Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Function-Index_tp_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-2"><b>%</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-3"><b>&amp;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-4"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-5"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-6"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-7"><b>/</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-8"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-9"><b>&lt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-10"><b>=</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-11"><b>&gt;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-12"><b>?</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-13"><b>\</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-14"><b>^</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-15"><b>_</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_symbol-16"><b>|</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Function-Index_tp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_tp_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Concept-Index"></a>
<div class="header">
<p>
Next: <a href="#Variable-Index" accesskey="n" rel="next">Variable Index</a>, Previous: <a href="#Function-Index" accesskey="p" rel="prev">Function Index</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Concept-Index-1"></a>
<h2 class="unnumbered">Concept Index</h2>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Concept-Index_cp_symbol-1"><b>&quot;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_symbol-2"><b>=</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Concept-Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-cp" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_symbol-1">&quot;</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0060_0060Computation-got-stuck_0027_0027-message">&ldquo;Computation got stuck&rdquo; message</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_symbol-2">=</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003d_003e-operator">&lsquo;<samp>=&gt;</samp>&rsquo; operator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Accuracy-of-calculations">Accuracy of calculations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Floats">Floats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Accuracy-of-calculations-1">Accuracy of calculations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Precision">Precision</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Algebraic-Mode">Algebraic Mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Algebraic-notation">Algebraic notation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Algebraic-simplifications">Algebraic simplifications</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Simplifications">Algebraic Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AlgSimpRules-variable"><code>AlgSimpRules</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Alternating-sums">Alternating sums</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Angle-and-slope-of-a-line">Angle and slope of a line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Angular-mode">Angular mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Angular-Modes">Angular Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Area-under-a-curve">Area under a curve</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Arguments_002c-not-evaluated">Arguments, not evaluated</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Arguments_002c-restoring">Arguments, restoring</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Arranging-a-matrix">Arranging a matrix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Basic-simplifications">Basic simplifications</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Simplifications">Basic Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Beatles">Beatles</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Bernoulli-numbers_002c-approximate">Bernoulli numbers, approximate</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Bibliography">Bibliography</a>:</td><td>&nbsp;</td><td valign="top"><a href="#History-and-Acknowledgments">History and Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Binary-numbers">Binary numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Binary-operators">Binary operators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Arithmetic-Tutorial">Arithmetic Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Branch-cuts">Branch cuts</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Branch-Cuts">Branch Cuts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Breaking-up-long-lines">Breaking up long lines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-C-language">C language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Caches">Caches</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Caches">Caches</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calc-init-file_002c-mode-settings">Calc init file, mode settings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calc-init-file_002c-user_002ddefined-commands">Calc init file, user-defined commands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calc-init-file_002c-user_002ddefined-units">Calc init file, user-defined units</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calc-init-file_002c-variables">Calc init file, variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dext-module"><samp>calc-ext</samp> module</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Character-strings">Character strings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Clearing-the-stack">Clearing the stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Coefficients-of-polynomial">Coefficients of polynomial</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Columns-of-data_002c-extracting">Columns of data, extracting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Common-logarithm">Common logarithm</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Arithmetic-Tutorial">Arithmetic Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Complex-numbers">Complex numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Numbers">Complex Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Composite-units">Composite units</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compositions">Compositions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compositions">Compositions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditional-structures">Conditional structures</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals-in-Macros">Conditionals in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Continued-fractions">Continued fractions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Continuous-memory">Continuous memory</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Correlation-coefficient">Correlation coefficient</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Covariance">Covariance</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Cross-product">Cross product</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Analysis-Tutorial">Vector Analysis Tutorial</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Data_002c-extracting-from-buffers">Data, extracting from buffers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Date-arithmetic_002c-additional-functions">Date arithmetic, additional functions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Arithmetic">Date Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Date-forms">Date forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Forms">Date Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Daylight-saving-time">Daylight saving time</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Decimal-and-non_002ddecimal-numbers">Decimal and non-decimal numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Declaring-scalar-variables">Declaring scalar variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Mode">Matrix Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Decls-variable"><code>Decls</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaration-Basics">Declaration Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Degree-of-polynomial">Degree of polynomial</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Decomposing-Polynomials">Decomposing Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Degrees_002dminutes_002dseconds-forms">Degrees-minutes-seconds forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Deleting-stack-entries">Deleting stack entries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Demonstration-of-Calc">Demonstration of Calc</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Demonstration-of-Calc">Demonstration of Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Digamma-function">Digamma function</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Digit-grouping">Digit grouping</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Digits_002c-vectors-of">Digits, vectors of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Division-of-integers">Division of integers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Mode">Fraction Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Divisor-functions">Divisor functions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dot-product">Dot product</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Analysis-Tutorial">Vector Analysis Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Duplicate-values-in-a-list">Duplicate values in a list</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Duplicating-a-stack-entry">Duplicating a stack entry</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Duplicating-stack-entries">Duplicating stack entries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-e-variable"><code>e</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-e-variable-1"><code>e</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Editing-the-stack-with-Emacs">Editing the stack with Emacs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Editing-Stack-Entries">Editing Stack Entries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Editing-user-definitions">Editing user definitions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Emptying-the-stack">Emptying the stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Engineering-notation_002c-display-of">Engineering notation, display of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Entering-numbers">Entering numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Equations_002c-solving">Equations, solving</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Equations">Solving Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Error-forms">Error forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Forms">Error Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Errors_002c-messages">Errors, messages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Errors_002c-undoing">Errors, undoing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Euler_0027s-gamma-constant">Euler&rsquo;s gamma constant</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Euler_0027s-gamma-constant-1">Euler&rsquo;s gamma constant</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EvalRules-variable"><code>EvalRules</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Evaluates_002dto-operator">Evaluates-to operator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Evaluates_002dTo-Operator">Evaluates-To Operator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Evaluation-of-variables-in-a-formula">Evaluation of variables in a formula</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Exchanging-stack-entries">Exchanging stack entries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Exiting-the-Calculator">Exiting the Calculator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Exponential-integral-Ei_0028x_0029">Exponential integral Ei(x)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-the-Integrator">Customizing the Integrator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Expressions">Expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extended-simplification">Extended simplification</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extensions-module">Extensions module</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ExtSimpRules-variable"><code>ExtSimpRules</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fermat_002c-primality-test-of">Fermat, primality test of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fibonacci-numbers">Fibonacci numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrites-Tutorial">Rewrites Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fibonacci-numbers-1">Fibonacci numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fitting-data-to-a-line">Fitting data to a line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fixed-points">Fixed points</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nesting-and-Fixed-Points">Nesting and Fixed Points</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Flattening-a-matrix">Flattening a matrix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Floating_002dpoint-numbers">Floating-point numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Floats">Floats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Floats-vs_002e-fractions">Floats vs. fractions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Flushing-caches">Flushing caches</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Caches">Caches</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Formulas">Formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Formulas_002c-entering">Formulas, entering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Formulas_002c-evaluation">Formulas, evaluation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Formulas_002c-referring-to-stack">Formulas, referring to stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FORTRAN-language">FORTRAN language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fraction-mode">Fraction mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fraction-Mode">Fraction Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fractional-part-of-a-number">Fractional part of a number</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fractions">Fractions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fractions">Fractions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fractions-vs_002e-floats">Fractions vs. floats</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Function-call-notation">Function call notation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Gamma-constant_002c-Euler_0027s">Gamma constant, Euler&rsquo;s</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Gamma-constant_002c-Euler_0027s-1">Gamma constant, Euler&rsquo;s</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma-variable"><code>gamma</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma-variable-1"><code>gamma</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Garbled-displays_002c-refreshing">Garbled displays, refreshing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GenCount-variable"><code>GenCount</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Generic-functions">Generic functions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Geometric-mean">Geometric mean</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Geometric-mean-1">Geometric mean</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Giac-language">Giac language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Giac-Language-Mode">Giac Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Golden-ratio">Golden ratio</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Golden-ratio-1">Golden ratio</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Gregorian-calendar">Gregorian calendar</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Forms">Date Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Grouping-digits">Grouping digits</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grouping-Digits">Grouping Digits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Guard-digits">Guard digits</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Guard-digits-1">Guard digits</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Harmonic-mean">Harmonic mean</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Harmonic-numbers">Harmonic numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hash-tables">Hash tables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Arithmetic-Tutorial">Arithmetic Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Help-commands">Help commands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-Commands">Help Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hexadecimal-integers">Hexadecimal integers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Histograms">Histograms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Holidays-variable"><code>Holidays</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Horizontal-scrolling">Horizontal scrolling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hours_002dminutes_002dseconds-forms">Hours-minutes-seconds forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-i-variable"><code>i</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-i-variable-1"><code>i</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Identity-matrix">Identity matrix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Tutorial">Matrix Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Implicit-comma-in-vectors">Implicit comma in vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Implicit-multiplication">Implicit multiplication</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Incomplete-Algebraic-Mode">Incomplete Algebraic Mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Incomplete-complex-numbers">Incomplete complex numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Incomplete-interval-forms">Incomplete interval forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Incomplete-vectors">Incomplete vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Incomplete-Objects">Incomplete Objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Index-tables">Index tables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Inexact-results">Inexact results</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inf-variable"><code>inf</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Infinite-mode">Infinite mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinite-Mode">Infinite Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Infinity">Infinity</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Integer-part-of-a-number">Integer part of a number</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integer-Truncation">Integer Truncation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Integers">Integers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integers">Integers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Integration-by-Simpson_0027s-rule">Integration by Simpson&rsquo;s rule</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Integration_002c-numerical">Integration, numerical</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Interval-forms">Interval forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interval-Forms">Interval Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Inverse-of-permutation">Inverse of permutation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ISO-8601">ISO 8601</a>:</td><td>&nbsp;</td><td valign="top"><a href="#ISO-8601">ISO 8601</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Iterative-structures">Iterative structures</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Julian-calendar">Julian calendar</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Forms">Date Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Julian-day-counting">Julian day counting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Forms">Date Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Julian-day-counts_002c-conversions">Julian day counts, conversions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-K">K</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keyboard-macros">Keyboard macros</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keyboard-Macros">Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keyboard-macros_002c-editing">Keyboard macros, editing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Naming-Keyboard-Macros">Naming Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Kill-ring">Kill ring</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Killing-From-Stack">Killing From Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Knuth_002c-Art-of-Computer-Programming">Knuth, Art of Computer Programming</a>:</td><td>&nbsp;</td><td valign="top"><a href="#History-and-Acknowledgments">History and Acknowledgments</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Lambda-expressions">Lambda expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Large-numbers_002c-readability">Large numbers, readability</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Last_002darguments-feature">Last-arguments feature</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LaTeX-language">LaTeX language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Leading-zeros">Leading zeros</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Least_002dsquares-fits">Least-squares fits</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linear-Fits">Linear Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Least_002dsquares-for-fitting-a-straight-line">Least-squares for fitting a straight line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Least_002dsquares-for-over_002ddetermined-systems">Least-squares for over-determined systems</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Tutorial">Matrix Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Levels-of-stack">Levels of stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Line-breaking">Line breaking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Line_002c-fitting-data-to">Line, fitting data to</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Linear-correlation">Linear correlation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Paired_002dSample-Statistics">Paired-Sample Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Linear-equations_002c-systems-of">Linear equations, systems of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Tutorial">Matrix Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Linear-regression">Linear regression</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linear-Fits">Linear Fits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Linearity-testing">Linearity testing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logical-Operations">Logical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LineStyles-variable"><code>LineStyles</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Lists">Lists</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Local-variables">Local variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Looping-structures">Looping structures</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Maple-language">Maple language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maple-Language-Mode">Maple Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Matchstick-problem">Matchstick problem</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mathematica-language">Mathematica language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mathematica-Language-Mode">Mathematica Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Matrices">Matrices</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vectors-and-Matrices">Vectors and Matrices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Matrix-display">Matrix display</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Normal-Language-Modes">Normal Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Matrix-mode">Matrix mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Mode">Matrix Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-max_002dlisp_002deval_002ddepth"><code>max-lisp-eval-depth</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-max_002dspecpdl_002dsize"><code>max-specpdl-size</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Maxima-language">Maxima language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Maxima-Language-Mode">Maxima Language Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Maximizing-a-function-over-a-list-of-values">Maximizing a function over a list of values</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Maximum-of-a-function-using-Calculus">Maximum of a function using Calculus</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mean-of-data-values">Mean of data values</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Median-of-data-values">Median of data values</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Minimization_002c-numerical">Minimization, numerical</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Minimization">Minimization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Minus-signs">Minus signs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mistakes_002c-undoing">Mistakes, undoing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mode-line-indicators">Mode line indicators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Calc-Mode-Line">Calc Mode Line</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Modes-variable"><code>Modes</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Variable">Modes Variable</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Modulo-division">Modulo division</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modulo-Forms">Modulo Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Modulo-forms">Modulo forms</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modulo-Forms">Modulo Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Moving-stack-entries">Moving stack entries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiplication_002c-implicit">Multiplication, implicit</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Nameless-functions">Nameless functions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Specifying-Operators">Specifying Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nan-variable"><code>nan</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Narrowing-the-stack">Narrowing the stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Negative-numbers_002c-entering">Negative numbers, entering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Newton_0027s-method">Newton&rsquo;s method</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Non_002ddecimal-numbers">Non-decimal numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Normalizing-a-vector">Normalizing a vector</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Analysis-Tutorial">Vector Analysis Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Numerator-of-a-fraction_002c-extracting">Numerator of a fraction, extracting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Packing-and-Unpacking">Packing and Unpacking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Numeric-entry">Numeric entry</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numeric-Entry">Numeric Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Numerical-integration">Numerical integration</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Numerical-Recipes">Numerical Recipes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#History-and-Acknowledgments">History and Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Numerical-root_002dfinding">Numerical root-finding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Octal-integers">Octal integers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Operands">Operands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Operators">Operators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Operators-in-formulas">Operators in formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Over_002ddetermined-systems-of-equations">Over-determined systems of equations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Tutorial">Matrix Tutorial</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Parsing-formulas_002c-customized">Parsing formulas, customized</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Tables">Syntax Tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Parts-of-formulas">Parts of formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Selecting-Subformulas">Selecting Subformulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Pascal-language">Pascal language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#C-FORTRAN-Pascal">C FORTRAN Pascal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Pattern-matching">Pattern matching</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Performance">Performance</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Working-Message">Working Message</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Permanent-mode-settings">Permanent mode settings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Permanent-user-definitions">Permanent user definitions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Permanent-variables">Permanent variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Permutation_002c-inverse-of">Permutation, inverse of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Permutations_002c-applying">Permutations, applying</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Perpendicular-vectors">Perpendicular vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Analysis-Tutorial">Vector Analysis Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-phi-variable"><code>phi</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-phi-variable-1"><code>phi</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Phi_002c-golden-ratio">Phi, golden ratio</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Phi_002c-golden-ratio-1">Phi, golden ratio</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi-variable"><code>pi</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi-variable-1"><code>pi</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Plain-vectors">Plain vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vectors-and-Matrices">Vectors and Matrices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PlotRejects-variable"><code>PlotRejects</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PointStyles-variable"><code>PointStyles</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Polar-mode">Polar mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polar-Mode">Polar Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Polynomial_002c-list-of-coefficients">Polynomial, list of coefficients</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Population-statistics">Population statistics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Positive-Infinite-mode">Positive Infinite mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinite-Mode">Infinite Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Precedence-of-operators">Precedence of operators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formulas">Formulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Precision-of-calculations">Precision of calculations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Precision">Precision</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primes">Primes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Combinatorial-Functions">Combinatorial Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Principal-values">Principal values</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Branch-Cuts">Branch Cuts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Product-of-a-sequence">Product of a sequence</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programming-with-algebraic-formulas">Programming with algebraic formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Definitions">Algebraic Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programming-with-keyboard-macros">Programming with keyboard macros</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Keyboard-Macros">Keyboard Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Pythagorean-Theorem">Pythagorean Theorem</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quaternions">Quaternions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examples-of-Rewrite-Rules">Examples of Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quick-Calculator">Quick Calculator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Quick-Calculator">Quick Calculator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quick-units">Quick units</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quick-variables">Quick variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quitting-the-Calculator">Quitting the Calculator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Radix-display">Radix display</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Rank-tables">Rank tables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Recalling-variables">Recalling variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recalling-Variables">Recalling Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Reciprocal">Reciprocal</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Arithmetic">Basic Arithmetic</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Recursion">Recursion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Recursion-depth">Recursion depth</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Recursion-Depth">Recursion Depth</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Redoing-after-an-Undo">Redoing after an Undo</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Refreshing-a-garbled-display">Refreshing a garbled display</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Registers">Registers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Saving-Into-Registers">Saving Into Registers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Removing-stack-entries">Removing stack entries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Manipulation">Stack Manipulation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Reshaping-a-matrix">Reshaping a matrix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Restoring-saved-modes">Restoring saved modes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Local-Values-in-Macros">Local Values in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Retrieving-previous-results">Retrieving previous results</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Rewrite-rules">Rewrite rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Root_002dmean_002dsquare">Root-mean-square</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Roots-of-equations">Roots of equations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Root-Finding">Root Finding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Round_002doff-errors">Round-off errors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Roundoff-errors_002c-correcting">Roundoff errors, correcting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conversions">Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Roundoff-errors_002c-examples">Roundoff errors, examples</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Roundoff-errors_002c-examples-1">Roundoff errors, examples</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Arithmetic-Tutorial">Arithmetic Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Roundoff-errors_002c-in-non_002ddecimal-numbers">Roundoff errors, in non-decimal numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RPN-notation">RPN notation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Running-the-Calculator">Running the Calculator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sample-statistics">Sample statistics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Saving-mode-settings">Saving mode settings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Mode-Commands">General Mode Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scalar-mode">Scalar mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Mode">Matrix Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scientific-notation_002c-display-of">Scientific notation, display of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Float-Formats">Float Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scientific-notation_002c-entry-of">Scientific notation, entry of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scientific-notation_002c-in-non_002ddecimal-numbers">Scientific notation, in non-decimal numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Tutorial">Modes Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scrolling">Scrolling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Selections">Selections</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Selecting-Subformulas">Selecting Subformulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sets_002c-as-binary-numbers">Sets, as binary numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sets_002c-as-vectors">Sets, as vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Set-Operations">Set Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Simpson_0027s-rule">Simpson&rsquo;s rule</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Algebra-Tutorial">Basic Algebra Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sine-integral-Si_0028x_0029">Sine integral Si(x)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Programming-Tutorial">Programming Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Slope-and-angle-of-a-line">Slope and angle of a line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Solving-equations">Solving equations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Equations">Solving Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sorting-data">Sorting data</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Manipulating-Vectors">Manipulating Vectors</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Speed-of-light">Speed of light</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Square_002dfree-numbers">Square-free numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Stack-basics">Stack basics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Basics">Stack Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Stack-levels">Stack levels</a>:</td><td>&nbsp;</td><td valign="top"><a href="#RPN-Tutorial">RPN Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Standalone-Operation">Standalone Operation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standalone-Operation">Standalone Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Standard-deviation">Standard deviation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Standard-deviations">Standard deviations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Forms">Error Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Standard-user-interface">Standard user interface</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Standard-Interface">The Standard Interface</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Starting-the-Calculator">Starting the Calculator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Statistical-functions">Statistical functions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Statistical-Operations">Statistical Operations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Storing-user-definitions">Storing user definitions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-User-Keys">Creating User Keys</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Storing-variables">Storing variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Storing-variables-1">Storing variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Operations-on-Variables">Operations on Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strings">Strings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strings">Strings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sub_002dformulas">Sub-formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Selecting-Subformulas">Selecting Subformulas</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subscript-notation">Subscript notation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extracting-Elements">Extracting Elements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Summation-of-a-series">Summation of a series</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Summations">Summations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Summations-_0028by-keyboard-macros_0029">Summations (by keyboard macros)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Loops-in-Macros">Loops in Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Summations-_0028statistical_0029">Summations (statistical)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Summing-rows-and-columns-of-data">Summing rows and columns of data</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Grabbing-From-Buffers">Grabbing From Buffers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Symbolic-mode">Symbolic mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Mode">Symbolic Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Syntax-tables">Syntax tables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Tables">Syntax Tables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Systems-of-equations_002c-numerical">Systems of equations, numerical</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Numerical-Systems-of-Equations">Numerical Systems of Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Systems-of-equations_002c-symbolic">Systems of equations, symbolic</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Solving-Systems-of-Equations">Solving Systems of Equations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Systems-of-linear-equations">Systems of linear equations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Matrix-Tutorial">Matrix Tutorial</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Temperature-conversion">Temperature conversion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Operations-on-Units">Basic Operations on Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Temporary-assignment-to-variables">Temporary assignment to variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Let-Command">Let Command</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TeX-language">TeX language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#TeX-and-LaTeX-Language-Modes">TeX and LaTeX Language Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Time-of-day">Time of day</a>:</td><td>&nbsp;</td><td valign="top"><a href="#HMS-Forms">HMS Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Time-travel">Time travel</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo-Tutorial">Undo Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Time-zones">Time zones</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Time-Zones_002c-converting-between">Time Zones, converting between</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TimeZone-variable"><code>TimeZone</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Torus_002c-volume-of">Torus, volume of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Types-Tutorial">Types Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Total-Algebraic-Mode">Total Algebraic Mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Algebraic-Entry">Algebraic Entry</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Trail-buffer">Trail buffer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Trail-pointer">Trail pointer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Trail-Commands">Trail Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Transformations">Transformations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rewrite-Rules">Rewrite Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Triangular-lists">Triangular lists</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-Tutorial">List Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Truncating-the-stack">Truncating the stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Truncating-the-Stack">Truncating the Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Two_0027s-complements">Two&rsquo;s complements</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Radix-Modes">Radix Modes</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-uinf-variable"><code>uinf</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Un_002dstoring-variables">Un-storing variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unary-operators">Unary operators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Arithmetic-Tutorial">Arithmetic Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Undoing-mistakes">Undoing mistakes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Undo">Undo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unit-vectors">Unit vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Analysis-Tutorial">Vector Analysis Tutorial</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Units-variable"><code>Units</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UnitSimpRules-variable"><code>UnitSimpRules</code> variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unix-time-format">Unix time format</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Forms">Date Forms</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unix-time-format_002c-conversions">Unix time format, conversions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Date-Conversions">Date Conversions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unsafe-simplifications">Unsafe simplifications</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unsafe-Simplifications">Unsafe Simplifications</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-User_002ddefined-units">User-defined units</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Variables_002c-evaluation">Variables, evaluation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Variables_002c-in-formulas">Variables, in formulas</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Variables_002c-temporary-assignment">Variables, temporary assignment</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Let-Command">Let Command</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Variance-of-data-values">Variance of data values</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Single_002dVariable-Statistics">Single-Variable Statistics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Vectors">Vectors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vectors-and-Matrices">Vectors and Matrices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Vertical-scrolling">Vertical scrolling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Void-variables">Void variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Why-did-an-error-occur_003f">Why did an error occur?</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-Messages">Error Messages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Wide-text_002c-scrolling">Wide text, scrolling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Commands">Basic Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Word-size-for-binary-operations">Word size for binary operations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Binary-Functions">Binary Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Working-messages">Working messages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Working-Message">Working Message</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Concept-Index_cp_letter-Y">Y</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Yacas-language">Yacas language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacas-Language-Mode">Yacas Language Mode</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Concept-Index_cp_symbol-1"><b>&quot;</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_symbol-2"><b>=</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Concept-Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Concept-Index_cp_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Variable-Index"></a>
<div class="header">
<p>
Next: <a href="#Lisp-Function-Index" accesskey="n" rel="next">Lisp Function Index</a>, Previous: <a href="#Concept-Index" accesskey="p" rel="prev">Concept Index</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-of-Variables"></a>
<h2 class="unnumbered">Index of Variables</h2>

<p>The variables in this list that do not contain dashes are accessible
as Calc variables.  Add a &lsquo;<samp>var-</samp>&rsquo; prefix to get the name of the
corresponding Lisp variable.
</p>
<p>The remaining variables are Lisp variables suitable for <code>setq</code>ing
in your Calc init file or <samp>.emacs</samp> file.
</p>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Variable-Index_vr_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-U"><b>U</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-vr" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-AlgSimpRules"><code>AlgSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-All"><code>All</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaration-Basics">Declaration Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-all"><code>all</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multi_002dPhase-Rewrite-Rules">Multi-Phase Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dalg_002dent_002dmap"><code>calc-alg-ent-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcontext_002dsensitive_002denter"><code>calc-context-sensitive-enter</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddefine"><code>calc-define</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Functions">Defining Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddigit_002dmap"><code>calc-digit-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002dmode_002dhook"><code>calc-edit-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dedit_002dmode_002dmap"><code>calc-edit-mode-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dannounce_002dformula"><code>calc-embedded-announce-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dannounce_002dformula-1"><code>calc-embedded-announce-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dannounce_002dformula_002dalist"><code>calc-embedded-announce-formula-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dformula"><code>calc-embedded-close-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dformula-1"><code>calc-embedded-close-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dmode"><code>calc-embedded-close-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dmode-1"><code>calc-embedded-close-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dnew_002dformula"><code>calc-embedded-close-new-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dnew_002dformula-1"><code>calc-embedded-close-new-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dplain"><code>calc-embedded-close-plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dclose_002dplain-1"><code>calc-embedded-close-plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dmode_002dhook"><code>calc-embedded-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dnew_002dbuffer_002dhook"><code>calc-embedded-new-buffer-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dnew_002dformula_002dhook"><code>calc-embedded-new-formula-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dclose_002dformula_002dalist"><code>calc-embedded-open-close-formula-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dclose_002dmode_002dalist"><code>calc-embedded-open-close-mode-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dclose_002dnew_002dformula_002dalist"><code>calc-embedded-open-close-new-formula-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dclose_002dplain_002dalist"><code>calc-embedded-open-close-plain-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dformula"><code>calc-embedded-open-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dformula-1"><code>calc-embedded-open-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dmode"><code>calc-embedded-open-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dmode-1"><code>calc-embedded-open-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dnew_002dformula"><code>calc-embedded-open-new-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dnew_002dformula-1"><code>calc-embedded-open-new-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dplain"><code>calc-embedded-open-plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dopen_002dplain-1"><code>calc-embedded-open-plain</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dword_002dregexp"><code>calc-embedded-word-regexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Embedded-Mode">Customizing Embedded Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dword_002dregexp-1"><code>calc-embedded-word-regexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dembedded_002dword_002dregexp_002dalist"><code>calc-embedded-word-regexp-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dend_002dhook"><code>calc-end-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dext_002dload_002dhook"><code>calc-ext-load-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002ddefault_002ddevice"><code>calc-gnuplot-default-device</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002ddefault_002doutput"><code>calc-gnuplot-default-output</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dname"><code>calc-gnuplot-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics">Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dname-1"><code>calc-gnuplot-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dplot_002dcommand"><code>calc-gnuplot-plot-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dplot_002dcommand-1"><code>calc-gnuplot-plot-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dprint_002dcommand"><code>calc-gnuplot-print-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dprint_002dcommand-1"><code>calc-gnuplot-print-command</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dprint_002ddevice"><code>calc-gnuplot-print-device</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgnuplot_002dprint_002doutput"><code>calc-gnuplot-print-output</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Devices">Devices</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgregorian_002dswitch"><code>calc-gregorian-switch</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhighlight_002dselections_002dwith_002dfaces"><code>calc-highlight-selections-with-faces</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Displaying-Selections">Displaying Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dhighlight_002dselections_002dwith_002dfaces-1"><code>calc-highlight-selections-with-faces</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlanguage_002dalist"><code>calc-language-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dload_002dhook"><code>calc-load-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlocal_002dvar_002dlist"><code>calc-local-var-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dfield_002dreference"><code>calc-lu-field-reference</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dfield_002dreference-1"><code>calc-lu-field-reference</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dpower_002dreference"><code>calc-lu-power-reference</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Logarithmic-Units">Logarithmic Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dlu_002dpower_002dreference-1"><code>calc-lu-power-reference</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode_002dhook"><code>calc-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode_002dmap"><code>calc-mode-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode_002dsave_002dhook"><code>calc-mode-save-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmode_002dvar_002dlist"><code>calc-mode-var-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dmultiplication_002dhas_002dprecedence"><code>calc-multiplication-has-precedence</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnonselected_002dface"><code>calc-nonselected-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Displaying-Selections">Displaying Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnonselected_002dface-1"><code>calc-nonselected-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnote_002dthreshold"><code>calc-note-threshold</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dother_002dmodes"><code>calc-other-modes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dreset_002dhook"><code>calc-reset-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselected_002dface"><code>calc-selected-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Displaying-Selections">Displaying Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselected_002dface-1"><code>calc-selected-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsettings_002dfile"><code>calc-settings-file</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstart_002dhook"><code>calc-start-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstore_002dvar_002dmap"><code>calc-store-var-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dmode_002dhook"><code>calc-trail-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtrail_002dwindow_002dhook"><code>calc-trail-window-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dundo_002dlength"><code>calc-undo-length</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-Calc">Customizing Calc</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dwindow_002dhook"><code>calc-window-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hooks">Hooks</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dY_002dhelp_002dmsgs"><code>calc-Y-help-msgs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CommuteRules"><code>CommuteRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Decls"><code>Decls</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaration-Basics">Declaration Basics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DistribRules"><code>DistribRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-e-2"><code>e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-e-3"><code>e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EvalRules"><code>EvalRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ExtSimpRules"><code>ExtSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-FactorRules"><code>FactorRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Polynomials">Polynomials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FitRules"><code>FitRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Curve-Fitting-Details">Curve Fitting Details</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma-1"><code>gamma</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma-2"><code>gamma</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GenCount"><code>GenCount</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Solutions">Multiple Solutions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Holidays"><code>Holidays</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Business-Days">Business Days</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-i-1"><code>i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-i-2"><code>i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complex-Formats">Complex Formats</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inf"><code>inf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IntegAfterRules"><code>IntegAfterRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-the-Integrator">Customizing the Integrator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IntegLimit"><code>IntegLimit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Integration">Integration</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IntegRules"><code>IntegRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-the-Integrator">Customizing the Integrator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IntegSimpRules"><code>IntegSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing-the-Integrator">Customizing the Integrator</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-InvertRules"><code>InvertRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-JumpRules"><code>JumpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-LineStyles"><code>LineStyles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002ddaylight_002dsavings_002dhook"><code>math-daylight-savings-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002dtzone_002dnames"><code>math-tzone-names</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MergeRules"><code>MergeRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Model1"><code>Model1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Nonlinear-Models">Standard Nonlinear Models</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Model2"><code>Model2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Nonlinear-Models">Standard Nonlinear Models</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Modes"><code>Modes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Modes-Variable">Modes Variable</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-nan"><code>nan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-NegateRules"><code>NegateRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rearranging-with-Selections">Rearranging with Selections</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-phi-1"><code>phi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi-1"><code>pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Variables">Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi-2"><code>pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scientific-Functions">Scientific Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PlotData1"><code>PlotData1</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PlotData2"><code>PlotData2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Managing-Curves">Managing Curves</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PlotRejects"><code>PlotRejects</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Graphics">Basic Graphics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PointStyles"><code>PointStyles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Graphics-Options">Graphics Options</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-q0"><code>q0</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-q9"><code>q9</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Storing-Variables">Storing Variables</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-RandSeed"><code>RandSeed</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Random-Numbers">Random Numbers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-remember-1"><code>remember</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Other-Features-of-Rewrite-Rules">Other Features of Rewrite Rules</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-TimeZone"><code>TimeZone</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-uinf"><code>uinf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Infinities">Infinities</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Units"><code>Units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User_002dDefined-Units">User-Defined Units</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UnitSimpRules"><code>UnitSimpRules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automatic-Rewrites">Automatic Rewrites</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Variable-Index_vr_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-U"><b>U</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Lisp-Function-Index"></a>
<div class="header">
<p>
Previous: <a href="#Variable-Index" accesskey="p" rel="prev">Variable Index</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Key-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-of-Lisp-Math-Functions"></a>
<h2 class="unnumbered">Index of Lisp Math Functions</h2>

<p>The following functions are meant to be used with <code>defmath</code>, not
<code>defun</code> definitions.  For names that do not start with &lsquo;<samp>calc-</samp>&rsquo;,
the corresponding full Lisp name is derived by adding a prefix of
&lsquo;<samp>math-</samp>&rsquo;.
</p>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Lisp-Function-Index_fn_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-fn" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-abs_002dapprox"><code>abs-approx</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-anglep"><code>anglep</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-apply_002drewrites"><code>apply-rewrites</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-beforep"><code>beforep</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-build_002dpolynomial_002dexpr"><code>build-polynomial-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-build_002dvector"><code>build-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dbinary_002dop"><code>calc-binary-op</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dchange_002dcurrent_002dselection"><code>calc-change-current-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcheck_002ddefines"><code>calc-check-defines</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Functions">Defining Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dclear_002dcommand_002dflag"><code>calc-clear-command-flag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dcursor_002dstack_002dindex"><code>calc-cursor-stack-index</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002ddo_002dalg_002dentry"><code>calc-do-alg-entry</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dencase_002datoms"><code>calc-encase-atoms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denter_002dresult"><code>calc-enter-result</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Stack-Commands">Defining Stack Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002denter_002dresult-1"><code>calc-enter-result</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002deval"><code>calc-eval</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dassoc_002dparent_002dformula"><code>calc-find-assoc-parent-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dnth_002dpart"><code>calc-find-nth-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dparent_002dformula"><code>calc-find-parent-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dselected_002dpart"><code>calc-find-selected-part</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dfind_002dsub_002dformula"><code>calc-find-sub-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dgrow_002dassoc_002dformula"><code>calc-grow-assoc-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dis_002dhyperbolic"><code>calc-is-hyperbolic</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dis_002dinverse"><code>calc-is-inverse</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dnormalize"><code>calc-normalize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpop_002dstack"><code>calc-pop-stack</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dprepare_002dselection"><code>calc-prepare-selection</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dpush_002dlist"><code>calc-push-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drecord_002dlist"><code>calc-record-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drecord_002dundo"><code>calc-record-undo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drecord_002dwhy"><code>calc-record-why</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002drefresh"><code>calc-refresh</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dreplace_002dsub_002dformula"><code>calc-replace-sub-formula</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dselect_002dbuffer"><code>calc-select-buffer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dcommand_002dflag"><code>calc-set-command-flag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dset_002dcommand_002dflag-1"><code>calc-set-command-flag</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Interactive-Lisp-Functions">Interactive Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dslow_002dwrapper"><code>calc-slow-wrapper</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Stack-Commands">Defining Stack Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dstack_002dsize"><code>calc-stack-size</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dsubstack_002dheight"><code>calc-substack-height</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtop_002dlist"><code>calc-top-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtop_002dlist_002dn"><code>calc-top-list-n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Stack-Commands">Defining Stack Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtop_002dlist_002dn-1"><code>calc-top-list-n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dtop_002dn"><code>calc-top-n</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dunary_002dop"><code>calc-unary-op</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Stack-Lisp-Functions">Stack Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-calc_002dwrapper"><code>calc-wrapper</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cancel_002dcommon_002dfactor"><code>cancel-common-factor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_002dunit_002dname"><code>check-unit-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-col_002dmatrix"><code>col-matrix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-common_002dconstant_002dfactor"><code>common-constant-factor</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002dascent"><code>comp-ascent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002ddescent"><code>comp-descent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002dfirst_002dchar"><code>comp-first-char</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002dheight"><code>comp-height</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002dlast_002dchar"><code>comp-last-char</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-comp_002dwidth"><code>comp-width</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-compare"><code>compare</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-compile_002drewrites"><code>compile-rewrites</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-complete"><code>complete</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Argument-Qualifiers">Argument Qualifiers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-complexp"><code>complexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-compose_002dexpr"><code>compose-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-composition_002dto_002dstring"><code>composition-to-string</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-constp"><code>constp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-convert_002dtemp"><code>convert-temp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Calling-Calc-from-Your-Programs">Calling Calc from Your Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-copy_002dmatrix"><code>copy-matrix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-defmath"><code>defmath</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Functions">Defining Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-deriv"><code>deriv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dimension_002derror"><code>dimension-error</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-div_002dmod"><code>div-mod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-e"><code>e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-equal"><code>equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-equal_002dint"><code>equal-int</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evaluate_002dexpr"><code>evaluate-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-evenp"><code>evenp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dcontains"><code>expr-contains</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dcontains_002dcount"><code>expr-contains-count</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dcontains_002dvars"><code>expr-contains-vars</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002ddepends"><code>expr-depends</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dheight"><code>expr-height</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dsubst"><code>expr-subst</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expr_002dweight"><code>expr-weight</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-extract_002dunits"><code>extract-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-fixnatnump"><code>fixnatnump</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fixnum"><code>fixnum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Argument-Qualifiers">Argument Qualifiers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fixnum-1"><code>fixnum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-fixnump"><code>fixnump</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-flatten_002dvector"><code>flatten-vector</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-float"><code>float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Argument-Qualifiers">Argument Qualifiers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-float-1"><code>float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-floatp"><code>floatp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-format_002dflat_002dexpr"><code>format-flat-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-format_002dnice_002dexpr"><code>format-nice-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-format_002dnumber"><code>format-number</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-format_002dvalue"><code>format-value</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-frac_002dgcd"><code>frac-gcd</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-from_002dhms"><code>from-hms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-from_002dradians"><code>from-radians</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-from_002dradians_002d2"><code>from-radians-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-full_002dcircle"><code>full-circle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-gamma_002dconst"><code>gamma-const</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-half_002dcircle"><code>half-circle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-idiv"><code>idiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idivmod"><code>idivmod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-imod"><code>imod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-inexact_002dvalue"><code>inexact-value</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integ"><code>integ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integer"><code>integer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Argument-Qualifiers">Argument Qualifiers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integer_002dlog2"><code>integer-log2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-integerp"><code>integerp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-interactive"><code>interactive</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Defining-Simple-Commands">Defining Simple Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-is_002dpolynomial"><code>is-polynomial</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-is_002dtrue"><code>is-true</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-isqrt"><code>isqrt</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-lessp"><code>lessp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ln_002d10"><code>ln-10</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ln_002d2"><code>ln-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-looks_002devenp"><code>looks-evenp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-looks_002dnegp"><code>looks-negp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dfloat"><code>make-float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dfrac"><code>make-frac</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dintv"><code>make-intv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dmod"><code>make-mod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dsdev"><code>make-sdev</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dvec"><code>make-vec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-map_002dtree"><code>map-tree</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-map_002dvec"><code>map-vec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-map_002dvec_002d2"><code>map-vec-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mat_002dcol"><code>mat-col</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mat_002ddimens"><code>mat-dimens</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mat_002dless_002dcol"><code>mat-less-col</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mat_002dless_002drow"><code>mat-less-row</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mat_002drow"><code>mat-row</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-match_002dpatterns"><code>match-patterns</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002dconcat"><code>math-concat</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002ddefcache"><code>math-defcache</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002ddefintegral"><code>math-defintegral</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002ddefintegral_002d2"><code>math-defintegral-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002ddefsimplify"><code>math-defsimplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002dequal"><code>math-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002dprev_002dweekday_002din_002dmonth"><code>math-prev-weekday-in-month</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-math_002dstd_002ddaylight_002dsavings"><code>math-std-daylight-savings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Time-Zones">Time Zones</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-matrixp"><code>matrixp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-messy_002dintegerp"><code>messy-integerp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-multi_002dsubst"><code>multi-subst</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-natnum"><code>natnum</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Argument-Qualifiers">Argument Qualifiers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-natnump"><code>natnump</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nearly_002dequal"><code>nearly-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nearly_002dzerop"><code>nearly-zerop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-negp"><code>negp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-normalize"><code>normalize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-num_002dintegerp"><code>num-integerp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-num_002dnatnump"><code>num-natnump</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-numberp"><code>numberp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-numdigs"><code>numdigs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-numvecp"><code>numvecp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-objectp"><code>objectp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-objvecp"><code>objvecp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oddp"><code>oddp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-overflow"><code>overflow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-phi"><code>phi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi"><code>pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi_002dover_002d180"><code>pi-over-180</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi_002dover_002d2"><code>pi-over-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pi_002dover_002d4"><code>pi-over-4</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-polar_002dcomplexp"><code>polar-complexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-poly_002dmix"><code>poly-mix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-poly_002dmul"><code>poly-mul</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-poly_002dsimplify"><code>poly-simplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-polynomial_002dbase"><code>polynomial-base</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-polynomial_002dp"><code>polynomial-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-posp"><code>posp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pow"><code>pow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pow_002dmod"><code>pow-mod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-power_002dof_002d2"><code>power-of-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prime_002dtest"><code>prime-test</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-primp"><code>primp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-quarter_002dcircle"><code>quarter-circle</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-quarter_002dinteger"><code>quarter-integer</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-quotient"><code>quotient</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-random_002ddigit"><code>random-digit</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-random_002ddigits"><code>random-digits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-random_002dfloat"><code>random-float</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ratp"><code>ratp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-read_002dexpr"><code>read-expr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-read_002dexprs"><code>read-exprs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-read_002dnumber"><code>read-number</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Formatting-Lisp-Functions">Formatting Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-realp"><code>realp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rect_002dcomplexp"><code>rect-complexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reduce_002dcols"><code>reduce-cols</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reduce_002dvec"><code>reduce-vec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reject_002darg"><code>reject-arg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-remove_002dunits"><code>remove-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rewrite"><code>rewrite</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rewrite_002dheads"><code>rewrite-heads</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-row_002dmatrix"><code>row-matrix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-scalarp"><code>scalarp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-scale_002dint"><code>scale-int</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-scale_002drounding"><code>scale-rounding</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-simplify"><code>simplify</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-simplify_002dextended"><code>simplify-extended</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-simplify_002dunits"><code>simplify-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-single_002dunits_002din_002dexpr_002dp"><code>single-units-in-expr-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-solve_002deqn"><code>solve-eqn</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-solve_002dfor"><code>solve-for</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-solve_002dsystem"><code>solve-system</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sort_002dintv"><code>sort-intv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sqr"><code>sqr</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sqrt_002de"><code>sqrt-e</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sqrt_002dtwo_002dpi"><code>sqrt-two-pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-square_002dmatrixp"><code>square-matrixp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-swap_002drows"><code>swap-rows</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-tderiv"><code>tderiv</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dfraction"><code>to-fraction</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dhms"><code>to-hms</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dradians"><code>to-radians</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dradians_002d2"><code>to-radians-2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dsimple_002dfraction"><code>to-simple-fraction</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-to_002dstandard_002dunits"><code>to-standard-units</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-transpose"><code>transpose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-two_002dpi"><code>two-pi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-underflow"><code>underflow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-units_002din_002dexpr_002dp"><code>units-in-expr-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Symbolic-Lisp-Functions">Symbolic Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-vec_002dlength"><code>vec-length</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vector-Lisp-Functions">Vector Lisp Functions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-vectorp"><code>vectorp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-with_002dextra_002dprec"><code>with-extra-prec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Computational-Lisp-Functions">Computational Lisp Functions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Lisp-Function-Index_fn_letter-Z">Z</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-zerop"><code>zerop</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Lisp-Function-Index_fn_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Lisp-Function-Index_fn_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>

<div class="footnote">
<hr>
<h4 class="footnotes-heading">Footnotes</h4>

<h3><a name="FOOT1" href="#DOCF1">(1)</a></h3>
<p>On MS-Windows, due to the peculiarities of how the Windows version of
GNUPLOT (called <code>wgnuplot</code>) works, the GNUPLOT responses are
not communicated back to Calc.  Instead, you need to look them up in
the GNUPLOT command window that is displayed as in normal interactive
usage of GNUPLOT.
</p>
</div>
<hr>



</body>
</html>
