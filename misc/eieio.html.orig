<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This manual documents EIEIO, an object framework for Emacs Lisp.

Copyright (C) 2007-2017 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual." -->
<!-- Created by GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Enhanced Implementation of Emacs Interpreted Objects</title>

<meta name="description" content="Enhanced Implementation of Emacs Interpreted Objects">
<meta name="keywords" content="Enhanced Implementation of Emacs Interpreted Objects">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<link href="#Top" rel="start" title="Top">
<link href="#Function-Index" rel="index" title="Function Index">
<link href="#SEC_Contents" rel="contents" title="Table of Contents">
<link href="dir.html#Top" rel="up" title="(dir)">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.indentedblock {margin-right: 0em}
blockquote.smallindentedblock {margin-right: 0em; font-size: smaller}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smalllisp {margin-left: 3.2em}
kbd {font-style: oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nolinebreak {white-space: nowrap}
span.roman {font-family: initial; font-weight: normal}
span.sansserif {font-family: sans-serif; font-weight: normal}
ul.no-bullet {list-style: none}
-->
</style>


</head>

<body lang="en">
<h1 class="settitle" align="center">Enhanced Implementation of Emacs Interpreted Objects</h1>






<a name="Top"></a>
<div class="header">
<p>
Next: <a href="#Quick-Start" accesskey="n" rel="next">Quick Start</a>, Up: <a href="dir.html#Top" accesskey="u" rel="up">(dir)</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="EIEIO"></a>
<h1 class="top">EIEIO</h1>

<p><i>EIEIO</i> (&ldquo;Enhanced Implementation of Emacs Interpreted Objects&rdquo;)
provides an Object Oriented layer for Emacs Lisp, following the basic
concepts of the Common Lisp Object System (CLOS).  It provides a
framework for writing object-oriented applications in Emacs.
</p>
<p>This manual documents EIEIO, an object framework for Emacs Lisp.
</p>
<p>Copyright &copy; 2007&ndash;2017 Free Software Foundation, Inc.
</p>
<blockquote>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being &ldquo;A GNU Manual,&rdquo;
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled &ldquo;GNU Free Documentation License.&rdquo;
</p>
<p>(a) The FSF&rsquo;s Back-Cover Text is: &ldquo;You have the freedom to copy and
modify this GNU manual.&rdquo;
</p></blockquote>


<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Quick-Start" accesskey="1">Quick Start</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Quick start for EIEIO.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Introduction" accesskey="2">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why use <i>EIEIO</i>?  Basic overview, samples list.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Building-Classes" accesskey="3">Building Classes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to write new class structures.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Making-New-Objects" accesskey="4">Making New Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to construct new objects.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Accessing-Slots" accesskey="5">Accessing Slots</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to access a slot.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Writing-Methods" accesskey="6">Writing Methods</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to write a method.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Method-Invocation" accesskey="7">Method Invocation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How methods are invoked.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Predicates" accesskey="8">Predicates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Class-p, Object-p, etc-p.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Association-Lists" accesskey="9">Association Lists</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">List of objects as association lists.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Customizing">Customizing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customizing objects.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Introspection">Introspection</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Looking inside a class.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Base-Classes">Base Classes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Additional classes you can inherit from.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Browsing">Browsing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Browsing your class lists.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Class-Values">Class Values</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying information about a class or object.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Default-Superclass">Default Superclass</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The root superclasses.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Signals">Signals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">When you make errors.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Naming-Conventions">Naming Conventions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Name your objects in an Emacs friendly way.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#CLOS-compatibility">CLOS compatibility</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What are the differences?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Wish-List">Wish List</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Things about EIEIO that could be improved.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The license for this documentation.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Function-Index">Function Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Quick-Start"></a>
<div class="header">
<p>
Next: <a href="#Introduction" accesskey="n" rel="next">Introduction</a>, Previous: <a href="#Top" accesskey="p" rel="prev">Top</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Quick-Start-1"></a>
<h2 class="chapter">1 Quick Start</h2>

<p><i>EIEIO</i> provides an Object Oriented layer for Emacs Lisp.  You can
use <i>EIEIO</i> to create classes, methods for those classes, and
instances of classes.
</p>
<p>Here is a simple example of a class named <code>record</code>, containing
three slots named <code>name</code>, <code>birthday</code>, and <code>phone</code>:
</p>
<div class="example">
<pre class="example">(defclass record () ; No superclasses
  ((name :initarg :name
         :initform &quot;&quot;
         :type string
         :custom string
         :documentation &quot;The name of a person.&quot;)
   (birthday :initarg :birthday
             :initform &quot;Jan 1, 1970&quot;
             :custom string
             :type string
             :documentation &quot;The person's birthday.&quot;)
   (phone :initarg :phone
          :initform &quot;&quot;
          :documentation &quot;Phone number.&quot;))
  &quot;A single record for tracking people I know.&quot;)
</pre></div>

<p>Each class can have methods, which are defined like this:
</p>
<div class="example">
<pre class="example">(cl-defmethod call-record ((rec record) &amp;optional scriptname)
  &quot;Dial the phone for the record REC.
Execute the program SCRIPTNAME to dial the phone.&quot;
  (message &quot;Dialing the phone for %s&quot;  (oref rec name))
  (shell-command (concat (or scriptname &quot;dialphone.sh&quot;)
                         &quot; &quot;
                         (oref rec phone))))
</pre></div>

<p>In this example, the first argument to <code>call-record</code> is a list,
of the form (<var>varname</var> <var>classname</var>).  <var>varname</var> is the
name of the variable used for the first argument; <var>classname</var> is
the name of the class that is expected as the first argument for this
method.
</p>
<p><i>EIEIO</i> dispatches methods based on the type of the first argument.
You can have multiple methods with the same name for different classes
of object.  When the <code>call-record</code> method is called, the first
argument is examined to determine the class of that argument, and the
method matching the input type is then executed.
</p>
<p>Once the behavior of a class is defined, you can create a new
object of type <code>record</code>.  Objects are created by calling the
constructor.  The constructor is a function with the same name as your
class which returns a new instance of that class.  Here is an example:
</p>
<div class="example">
<pre class="example">(setq rec (record :name &quot;Eric&quot; :birthday &quot;June&quot; :phone &quot;555-5555&quot;))
</pre></div>

<p>For backward compatibility reasons, the first argument can be a string (a name
given to this instance).  Each instance used to be given a name, so different
instances could be easily distinguished when debugging.
</p>
<p>It can be a bit repetitive to also have a :name slot.  To avoid doing
this, it is sometimes handy to use the base class <code>eieio-named</code>.
See <a href="#eieio_002dnamed">eieio-named</a>.
</p>
<p>Calling methods on an object is a lot like calling any function.  The
first argument should be an object of a class which has had this
method defined for it.  In this example it would look like this:
</p>
<div class="example">
<pre class="example">(call-record rec)
</pre></div>

<p>or
</p>
<div class="example">
<pre class="example">(call-record rec &quot;my-call-script&quot;)
</pre></div>

<p>In these examples, <i>EIEIO</i> automatically examines the class of
<code>rec</code>, and ensures that the method defined above is called.  If
<code>rec</code> is some other class lacking a <code>call-record</code> method, or
some other data type, Emacs signals a <code>cl-no-applicable-method</code>
error.  <a href="#Signals">Signals</a>.
</p>
<hr>
<a name="Introduction"></a>
<div class="header">
<p>
Next: <a href="#Building-Classes" accesskey="n" rel="next">Building Classes</a>, Previous: <a href="#Quick-Start" accesskey="p" rel="prev">Quick Start</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introduction-1"></a>
<h2 class="chapter">2 Introduction</h2>

<p>First off, please note that this manual cannot serve as a complete
introduction to object oriented programming and generic functions in
LISP.  Although EIEIO is not a complete implementation of the Common
Lisp Object System (CLOS) and also differs from it in several aspects,
it follows the same basic concepts.  Therefore, it is highly
recommended to learn those from a textbook or tutorial first,
especially if you only know OOP from languages like C++ or Java.  If
on the other hand you are already familiar with CLOS, you should be
aware that <i>EIEIO</i> does not implement the full CLOS specification and
also differs in some other aspects which are mentioned below (also
see <a href="#CLOS-compatibility">CLOS compatibility</a>).
</p>
<p><i>EIEIO</i> supports the following features:
</p>
<ol>
<li> A structured framework for the creation of basic classes with attributes
and methods using singular inheritance similar to CLOS.
</li><li> Type checking, and slot unbinding.
</li><li> Method definitions similar to CLOS.
</li><li> Simple and complex class browsers.
</li><li> Edebug support for methods.
</li><li> Imenu updates.
</li><li> Byte compilation support of methods.
</li><li> Help system extensions for classes and methods.
</li><li> Several base classes for interesting tasks.
</li><li> Simple test suite.
</li><li> Public and private classifications for slots (extensions to CLOS)
</li><li> Customization support in a class (extension to CLOS)
</li></ol>

<p>Due to restrictions in the Emacs Lisp language, CLOS cannot be
completely supported, and a few functions have been added in place of
setf.  Here are some important CLOS features that <i>EIEIO</i> presently
lacks:
</p>
<dl compact="compact">
<dt>Method dispatch</dt>
<dd><p>EIEO does not support method dispatch for built-in types and multiple
arguments types.  In other words, method dispatch only looks at the
first argument, and this one must be an <i>EIEIO</i> type.
</p>
</dd>
<dt>Support for metaclasses</dt>
<dd><p>There is just one default metaclass, <code>eieio-default-superclass</code>,
and you cannot define your own.  The <code>:metaclass</code> tag in
<code>defclass</code> is ignored.  Also, functions like <code>find-class</code>, which
should return instances of the metaclass, behave differently in
<i>EIEIO</i> in that they return symbols or plain structures instead.
</p>
</dd>
<dt>EQL specialization</dt>
<dd><p>EIEIO does not support it.
</p>
</dd>
<dt><code>:around</code> method tag</dt>
<dd><p>This CLOS method tag is non-functional.
</p>
</dd>
<dt>:default-initargs in <code>defclass</code></dt>
<dd><p>Each slot can have an <code>:initform</code> tag, so this is not really necessary.
</p>
</dd>
<dt>Mock object initializers</dt>
<dd><p>Each class contains a mock object used for fast initialization of
instantiated objects.  Using functions with side effects on object slot
values can potentially cause modifications in the mock object.  <i>EIEIO</i>
should use a deep copy but currently does not.
</p>
</dd>
</dl>

<hr>
<a name="Building-Classes"></a>
<div class="header">
<p>
Next: <a href="#Making-New-Objects" accesskey="n" rel="next">Making New Objects</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Classes-1"></a>
<h2 class="chapter">3 Building Classes</h2>

<p>A <em>class</em> is a definition for organizing data and methods
together.  An <i>EIEIO</i> class has structures similar to the classes
found in other object-oriented (OO) languages.
</p>
<p>To create a new class, use the <code>defclass</code> macro:
</p>
<dl>
<dt><a name="index-defclass"></a>Macro: <strong>defclass</strong> <em>class-name superclass-list slot-list &amp;rest options-and-doc</em></dt>
<dd>
<p>Create a new class named <var>class-name</var>.  The class is represented
by a symbol with the name <var>class-name</var>.  <i>EIEIO</i> stores the structure of
the class as a symbol property of <var>class-name</var> (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Components">Symbol
Components</a> in <cite>GNU Emacs Lisp Reference Manual</cite>).
</p>
<p>The <var>class-name</var> symbol&rsquo;s variable documentation string is a
modified version of the doc string found in <var>options-and-doc</var>.
Each time a method is defined, the symbol&rsquo;s documentation string is
updated to include the methods documentation as well.
</p>
<p>The parent classes for <var>class-name</var> is <var>superclass-list</var>.
Each element of <var>superclass-list</var> must be a class.  These classes
are the parents of the class being created.  Every slot that appears
in each parent class is replicated in the new class.
</p>
<p>If two parents share the same slot name, the parent which appears in
the <var>superclass-list</var> first sets the tags for that slot.  If the
new class has a slot with the same name as the parent, the new slot
overrides the parent&rsquo;s slot.
</p>
<p>When overriding a slot, some slot attributes cannot be overridden
because they break basic OO rules.  You cannot override <code>:type</code>
or <code>:protection</code>.
</p></dd></dl>

<p>Whenever defclass is used to create a new class, a predicate is
created for it, named <code><var>CLASS-NAME</var>-p</code>:
</p>
<dl>
<dt><a name="index-CLASS_002dNAME_002dp"></a>Function: <strong>CLASS-NAME-p</strong> <em>object</em></dt>
<dd><p>Return non-<code>nil</code> if and only if <var>OBJECT</var> is of the class
<var>CLASS-NAME</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002derror_002dunsupported_002dclass_002dtags"></a>Variable: <strong>eieio-error-unsupported-class-tags</strong></dt>
<dd><p>If non-<code>nil</code>, <code>defclass</code> signals an error if a tag in a slot
specifier is unsupported.
</p>
<p>This option is here to support programs written with older versions of
<i>EIEIO</i>, which did not produce such errors.
</p></dd></dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Inheritance" accesskey="1">Inheritance</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to specify parents classes.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Slot-Options" accesskey="2">Slot Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to specify features of a slot.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Class-Options" accesskey="3">Class Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to specify features for this class.
</td></tr>
</table>

<hr>
<a name="Inheritance"></a>
<div class="header">
<p>
Next: <a href="#Slot-Options" accesskey="n" rel="next">Slot Options</a>, Up: <a href="#Building-Classes" accesskey="u" rel="up">Building Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Inheritance-1"></a>
<h3 class="section">3.1 Inheritance</h3>

<p><em>Inheritance</em> is a basic feature of an object-oriented language.
In <i>EIEIO</i>, a defined class specifies the super classes from which it
inherits by using the second argument to <code>defclass</code>.  Here is an
example:
</p>
<div class="example">
<pre class="example">(defclass my-baseclass ()
   ((slot-A :initarg :slot-A)
    (slot-B :initarg :slot-B))
  &quot;My Baseclass.&quot;)
</pre></div>

<p>To subclass from <code>my-baseclass</code>, we specify it in the superclass
list:
</p>
<div class="example">
<pre class="example">(defclass my-subclass (my-baseclass)
   ((specific-slot-A :initarg specific-slot-A)
    )
   &quot;My subclass of my-baseclass&quot;)
</pre></div>

<p>Instances of <code>my-subclass</code> will inherit <code>slot-A</code> and
<code>slot-B</code>, in addition to having <code>specific-slot-A</code> from the
declaration of <code>my-subclass</code>.
</p>
<p><i>EIEIO</i> also supports multiple inheritance.  Suppose we define a
second baseclass, perhaps an &ldquo;interface&rdquo; class, like this:
</p>
<div class="example">
<pre class="example">(defclass my-interface ()
   ((interface-slot :initarg :interface-slot))
   &quot;An interface to special behavior.&quot;
   :abstract t)
</pre></div>

<p>The interface class defines a special <code>interface-slot</code>, and also
specifies itself as abstract.  Abstract classes cannot be
instantiated.  It is not required to make interfaces abstract, but it
is a good programming practice.
</p>
<p>We can now modify our definition of <code>my-subclass</code> to use this
interface class, together with our original base class:
</p>
<div class="example">
<pre class="example">(defclass my-subclass (my-baseclass my-interface)
   ((specific-slot-A :initarg specific-slot-A)
    )
   &quot;My subclass of my-baseclass&quot;)
</pre></div>

<p>With this, <code>my-subclass</code> also has <code>interface-slot</code>.
</p>
<p>If <code>my-baseclass</code> and <code>my-interface</code> had slots with the same
name, then the superclass showing up in the list first defines the
slot attributes.
</p>
<p>Inheritance in <i>EIEIO</i> is more than just combining different slots.
It is also important in method invocation.  <a href="#Methods">Methods</a>.
</p>
<p>If a method is called on an instance of <code>my-subclass</code>, and that
method only has an implementation on <code>my-baseclass</code>, or perhaps
<code>my-interface</code>, then the implementation for the baseclass is
called.
</p>
<p>If there is a method implementation for <code>my-subclass</code>, and
another in <code>my-baseclass</code>, the implementation for
<code>my-subclass</code> can call up to the superclass as well.
</p>
<hr>
<a name="Slot-Options"></a>
<div class="header">
<p>
Next: <a href="#Class-Options" accesskey="n" rel="next">Class Options</a>, Previous: <a href="#Inheritance" accesskey="p" rel="prev">Inheritance</a>, Up: <a href="#Building-Classes" accesskey="u" rel="up">Building Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Slot-Options-1"></a>
<h3 class="section">3.2 Slot Options</h3>

<p>The <var>slot-list</var> argument to <code>defclass</code> is a list of elements
where each element defines one slot.  Each slot is a list of the form
</p>
<div class="example">
<pre class="example">  (SLOT-NAME :TAG1 ATTRIB-VALUE1
             :TAG2 ATTRIB-VALUE2
             :TAGN ATTRIB-VALUEN)
</pre></div>

<p>where <var>SLOT-NAME</var> is a symbol that will be used to refer to the
slot.  <var>:TAG</var> is a symbol that describes a feature to be set
on the slot.  <var>ATTRIB-VALUE</var> is a lisp expression that will be
used for <var>:TAG</var>.
</p>
<p>Valid tags are:
</p>
<dl compact="compact">
<dt><code>:initarg</code></dt>
<dd><p>A symbol that can be used in the argument list of the constructor to
specify a value for this slot of the new instance being created.
</p>
<p>A good symbol to use for initarg is one that starts with a colon <code>:</code>.
</p>
<p>The slot specified like this:
</p><div class="example">
<pre class="example">  (myslot :initarg :myslot)
</pre></div>
<p>could then be initialized to the number 1 like this:
</p><div class="example">
<pre class="example">  (myobject :myslot 1)
</pre></div>

<p>See <a href="#Making-New-Objects">Making New Objects</a>.
</p>
</dd>
<dt><code>:initform</code></dt>
<dd><p>An expression used as the default value for this slot.
</p>
<p>If <code>:initform</code> is left out, that slot defaults to being unbound.
It is an error to reference an unbound slot, so if you need
slots to always be in a bound state, you should always use an
<code>:initform</code> specifier.
</p>
<p>Use <code>slot-boundp</code> to test if a slot is unbound
(see <a href="#Predicates">Predicates</a>).  Use <code>slot-makeunbound</code> to set a slot to
being unbound after giving it a value (see <a href="#Accessing-Slots">Accessing Slots</a>).
</p>
<p>The value passed to initform used to be automatically quoted.  Thus,
</p><div class="example">
<pre class="example">:initform (1 2 3)
</pre></div>
<p>will use the list as a value.  This is incompatible with CLOS (which would
signal an error since 1 is not a valid function) and will likely change in the
future, so better quote your initforms if they&rsquo;re just values.
</p>
</dd>
<dt><code>:type</code></dt>
<dd><p>An unquoted type specifier used to validate data set into this slot.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/cl.html#Type-Predicates">Type Predicates</a> in <cite>Common Lisp Extensions</cite>.
Here are some examples:
 </p><dl compact="compact">
<dt><code>symbol</code></dt>
<dd><p>A symbol.
 </p></dd>
<dt><code>number</code></dt>
<dd><p>A number type
 </p></dd>
<dt><code>my-class-name</code></dt>
<dd><p>An object of your class type.
 </p></dd>
<dt><code>(or null symbol)</code></dt>
<dd><p>A symbol, or <code>nil</code>.
 </p></dd>
</dl>

</dd>
<dt><code>:allocation</code></dt>
<dd><p>Either :class or :instance (defaults to :instance) used to
specify how data is stored.  Slots stored per instance have unique
values for each object.  Slots stored per class have shared values for
each object.  If one object changes a :class allocated slot, then all
objects for that class gain the new value.
</p>
</dd>
<dt><code>:documentation</code></dt>
<dd><p>Documentation detailing the use of this slot.  This documentation is
exposed when the user describes a class, and during customization of an
object.
</p>
</dd>
<dt><code>:accessor</code></dt>
<dd><p>Name of a generic function which can be used to fetch the value of this slot.
You can call this function later on your object and retrieve the value
of the slot.
</p>
<p>This option is in the CLOS spec, but is not fully compliant in <i>EIEIO</i>.
</p>
</dd>
<dt><code>:writer</code></dt>
<dd><p>Name of a generic function which will write this slot.
</p>
<p>This option is in the CLOS spec, but is not fully compliant in <i>EIEIO</i>.
</p>
</dd>
<dt><code>:reader</code></dt>
<dd><p>Name of a generic function which will read this slot.
</p>
<p>This option is in the CLOS spec, but is not fully compliant in <i>EIEIO</i>.
</p>
</dd>
<dt><code>:custom</code></dt>
<dd><p>A custom :type specifier used when editing an object of this type.
See documentation for <code>defcustom</code> for details.  This specifier is
equivalent to the :type spec of a <code>defcustom</code> call.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:label</code></dt>
<dd><p>When customizing an object, the value of :label will be used instead
of the slot name.  This enables better descriptions of the data than
would usually be afforded.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:group</code></dt>
<dd><p>Similar to <code>defcustom</code>&rsquo;s :group command, this organizes different
slots in an object into groups.  When customizing an object, only the
slots belonging to a specific group need be worked with, simplifying the
size of the display.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:printer</code></dt>
<dd><p>This routine takes a symbol which is a function name.  The function
should accept one argument.  The argument is the value from the slot
to be printed.  The function in <code>object-write</code> will write the
slot value out to a printable form on <code>standard-output</code>.
</p>
<p>The output format MUST be something that could in turn be interpreted
with <code>read</code> such that the object can be brought back in from the
output stream.  Thus, if you wanted to output a symbol, you would need
to quote the symbol.  If you wanted to run a function on load, you
can output the code to do the construction of the value.
</p>
</dd>
<dt><code>:protection</code></dt>
<dd><p>This is an old option that is not supported any more.
</p>
<p>When using a slot referencing function such as <code>slot-value</code>, and
the value behind <var>slot</var> is private or protected, then the current
scope of operation must be within a method of the calling object.
</p>
<p>This protection is not enforced by the code any more, so it&rsquo;s only useful
as documentation.
</p>
<p>Valid values are:
</p>
<dl compact="compact">
<dt><code>:public</code></dt>
<dd><p>Access this slot from any scope.
</p></dd>
<dt><code>:protected</code></dt>
<dd><p>Access this slot only from methods of the same class or a child class.
</p></dd>
<dt><code>:private</code></dt>
<dd><p>Access this slot only from methods of the same class.
</p></dd>
</dl>

<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
</dl>

<hr>
<a name="Class-Options"></a>
<div class="header">
<p>
Previous: <a href="#Slot-Options" accesskey="p" rel="prev">Slot Options</a>, Up: <a href="#Building-Classes" accesskey="u" rel="up">Building Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Class-Options-1"></a>
<h3 class="section">3.3 Class Options</h3>

<p>In the <var>options-and-doc</var> arguments to <code>defclass</code>, the
following class options may be specified:
</p>
<dl compact="compact">
<dt><code>:documentation</code></dt>
<dd><p>A documentation string for this class.
</p>
<p>If an Emacs-style documentation string is also provided, then this
option is ignored.  An Emacs-style documentation string is not
prefixed by the <code>:documentation</code> tag, and appears after the list
of slots, and before the options.
</p>
</dd>
<dt><code>:allow-nil-initform</code></dt>
<dd><p>If this option is non-<code>nil</code>, and the <code>:initform</code> is <code>nil</code>, but
the <code>:type</code> is specifies something such as <code>string</code> then allow
this to pass.  The default is to have this option be off.  This is
implemented as an alternative to unbound slots.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:abstract</code></dt>
<dd><p>A class which is <code>:abstract</code> cannot be instantiated, and instead
is used to define an interface which subclasses should implement.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:custom-groups</code></dt>
<dd><p>This is a list of groups that can be customized within this class.  This
slot is auto-generated when a class is created and need not be
specified.  It can be retrieved with the <code>class-option</code> command,
however, to see what groups are available.
</p>
<p>This option is specific to Emacs, and is not in the CLOS spec.
</p>
</dd>
<dt><code>:method-invocation-order</code></dt>
<dd><p>This controls the order in which method resolution occurs for
methods in cases of multiple inheritance.  The order
affects which method is called first in a tree, and if
<code>cl-call-next-method</code> is used, it controls the order in which the
stack of methods are run.
</p>
<p>Valid values are:
</p>
<dl compact="compact">
<dt><code>:breadth-first</code></dt>
<dd><p>Search for methods in the class hierarchy in breadth first order.
This is the default.
</p></dd>
<dt><code>:depth-first</code></dt>
<dd><p>Search for methods in the class hierarchy in a depth first order.
</p></dd>
<dt><code>:c3</code></dt>
<dd><p>Searches for methods in a linearized way that most closely matches
what CLOS does when a monotonic class structure is defined.
</p></dd>
</dl>

<p>See <a href="#Method-Invocation">Method Invocation</a>, for more on method invocation order.
</p>
</dd>
<dt><code>:metaclass</code></dt>
<dd><p>Unsupported CLOS option.  Enables the use of a different base class other
than <code>standard-class</code>.
</p>
</dd>
<dt><code>:default-initargs</code></dt>
<dd><p>Unsupported CLOS option.  Specifies a list of initargs to be used when
creating new objects.  As far as I can tell, this duplicates the
function of <code>:initform</code>.
</p></dd>
</dl>

<p>See <a href="#CLOS-compatibility">CLOS compatibility</a>, for more details on CLOS tags versus
<i>EIEIO</i>-specific tags.
</p>
<hr>
<a name="Making-New-Objects"></a>
<div class="header">
<p>
Next: <a href="#Accessing-Slots" accesskey="n" rel="next">Accessing Slots</a>, Previous: <a href="#Building-Classes" accesskey="p" rel="prev">Building Classes</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Making-New-Objects-1"></a>
<h2 class="chapter">4 Making New Objects</h2>

<p>Suppose we have a simple class is defined, such as:
</p>
<div class="example">
<pre class="example">(defclass record ()
   ( ) &quot;Doc String&quot;)
</pre></div>

<p>It is now possible to create objects of that class type.
</p>
<p>Calling <code>defclass</code> has defined two new functions.  One is the
constructor <var>record</var>, and the other is the predicate,
<var>record</var>-p.
</p>
<dl>
<dt><a name="index-record"></a>Function: <strong>record</strong> <em>object-name &amp;rest slots</em></dt>
<dd>
<p>This creates and returns a new object.  This object is not assigned to
anything, and will be garbage collected if not saved.  This object
will be given the string name <var>object-name</var>.  There can be
multiple objects of the same name, but the name slot provides a handy
way to keep track of your objects.  <var>slots</var> is just all the slots
you wish to preset.  Any slot set as such <em>will not</em> get its
default value, and any side effects from a slot&rsquo;s <code>:initform</code>
that may be a function will not occur.
</p>
<p>An example pair would appear simply as <code>:value 1</code>.  Of course you
can do any valid Lispy thing you want with it, such as
<code>:value (if (boundp 'special-symbol) special-symbol nil)</code>
</p>
<p>Example of creating an object from a class:
</p>
<div class="example">
<pre class="example">(record :value 3 :reference nil)
</pre></div>

</dd></dl>

<p>To create an object from a class symbol, use <code>make-instance</code>.
</p>
<dl>
<dt><a name="index-make_002dinstance"></a>Function: <strong>make-instance</strong> <em>class &amp;rest initargs</em></dt>
<dd><a name="make_002dinstance"></a><p>Make a new instance of <var>class</var> based on <var>initargs</var>.
<var>class</var> is a class symbol.  For example:
</p>
<div class="example">
<pre class="example">  (make-instance 'foo)
</pre></div>

<p><var>initargs</var> is a property list with keywords based on the <code>:initarg</code>
for each slot.  For example:
</p>
<div class="example">
<pre class="example">  (make-instance <code>'foo</code> <code>:slot1</code> value1 <code>:slotN</code> valueN)
</pre></div>

</dd></dl>

<hr>
<a name="Accessing-Slots"></a>
<div class="header">
<p>
Next: <a href="#Writing-Methods" accesskey="n" rel="next">Writing Methods</a>, Previous: <a href="#Making-New-Objects" accesskey="p" rel="prev">Making New Objects</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Accessing-Slots-1"></a>
<h2 class="chapter">5 Accessing Slots</h2>

<p>There are several ways to access slot values in an object.  The naming
and argument-order conventions are similar to those used for
referencing vectors (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Vectors">Vectors</a> in <cite>GNU Emacs Lisp Reference
Manual</cite>).
</p>
<dl>
<dt><a name="index-oset"></a>Macro: <strong>oset</strong> <em>object slot value</em></dt>
<dd><p>This macro sets the value behind <var>slot</var> to <var>value</var> in
<var>object</var>.  It returns <var>value</var>.
</p></dd></dl>

<dl>
<dt><a name="index-oset_002ddefault"></a>Macro: <strong>oset-default</strong> <em>class slot value</em></dt>
<dd><p>This macro sets the value for the class-allocated <var>slot</var> in <var>class</var> to
<var>value</var>.
</p>
<p>For example, if a user wanted all <code>data-objects</code> (see <a href="#Building-Classes">Building Classes</a>) to inform a special object of his own devising when they
changed, this can be arranged by simply executing this bit of code:
</p>
<div class="example">
<pre class="example">(oset-default data-object reference (list my-special-object))
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-oref"></a>Macro: <strong>oref</strong> <em>obj slot</em></dt>
<dd><a name="oref"></a><p>Retrieve the value stored in <var>obj</var> in the slot named by <var>slot</var>.
Slot is the name of the slot when created by <em>defclass</em>.
</p></dd></dl>

<dl>
<dt><a name="index-oref_002ddefault"></a>Macro: <strong>oref-default</strong> <em>class slot</em></dt>
<dd><a name="oref_002ddefault"></a><p>Get the value of the class-allocated <var>slot</var> from <var>class</var>.
</p></dd></dl>

<p>The following accessors are defined by CLOS to reference or modify
slot values, and use the previously mentioned set/ref routines.
</p>
<dl>
<dt><a name="index-slot_002dvalue"></a>Function: <strong>slot-value</strong> <em>object slot</em></dt>
<dd><a name="slot_002dvalue"></a><p>This function retrieves the value of <var>slot</var> from <var>object</var>.
Unlike <code>oref</code>, the symbol for <var>slot</var> must be quoted.
</p></dd></dl>

<dl>
<dt><a name="index-set_002dslot_002dvalue"></a>Function: <strong>set-slot-value</strong> <em>object slot value</em></dt>
<dd><a name="set_002dslot_002dvalue"></a><p>This is not a CLOS function, but is the setter for <code>slot-value</code>
used by the <code>setf</code> macro.  This
function sets the value of <var>slot</var> from <var>object</var>.  Unlike
<code>oset</code>, the symbol for <var>slot</var> must be quoted.
</p></dd></dl>

<dl>
<dt><a name="index-slot_002dmakeunbound"></a>Function: <strong>slot-makeunbound</strong> <em>object slot</em></dt>
<dd><p>This function unbinds <var>slot</var> in <var>object</var>.  Referencing an
unbound slot can signal an error.
</p></dd></dl>

<dl>
<dt><a name="index-object_002dadd_002dto_002dlist"></a>Function: <strong>object-add-to-list</strong> <em>object slot item &amp;optional append</em></dt>
<dd><a name="object_002dadd_002dto_002dlist"></a><p>In OBJECT&rsquo;s <var>slot</var>, add <var>item</var> to the list of elements.
Optional argument <var>append</var> indicates we need to append to the list.
If <var>item</var> already exists in the list in <var>slot</var>, then it is not added.
Comparison is done with <em>equal</em> through the <em>member</em> function call.
If <var>slot</var> is unbound, bind it to the list containing <var>item</var>.
</p></dd></dl>

<dl>
<dt><a name="index-object_002dremove_002dfrom_002dlist"></a>Function: <strong>object-remove-from-list</strong> <em>object slot item</em></dt>
<dd><a name="object_002dremove_002dfrom_002dlist"></a><p>In OBJECT&rsquo;s <var>slot</var>, remove occurrences of <var>item</var>.
Deletion is done with <em>delete</em>, which deletes by side effect
and comparisons are done with <em>equal</em>.
If <var>slot</var> is unbound, do nothing.
</p></dd></dl>

<dl>
<dt><a name="index-with_002dslots"></a>Function: <strong>with-slots</strong> <em>spec-list object &amp;rest body</em></dt>
<dd><a name="with_002dslots"></a><p>Bind <var>spec-list</var> lexically to slot values in <var>object</var>, and execute <var>body</var>.
This establishes a lexical environment for referring to the slots in
the instance named by the given slot-names as though they were
variables.  Within such a context the value of the slot can be
specified by using its slot name, as if it were a lexically bound
variable.  Both <code>setf</code> and <code>setq</code> can be used to set the value of the
slot.
</p>
<p><var>spec-list</var> is of a form similar to <em>let</em>.  For example:
</p>
<div class="example">
<pre class="example">  ((VAR1 SLOT1)
    SLOT2
    SLOTN
   (VARN+1 SLOTN+1))
</pre></div>

<p>Where each <var>var</var> is the local variable given to the associated
<var>slot</var>.  A slot specified without a variable name is given a
variable name of the same name as the slot.
</p>
<div class="example">
<pre class="example">(defclass myclass () (x :initform 1))
(setq mc (make-instance 'myclass))
(with-slots (x) mc x)                      =&gt; 1
(with-slots ((something x)) mc something)  =&gt; 1
</pre></div>
</dd></dl>

<hr>
<a name="Writing-Methods"></a>
<div class="header">
<p>
Next: <a href="#Method-Invocation" accesskey="n" rel="next">Method Invocation</a>, Previous: <a href="#Accessing-Slots" accesskey="p" rel="prev">Accessing Slots</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Writing-Methods-1"></a>
<h2 class="chapter">6 Writing Methods</h2>

<p>Writing a method in <i>EIEIO</i> is similar to writing a function.  The
differences are that there are some extra options and there can be
multiple definitions under the same function symbol.
</p>
<p>Where a method defines an implementation for a particular data type, a
<em>generic method</em> accepts any argument, but contains no code.  It
is used to provide the dispatching to the defined methods.  A generic
method has no body, and is merely a symbol upon which methods are
attached.  It also provides the base documentation for what methods
with that name do.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Generics" accesskey="1">Generics</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Methods" accesskey="2">Methods</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Static-Methods" accesskey="3">Static Methods</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Generics"></a>
<div class="header">
<p>
Next: <a href="#Methods" accesskey="n" rel="next">Methods</a>, Up: <a href="#Writing-Methods" accesskey="u" rel="up">Writing Methods</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Generics-1"></a>
<h3 class="section">6.1 Generics</h3>

<p>Each <i>EIEIO</i> method has one corresponding generic.  This generic
provides a function binding and the base documentation for the method
symbol (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Components">Symbol Components</a> in <cite>GNU Emacs Lisp Reference
Manual</cite>).
</p>
<dl>
<dt><a name="index-cl_002ddefgeneric"></a>Macro: <strong>cl-defgeneric</strong> <em>method arglist [doc-string]</em></dt>
<dd><p>This macro turns the (unquoted) symbol <var>method</var> into a function.
<var>arglist</var> is the default list of arguments to use (not implemented
yet).  <var>doc-string</var> is the documentation used for this symbol.
</p>
<p>A generic function acts as a placeholder for methods.  There is no
need to call <code>cl-defgeneric</code> yourself, as <code>cl-defmethod</code> will call
it if necessary.  Currently the argument list is unused.
</p>
<p><code>cl-defgeneric</code> signals an error if you attempt to turn an existing
Emacs Lisp function into a generic function.
</p>
<p>You can also create a generic method with <code>cl-defmethod</code>
(see <a href="#Methods">Methods</a>).  When a method is created and there is no generic
method in place with that name, then a new generic will be created,
and the new method will use it.
</p></dd></dl>

<p>In CLOS, a generic call also be used to provide an argument list and
dispatch precedence for all the arguments.  In <i>EIEIO</i>, dispatching
only occurs for the first argument, so the <var>arglist</var> is not used.
</p>
<hr>
<a name="Methods"></a>
<div class="header">
<p>
Next: <a href="#Static-Methods" accesskey="n" rel="next">Static Methods</a>, Previous: <a href="#Generics" accesskey="p" rel="prev">Generics</a>, Up: <a href="#Writing-Methods" accesskey="u" rel="up">Writing Methods</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Methods-1"></a>
<h3 class="section">6.2 Methods</h3>

<p>A method is a function that is executed if the arguments passed
to it matches the method&rsquo;s specializers.  Different <i>EIEIO</i> classes may
share the same method names.
</p>
<p>Methods are created with the <code>cl-defmethod</code> macro, which is similar
to <code>defun</code>.
</p>
<dl>
<dt><a name="index-cl_002ddefmethod"></a>Macro: <strong>cl-defmethod</strong> <em>method [:before | :around | :after ] arglist [doc-string] forms</em></dt>
<dd>
<p><var>method</var> is the name of the function to create.
</p>
<p><code>:before</code>, <code>:around</code>, and <code>:after</code> specify execution order
(i.e., when this form is called).  If none of these symbols are present, the
method is said to be a <em>primary</em>.
</p>
<p><var>arglist</var> is the list of arguments to this method.  The mandatory arguments
in this list may have a type specializer (see the example below) which means
that the method will only apply when those arguments match the given type
specializer.  An argument with no type specializer means that the method
applies regardless of its value.
</p>
<p><var>doc-string</var> is the documentation attached to the implementation.
All method doc-strings are incorporated into the generic method&rsquo;s
function documentation.
</p>
<p><var>forms</var> is the body of the function.
</p>
</dd></dl>

<p>In the following example, we create a method <code>mymethod</code> for the
<code>classname</code> class:
</p>
<div class="example">
<pre class="example">(cl-defmethod mymethod ((obj classname) secondarg)
  &quot;Doc string&quot; )
</pre></div>

<p>This method only executes if the <var>obj</var> argument passed to it is an
<i>EIEIO</i> object of class <code>classname</code>.
</p>
<p>A method with no type specializer is a <em>default method</em>.  If a given
class has no implementation, then the default method is called when
that method is used on a given object of that class.
</p>
<p>Only one method per combination of specializers and qualifiers (<code>:before</code>,
<code>:around</code>, or <code>:after</code>) is kept.  If two <code>cl-defmethod</code>s appear
with the same specializers and the same qualifiers, then the second
implementation replaces the first.
</p>
<p>When a method is called on an object, but there is no method specified
for that object, but there is a method specified for object&rsquo;s parent
class, the parent class&rsquo;s method is called.  If there is a method
defined for both, only the child&rsquo;s method is called.  A child method
may call a parent&rsquo;s method using <code>cl-call-next-method</code>, described
below.
</p>
<p>If multiple methods and default methods are defined for the same
method and class, they are executed in this order:
</p>
<ol>
<li> :around methods
The most specific <code>:around</code> method is called first, which may invoke the
less specific ones via <code>cl-call-next-method</code>.  If it doesn&rsquo;t invoke
<code>cl-call-next-method</code>, then no other methods will be executed.  When there
are no more <code>:around</code> methods to call, falls through to run the other
(non-<code>:around</code>) methods.
</li><li> :before methods
Called in sequence from most specific to least specific.
</li><li> primary methods
The most specific method is called, which may invoke the less specific
ones via <code>cl-call-next-method</code>.
</li><li> :after methods
Called in sequence from least specific to most specific.
</li></ol>

<p>If no methods exist, Emacs signals a <code>cl-no-applicable-method</code> error.
See <a href="#Signals">Signals</a>.  If methods exist but none of them are primary, Emacs
signals a <code>cl-no-primary-method</code> error.  See <a href="#Signals">Signals</a>.
</p>
<dl>
<dt><a name="index-cl_002dcall_002dnext_002dmethod"></a>Function: <strong>cl-call-next-method</strong> <em>&amp;rest replacement-args</em></dt>
<dd><a name="cl_002dcall_002dnext_002dmethod"></a>
<p>This function calls the superclass method from a subclass method.
This is the &ldquo;next method&rdquo; specified in the current method list.
</p>
<p>If <var>replacement-args</var> is non-<code>nil</code>, then use them instead of the
arguments originally provided to the method.
</p>
<p>Can only be used from within the lexical body of a primary or around method.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dnext_002dmethod_002dp"></a>Function: <strong>cl-next-method-p</strong></dt>
<dd><a name="cl_002dnext_002dmethod_002dp"></a><p>Non-<code>nil</code> if there is a next method.
</p>
<p>Can only be used from within the lexical body of a primary or around method.
</p></dd></dl>

<hr>
<a name="Static-Methods"></a>
<div class="header">
<p>
Previous: <a href="#Methods" accesskey="p" rel="prev">Methods</a>, Up: <a href="#Writing-Methods" accesskey="u" rel="up">Writing Methods</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Static-Methods-1"></a>
<h3 class="section">6.3 Static Methods</h3>

<p>Static methods do not depend on an object instance, but instead
operate on a class.  You can create a static method by using
the <code>subclass</code> specializer with <code>cl-defmethod</code>:
</p>
<div class="example">
<pre class="example">(cl-defmethod make-instance ((class (subclass mychild)) &amp;rest args)
  (let ((new (cl-call-next-method)))
    (push new all-my-children)
    new))
</pre></div>

<p>The first argument of a static method will be a class rather than an
object.  Use the functions <code>oref-default</code> or <code>oset-default</code> which
will work on a class.
</p>
<p>A class&rsquo;s <code>make-instance</code> method is defined as a static
method.
</p>
<p><b>Note:</b> The <code>subclass</code> specializer is unique to <i>EIEIO</i>.
</p>

<hr>
<a name="Method-Invocation"></a>
<div class="header">
<p>
Next: <a href="#Predicates" accesskey="n" rel="next">Predicates</a>, Previous: <a href="#Writing-Methods" accesskey="p" rel="prev">Writing Methods</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Method-Invocation-1"></a>
<h2 class="chapter">7 Method Invocation</h2>

<p>When classes are defined, you can specify the
<code>:method-invocation-order</code>.  This is a feature specific to EIEIO.
</p>
<p>This controls the order in which method resolution occurs for
methods in cases of multiple inheritance.  The order
affects which method is called first in a tree, and if
<code>cl-call-next-method</code> is used, it controls the order in which the
stack of methods are run.
</p>
<p>The original EIEIO order turned out to be broken for multiple
inheritance, but some programs depended on it.  As such this option
was added when the default invocation order was fixed to something
that made more sense in that case.
</p>
<p>Valid values are:
</p>
<dl compact="compact">
<dt><code>:breadth-first</code></dt>
<dd><p>Search for methods in the class hierarchy in breadth first order.
This is the default.
</p></dd>
<dt><code>:depth-first</code></dt>
<dd><p>Search for methods in the class hierarchy in a depth first order.
</p></dd>
<dt><code>:c3</code></dt>
<dd><p>Searches for methods in a linearized way that most closely matches
what CLOS does when a monotonic class structure is defined.
</p>
<p>This is derived from the Dylan language documents by
Kim Barrett et al.: A Monotonic Superclass Linearization for Dylan
Retrieved from: http://192.220.96.201/dylan/linearization-oopsla96.html
</p></dd>
</dl>

<hr>
<a name="Predicates"></a>
<div class="header">
<p>
Next: <a href="#Association-Lists" accesskey="n" rel="next">Association Lists</a>, Previous: <a href="#Method-Invocation" accesskey="p" rel="prev">Method Invocation</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Predicates-and-Utilities"></a>
<h2 class="chapter">8 Predicates and Utilities</h2>

<p>Now that we know how to create classes, access slots, and define
methods, it might be useful to verify that everything is doing ok.  To
help with this a plethora of predicates have been created.
</p>
<dl>
<dt><a name="index-find_002dclass"></a>Function: <strong>find-class</strong> <em>symbol &amp;optional errorp</em></dt>
<dd><a name="find_002dclass"></a><p>Return the class that <var>symbol</var> represents.
If there is no class, <code>nil</code> is returned if <var>errorp</var> is <code>nil</code>.
If <var>errorp</var> is non-<code>nil</code>, <code>wrong-argument-type</code> is signaled.
</p></dd></dl>

<dl>
<dt><a name="index-class_002dp"></a>Function: <strong>class-p</strong> <em>class</em></dt>
<dd><a name="class_002dp"></a><p>Return <code>t</code> if <var>class</var> is a valid class object.
<var>class</var> is a symbol.
</p></dd></dl>

<dl>
<dt><a name="index-slot_002dexists_002dp"></a>Function: <strong>slot-exists-p</strong> <em>object-or-class slot</em></dt>
<dd><a name="slot_002dexists_002dp"></a><p>Non-<code>nil</code> if <var>object-or-class</var> has <var>slot</var>.
</p></dd></dl>

<dl>
<dt><a name="index-slot_002dboundp"></a>Function: <strong>slot-boundp</strong> <em>object slot</em></dt>
<dd><a name="slot_002dboundp"></a><p>Non-<code>nil</code> if OBJECT&rsquo;s <var>slot</var> is bound.
Setting a slot&rsquo;s value makes it bound.  Calling <em>slot-makeunbound</em> will
make a slot unbound.
<var>object</var> can be an instance or a class.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dname"></a>Function: <strong>eieio-class-name</strong> <em>class</em></dt>
<dd><p>Return a string of the form &lsquo;<samp>#&lt;class myclassname&gt;</samp>&rsquo; which should look
similar to other Lisp objects like buffers and processes.  Printing a
class results only in a symbol.
</p></dd></dl>

<dl>
<dt><a name="index-class_002doption"></a>Function: <strong>class-option</strong> <em>class option</em></dt>
<dd><p>Return the value in <var>CLASS</var> of a given <var>OPTION</var>.
For example:
</p>
<div class="example">
<pre class="example">(class-option eieio-default-superclass :documentation)
</pre></div>

<p>Will fetch the documentation string for <code>eieio-default-superclass</code>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dobject_002dname"></a>Function: <strong>eieio-object-name</strong> <em>obj</em></dt>
<dd><p>Return a string of the form &lsquo;<samp>#&lt;object-class myobjname&gt;</samp>&rsquo; for <var>obj</var>.
This should look like Lisp symbols from other parts of Emacs such as
buffers and processes, and is shorter and cleaner than printing the
object&rsquo;s record.  It is more useful to use <code>object-print</code> to get
and object&rsquo;s print form, as this allows the object to add extra display
information into the symbol.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dobject_002dclass"></a>Function: <strong>eieio-object-class</strong> <em>obj</em></dt>
<dd><p>Returns the class symbol from <var>obj</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dobject_002dclass_002dname"></a>Function: <strong>eieio-object-class-name</strong> <em>obj</em></dt>
<dd><p>Returns the symbol of <var>obj</var>&rsquo;s class.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dparents"></a>Function: <strong>eieio-class-parents</strong> <em>class</em></dt>
<dd><p>Returns the direct parents class of <var>class</var>.  Returns <code>nil</code> if
it is a superclass.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dparents_002dfast"></a>Function: <strong>eieio-class-parents-fast</strong> <em>class</em></dt>
<dd><p>Just like <code>eieio-class-parents</code> except it is a macro and no type checking
is performed.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dparent"></a>Function: <strong>eieio-class-parent</strong> <em>class</em></dt>
<dd><p>Deprecated function which returns the first parent of <var>class</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dchildren"></a>Function: <strong>eieio-class-children</strong> <em>class</em></dt>
<dd><p>Return the list of classes inheriting from <var>class</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dclass_002dchildren_002dfast"></a>Function: <strong>eieio-class-children-fast</strong> <em>class</em></dt>
<dd><p>Just like <code>eieio-class-children</code>, but with no checks.
</p></dd></dl>

<dl>
<dt><a name="index-same_002dclass_002dp"></a>Function: <strong>same-class-p</strong> <em>obj class</em></dt>
<dd><p>Returns <code>t</code> if <var>obj</var>&rsquo;s class is the same as <var>class</var>.
</p></dd></dl>

<dl>
<dt><a name="index-same_002dclass_002dfast_002dp"></a>Function: <strong>same-class-fast-p</strong> <em>obj class</em></dt>
<dd><p>Same as <code>same-class-p</code> except this is a macro and no type checking
is performed.
</p></dd></dl>

<dl>
<dt><a name="index-object_002dof_002dclass_002dp"></a>Function: <strong>object-of-class-p</strong> <em>obj class</em></dt>
<dd><p>Returns <code>t</code> if <var>obj</var> inherits anything from <var>class</var>.  This
is different from <code>same-class-p</code> because it checks for inheritance.
</p></dd></dl>

<dl>
<dt><a name="index-child_002dof_002dclass_002dp"></a>Function: <strong>child-of-class-p</strong> <em>child class</em></dt>
<dd><p>Returns <code>t</code> if <var>child</var> is a subclass of <var>class</var>.
</p></dd></dl>

<dl>
<dt><a name="index-generic_002dp"></a>Function: <strong>generic-p</strong> <em>method-symbol</em></dt>
<dd><p>Returns <code>t</code> if <code>method-symbol</code> is a generic function, as
opposed to a regular Emacs Lisp function.
</p></dd></dl>

<hr>
<a name="Association-Lists"></a>
<div class="header">
<p>
Next: <a href="#Customizing" accesskey="n" rel="next">Customizing</a>, Previous: <a href="#Predicates" accesskey="p" rel="prev">Predicates</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Association-Lists-1"></a>
<h2 class="chapter">9 Association Lists</h2>

<p>Lisp offers the concept of association lists, with primitives such as
<code>assoc</code> used to access them.  The following functions can be used
to manage association lists of <i>EIEIO</i> objects:
</p>
<dl>
<dt><a name="index-object_002dassoc"></a>Function: <strong>object-assoc</strong> <em>key slot list</em></dt>
<dd><a name="object_002dassoc"></a><p>Return an object if <var>key</var> is <em>equal</em> to SLOT&rsquo;s value of an object in <var>list</var>.
<var>list</var> is a list of objects whose slots are searched.
Objects in <var>list</var> do not need to have a slot named <var>slot</var>, nor does
<var>slot</var> need to be bound.  If these errors occur, those objects will
be ignored.
</p></dd></dl>


<dl>
<dt><a name="index-object_002dassoc_002dlist"></a>Function: <strong>object-assoc-list</strong> <em>slot list</em></dt>
<dd><p>Return an association list generated by extracting <var>slot</var> from all
objects in <var>list</var>.  For each element of <var>list</var> the <code>car</code> is
the value of <var>slot</var>, and the <code>cdr</code> is the object it was
extracted from.  This is useful for generating completion tables.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dbuild_002dclass_002dalist"></a>Function: <strong>eieio-build-class-alist</strong> <em>&amp;optional base-class</em></dt>
<dd><p>Returns an alist of all currently defined classes.  This alist is
suitable for completion lists used by interactive functions to select a
class.  The optional argument <var>base-class</var> allows the programmer to
select only a subset of classes which includes <var>base-class</var> and
all its subclasses.
</p></dd></dl>

<hr>
<a name="Customizing"></a>
<div class="header">
<p>
Next: <a href="#Introspection" accesskey="n" rel="next">Introspection</a>, Previous: <a href="#Association-Lists" accesskey="p" rel="prev">Association Lists</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Objects"></a>
<h2 class="chapter">10 Customizing Objects</h2>

<p><i>EIEIO</i> supports the Custom facility through two new widget types.
If a variable is declared as type <code>object</code>, then full editing of
slots via the widgets is made possible.  This should be used
carefully, however, because modified objects are cloned, so if there
are other references to these objects, they will no longer be linked
together.
</p>
<p>If you want in place editing of objects, use the following methods:
</p>
<dl>
<dt><a name="index-eieio_002dcustomize_002dobject"></a>Function: <strong>eieio-customize-object</strong> <em>object</em></dt>
<dd><p>Create a custom buffer and insert a widget for editing <var>object</var>.  At
the end, an <code>Apply</code> and <code>Reset</code> button are available.  This
will edit the object &quot;in place&quot; so references to it are also changed.
There is no effort to prevent multiple edits of a singular object, so
care must be taken by the user of this function.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dcustom_002dwidget_002dinsert"></a>Function: <strong>eieio-custom-widget-insert</strong> <em>object flags</em></dt>
<dd><p>This method inserts an edit object into the current buffer in place.
It is implemented as <code>(widget-create 'object-edit :value object)</code>.
This method is provided as a locale for adding tracking, or
specializing the widget insert procedure for any object.
</p></dd></dl>

<p>To define a slot with an object in it, use the <code>object</code> tag.  This
widget type will be automatically converted to <code>object-edit</code> if you
do in place editing of you object.
</p>
<p>If you want to have additional actions taken when a user clicks on the
<code>Apply</code> button, then overload the method <code>eieio-done-customizing</code>.
This method does nothing by default, but that may change in the future.
This would be the best way to make your objects persistent when using
in-place editing.
</p>
<a name="Widget-extension"></a>
<h3 class="section">10.1 Widget extension</h3>

<p>When widgets are being created, one new widget extension has been added,
called the <code>:slotofchoices</code>.  When this occurs in a widget
definition, all elements after it are removed, and the slot is specifies
is queried and converted into a series of constants.
</p>
<div class="example">
<pre class="example">(choice (const :tag &quot;None&quot; nil)
        :slotofchoices morestuff)
</pre></div>

<p>and if the slot <code>morestuff</code> contains <code>(sym1 sym2 sym3)</code>, the
above example is converted into:
</p>
<div class="example">
<pre class="example">(choice (const :tag &quot;None&quot; nil)
        (const sym1)
        (const sym2)
        (const sym3))
</pre></div>

<p>This is useful when a given item needs to be selected from a list of
items defined in this second slot.
</p>
<hr>
<a name="Introspection"></a>
<div class="header">
<p>
Next: <a href="#Base-Classes" accesskey="n" rel="next">Base Classes</a>, Previous: <a href="#Customizing" accesskey="p" rel="prev">Customizing</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introspection-1"></a>
<h2 class="chapter">11 Introspection</h2>

<p>Introspection permits a programmer to peek at the contents of a class
without any previous knowledge of that class.  While <i>EIEIO</i> implements
objects on top of records, and thus everything is technically visible,
some functions have been provided.  None of these functions are a part
of CLOS.
</p>
<dl>
<dt><a name="index-object_002dslots"></a>Function: <strong>object-slots</strong> <em>obj</em></dt>
<dd><p>Return the list of public slots for <var>obj</var>.
</p></dd></dl>

<dl>
<dt><a name="index-class_002dslot_002dinitarg"></a>Function: <strong>class-slot-initarg</strong> <em>class slot</em></dt>
<dd><p>For the given <var>class</var> return an :initarg associated with
<var>slot</var>.  Not all slots have initargs, so the return value can be
<code>nil</code>.
</p></dd></dl>

<hr>
<a name="Base-Classes"></a>
<div class="header">
<p>
Next: <a href="#Browsing" accesskey="n" rel="next">Browsing</a>, Previous: <a href="#Introspection" accesskey="p" rel="prev">Introspection</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Base-Classes-1"></a>
<h2 class="chapter">12 Base Classes</h2>

<p>All defined classes, if created with no specified parent class,
inherit from a special class called <code>eieio-default-superclass</code>.
See <a href="#Default-Superclass">Default Superclass</a>.
</p>
<p>Often, it is more convenient to inherit from one of the other base
classes provided by <i>EIEIO</i>, which have useful pre-defined
properties.  (Since <i>EIEIO</i> supports multiple inheritance, you can
even inherit from more than one of these classes at once.)
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dinstance_002dinheritor" accesskey="1">eieio-instance-inheritor</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enable value inheritance between instances.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dinstance_002dtracker" accesskey="2">eieio-instance-tracker</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enable self tracking instances.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dsingleton" accesskey="3">eieio-singleton</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Only one instance of a given class.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dpersistent" accesskey="4">eieio-persistent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enable persistence for a class.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dnamed" accesskey="5">eieio-named</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Use the object name as a :name slot.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#eieio_002dspeedbar" accesskey="6">eieio-speedbar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enable speedbar support in your objects.
</td></tr>
</table>

<hr>
<a name="eieio_002dinstance_002dinheritor"></a>
<div class="header">
<p>
Next: <a href="#eieio_002dinstance_002dtracker" accesskey="n" rel="next">eieio-instance-tracker</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dinstance_002dinheritor-1"></a>
<h3 class="section">12.1 <code>eieio-instance-inheritor</code></h3>

<p>This class is defined in the package <samp>eieio-base</samp>.
</p>
<p>Instance inheritance is a mechanism whereby the value of a slot in
object instance can reference the parent instance.  If the parent&rsquo;s slot
value is changed, then the child instance is also changed.  If the
child&rsquo;s slot is set, then the parent&rsquo;s slot is not modified.
</p>
<dl>
<dt><a name="index-eieio_002dinstance_002dinheritor"></a>Class: <strong>eieio-instance-inheritor</strong> <em>parent-instance</em></dt>
<dd><p>A class whose instances are enabled with instance inheritance.
The <var>parent-instance</var> slot indicates the instance which is
considered the parent of the current instance.  Default is <code>nil</code>.
</p></dd></dl>

<a name="index-clone"></a>
<p>To use this class, inherit from it with your own class.
To make a new instance that inherits from and existing instance of your
class, use the <code>clone</code> method with additional parameters
to specify local values.
</p>
<a name="index-slot_002dunbound"></a>
<p>The <code>eieio-instance-inheritor</code> class works by causing cloned
objects to have all slots unbound.  This class&rsquo; <code>slot-unbound</code>
method will cause references to unbound slots to be redirected to the
parent instance.  If the parent slot is also unbound, then
<code>slot-unbound</code> will signal an error named <code>slot-unbound</code>.
</p>
<hr>
<a name="eieio_002dinstance_002dtracker"></a>
<div class="header">
<p>
Next: <a href="#eieio_002dsingleton" accesskey="n" rel="next">eieio-singleton</a>, Previous: <a href="#eieio_002dinstance_002dinheritor" accesskey="p" rel="prev">eieio-instance-inheritor</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dinstance_002dtracker-1"></a>
<h3 class="section">12.2 <code>eieio-instance-tracker</code></h3>

<p>This class is defined in the package <samp>eieio-base</samp>.
</p>
<p>Sometimes it is useful to keep a master list of all instances of a given
class.  The class <code>eieio-instance-tracker</code> performs this task.
</p>
<dl>
<dt><a name="index-eieio_002dinstance_002dtracker"></a>Class: <strong>eieio-instance-tracker</strong> <em>tracker-symbol</em></dt>
<dd><p>Enable instance tracking for this class.
The slot <var>tracker-symbol</var> should be initialized in inheritors of
this class to a symbol created with <code>defvar</code>.  This symbol will
serve as the variable used as a master list of all objects of the given
class.
</p></dd></dl>

<dl>
<dt><a name="index-initialize_002dinstance-on-eieio_002dinstance_002dtracker"></a>Method on eieio-instance-tracker: <strong>initialize-instance</strong> <em>obj slot</em></dt>
<dd><p>This method is defined as an <code>:after</code> method.
It adds new instances to the master list.
</p></dd></dl>

<dl>
<dt><a name="index-delete_002dinstance-on-eieio_002dinstance_002dtracker"></a>Method on eieio-instance-tracker: <strong>delete-instance</strong> <em>obj</em></dt>
<dd><p>Remove <var>obj</var> from the master list of instances of this class.
This may let the garbage collector nab this instance.
</p></dd></dl>

<dl>
<dt><a name="index-key"></a>eieio-instance-tracker-find: <strong>key</strong> <em>slot list-symbol</em></dt>
<dd><p>This convenience function lets you find instances.  <var>key</var> is the
value to search for.  <var>slot</var> is the slot to compare <var>KEY</var>
against.  The function <code>equal</code> is used for comparison.
The parameter <var>list-symbol</var> is the variable symbol which contains the
list of objects to be searched.
</p></dd></dl>

<hr>
<a name="eieio_002dsingleton"></a>
<div class="header">
<p>
Next: <a href="#eieio_002dpersistent" accesskey="n" rel="next">eieio-persistent</a>, Previous: <a href="#eieio_002dinstance_002dtracker" accesskey="p" rel="prev">eieio-instance-tracker</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dsingleton-1"></a>
<h3 class="section">12.3 <code>eieio-singleton</code></h3>

<p>This class is defined in the package <samp>eieio-base</samp>.
</p>
<dl>
<dt><a name="index-eieio_002dsingleton"></a>Class: <strong>eieio-singleton</strong></dt>
<dd><p>Inheriting from the singleton class will guarantee that there will
only ever be one instance of this class.  Multiple calls to
<code>make-instance</code> will always return the same object.
</p></dd></dl>

<hr>
<a name="eieio_002dpersistent"></a>
<div class="header">
<p>
Next: <a href="#eieio_002dnamed" accesskey="n" rel="next">eieio-named</a>, Previous: <a href="#eieio_002dsingleton" accesskey="p" rel="prev">eieio-singleton</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dpersistent-1"></a>
<h3 class="section">12.4 <code>eieio-persistent</code></h3>

<p>This class is defined in the package <samp>eieio-base</samp>.
</p>
<p>If you want an object, or set of objects to be persistent, meaning the
slot values are important to keep saved between sessions, then you will
want your top level object to inherit from <code>eieio-persistent</code>.
</p>
<p>To make sure your persistent object can be moved, make sure all file
names stored to disk are made relative with
<code>eieio-persistent-path-relative</code>.
</p>
<dl>
<dt><a name="index-eieio_002dpersistent"></a>Class: <strong>eieio-persistent</strong> <em>file file-header-line</em></dt>
<dd><p>Enables persistence for instances of this class.
Slot <var>file</var> with initarg <code>:file</code> is the file name in which this
object will be saved.
Class allocated slot <var>file-header-line</var> is used with method
<code>object-write</code> as a header comment.
</p></dd></dl>

<p>All objects can write themselves to a file, but persistent objects have
several additional methods that aid in maintaining them.
</p>
<dl>
<dt><a name="index-eieio_002dpersistent_002dsave-on-eieio_002dpersistent"></a>Method on eieio-persistent: <strong>eieio-persistent-save</strong> <em>obj &amp;optional file</em></dt>
<dd><p>Write the object <var>obj</var> to its file.
If optional argument <var>file</var> is specified, use that file name
instead.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dpersistent_002dpath_002drelative-on-eieio_002dpersistent"></a>Method on eieio-persistent: <strong>eieio-persistent-path-relative</strong> <em>obj file</em></dt>
<dd><p>Return a file name derived from <var>file</var> which is relative to the
stored location of <var>OBJ</var>.  This method should be used to convert
file names so that they are relative to the save file, making any system
of files movable from one location to another.
</p></dd></dl>

<dl>
<dt><a name="index-object_002dwrite-on-eieio_002dpersistent"></a>Method on eieio-persistent: <strong>object-write</strong> <em>obj &amp;optional comment</em></dt>
<dd><p>Like <code>object-write</code> for <code>standard-object</code>, but will derive
a header line comment from the class allocated slot if one is not
provided.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dpersistent_002dread"></a>Function: <strong>eieio-persistent-read</strong> <em>filename &amp;optional class allow-subclass</em></dt>
<dd><p>Read a persistent object from <var>filename</var>, and return it.
Signal an error if the object in <var>FILENAME</var> is not a constructor
for <var>CLASS</var>.  Optional <var>allow-subclass</var> says that it is ok for
<code>eieio-persistent-read</code> to load in subclasses of class instead of
being pedantic.
</p></dd></dl>

<hr>
<a name="eieio_002dnamed"></a>
<div class="header">
<p>
Next: <a href="#eieio_002dspeedbar" accesskey="n" rel="next">eieio-speedbar</a>, Previous: <a href="#eieio_002dpersistent" accesskey="p" rel="prev">eieio-persistent</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dnamed-1"></a>
<h3 class="section">12.5 <code>eieio-named</code></h3>

<p>This class is defined in the package <samp>eieio-base</samp>.
</p>
<dl>
<dt><a name="index-eieio_002dnamed"></a>Class: <strong>eieio-named</strong></dt>
<dd><p>Object with a name.
Name storage already occurs in an object.  This object provides get/set
access to it.
</p></dd></dl>

<hr>
<a name="eieio_002dspeedbar"></a>
<div class="header">
<p>
Previous: <a href="#eieio_002dnamed" accesskey="p" rel="prev">eieio-named</a>, Up: <a href="#Base-Classes" accesskey="u" rel="up">Base Classes</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="eieio_002dspeedbar-1"></a>
<h3 class="section">12.6 <code>eieio-speedbar</code></h3>

<p>This class is in package <samp>eieio-speedbar</samp>.
</p>
<p>If a series of class instances map to a tree structure, it is possible
to cause your classes to be displayable in Speedbar.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html#Top">(speedbar)Top</a>.
Inheriting from these classes will enable a speedbar major display mode
with a minimum of effort.
</p>
<dl>
<dt><a name="index-eieio_002dspeedbar"></a>Class: <strong>eieio-speedbar</strong> <em>buttontype buttonface</em></dt>
<dd><p>Enables base speedbar display for a class.
<a name="index-speedbar_002dmake_002dtag_002dline"></a>
The slot <var>buttontype</var> is any of the symbols allowed by the
function <code>speedbar-make-tag-line</code> for the <var>exp-button-type</var>
argument See <a href="http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html#Extending">(speedbar)Extending</a>.
The slot <var>buttonface</var> is the face to use for the text of the string
displayed in speedbar.
The slots <var>buttontype</var> and <var>buttonface</var> are class allocated
slots, and do not take up space in your instances.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002ddirectory_002dbutton"></a>Class: <strong>eieio-speedbar-directory-button</strong> <em>buttontype buttonface</em></dt>
<dd><p>This class inherits from <code>eieio-speedbar</code> and initializes
<var>buttontype</var> and <var>buttonface</var> to appear as directory level lines.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002dfile_002dbutton"></a>Class: <strong>eieio-speedbar-file-button</strong> <em>buttontype buttonface</em></dt>
<dd><p>This class inherits from <code>eieio-speedbar</code> and initializes
<var>buttontype</var> and <var>buttonface</var> to appear as file level lines.
</p></dd></dl>

<p>To use these classes, inherit from one of them in you class.  You can
use multiple inheritance with them safely.  To customize your class for
speedbar display, override the default values for <var>buttontype</var> and
<var>buttonface</var> to get the desired effects.
</p>
<p>Useful methods to define for your new class include:
</p>
<dl>
<dt><a name="index-eieio_002dspeedbar_002dderive_002dline_002dpath-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-derive-line-path</strong> <em>obj depth</em></dt>
<dd><p>Return a string representing a directory associated with an instance
of <var>obj</var>.  <var>depth</var> can be used to index how many levels of
indentation have been opened by the user where <var>obj</var> is shown.
</p></dd></dl>


<dl>
<dt><a name="index-eieio_002dspeedbar_002ddescription-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-description</strong> <em>obj</em></dt>
<dd><p>Return a string description of <var>OBJ</var>.
This is shown in the minibuffer or tooltip when the mouse hovers over
this instance in speedbar.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002dchild_002ddescription-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-child-description</strong> <em>obj</em></dt>
<dd><p>Return a string representing a description of a child node of <var>obj</var>
when that child is not an object.  It is often useful to just use
item info helper functions such as <code>speedbar-item-info-file-helper</code>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002dobject_002dbuttonname-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-object-buttonname</strong> <em>obj</em></dt>
<dd><p>Return a string which is the text displayed in speedbar for <var>obj</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002dobject_002dchildren-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-object-children</strong> <em>obj</em></dt>
<dd><p>Return a list of children of <var>obj</var>.
</p></dd></dl>

<dl>
<dt><a name="index-eieio_002dspeedbar_002dchild_002dmake_002dtag_002dlines-on-eieio_002dspeedbar"></a>Method on eieio-speedbar: <strong>eieio-speedbar-child-make-tag-lines</strong> <em>obj depth</em></dt>
<dd><p>This method inserts a list of speedbar tag lines for <var>obj</var> to
represent its children.  Implement this method for your class
if your children are not objects themselves.  You still need to
implement <code>eieio-speedbar-object-children</code>.
</p>
<p>In this method, use techniques specified in the Speedbar manual.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html#Extending">(speedbar)Extending</a>.
</p></dd></dl>

<p>Some other functions you will need to learn to use are:
</p>
<dl>
<dt><a name="index-make_002dmap"></a>eieio-speedbar-create: <strong>make-map</strong> <em>key-map menu name toplevelfn</em></dt>
<dd><p>Register your object display mode with speedbar.
<var>make-map</var> is a function which initialized you keymap.
<var>key-map</var> is a symbol you keymap is installed into.
<var>menu</var> is an easy menu vector representing menu items specific to your
object display.
<var>name</var> is a short string to use as a name identifying you mode.
<var>toplevelfn</var> is a function called which must return a list of
objects representing those in the instance system you wish to browse in
speedbar.
</p>
<p>Read the Extending chapter in the speedbar manual for more information
on how speedbar modes work
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html#Extending">(speedbar)Extending</a>.
</p></dd></dl>

<hr>
<a name="Browsing"></a>
<div class="header">
<p>
Next: <a href="#Class-Values" accesskey="n" rel="next">Class Values</a>, Previous: <a href="#Base-Classes" accesskey="p" rel="prev">Base Classes</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Browsing-class-trees"></a>
<h2 class="chapter">13 Browsing class trees</h2>

<p>The command <kbd>M-x eieio-browse</kbd> displays a buffer listing all the
currently loaded classes in Emacs.  The classes are listed in an
indented tree structure, starting from <code>eieio-default-superclass</code>
(see <a href="#Default-Superclass">Default Superclass</a>).
</p>
<p>With a prefix argument, this command prompts for a class name; it then
lists only that class and its subclasses.
</p>
<p>Here is a sample tree from our current example:
</p>
<div class="example">
<pre class="example">eieio-default-superclass
  +--data-object
       +--data-object-symbol
</pre></div>

<p>Note: new classes are consed into the inheritance lists, so the tree
comes out upside-down.
</p>
<hr>
<a name="Class-Values"></a>
<div class="header">
<p>
Next: <a href="#Default-Superclass" accesskey="n" rel="next">Default Superclass</a>, Previous: <a href="#Browsing" accesskey="p" rel="prev">Browsing</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Class-Values-1"></a>
<h2 class="chapter">14 Class Values</h2>

<p>You can use the normal <code>describe-function</code> command to retrieve
information about a class.  Running it on constructors will show a
full description of the generated class.  If you call it on a generic
function, all implementations of that generic function will be listed,
together with links through which you can directly jump to the source.
</p>
<hr>
<a name="Default-Superclass"></a>
<div class="header">
<p>
Next: <a href="#Signals" accesskey="n" rel="next">Signals</a>, Previous: <a href="#Class-Values" accesskey="p" rel="prev">Class Values</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Default-Superclass-1"></a>
<h2 class="chapter">15 Default Superclass</h2>

<p>All defined classes, if created with no specified parent class, will
inherit from a special class stored in
<code>eieio-default-superclass</code>.  This superclass is quite simple, but
with it, certain default methods or attributes can be added to all
objects.  In CLOS, this would be named <code>STANDARD-CLASS</code>, and that
symbol is an alias to <code>eieio-default-superclass</code>.
</p>
<p>Currently, the default superclass is defined as follows:
</p>
<div class="example">
<pre class="example">(defclass eieio-default-superclass nil
  nil
  &quot;Default parent class for classes with no specified parent class.
Its slots are automatically adopted by classes with no specified
parents.  This class is not stored in the `parent' slot of a class object.&quot;
  :abstract t)
</pre></div>

<p>The default superclass implements several methods providing a default
behavior for all objects created by <i>EIEIO</i>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Initialization" accesskey="1">Initialization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How objects are initialized
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Basic-Methods" accesskey="2">Basic Methods</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Clone, print, and write
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Signal-Handling" accesskey="3">Signal Handling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Methods for managing signals.
</td></tr>
</table>

<hr>
<a name="Initialization"></a>
<div class="header">
<p>
Next: <a href="#Basic-Methods" accesskey="n" rel="next">Basic Methods</a>, Up: <a href="#Default-Superclass" accesskey="u" rel="up">Default Superclass</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Initialization-1"></a>
<h3 class="section">15.1 Initialization</h3>

<p>When creating an object of any type, you can use its constructor, or
<code>make-instance</code>.  This, in turns calls the method
<code>initialize-instance</code>, which then calls the method
<code>shared-initialize</code>.
</p>
<p>These methods are all implemented on the default superclass so you do
not need to write them yourself, unless you need to override one of
their behaviors.
</p>
<p>Users should not need to call <code>initialize-instance</code> or
<code>shared-initialize</code>, as these are used by <code>make-instance</code> to
initialize the object.  They are instead provided so that users can
augment these behaviors.
</p>
<dl>
<dt><a name="index-initialize_002dinstance"></a>Function: <strong>initialize-instance</strong> <em>obj &amp;rest slots</em></dt>
<dd><p>Initialize <var>obj</var>.  Sets slots of <var>obj</var> with <var>slots</var> which
is a list of name/value pairs.  These are actually just passed to
<code>shared-initialize</code>.
</p></dd></dl>

<dl>
<dt><a name="index-shared_002dinitialize"></a>Function: <strong>shared-initialize</strong> <em>obj &amp;rest slots</em></dt>
<dd><p>Sets slots of <var>obj</var> with <var>slots</var> which is a list of name/value
pairs.
</p>
<p>This is called from the default constructor.
</p></dd></dl>

<hr>
<a name="Basic-Methods"></a>
<div class="header">
<p>
Next: <a href="#Signal-Handling" accesskey="n" rel="next">Signal Handling</a>, Previous: <a href="#Initialization" accesskey="p" rel="prev">Initialization</a>, Up: <a href="#Default-Superclass" accesskey="u" rel="up">Default Superclass</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Methods-1"></a>
<h3 class="section">15.2 Basic Methods</h3>

<p>Additional useful methods defined on the base subclass are:
</p>
<dl>
<dt><a name="index-clone-1"></a>Function: <strong>clone</strong> <em>obj &amp;rest params</em></dt>
<dd><a name="clone"></a><p>Make a copy of <var>obj</var>, and then apply <var>params</var>.
<var>params</var> is a parameter list of the same form as <var>initialize-instance</var>
which are applied to change the object.  When overloading <em>clone</em>, be
sure to call <em>cl-call-next-method</em> first and modify the returned object.
</p></dd></dl>

<dl>
<dt><a name="index-object_002dprint"></a>Function: <strong>object-print</strong> <em>this &amp;rest strings</em></dt>
<dd><a name="object_002dprint"></a><p>Pretty printer for object <var>this</var>.  Call function <em>eieio-object-name</em> with <var>strings</var>.
The default method for printing object <var>this</var> is to use the
function <em>eieio-object-name</em>.
</p>
<p>It is sometimes useful to put a summary of the object into the
default #&lt;notation&gt; string when using eieio browsing tools.
</p>
<p>Implement this function and specify <var>strings</var> in a call to
<em>cl-call-next-method</em> to provide additional summary information.
When passing in extra strings from child classes, always remember
to prepend a space.
</p>
<div class="example">
<pre class="example">(defclass data-object ()
   (value)
   &quot;Object containing one data slot.&quot;)

(cl-defmethod object-print ((this data-object) &amp;optional strings)
  &quot;Return a string with a summary of the data object as part of the name.&quot;
  (apply #'cl-call-next-method this
         (format &quot; value: %s&quot; (render this))
         strings))
</pre></div>

<p>Here is what some output could look like:
</p><div class="example">
<pre class="example">(object-print test-object)
   =&gt; #&lt;data-object test-object value: 3&gt;
</pre></div>
</dd></dl>

<dl>
<dt><a name="index-object_002dwrite"></a>Function: <strong>object-write</strong> <em>obj &amp;optional comment</em></dt>
<dd><p>Write <var>obj</var> onto a stream in a readable fashion.  The resulting
output will be Lisp code which can be used with <code>read</code> and
<code>eval</code> to recover the object.  Only slots with <code>:initarg</code>s
are written to the stream.
</p></dd></dl>

<hr>
<a name="Signal-Handling"></a>
<div class="header">
<p>
Previous: <a href="#Basic-Methods" accesskey="p" rel="prev">Basic Methods</a>, Up: <a href="#Default-Superclass" accesskey="u" rel="up">Default Superclass</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Signal-Handling-1"></a>
<h3 class="section">15.3 Signal Handling</h3>

<p>The default superclass defines methods for managing error conditions.
These methods all throw a signal for a particular error condition.
</p>
<p>By implementing one of these methods for a class, you can change the
behavior that occurs during one of these error cases, or even ignore
the error by providing some behavior.
</p>
<dl>
<dt><a name="index-slot_002dmissing"></a>Function: <strong>slot-missing</strong> <em>object slot-name operation &amp;optional new-value</em></dt>
<dd><a name="slot_002dmissing"></a><p>Method invoked when an attempt to access a slot in <var>object</var> fails.
<var>slot-name</var> is the name of the failed slot, <var>operation</var> is the type of access
that was requested, and optional <var>new-value</var> is the value that was desired
to be set.
</p>
<p>This method is called from <code>oref</code>, <code>oset</code>, and other functions which
directly reference slots in EIEIO objects.
</p>
<p>The default method signals an error of type <code>invalid-slot-name</code>.
See <a href="#Signals">Signals</a>.
</p>
<p>You may override this behavior, but it is not expected to return in the
current implementation.
</p>
<p>This function takes arguments in a different order than in CLOS.
</p></dd></dl>

<dl>
<dt><a name="index-slot_002dunbound-1"></a>Function: <strong>slot-unbound</strong> <em>object class slot-name fn</em></dt>
<dd><a name="slot_002dunbound"></a><p>Slot unbound is invoked during an attempt to reference an unbound slot.
<var>object</var> is the instance of the object being reference.  <var>class</var> is the
class of <var>object</var>, and <var>slot-name</var> is the offending slot.  This function
throws the signal <code>unbound-slot</code>.  You can overload this function and
return the value to use in place of the unbound value.
Argument <var>fn</var> is the function signaling this error.
Use <em>slot-boundp</em> to determine if a slot is bound or not.
</p>
<p>In <var>clos</var>, the argument list is (<var>class</var> <var>object</var> <var>slot-name</var>), but
<var>eieio</var> can only dispatch on the first argument, so the first two are swapped.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dapplicable_002dmethod"></a>Function: <strong>cl-no-applicable-method</strong> <em>generic &amp;rest args</em></dt>
<dd><a name="cl_002dno_002dapplicable_002dmethod"></a><p>Called if there are no methods applicable for <var>args</var> in the generic
function <var>generic</var>.
<var>args</var> are the arguments that were passed to <var>generic</var>.
</p>
<p>Implement this for a class to block this signal.  The return
value becomes the return value of the original method call.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dprimary_002dmethod"></a>Function: <strong>cl-no-primary-method</strong> <em>generic &amp;rest args</em></dt>
<dd><a name="cl_002dno_002dprimary_002dmethod"></a><p>Called if there are methods applicable for <var>args</var> in the generic
function <var>generic</var> but they are all qualified.
<var>args</var> are the arguments that were passed to <var>generic</var>.
</p>
<p>Implement this for a class to block this signal.  The return
value becomes the return value of the original method call.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dnext_002dmethod"></a>Function: <strong>cl-no-next-method</strong> <em>generic method &amp;rest args</em></dt>
<dd><a name="cl_002dno_002dnext_002dmethod"></a><p>Called from <em>cl-call-next-method</em> when no additional methods are available.
<var>generic</var> is the generic function being called on
<em>cl-call-next-method</em>, <var>method</var> is the method where
<em>cl-call-next-method</em> was called, and
<var>args</var> are the arguments it is called by.
This method signals <em>cl-no-next-method</em> by default.  Override this
method to not throw an error, and its return value becomes the
return value of <em>cl-call-next-method</em>.
</p></dd></dl>

<hr>
<a name="Signals"></a>
<div class="header">
<p>
Next: <a href="#Naming-Conventions" accesskey="n" rel="next">Naming Conventions</a>, Previous: <a href="#Default-Superclass" accesskey="p" rel="prev">Default Superclass</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Signals-1"></a>
<h2 class="chapter">16 Signals</h2>

<p>There are new condition names (signals) that can be caught when using
<i>EIEIO</i>.
</p>
<dl>
<dt><a name="index-invalid_002dslot_002dname"></a>Signal: <strong>invalid-slot-name</strong> <em>obj-or-class slot</em></dt>
<dd><p>This signal is called when an attempt to reference a slot in an
<var>obj-or-class</var> is made, and the <var>slot</var> is not defined for
it.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dapplicable_002dmethod-1"></a>Signal: <strong>cl-no-applicable-method</strong> <em>generic arguments</em></dt>
<dd><p>This signal is called when <var>generic</var> is called, with <var>arguments</var>
and nothing is resolved.  This occurs when <var>generic</var> has been
defined, but the arguments make it impossible for <i>EIEIO</i> to determine
which method body to run.
</p>
<p>To prevent this signal from occurring in your class, implement the
method <code>cl-no-applicable-method</code> for your class.  This method is
called when to throw this signal, so implementing this for your class
allows you block the signal, and perform some work.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dprimary_002dmethod-1"></a>Signal: <strong>cl-no-primary-method</strong> <em>generic arguments</em></dt>
<dd><p>Like <code>cl-no-applicable-method</code> but applies when there are some applicable
methods, but none of them are primary.  You can similarly block it by
implementing a <code>cl-no-primary-method</code> method.
</p></dd></dl>

<dl>
<dt><a name="index-cl_002dno_002dnext_002dmethod-1"></a>Signal: <strong>cl-no-next-method</strong> <em>class arguments</em></dt>
<dd><p>This signal is called if the function <code>cl-call-next-method</code> is called
and there is no next method to be called.
</p>
<p>Overload the method <code>cl-no-next-method</code> to protect against this signal.
</p></dd></dl>

<dl>
<dt><a name="index-invalid_002dslot_002dtype"></a>Signal: <strong>invalid-slot-type</strong> <em>slot spec value</em></dt>
<dd><p>This signal is called when an attempt to set <var>slot</var> is made, and
<var>value</var> doesn&rsquo;t match the specified type <var>spec</var>.
</p>
<p>In <i>EIEIO</i>, this is also used if a slot specifier has an invalid value
during a <code>defclass</code>.
</p></dd></dl>

<dl>
<dt><a name="index-unbound_002dslot"></a>Signal: <strong>unbound-slot</strong> <em>object class slot</em></dt>
<dd><p>This signal is called when an attempt to reference <var>slot</var> in
<var>object</var> is made, and that instance is currently unbound.
</p></dd></dl>

<hr>
<a name="Naming-Conventions"></a>
<div class="header">
<p>
Next: <a href="#CLOS-compatibility" accesskey="n" rel="next">CLOS compatibility</a>, Previous: <a href="#Signals" accesskey="p" rel="prev">Signals</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Naming-Conventions-1"></a>
<h2 class="chapter">17 Naming Conventions</h2>

<p>See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips">Tips and Conventions</a> in <cite>GNU Emacs Lisp Reference
Manual</cite>, for a description of Emacs Lisp programming conventions.
These conventions help ensure that Emacs packages work nicely one
another, so an <i>EIEIO</i>-based program should follow them.  Here are
some conventions that apply specifically to <i>EIEIO</i>-based programs:
</p>
<ul>
<li> Come up with a package prefix that is relatively short.  Prefix
all classes, and methods with your prefix.  This is a standard
convention for functions and variables in Emacs.

</li><li> Do not prefix method names with the class name.  All methods in
<i>EIEIO</i> are &ldquo;virtual&rdquo;, and are dynamically dispatched.  Anyone can
override your methods at any time.  Your methods should be prefixed
with your package name.

</li><li> Do not prefix slots in your class.  The slots are always locally
scoped to your class, and need no prefixing.

</li><li> If your library inherits from other libraries of classes, you
must &ldquo;require&rdquo; that library with the <code>require</code> command.

</li></ul>

<hr>
<a name="CLOS-compatibility"></a>
<div class="header">
<p>
Next: <a href="#Wish-List" accesskey="n" rel="next">Wish List</a>, Previous: <a href="#Naming-Conventions" accesskey="p" rel="prev">Naming Conventions</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="CLOS-compatibility-1"></a>
<h2 class="chapter">18 CLOS compatibility</h2>

<p>Currently, the following functions should behave almost as expected from
CLOS.
</p>
<dl compact="compact">
<dt><code>defclass</code></dt>
<dd><p>All slot keywords are available but not all work correctly.
Slot keyword differences are:
</p>
<dl compact="compact">
<dt>:reader, and :writer tags</dt>
<dd><p>Create methods that signal errors instead of creating an unqualified
method.  You can still create new ones to do its business.
</p>
</dd>
<dt>:accessor</dt>
<dd><p>This should create an unqualified method to access a slot, but
instead pre-builds a method that gets the slot&rsquo;s value.
</p>
</dd>
<dt>:type</dt>
<dd><p>Specifier uses the <code>typep</code> function from the <samp>cl</samp>
package.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/cl.html#Type-Predicates">Type Predicates</a> in <cite>Common Lisp Extensions</cite>.
It therefore has the same issues as that package.  Extensions include
the ability to provide object names.
</p></dd>
</dl>

<p>defclass also supports class options, but does not currently use values
of <code>:metaclass</code>, and <code>:default-initargs</code>.
</p>
</dd>
<dt><code>make-instance</code></dt>
<dd><p>Make instance works as expected, however it just uses the <i>EIEIO</i> instance
creator automatically generated when a new class is created.
See <a href="#Making-New-Objects">Making New Objects</a>.
</p>
</dd>
<dt><code>cl-defgeneric</code></dt>
<dd><p>Creates the desired symbol, and accepts most of the expected arguments of
CLOS&rsquo;s <code>defgeneric</code>.
</p>
</dd>
<dt><code>cl-defmethod</code></dt>
<dd><p>Accepts most of the expected arguments of CLOS&rsquo;s <code>defmethod</code>.  To type
cast against a class, the class must exist before <code>cl-defmethod</code>
is called.
</p>
</dd>
<dt><code>cl-call-next-method</code></dt>
<dd><p>Works just like CLOS&rsquo;s <code>call-next-method</code>.
</p></dd>
</dl>

<p>CLOS supports the <code>describe</code> command, but <i>EIEIO</i> provides
support for using the standard <code>describe-function</code> command on a
constructor or generic function.
</p>
<p>When creating a new class (see <a href="#Building-Classes">Building Classes</a>) there are several
new keywords supported by <i>EIEIO</i>.
</p>
<p>In <i>EIEIO</i> tags are in lower case, not mixed case.
</p>
<hr>
<a name="Wish-List"></a>
<div class="header">
<p>
Next: <a href="#GNU-Free-Documentation-License" accesskey="n" rel="next">GNU Free Documentation License</a>, Previous: <a href="#CLOS-compatibility" accesskey="p" rel="prev">CLOS compatibility</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Wish-List-1"></a>
<h2 class="chapter">19 Wish List</h2>

<p><i>EIEIO</i> is an incomplete implementation of CLOS.  Finding ways to
improve the compatibility would help make CLOS style programs run
better in Emacs.
</p>
<p>Some important compatibility features that would be good to add are:
</p>
<ol>
<li> Support for metaclasses.
</li><li> Improve integration with the <samp>cl</samp> package.
</li></ol>

<p>There are also improvements to be made to allow <i>EIEIO</i> to operate
better in the Emacs environment.
</p>
<ol>
<li> Allow subclassing of Emacs built-in types, such as faces, markers, and
buffers.
</li><li> Allow method overloading of method-like functions in Emacs.
</li></ol>

<hr>
<a name="GNU-Free-Documentation-License"></a>
<div class="header">
<p>
Next: <a href="#Function-Index" accesskey="n" rel="next">Function Index</a>, Previous: <a href="#Wish-List" accesskey="p" rel="prev">Wish List</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-Free-Documentation-License-1"></a>
<h2 class="appendix">Appendix A GNU Free Documentation License</h2>
<div align="center">Version 1.3, 3 November 2008
</div>

<div class="display">
<pre class="display">Copyright &copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<a href="https://fsf.org/">https://fsf.org/</a>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></div>

<ol start="0">
<li> PREAMBLE

<p>The purpose of this License is to make a manual, textbook, or other
functional and useful document <em>free</em> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</p>
<p>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</p>
<p>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</p>
</li><li> APPLICABILITY AND DEFINITIONS

<p>This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The &ldquo;Document&rdquo;, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as &ldquo;you&rdquo;.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</p>
<p>A &ldquo;Modified Version&rdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</p>
<p>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document&rsquo;s overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</p>
<p>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</p>
<p>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</p>
<p>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.
</p>
<p>Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input
format, SGML or XML using a publicly available
DTD, and standard-conforming simple HTML,
PostScript or PDF designed for human modification.  Examples
of transparent image formats include PNG, XCF and
JPG.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, SGML or
XML for which the DTD and/or processing tools are
not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for
output purposes only.
</p>
<p>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &ldquo;Title Page&rdquo; means
the text near the most prominent appearance of the work&rsquo;s title,
preceding the beginning of the body of the text.
</p>
<p>The &ldquo;publisher&rdquo; means any person or entity that distributes copies
of the Document to the public.
</p>
<p>A section &ldquo;Entitled XYZ&rdquo; means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, &ldquo;Endorsements&rdquo;, or &ldquo;History&rdquo;.)  To &ldquo;Preserve the Title&rdquo;
of such a section when you modify the Document means that it remains a
section &ldquo;Entitled XYZ&rdquo; according to this definition.
</p>
<p>The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</p>
</li><li> VERBATIM COPYING

<p>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</p>
<p>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</p>
</li><li> COPYING IN QUANTITY

<p>If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document&rsquo;s license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</p>
<p>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</p>
<p>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</p>
<p>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</p>
</li><li> MODIFICATIONS

<p>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</p>
<ol type="A" start="1">
<li> Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

</li><li> List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

</li><li> State on the Title page the name of the publisher of the
Modified Version, as the publisher.

</li><li> Preserve all the copyright notices of the Document.

</li><li> Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

</li><li> Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

</li><li> Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document&rsquo;s license notice.

</li><li> Include an unaltered copy of this License.

</li><li> Preserve the section Entitled &ldquo;History&rdquo;, Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled &ldquo;History&rdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

</li><li> Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &ldquo;History&rdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

</li><li> For any section Entitled &ldquo;Acknowledgements&rdquo; or &ldquo;Dedications&rdquo;, Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

</li><li> Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

</li><li> Delete any section Entitled &ldquo;Endorsements&rdquo;.  Such a section
may not be included in the Modified Version.

</li><li> Do not retitle any existing section to be Entitled &ldquo;Endorsements&rdquo; or
to conflict in title with any Invariant Section.

</li><li> Preserve any Warranty Disclaimers.
</li></ol>

<p>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version&rsquo;s license notice.
These titles must be distinct from any other section titles.
</p>
<p>You may add a section Entitled &ldquo;Endorsements&rdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&mdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</p>
<p>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</p>
<p>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</p>
</li><li> COMBINING DOCUMENTS

<p>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</p>
<p>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</p>
<p>In the combination, you must combine any sections Entitled &ldquo;History&rdquo;
in the various original documents, forming one section Entitled
&ldquo;History&rdquo;; likewise combine any sections Entitled &ldquo;Acknowledgements&rdquo;,
and any sections Entitled &ldquo;Dedications&rdquo;.  You must delete all
sections Entitled &ldquo;Endorsements.&rdquo;
</p>
</li><li> COLLECTIONS OF DOCUMENTS

<p>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</p>
<p>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</p>
</li><li> AGGREGATION WITH INDEPENDENT WORKS

<p>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an &ldquo;aggregate&rdquo; if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation&rsquo;s users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</p>
<p>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document&rsquo;s Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</p>
</li><li> TRANSLATION

<p>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</p>
<p>If a section in the Document is Entitled &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, or &ldquo;History&rdquo;, the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</p>
</li><li> TERMINATION

<p>You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.
</p>
<p>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.
</p>
</li><li> FUTURE REVISIONS OF THIS LICENSE

<p>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</p>
<p>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy&rsquo;s public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.
</p>
</li><li> RELICENSING

<p>&ldquo;Massive Multiauthor Collaboration Site&rdquo; (or &ldquo;MMC Site&rdquo;) means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
&ldquo;Massive Multiauthor Collaboration&rdquo; (or &ldquo;MMC&rdquo;) contained in the
site means any set of copyrightable works thus published on the MMC
site.
</p>
<p>&ldquo;CC-BY-SA&rdquo; means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.
</p>
<p>&ldquo;Incorporate&rdquo; means to publish or republish a Document, in whole or
in part, as part of another Document.
</p>
<p>An MMC is &ldquo;eligible for relicensing&rdquo; if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.
</p>
<p>The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.
</p>
</li></ol>

<a name="ADDENDUM_003a-How-to-use-this-License-for-your-documents"></a>
<h3 class="heading">ADDENDUM: How to use this License for your documents</h3>

<p>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</p>
<div class="smallexample">
<pre class="smallexample">  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</pre></div>

<p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the &ldquo;with&hellip;Texts.&rdquo; line with this:
</p>
<div class="smallexample">
<pre class="smallexample">    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.
</pre></div>

<p>If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</p>
<p>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</p>

<hr>
<a name="Function-Index"></a>
<div class="header">
<p>
Previous: <a href="#GNU-Free-Documentation-License" accesskey="p" rel="prev">GNU Free Documentation License</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Function-Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Function-Index-1"></a>
<h2 class="unnumbered">Function Index</h2>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Function-Index_fn_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-W"><b>W</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-fn" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-child_002dof_002dclass_002dp"><code>child-of-class-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dcall_002dnext_002dmethod"><code>cl-call-next-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Methods">Methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002ddefgeneric"><code>cl-defgeneric</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generics">Generics</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002ddefmethod"><code>cl-defmethod</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Methods">Methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dnext_002dmethod_002dp"><code>cl-next-method-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Methods">Methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dapplicable_002dmethod"><code>cl-no-applicable-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signal-Handling">Signal Handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dapplicable_002dmethod-1"><code>cl-no-applicable-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dnext_002dmethod"><code>cl-no-next-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signal-Handling">Signal Handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dnext_002dmethod-1"><code>cl-no-next-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dprimary_002dmethod"><code>cl-no-primary-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signal-Handling">Signal Handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cl_002dno_002dprimary_002dmethod-1"><code>cl-no-primary-method</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CLASS_002dNAME_002dp"><code>CLASS-NAME-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Classes">Building Classes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-class_002doption"><code>class-option</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-class_002dp"><code>class-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-class_002dslot_002dinitarg"><code>class-slot-initarg</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introspection">Introspection</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clone-1"><code>clone</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Methods">Basic Methods</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-defclass"><code>defclass</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Building-Classes">Building Classes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-delete_002dinstance-on-eieio_002dinstance_002dtracker"><code>delete-instance on eieio-instance-tracker</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dinstance_002dtracker">eieio-instance-tracker</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dbuild_002dclass_002dalist"><code>eieio-build-class-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Association-Lists">Association Lists</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dchildren"><code>eieio-class-children</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dchildren_002dfast"><code>eieio-class-children-fast</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dname"><code>eieio-class-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dparent"><code>eieio-class-parent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dparents"><code>eieio-class-parents</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dclass_002dparents_002dfast"><code>eieio-class-parents-fast</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dcustom_002dwidget_002dinsert"><code>eieio-custom-widget-insert</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing">Customizing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dcustomize_002dobject"><code>eieio-customize-object</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Customizing">Customizing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dobject_002dclass"><code>eieio-object-class</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dobject_002dclass_002dname"><code>eieio-object-class-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dobject_002dname"><code>eieio-object-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dpersistent_002dpath_002drelative-on-eieio_002dpersistent"><code>eieio-persistent-path-relative on eieio-persistent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dpersistent">eieio-persistent</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dpersistent_002dread"><code>eieio-persistent-read</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dpersistent">eieio-persistent</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dpersistent_002dsave-on-eieio_002dpersistent"><code>eieio-persistent-save on eieio-persistent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dpersistent">eieio-persistent</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002dchild_002ddescription-on-eieio_002dspeedbar"><code>eieio-speedbar-child-description on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002dchild_002dmake_002dtag_002dlines-on-eieio_002dspeedbar"><code>eieio-speedbar-child-make-tag-lines on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002dderive_002dline_002dpath-on-eieio_002dspeedbar"><code>eieio-speedbar-derive-line-path on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002ddescription-on-eieio_002dspeedbar"><code>eieio-speedbar-description on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002dobject_002dbuttonname-on-eieio_002dspeedbar"><code>eieio-speedbar-object-buttonname on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-eieio_002dspeedbar_002dobject_002dchildren-on-eieio_002dspeedbar"><code>eieio-speedbar-object-children on eieio-speedbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-find_002dclass"><code>find-class</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-generic_002dp"><code>generic-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-initialize_002dinstance"><code>initialize-instance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Initialization">Initialization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-initialize_002dinstance-on-eieio_002dinstance_002dtracker"><code>initialize-instance on eieio-instance-tracker</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dinstance_002dtracker">eieio-instance-tracker</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-invalid_002dslot_002dname"><code>invalid-slot-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-invalid_002dslot_002dtype"><code>invalid-slot-type</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-K">K</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-key"><code>key</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dinstance_002dtracker">eieio-instance-tracker</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dinstance"><code>make-instance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-New-Objects">Making New Objects</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make_002dmap"><code>make-map</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dspeedbar">eieio-speedbar</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dadd_002dto_002dlist"><code>object-add-to-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dassoc"><code>object-assoc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Association-Lists">Association Lists</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dassoc_002dlist"><code>object-assoc-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Association-Lists">Association Lists</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dof_002dclass_002dp"><code>object-of-class-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dprint"><code>object-print</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Methods">Basic Methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dremove_002dfrom_002dlist"><code>object-remove-from-list</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dslots"><code>object-slots</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introspection">Introspection</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dwrite"><code>object-write</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Methods">Basic Methods</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-object_002dwrite-on-eieio_002dpersistent"><code>object-write on eieio-persistent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#eieio_002dpersistent">eieio-persistent</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oref"><code>oref</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oref_002ddefault"><code>oref-default</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oset"><code>oset</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oset_002ddefault"><code>oset-default</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-record"><code>record</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Making-New-Objects">Making New Objects</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-same_002dclass_002dfast_002dp"><code>same-class-fast-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-same_002dclass_002dp"><code>same-class-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-set_002dslot_002dvalue"><code>set-slot-value</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-shared_002dinitialize"><code>shared-initialize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Initialization">Initialization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dboundp"><code>slot-boundp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dexists_002dp"><code>slot-exists-p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Predicates">Predicates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dmakeunbound"><code>slot-makeunbound</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dmissing"><code>slot-missing</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signal-Handling">Signal Handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dunbound-1"><code>slot-unbound</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signal-Handling">Signal Handling</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-slot_002dvalue"><code>slot-value</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-unbound_002dslot"><code>unbound-slot</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Signals">Signals</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Function-Index_fn_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-with_002dslots"><code>with-slots</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Accessing-Slots">Accessing Slots</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Function-Index_fn_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Function-Index_fn_letter-W"><b>W</b></a>
 &nbsp; 
</td></tr></table>

<a name="SEC_Contents"></a>
<h2 class="contents-heading">Table of Contents</h2>

<div class="contents">

<ul class="no-bullet">
  <li><a name="toc-Quick-Start-1" href="#Quick-Start">1 Quick Start</a></li>
  <li><a name="toc-Introduction-1" href="#Introduction">2 Introduction</a></li>
  <li><a name="toc-Building-Classes-1" href="#Building-Classes">3 Building Classes</a>
  <ul class="no-bullet">
    <li><a name="toc-Inheritance-1" href="#Inheritance">3.1 Inheritance</a></li>
    <li><a name="toc-Slot-Options-1" href="#Slot-Options">3.2 Slot Options</a></li>
    <li><a name="toc-Class-Options-1" href="#Class-Options">3.3 Class Options</a></li>
  </ul></li>
  <li><a name="toc-Making-New-Objects-1" href="#Making-New-Objects">4 Making New Objects</a></li>
  <li><a name="toc-Accessing-Slots-1" href="#Accessing-Slots">5 Accessing Slots</a></li>
  <li><a name="toc-Writing-Methods-1" href="#Writing-Methods">6 Writing Methods</a>
  <ul class="no-bullet">
    <li><a name="toc-Generics-1" href="#Generics">6.1 Generics</a></li>
    <li><a name="toc-Methods-1" href="#Methods">6.2 Methods</a></li>
    <li><a name="toc-Static-Methods-1" href="#Static-Methods">6.3 Static Methods</a></li>
  </ul></li>
  <li><a name="toc-Method-Invocation-1" href="#Method-Invocation">7 Method Invocation</a></li>
  <li><a name="toc-Predicates-and-Utilities" href="#Predicates">8 Predicates and Utilities</a></li>
  <li><a name="toc-Association-Lists-1" href="#Association-Lists">9 Association Lists</a></li>
  <li><a name="toc-Customizing-Objects" href="#Customizing">10 Customizing Objects</a>
  <ul class="no-bullet">
    <li><a name="toc-Widget-extension" href="#Widget-extension">10.1 Widget extension</a></li>
  </ul></li>
  <li><a name="toc-Introspection-1" href="#Introspection">11 Introspection</a></li>
  <li><a name="toc-Base-Classes-1" href="#Base-Classes">12 Base Classes</a>
  <ul class="no-bullet">
    <li><a name="toc-eieio_002dinstance_002dinheritor-1" href="#eieio_002dinstance_002dinheritor">12.1 <code>eieio-instance-inheritor</code></a></li>
    <li><a name="toc-eieio_002dinstance_002dtracker-1" href="#eieio_002dinstance_002dtracker">12.2 <code>eieio-instance-tracker</code></a></li>
    <li><a name="toc-eieio_002dsingleton-1" href="#eieio_002dsingleton">12.3 <code>eieio-singleton</code></a></li>
    <li><a name="toc-eieio_002dpersistent-1" href="#eieio_002dpersistent">12.4 <code>eieio-persistent</code></a></li>
    <li><a name="toc-eieio_002dnamed-1" href="#eieio_002dnamed">12.5 <code>eieio-named</code></a></li>
    <li><a name="toc-eieio_002dspeedbar-1" href="#eieio_002dspeedbar">12.6 <code>eieio-speedbar</code></a></li>
  </ul></li>
  <li><a name="toc-Browsing-class-trees" href="#Browsing">13 Browsing class trees</a></li>
  <li><a name="toc-Class-Values-1" href="#Class-Values">14 Class Values</a></li>
  <li><a name="toc-Default-Superclass-1" href="#Default-Superclass">15 Default Superclass</a>
  <ul class="no-bullet">
    <li><a name="toc-Initialization-1" href="#Initialization">15.1 Initialization</a></li>
    <li><a name="toc-Basic-Methods-1" href="#Basic-Methods">15.2 Basic Methods</a></li>
    <li><a name="toc-Signal-Handling-1" href="#Signal-Handling">15.3 Signal Handling</a></li>
  </ul></li>
  <li><a name="toc-Signals-1" href="#Signals">16 Signals</a></li>
  <li><a name="toc-Naming-Conventions-1" href="#Naming-Conventions">17 Naming Conventions</a></li>
  <li><a name="toc-CLOS-compatibility-1" href="#CLOS-compatibility">18 CLOS compatibility</a></li>
  <li><a name="toc-Wish-List-1" href="#Wish-List">19 Wish List</a></li>
  <li><a name="toc-GNU-Free-Documentation-License-1" href="#GNU-Free-Documentation-License">Appendix A GNU Free Documentation License</a></li>
  <li><a name="toc-Function-Index-1" href="#Function-Index">Function Index</a></li>
</ul>
</div>

<hr>



</body>
</html>
