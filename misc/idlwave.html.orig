<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- This file documents IDLWAVE, a major mode for editing IDL files with
Emacs, and interacting with an IDL shell run as a subprocess.

This is edition 6.1 of the IDLWAVE User Manual for IDLWAVE
6.1.

Copyright (C) 1999-2017 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual",
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License".

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual." -->
<!-- Created by GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>IDLWAVE User Manual</title>

<meta name="description" content="IDLWAVE User Manual">
<meta name="keywords" content="IDLWAVE User Manual">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<link href="#Top" rel="start" title="Top">
<link href="#Index" rel="index" title="Index">
<link href="#SEC_Contents" rel="contents" title="Table of Contents">
<link href="dir.html#Top" rel="up" title="(dir)">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.indentedblock {margin-right: 0em}
blockquote.smallindentedblock {margin-right: 0em; font-size: smaller}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smalllisp {margin-left: 3.2em}
kbd {font-style: oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nolinebreak {white-space: nowrap}
span.roman {font-family: initial; font-weight: normal}
span.sansserif {font-family: sans-serif; font-weight: normal}
ul.no-bullet {list-style: none}
-->
</style>


</head>

<body lang="en">
<h1 class="settitle" align="center">IDLWAVE User Manual</h1>




<a name="SEC_Contents"></a>
<h2 class="contents-heading">Table of Contents</h2>

<div class="contents">

<ul class="no-bullet">
  <li><a name="toc-Introduction-1" href="#Introduction">1 Introduction</a></li>
  <li><a name="toc-IDLWAVE-in-a-Nutshell-1" href="#IDLWAVE-in-a-Nutshell">2 IDLWAVE in a Nutshell</a></li>
  <li><a name="toc-Getting-Started-_0028Tutorial_0029" href="#Getting-Started">3 Getting Started (Tutorial)</a>
  <ul class="no-bullet">
    <li><a name="toc-Lesson-I_003a-Development-Cycle" href="#Lesson-I_002d_002d_002dDevelopment-Cycle">3.1 Lesson I: Development Cycle</a></li>
    <li><a name="toc-Lesson-II_003a-Customization" href="#Lesson-II_002d_002d_002dCustomization">3.2 Lesson II: Customization</a></li>
    <li><a name="toc-Lesson-III_003a-User-and-Library-Catalogs" href="#Lesson-III_002d_002d_002dUser-Catalog">3.3 Lesson III: User and Library Catalogs</a></li>
  </ul></li>
  <li><a name="toc-The-IDLWAVE-Major-Mode-1" href="#The-IDLWAVE-Major-Mode">4 The IDLWAVE Major Mode</a>
  <ul class="no-bullet">
    <li><a name="toc-Code-Formatting-1" href="#Code-Formatting">4.1 Code Formatting</a>
    <ul class="no-bullet">
      <li><a name="toc-Code-Indentation-1" href="#Code-Indentation">4.1.1 Code Indentation</a></li>
      <li><a name="toc-Continued-Statement-Indentation-1" href="#Continued-Statement-Indentation">4.1.2 Continued Statement Indentation</a></li>
      <li><a name="toc-Comment-Indentation-1" href="#Comment-Indentation">4.1.3 Comment Indentation</a></li>
      <li><a name="toc-Continuation-Lines-and-Filling" href="#Continuation-Lines">4.1.4 Continuation Lines and Filling</a></li>
      <li><a name="toc-Syntax-Highlighting-1" href="#Syntax-Highlighting">4.1.5 Syntax Highlighting</a></li>
      <li><a name="toc-Octals-and-Highlighting-1" href="#Octals-and-Highlighting">4.1.6 Octals and Highlighting</a></li>
    </ul></li>
    <li><a name="toc-Routine-Info-1" href="#Routine-Info">4.2 Routine Info</a></li>
    <li><a name="toc-Online-Help-1" href="#Online-Help">4.3 Online Help</a>
    <ul class="no-bullet">
      <li><a name="toc-Help-with-HTML-Documentation-1" href="#Help-with-HTML-Documentation">4.3.1 Help with HTML Documentation</a></li>
      <li><a name="toc-Help-with-Source-1" href="#Help-with-Source">4.3.2 Help with Source</a></li>
    </ul></li>
    <li><a name="toc-Completion-1" href="#Completion">4.4 Completion</a>
    <ul class="no-bullet">
      <li><a name="toc-Case-of-Completed-Words-1" href="#Case-of-Completed-Words">4.4.1 Case of Completed Words</a></li>
      <li><a name="toc-Object-Method-Completion-and-Class-Ambiguity-1" href="#Object-Method-Completion-and-Class-Ambiguity">4.4.2 Object Method Completion and Class Ambiguity</a></li>
      <li><a name="toc-Object-Method-Completion-in-the-Shell-1" href="#Object-Method-Completion-in-the-Shell">4.4.3 Object Method Completion in the Shell</a></li>
      <li><a name="toc-Class-and-Keyword-Inheritance-1" href="#Class-and-Keyword-Inheritance">4.4.4 Class and Keyword Inheritance</a></li>
      <li><a name="toc-Structure-Tag-Completion-1" href="#Structure-Tag-Completion">4.4.5 Structure Tag Completion</a></li>
    </ul></li>
    <li><a name="toc-Routine-Source-1" href="#Routine-Source">4.5 Routine Source</a></li>
    <li><a name="toc-Resolving-Routines-1" href="#Resolving-Routines">4.6 Resolving Routines</a></li>
    <li><a name="toc-Code-Templates-1" href="#Code-Templates">4.7 Code Templates</a></li>
    <li><a name="toc-Abbreviations-1" href="#Abbreviations">4.8 Abbreviations</a></li>
    <li><a name="toc-Actions-1" href="#Actions">4.9 Actions</a>
    <ul class="no-bullet">
      <li><a name="toc-Block-Boundary-Check-1" href="#Block-Boundary-Check">4.9.1 Block Boundary Check</a></li>
      <li><a name="toc-Padding-Operators-1" href="#Padding-Operators">4.9.2 Padding Operators</a></li>
      <li><a name="toc-Case-Changes-1" href="#Case-Changes">4.9.3 Case Changes</a></li>
    </ul></li>
    <li><a name="toc-Documentation-Header" href="#Doc-Header">4.10 Documentation Header</a></li>
    <li><a name="toc-Motion-Commands-1" href="#Motion-Commands">4.11 Motion Commands</a></li>
    <li><a name="toc-Miscellaneous-Options" href="#Misc-Options">4.12 Miscellaneous Options</a></li>
  </ul></li>
  <li><a name="toc-The-IDLWAVE-Shell-1" href="#The-IDLWAVE-Shell">5 The IDLWAVE Shell</a>
  <ul class="no-bullet">
    <li><a name="toc-Starting-the-Shell-1" href="#Starting-the-Shell">5.1 Starting the Shell</a></li>
    <li><a name="toc-Using-the-Shell-1" href="#Using-the-Shell">5.2 Using the Shell</a></li>
    <li><a name="toc-Commands-Sent-to-the-Shell-1" href="#Commands-Sent-to-the-Shell">5.3 Commands Sent to the Shell</a></li>
    <li><a name="toc-Debugging-IDL-Programs-1" href="#Debugging-IDL-Programs">5.4 Debugging IDL Programs</a>
    <ul class="no-bullet">
      <li><a name="toc-A-Tale-of-Two-Modes-1" href="#A-Tale-of-Two-Modes">5.4.1 A Tale of Two Modes</a></li>
      <li><a name="toc-Debug-Key-Bindings-1" href="#Debug-Key-Bindings">5.4.2 Debug Key Bindings</a></li>
      <li><a name="toc-Breakpoints-and-Stepping-1" href="#Breakpoints-and-Stepping">5.4.3 Breakpoints and Stepping</a></li>
      <li><a name="toc-Compiling-Programs-1" href="#Compiling-Programs">5.4.4 Compiling Programs</a></li>
      <li><a name="toc-Walking-the-Calling-Stack-1" href="#Walking-the-Calling-Stack">5.4.5 Walking the Calling Stack</a></li>
      <li><a name="toc-Electric-Debug-Mode-1" href="#Electric-Debug-Mode">5.4.6 Electric Debug Mode</a></li>
    </ul></li>
    <li><a name="toc-Examining-Variables-1" href="#Examining-Variables">5.5 Examining Variables</a></li>
    <li><a name="toc-Custom-Expression-Examination-1" href="#Custom-Expression-Examination">5.6 Custom Expression Examination</a></li>
  </ul></li>
  <li><a name="toc-Acknowledgments-1" href="#Acknowledgments">6 Acknowledgments</a></li>
  <li><a name="toc-Sources-of-Routine-Info-1" href="#Sources-of-Routine-Info">Appendix A Sources of Routine Info</a>
  <ul class="no-bullet">
    <li><a name="toc-Routine-Definitions-1" href="#Routine-Definitions">A.1 Routine Definitions</a></li>
    <li><a name="toc-Routine-Information-Sources-1" href="#Routine-Information-Sources">A.2 Routine Information Sources</a></li>
    <li><a name="toc-Catalogs-1" href="#Catalogs">A.3 Catalogs</a>
    <ul class="no-bullet">
      <li><a name="toc-Library-Catalogs-1" href="#Library-Catalogs">A.3.1 Library Catalogs</a></li>
      <li><a name="toc-User-Catalog-1" href="#User-Catalog">A.3.2 User Catalog</a></li>
    </ul></li>
    <li><a name="toc-Load_002dPath-Shadows-1" href="#Load_002dPath-Shadows">A.4 Load-Path Shadows</a></li>
    <li><a name="toc-Documentation-Scan-1" href="#Documentation-Scan">A.5 Documentation Scan</a></li>
  </ul></li>
  <li><a name="toc-HTML-Help-Browser-Tips-1" href="#HTML-Help-Browser-Tips">Appendix B HTML Help Browser Tips</a></li>
  <li><a name="toc-Configuration-Examples-1" href="#Configuration-Examples">Appendix C Configuration Examples</a></li>
  <li><a name="toc-Windows-and-macOS-1" href="#Windows-and-macOS">Appendix D Windows and macOS</a></li>
  <li><a name="toc-Troubleshooting-1" href="#Troubleshooting">Appendix E Troubleshooting</a></li>
  <li><a name="toc-GNU-Free-Documentation-License-1" href="#GNU-Free-Documentation-License">Appendix F GNU Free Documentation License</a></li>
  <li><a name="toc-Index-1" href="#Index">Index</a></li>
</ul>
</div>


<a name="Top"></a>
<div class="header">
<p>
Next: <a href="#Introduction" accesskey="n" rel="next">Introduction</a>, Up: <a href="dir.html#Top" accesskey="u" rel="up">(dir)</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="IDLWAVE"></a>
<h1 class="top">IDLWAVE</h1>

<p>IDLWAVE is a package which supports editing source code written in the
Interactive Data Language (IDL), and running IDL as an inferior shell.
</p>
<p>This file documents IDLWAVE, a major mode for editing IDL files with
Emacs, and interacting with an IDL shell run as a subprocess.
</p>
<p>This is edition 6.1 of the IDLWAVE User Manual for IDLWAVE
6.1.
</p>
<p>Copyright &copy; 1999&ndash;2017 Free Software Foundation, Inc.
</p>
<blockquote>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being &ldquo;A GNU Manual&rdquo;,
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled &ldquo;GNU Free Documentation License&rdquo;.
</p>
<p>(a) The FSF&rsquo;s Back-Cover Text is: &ldquo;You have the freedom to copy and
modify this GNU manual.&rdquo;
</p></blockquote>


<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Introduction" accesskey="1">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What IDLWAVE is, and what it is not
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#IDLWAVE-in-a-Nutshell" accesskey="2">IDLWAVE in a Nutshell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">One page quick-start guide
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Getting-Started" accesskey="3">Getting Started</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Tutorial
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-IDLWAVE-Major-Mode" accesskey="4">The IDLWAVE Major Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The mode for editing IDL programs
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-IDLWAVE-Shell" accesskey="5">The IDLWAVE Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The mode for running IDL as an inferior program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Acknowledgments" accesskey="6">Acknowledgments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Who did what
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Sources-of-Routine-Info" accesskey="7">Sources of Routine Info</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How does IDLWAVE know about routine XYZ
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#HTML-Help-Browser-Tips" accesskey="8">HTML Help Browser Tips</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Configuration-Examples" accesskey="9">Configuration Examples</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The user is king
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Windows-and-macOS">Windows and macOS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What still works, and how
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Troubleshooting">Troubleshooting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">When good computers turn bad
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The license for this documentation.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Index">Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fast access
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr><tr><th colspan="3" align="left" valign="top"><pre class="menu-comment"> &mdash; The Detailed Node Listing &mdash;

Getting Started (Tutorial)

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Lesson-I_002d_002d_002dDevelopment-Cycle">Lesson I---Development Cycle</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lesson-II_002d_002d_002dCustomization">Lesson II---Customization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lesson-III_002d_002d_002dUser-Catalog">Lesson III---User Catalog</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

The IDLWAVE Major Mode

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Code-Formatting">Code Formatting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making code look nice
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Info">Routine Info</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Calling Sequence and Keyword List
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Online-Help">Online Help</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">One key press from source to help
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Completion">Completion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completing routine names and Keywords
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Source">Routine Source</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Finding routines, the easy way
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Resolving-Routines">Resolving Routines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Force the Shell to compile a routine
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Code-Templates">Code Templates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Frequent code constructs
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Abbreviations">Abbreviations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Abbreviations for common commands
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Actions">Actions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing case, Padding, End checking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Doc-Header">Doc Header</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting a standard header
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Motion-Commands">Motion Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving through the structure of a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Misc-Options">Misc Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Things that fit nowhere else
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Code Formatting

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Code-Indentation">Code Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Reflecting the logical structure
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Continued-Statement-Indentation">Continued Statement Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Comment-Indentation">Comment Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special indentation for comment lines
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Continuation-Lines">Continuation Lines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Splitting statements over lines
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Syntax-Highlighting">Syntax Highlighting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Font-lock support
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Octals-and-Highlighting">Octals and Highlighting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why &quot;123 causes problems
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Online Help

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Help-with-Source">Help with Source</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Completion

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Case-of-Completed-Words">Case of Completed Words</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CaseOFcomPletedWords
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">obj-&gt;Method, what?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Object-Method-Completion-in-the-Shell">Object Method Completion in the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">obj-&gt;Method, _EXTRA=e
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Structure-Tag-Completion">Structure Tag Completion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completing state.Tag
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Actions

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Block-Boundary-Check">Block Boundary Check</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Is the END statement correct?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Padding-Operators">Padding Operators</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enforcing space around &lsquo;<samp>=</samp>&rsquo; etc
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Case-Changes">Case Changes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enforcing upper case keywords
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

The IDLWAVE Shell

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Starting-the-Shell">Starting the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to launch IDL as a subprocess
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Using-the-Shell">Using the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interactively working with the Shell
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Commands-Sent-to-the-Shell">Commands Sent to the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-IDL-Programs">Debugging IDL Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Examining-Variables">Examining Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Custom-Expression-Examination">Custom Expression Examination</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Debugging IDL Programs

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#A-Tale-of-Two-Modes">A Tale of Two Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debug-Key-Bindings">Debug Key Bindings</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Compiling-Programs">Compiling Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Walking-the-Calling-Stack">Walking the Calling Stack</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Electric-Debug-Mode">Electric Debug Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Sources of Routine Info

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Routine-Definitions">Routine Definitions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Where IDL Routines are defined.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Information-Sources">Routine Information Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">So how does IDLWAVE know about...
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Catalogs">Catalogs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Load_002dPath-Shadows">Load-Path Shadows</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Routines defined in several places
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Documentation-Scan">Documentation Scan</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Scanning the IDL Manuals
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

Catalogs

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Library-Catalogs">Library Catalogs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User-Catalog">User Catalog</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">

</pre></th></tr></table>

<hr>
<a name="Introduction"></a>
<div class="header">
<p>
Next: <a href="#IDLWAVE-in-a-Nutshell" accesskey="n" rel="next">IDLWAVE in a Nutshell</a>, Previous: <a href="#Top" accesskey="p" rel="prev">Top</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introduction-1"></a>
<h2 class="chapter">1 Introduction</h2>
<a name="index-Introduction"></a>
<a name="index-CORBA-_0028Common-Object-Request-Broker-Architecture_0029"></a>
<a name="index-Interface-Definition-Language"></a>
<a name="index-Interactive-Data-Language"></a>
<a name="index-cc_002dmode_002eel"></a>
<a name="index-idl_002eel"></a>
<a name="index-idl_002dshell_002eel"></a>
<a name="index-Feature-overview"></a>

<p>IDLWAVE is a package which supports editing source files written in
the Interactive Data Language (IDL), and running IDL as an inferior shell<a name="DOCF1" href="#FOOT1"><sup>1</sup></a>.  It is a feature-rich replacement for the IDLDE
development environment included with IDL, and uses the full power of
Emacs to make editing and running IDL programs easier, quicker, and more
structured.
</p>
<p>IDLWAVE consists of two main parts: a major mode for editing IDL
source files (<code>idlwave-mode</code>) and a mode for running the IDL
program as an inferior shell (<code>idlwave-shell-mode</code>).  Although
one mode can be used without the other, both work together closely to
form a complete development environment. Here is a brief summary of
what IDLWAVE does:
</p>
<ul>
<li> Smart code indentation and automatic-formatting.
</li><li> Three level syntax highlighting support.
</li><li> Context-sensitive display of calling sequences and keywords for more
than 1000 native IDL routines, extensible to any additional number of
local routines, and already available with many pre-scanned libraries.
</li><li> Fast, context-sensitive online HTML help, or source-header help for
undocumented routines.
</li><li> Context sensitive completion of routine names, keywords, system
variables, class names and much more.
</li><li> Easy insertion of code templates and abbreviations of common constructs.
</li><li> Automatic corrections to enforce a variety of customizable coding
standards.
</li><li> Integrity checks and auto-termination of logical blocks.
</li><li> Routine name space conflict search with likelihood-of-use ranking.
</li><li> Support for <samp>imenu</samp> (Emacs) and <samp>func-menu</samp> (XEmacs).
</li><li> Documentation support.
</li><li> Running IDL as an inferior Shell with history search, command line
editing and all the completion and routine info capabilities present in
IDL source buffers.
</li><li> Full handling of debugging with breakpoints, with interactive setting
of break conditions, and easy stepping through code.
</li><li> Compilation, execution and interactive single-keystroke debugging of
programs directly from the source buffer.
</li><li> Quick, source-guided navigation of the calling stack, with variable
inspection, etc.
</li><li> Examining variables and expressions with a mouse click.
</li><li> And much, much more...
</li></ul>


<p>IDLWAVE is the distant successor to the <samp>idl.el</samp> and
<samp>idl-shell.el</samp> files written by Chris Chase.  The modes and files
had to be renamed because of a name space conflict with CORBA&rsquo;s
<code>idl-mode</code>, defined in Emacs in the file <samp>cc-mode.el</samp>.
</p>
<p>In this manual, each section ends with a list of related user options.
Don&rsquo;t be confused by the sheer number of options available: in most
cases the default settings are just fine.  The variables are listed here
to make sure you know where to look if you want to change anything.  For
a full description of what a particular variable does and how to
configure it, see the documentation string of that variable (available
with <kbd>C-h v</kbd>).  Some configuration examples are also given in the
appendix.
</p>
<hr>
<a name="IDLWAVE-in-a-Nutshell"></a>
<div class="header">
<p>
Next: <a href="#Getting-Started" accesskey="n" rel="next">Getting Started</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="IDLWAVE-in-a-Nutshell-1"></a>
<h2 class="chapter">2 IDLWAVE in a Nutshell</h2>
<a name="index-Summary-of-important-commands"></a>
<a name="index-IDLWAVE-in-a-Nutshell"></a>
<a name="index-Nutshell_002c-IDLWAVE-in-a"></a>

<a name="Editing-IDL-Programs"></a>
<h4 class="subheading">Editing IDL Programs</h4>

<table>
<tr><td width="15%"><tt class="key">TAB</tt></td><td width="85%">Indent the current line relative to context.</td></tr>
<tr><td width="15%"><kbd>C-M-\</kbd></td><td width="85%">Re-indent all lines in the current region.</td></tr>
<tr><td width="15%"><kbd>C-M-q</kbd></td><td width="85%">Re-indent all lines in the current routine.</td></tr>
<tr><td width="15%"><kbd>C-u <span class="key">TAB</span></kbd></td><td width="85%">Re-indent all lines in the current statement.</td></tr>
<tr><td width="15%"><kbd>M-<span class="key">RET</span></kbd></td><td width="85%">Start a continuation line, splitting the current line at point.</td></tr>
<tr><td width="15%"><kbd>M-;</kbd></td><td width="85%">Start new comment at line beginning or after code, or (un)comment
highlighted region.</td></tr>
<tr><td width="15%"><kbd>M-q</kbd></td><td width="85%">Fill the current comment paragraph.</td></tr>
<tr><td width="15%"><kbd>C-c ?</kbd></td><td width="85%">Display calling sequence and keywords for the procedure or function call
at point.</td></tr>
<tr><td width="15%"><kbd>M-?</kbd></td><td width="85%">Load context sensitive online help for nearby routine, keyword, etc.</td></tr>
<tr><td width="15%"><kbd>M-<span class="key">TAB</span></kbd></td><td width="85%">Complete a procedure name, function name or keyword in the buffer.</td></tr>
<tr><td width="15%"><kbd>C-c C-i</kbd></td><td width="85%">Update IDLWAVE&rsquo;s knowledge about functions and procedures.</td></tr>
<tr><td width="15%"><kbd>C-c C-v</kbd></td><td width="85%">Visit the source code of a procedure/function.</td></tr>
<tr><td width="15%"><kbd>C-u C-c C-v</kbd></td><td width="85%">Visit the source code of a procedure/function in this buffer.</td></tr>
<tr><td width="15%"><kbd>C-c C-h</kbd></td><td width="85%">Insert a standard documentation header.</td></tr>
<tr><td width="15%"><kbd>C-c <span class="key">RET</span></kbd></td><td width="85%">Insert a new timestamp and history item in the documentation header.</td></tr>
</table>

<a name="Running-the-IDLWAVE-Shell_002c-Debugging-Programs"></a>
<h4 class="subheading">Running the IDLWAVE Shell, Debugging Programs</h4>

<table>
<tr><td width="15%"><kbd>C-c C-s</kbd></td><td width="85%">Start IDL as a subprocess and/or switch to the shell buffer.</td></tr>
<tr><td width="15%"><tt class="key">Up</tt>, <kbd>M-p</kbd></td><td width="85%">Cycle back through IDL command history.</td></tr>
<tr><td width="15%"><tt class="key">Down</tt>,<kbd>M-n</kbd></td><td width="85%">Cycle forward.</td></tr>
<tr><td width="15%"><kbd><span class="key">TAB</span></kbd></td><td width="85%">Complete a procedure name, function name or keyword in the shell buffer.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-c</kbd></td><td width="85%">Save and compile the source file in the current buffer.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-e</kbd></td><td width="85%">Compile and run the current region.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-x</kbd></td><td width="85%">Go to next syntax error.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-v</kbd></td><td width="85%">Switch to electric debug mode.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-b</kbd></td><td width="85%">Set a breakpoint at the nearest viable source line.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-d</kbd></td><td width="85%">Clear the nearest breakpoint.</td></tr>
<tr><td width="15%"><kbd>C-c C-d [</kbd></td><td width="85%">Go to the previous breakpoint.</td></tr>
<tr><td width="15%"><kbd>C-c C-d ]</kbd></td><td width="85%">Go to the next breakpoint.</td></tr>
<tr><td width="15%"><kbd>C-c C-d C-p</kbd></td><td width="85%">Print the value of the expression near point in IDL.</td></tr>
</table>

<a name="Commonly-used-Settings-in-_002eemacs"></a>
<h4 class="subheading">Commonly used Settings in <samp>.emacs</samp></h4>
<div class="lisp">
<pre class="lisp">;; Change the indentation preferences
;; Start autoloading routine info after 2 idle seconds
(setq idlwave-init-rinfo-when-idle-after 2)
;; Pad operators with spaces
(setq idlwave-do-actions t
      idlwave-surround-by-blank t)
;; Syntax Highlighting
(add-hook 'idlwave-mode-hook 'turn-on-font-lock)
;; Automatically start the shell when needed
(setq idlwave-shell-automatic-start t)
;; Bind debugging commands with CONTROL and SHIFT modifiers
(setq idlwave-shell-debug-modifiers '(control shift))
</pre></div>

<A NAME="TUTORIAL"></A>

<hr>
<a name="Getting-Started"></a>
<div class="header">
<p>
Next: <a href="#The-IDLWAVE-Major-Mode" accesskey="n" rel="next">The IDLWAVE Major Mode</a>, Previous: <a href="#IDLWAVE-in-a-Nutshell" accesskey="p" rel="prev">IDLWAVE in a Nutshell</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Getting-Started-_0028Tutorial_0029"></a>
<h2 class="chapter">3 Getting Started (Tutorial)</h2>
<a name="index-Quick_002dStart"></a>
<a name="index-Tutorial"></a>
<a name="index-Getting-Started"></a>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Lesson-I_002d_002d_002dDevelopment-Cycle" accesskey="1">Lesson I---Development Cycle</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lesson-II_002d_002d_002dCustomization" accesskey="2">Lesson II---Customization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Lesson-III_002d_002d_002dUser-Catalog" accesskey="3">Lesson III---User Catalog</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Lesson-I_002d_002d_002dDevelopment-Cycle"></a>
<div class="header">
<p>
Next: <a href="#Lesson-II_002d_002d_002dCustomization" accesskey="n" rel="next">Lesson II---Customization</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Lesson-I_003a-Development-Cycle"></a>
<h3 class="section">3.1 Lesson I: Development Cycle</h3>

<p>The purpose of this tutorial is to guide you through a very basic
development cycle using IDLWAVE.  We will paste a simple program into
a buffer and use the shell to compile, debug and run it.  On the way
we will use many of the important IDLWAVE commands.  Note, however,
that IDLWAVE has many more capabilities than covered here, which can
be discovered by reading the entire manual, or hovering over the
shoulder of your nearest IDLWAVE guru for a few days.
</p>
<p>It is assumed that you have access to Emacs or XEmacs with the full
IDLWAVE package including online help.  We also assume that you are
familiar with Emacs and can read the nomenclature of key presses in
Emacs (in particular, <kbd>C</kbd> stands for <tt class="key">CONTROL</tt> and <kbd>M</kbd> for
<tt class="key">META</tt> (often the <tt class="key">ALT</tt> key carries this functionality)).
</p>
<p>Open a new source file by typing:
</p>
<div class="example">
<pre class="example"><kbd>C-x C-f tutorial.pro <span class="key">RET</span></kbd>
</pre></div>

<p>A buffer for this file will pop up, and it should be in IDLWAVE mode,
indicated in the mode line just below the editing window.  Also, the
menu bar should contain &lsquo;<samp>IDLWAVE</samp>&rsquo;.
</p>
<p>Now cut-and-paste the following code, also available as
<samp>tutorial.pro</samp> in the IDLWAVE distribution.
</p>
<div class="example">
<pre class="example">function daynr,d,m,y
  ;; compute a sequence number for a date
  ;; works 1901-2099.
  if y lt 100 then y = y+1900
  if m le 2 then delta = 1 else delta = 0
  m1 = m + delta*12 + 1
  y1 = y * delta
  return, d + floor(m1*30.6)+floor(y1*365.25)+5
end

function weekday,day,month,year
  ;; compute weekday number for date
  nr = daynr(day,month,year)
  return, nr mod 7
end

pro plot_wday,day,month
  ;; Plot the weekday of a date in the first 10 years of this century.
  years = 2000,+indgen(10)
  wdays = intarr(10)
  for i=0,n_elements(wdays)-1 do begin
      wdays[i] =  weekday(day,month,years[i])
  end
  plot,years,wdays,YS=2,YT=&quot;Wday (0=Sunday)&quot;
end
</pre></div>

<p>The indentation probably looks funny, since it&rsquo;s different from the
settings you use, so use the <tt class="key">TAB</tt> key in each line to
automatically line it up (or, more quickly, <em>select</em> the entire
buffer with <kbd>C-x h</kbd>, and indent the whole region with
<kbd>C-M-\</kbd>).  Notice how different syntactical elements are
highlighted in different colors, if you have set up support for
font-lock.
</p>
<p>Let&rsquo;s check out two particular editing features of IDLWAVE.  Place the
cursor after the <code>end</code> statement of the <code>for</code> loop and press
<tt class="key">SPC</tt>.  IDLWAVE blinks back to the beginning of the block and
changes the generic <code>end</code> to the specific <code>endfor</code>
automatically (as long as the variable <code>idlwave-expand-generic-end</code>
is turned on; see <a href="#Lesson-II_002d_002d_002dCustomization">Lesson II---Customization</a>).  Now place the
cursor in any line you would like to split and press <kbd>M-<span class="key">RET</span></kbd>.
The line is split at the cursor position, with the continuation &lsquo;<samp>$</samp>&rsquo;
and indentation all taken care of.  Use <kbd>C-/</kbd> to undo the last
change.
</p>
<p>The procedure <code>plot_wday</code> is supposed to plot the day of the week
of a given date for the first 10 years of the 21st century.  As in
most code, there are a few bugs, which we are going to use IDLWAVE to
help us fix.
</p>
<p>First, let&rsquo;s launch the IDLWAVE shell.  You do this with the command
<kbd>C-c C-s</kbd>.  The Emacs window will split or another window will popup
to display IDL running in a shell interaction buffer.  Type a few
commands like <code>print,!PI</code> to convince yourself that you can work
there just as well as in a terminal, or the IDLDE.  Use the arrow keys
to cycle through your command history.  Are we having fun now?
</p>
<p>Now go back to the source window and type <kbd>C-c C-d C-c</kbd> to compile
the program.  If you watch the shell buffer, you see that IDLWAVE types
&lsquo;<samp>.run &quot;tutorial.pro&quot;</samp>&rsquo; for you.  But the compilation fails because
there is a comma in the line &lsquo;<samp>years=...</samp>&rsquo;.  The line with the error
is highlighted and the cursor positioned at the error, so remove the
comma (you should only need to hit <kbd>Delete</kbd>!).  Compile again, using
the same keystrokes as before.  Notice that the file is automatically
saved for you.  This time everything should work fine, and you should
see the three routines compile.
</p>
<p>Now we want to use the command to plot the day of the week on January
1st.  We could type the full command ourselves, but why do that?  Go
back to the shell window, type &lsquo;<samp>plot_</samp>&rsquo; and hit <tt class="key">TAB</tt>.  After
a bit of a delay (while IDLWAVE initializes its routine info database,
if necessary), the window will split to show all procedures it knows
starting with that string, and <code><span class="nolinebreak">plot_wday</span></code><!-- /@w --> should be one of
them.  Saving the buffer alerted IDLWAVE about this new routine.
Click with the middle mouse button on <code>plot_wday</code> and it will be
copied to the shell buffer, or if you prefer, add &lsquo;<samp>w</samp>&rsquo; to
&lsquo;<samp>plot_</samp>&rsquo; to make it unambiguous (depending on what other routines
starting with &lsquo;<samp>plot_</samp>&rsquo; you have installed on your system), hit
<tt class="key">TAB</tt> again, and the full routine name will be completed.  Now
provide the two arguments:
</p>
<div class="example">
<pre class="example">plot_wday,1,1
</pre></div>

<p>and press <tt class="key">RET</tt>.  This fails with an error message telling
you the <code>YT</code> keyword to plot is ambiguous.  What are the allowed
keywords again?  Go back to the source window and put the cursor into
the &ldquo;plot&rdquo; line and press <kbd>C-c ?</kbd>.  This shows the routine info
window for the plot routine, which contains a list of keywords, along
with the argument list.  Oh, we wanted <code>YTITLE</code>.  Fix that up.
Recompile with <kbd>C-c C-d C-c</kbd>. Jump back into the shell with
<kbd>C-c C-s</kbd>, press the <tt class="key">UP</tt> arrow to recall the previous command
and execute again.
</p>
<p>This time we get a plot, but it is pretty ugly: the points are all
connected with a line.  Hmm, isn&rsquo;t there a way for <code>plot</code> to use
symbols instead?  What was that keyword?  Position the cursor on the
plot line after a comma (where you&rsquo;d normally type a keyword), and hit
<kbd>M-<span class="key">Tab</span></kbd>.  A long list of plot&rsquo;s keywords appears.  Aha,
there it is, <code>PSYM</code>.  Middle click to insert it.  An &lsquo;<samp>=</samp>&rsquo;
sign is included for you too.  Now what were the values of <code>PSYM</code>
supposed to be?  With the cursor on or after the keyword, press
<kbd>M-?</kbd> for online help (alternatively, you could have right clicked
on the colored keyword itself in the completion list).  A browser will
pop up showing the HTML documentation for the <code>PYSM</code> keyword.
OK, let&rsquo;s use diamonds=4.  Fix this, recompile (you know the command
by now: <kbd>C-c C-d C-c</kbd>), go back to the shell (if it&rsquo;s vanished,
you know what to do: <kbd>C-c C-s</kbd>) and execute again.  Now things
look pretty good.
</p>
<p>Let&rsquo;s try a different day.  How about April fool&rsquo;s day?
</p>
<div class="example">
<pre class="example">plot_wday,1,4
</pre></div>

<p>Oops, this looks very wrong.  All April Fool&rsquo;s days cannot be Fridays!
We&rsquo;ve got a bug in the program, perhaps in the <code>daynr</code> function.
Let&rsquo;s put a breakpoint on the last line there.  Position the cursor on
the &lsquo;<samp>return, d+...</samp>&rsquo; line and press <kbd>C-c C-d C-b</kbd>.  IDL sets a
breakpoint (as you see in the shell window), and the break line is
indicated.  Back to the shell buffer, re-execute the previous command.
IDL stops at the line with the breakpoint.  Now hold down the SHIFT
key and click with the middle mouse button on a few variables there:
&lsquo;<samp>d</samp>&rsquo;, &lsquo;<samp>y</samp>&rsquo;, &lsquo;<samp>m</samp>&rsquo;, &lsquo;<samp>y1</samp>&rsquo;, etc.  Maybe <code>d</code> isn&rsquo;t
the correct type.  CONTROL-SHIFT middle-click on it for help.  Well,
it&rsquo;s an integer, so that&rsquo;s not the problem.  Aha, &lsquo;<samp>y1</samp>&rsquo; is zero,
but it should be the year, depending on delta.  Shift click
&lsquo;<samp>delta</samp>&rsquo; to see that it&rsquo;s 0.  Below, we see the offending line:
&lsquo;<samp>y1=y*delta...</samp>&rsquo; the multiplication should have been a minus sign!
Hit <kbd>q</kbd> to exit the debugging mode, and fix the line to read:
</p>
<div class="example">
<pre class="example">y1 = y - delta
</pre></div>

<p>Now remove all breakpoints: <kbd>C-c C-d C-a</kbd>.  Recompile and rerun the
command.  Everything should now work fine.  How about those leap years?
Change the code to plot 100 years and see that every 28 years, the
sequence of weekdays repeats.
</p>
<hr>
<a name="Lesson-II_002d_002d_002dCustomization"></a>
<div class="header">
<p>
Next: <a href="#Lesson-III_002d_002d_002dUser-Catalog" accesskey="n" rel="next">Lesson III---User Catalog</a>, Previous: <a href="#Lesson-I_002d_002d_002dDevelopment-Cycle" accesskey="p" rel="prev">Lesson I---Development Cycle</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Lesson-II_003a-Customization"></a>
<h3 class="section">3.2 Lesson II: Customization</h3>

<p>Emacs is probably the most customizable piece of software ever written,
and it would be a shame if you did not make use of this to adapt IDLWAVE
to your own preferences.  Customizing Emacs or IDLWAVE is accomplished
by setting Lisp variables in the <samp>.emacs</samp> file in your home
directory&mdash;but do not be dismayed; for the most part, you can just
copy and work from the examples given here.
</p>
<p>Let&rsquo;s first use a boolean variable.  These are variables which you turn
on or off, much like a checkbox. A value of &lsquo;<samp>t</samp>&rsquo; means on, a value
of &lsquo;<samp>nil</samp>&rsquo; means off.  Copy the following line into your
<samp>.emacs</samp> file, exit and restart Emacs.
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-reserved-word-upcase t)
</pre></div>

<p>When this option is turned on, each reserved word you type into an IDL
source buffer will be converted to upper case when you press <tt class="key">SPC</tt>
or <tt class="key">RET</tt> right after the word.  Try it out!  &lsquo;<samp>if</samp>&rsquo; changes to
&lsquo;<samp>IF</samp>&rsquo;, &lsquo;<samp>begin</samp>&rsquo; to &lsquo;<samp>BEGIN</samp>&rsquo;.  If you don&rsquo;t like this
behavior, remove the option again from your <samp>.emacs</samp> file and
restart Emacs.
</p>
<p>You likely have your own indentation preferences for IDL code.  For
example, some may prefer to indent the main block of an IDL program
slightly from the margin and use only 3 spaces as indentation between
<code>BEGIN</code> and <code>END</code>.  Try the following lines in <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-main-block-indent 1)
(setq idlwave-block-indent 3)
(setq idlwave-end-offset -3)
</pre></div>

<p>Restart Emacs, and re-indent the program we developed in the first part
of this tutorial with <kbd>C-c h</kbd> and <kbd>C-M-\</kbd>.  You may want to keep
these lines in <samp>.emacs</samp>, with values adjusted to your liking.  If
you want to get more information about any of these variables, type,
e.g., <kbd>C-h v idlwave-main-block-indent <span class="key">RET</span></kbd>.  To find which
variables can be customized, look for items marked &lsquo;<samp>User Option:</samp>&rsquo;
throughout this manual.
</p>
<p>If you cannot seem to master this Lisp customization in <samp>.emacs</samp>,
there is another, more user-friendly way to customize all the IDLWAVE
variables.  You can access it through the IDLWAVE menu in one of the
<samp>.pro</samp> buffers, menu item <code>Customize-&gt;Browse IDLWAVE
Group</code>. Here you&rsquo;ll be presented with all the various variables grouped
into categories.  You can navigate the hierarchy (e.g., &lsquo;<samp>IDLWAVE
Code Formatting-&gt;Idlwave Abbrev And Indent Action-&gt;Idlwave Expand
Generic End</samp>&rsquo; to turn on <code>END</code> expansion), read about the variables,
change them, and &ldquo;Save for Future Sessions&rdquo;.  Few of these variables
need customization, but you can exercise considerable control over
IDLWAVE&rsquo;s functionality with them.
</p>
<p>You may also find the key bindings used for the debugging commands too
long and complicated.  Often we have heard complaints along the lines
of, &ldquo;Do I really have to go through the finger gymnastics of <kbd>C-c
C-d C-c</kbd> to run a simple command?&rdquo;  Due to Emacs rules and
conventions, shorter bindings cannot be set by default, but you can
easily enable them.  First, there is a way to assign all debugging
commands in a single sweep to another simpler combination.  The only
problem is that we have to use something which Emacs does not need for
other important commands.  One good option is to execute debugging
commands by holding down <tt class="key">CONTROL</tt> and <tt class="key">SHIFT</tt> while pressing
a single character: <kbd>C-S-b</kbd> for setting a breakpoint, <kbd>C-S-c</kbd>
for compiling the current source file, <kbd>C-S-a</kbd> for deleting all
breakpoints (try it, it&rsquo;s easier).  You can enable this with:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-shell-debug-modifiers '(shift control))
</pre></div>

<p>If you have a special keyboard with, for example, a
<tt class="key">SUPER</tt> key, you could even shorten that:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-shell-debug-modifiers '(super))
</pre></div>

<p>to get compilation on <kbd>S-c</kbd>.  Often, a modifier key like
<tt class="key">SUPER</tt> or <tt class="key">HYPER</tt> is bound or can be bound to an otherwise
unused key on your keyboard; consult your system documentation.
</p>
<p>You can also assign specific commands to keys.  This you must do in the
<em>mode-hook</em>, a special function which is run when a new IDLWAVE
buffer gets set up.  The possibilities for key customization are
endless.  Here we set function keys f4-f8 to common debugging commands.
</p>
<div class="lisp">
<pre class="lisp">;; First for the source buffer
(add-hook 'idlwave-mode-hook
   (lambda ()
    (local-set-key [f4] 'idlwave-shell-retall)
    (local-set-key [f5] 'idlwave-shell-break-here)
    (local-set-key [f6] 'idlwave-shell-clear-current-bp)
    (local-set-key [f7] 'idlwave-shell-cont)
    (local-set-key [f8] 'idlwave-shell-clear-all-bp)))
;; Then for the shell buffer
(add-hook 'idlwave-shell-mode-hook
   (lambda ()
    (local-set-key [f4] 'idlwave-shell-retall)
    (local-set-key [f5] 'idlwave-shell-break-here)
    (local-set-key [f6] 'idlwave-shell-clear-current-bp)
    (local-set-key [f7] 'idlwave-shell-cont)
    (local-set-key [f8] 'idlwave-shell-clear-all-bp)))
</pre></div>

<hr>
<a name="Lesson-III_002d_002d_002dUser-Catalog"></a>
<div class="header">
<p>
Previous: <a href="#Lesson-II_002d_002d_002dCustomization" accesskey="p" rel="prev">Lesson II---Customization</a>, Up: <a href="#Getting-Started" accesskey="u" rel="up">Getting Started</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Lesson-III_003a-User-and-Library-Catalogs"></a>
<h3 class="section">3.3 Lesson III: User and Library Catalogs</h3>

<p>We have already used the routine info display in the first part of this
tutorial.  This was the invoked using <kbd>C-c ?</kbd>, and displays
information about the IDL routine near the cursor position.  Wouldn&rsquo;t it
be nice to have the same kind of information available for your own
routines and for the huge amount of code in major libraries like JHUAPL
or the IDL-Astro library?  In many cases, you may already have this
information.  Files named <samp>.idlwave_catalog</samp> in library directories
contain scanned information on the routines in that directory; many
popular libraries ship with these &ldquo;library catalogs&rdquo; pre-scanned.
Users can scan their own routines in one of two ways: either using the
supplied tool to scan directories and build their own
<samp>.idlwave_catalog</samp> files, or using the built-in method to create a
single &ldquo;user catalog&rdquo;, which we&rsquo;ll show here.  See <a href="#Catalogs">Catalogs</a>, for
more information on choosing which method to use.
</p>
<p>To build a user catalog, select <code>Routine Info/Select Catalog
Directories</code> from the IDLWAVE entry in the menu bar.  If necessary,
start the shell first with <kbd>C-c C-s</kbd> (see <a href="#Starting-the-Shell">Starting the Shell</a>).
IDLWAVE will find out about the IDL <code>!PATH</code> variable and offer a
list of directories on the path.  Simply select them all (or whichever
you want; directories with existing library catalogs will not be
selected by default) and click on the &lsquo;<samp>Scan&amp;Save</samp>&rsquo; button.  Then
go for a cup of coffee while IDLWAVE collects information for each and
every IDL routine on your search path.  All this information is
written to the file <samp>~/.emacs.d/idlwave/idlusercat.el</samp>
and will from now on automatically load whenever you use
IDLWAVE.  You may find it necessary to rebuild the catalog on occasion
as your local libraries change, or build a library catalog for those
directories instead.  Invoke routine info (<kbd>C-c ?</kbd>) or completion
(<kbd>M-<span class="key">TAB</span></kbd>) on any routine or partial routine name you know to
be located in the library.  E.g., if you have scanned the IDL-Astro
library:
</p>
<div class="example">
<pre class="example">    a=readf<span class="key">M-<span class="key">TAB</span></span>
</pre></div>

<p>expands to &ldquo;readfits(&rdquo;.  Then try
</p>
<div class="example">
<pre class="example">    a=readfits(<span class="key">C-c ?</span>
</pre></div>

<p>and you get:
</p>
<div class="example">
<pre class="example">Usage:    Result = READFITS(filename, header, heap)
...
</pre></div>

<p>I hope you made it until here.  Now you are set to work with IDLWAVE.
On the way you will want to change other things, and to learn more
about the possibilities not discussed in this short tutorial.  Read
the manual, look at the documentation strings of interesting variables
(with <kbd>C-h v idlwave&lt;-variable-name&gt; <span class="key">RET</span></kbd>) and ask the
remaining questions on the newsgroup <code>comp.lang.idl-pvwave</code>.
</p>
<hr>
<a name="The-IDLWAVE-Major-Mode"></a>
<div class="header">
<p>
Next: <a href="#The-IDLWAVE-Shell" accesskey="n" rel="next">The IDLWAVE Shell</a>, Previous: <a href="#Getting-Started" accesskey="p" rel="prev">Getting Started</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-IDLWAVE-Major-Mode-1"></a>
<h2 class="chapter">4 The IDLWAVE Major Mode</h2>
<a name="index-IDLWAVE-major-mode"></a>
<a name="index-Major-mode_002c-idlwave_002dmode"></a>

<p>The IDLWAVE major mode supports editing IDL source files.  In this
chapter we describe the main features of the mode and how to customize
them.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Code-Formatting" accesskey="1">Code Formatting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making code look nice
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Info" accesskey="2">Routine Info</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Calling Sequence and Keyword List
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Online-Help" accesskey="3">Online Help</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">One key press from source to help
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Completion" accesskey="4">Completion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completing routine names and Keywords
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Source" accesskey="5">Routine Source</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Finding routines, the easy way
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Resolving-Routines" accesskey="6">Resolving Routines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Force the Shell to compile a routine
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Code-Templates" accesskey="7">Code Templates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Frequent code constructs
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Abbreviations" accesskey="8">Abbreviations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Abbreviations for common commands
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Actions" accesskey="9">Actions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing case, Padding, End checking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Doc-Header">Doc Header</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting a standard header
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Motion-Commands">Motion Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving through the structure of a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Misc-Options">Misc Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Things that fit nowhere else
</td></tr>
</table>

<hr>
<a name="Code-Formatting"></a>
<div class="header">
<p>
Next: <a href="#Routine-Info" accesskey="n" rel="next">Routine Info</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Code-Formatting-1"></a>
<h3 class="section">4.1 Code Formatting</h3>
<a name="index-Code-formatting"></a>
<a name="index-Formatting_002c-of-code"></a>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Code-Indentation" accesskey="1">Code Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Reflecting the logical structure
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Continued-Statement-Indentation" accesskey="2">Continued Statement Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Comment-Indentation" accesskey="3">Comment Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special indentation for comment lines
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Continuation-Lines" accesskey="4">Continuation Lines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Splitting statements over lines
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Syntax-Highlighting" accesskey="5">Syntax Highlighting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Font-lock support
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Octals-and-Highlighting" accesskey="6">Octals and Highlighting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why &quot;123 causes problems
</td></tr>
</table>

<p>The IDL language, with its early roots in FORTRAN, modern
implementation in C, and liberal borrowing of features of many vector
and other languages along its 25+ year history, has inherited an
unusual mix of syntax elements.  Left to his or her own devices, a
novice IDL programmer will often conjure code which is very difficult
to read and impossible to adapt.  Much can be gleaned from studying
available IDL code libraries for coding style pointers, but, due to
the variety of IDL syntax elements, replicating this style can be
challenging at best.  Luckily, IDLWAVE understands the structure of
IDL code very well, and takes care of almost all formatting issues for
you.  After configuring it to match your coding standards, you can
rely on it to help keep your code neat and organized.
</p>

<hr>
<a name="Code-Indentation"></a>
<div class="header">
<p>
Next: <a href="#Continued-Statement-Indentation" accesskey="n" rel="next">Continued Statement Indentation</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Code-Indentation-1"></a>
<h4 class="subsection">4.1.1 Code Indentation</h4>
<a name="index-Code-indentation"></a>
<a name="index-Indentation"></a>

<p>Like all Emacs programming modes, IDLWAVE performs code indentation.
The <tt class="key">TAB</tt> key indents the current line relative to context.
<tt class="key">LFD</tt> insert a newline and indents the new line.  The indentation is
governed by a number of variables.  IDLWAVE indents blocks (between
<code>PRO</code>/<code>FUNCTION</code>/<code>BEGIN</code> and <code>END</code>), and
continuation lines.
</p>
<a name="index-Foreign-code_002c-adapting"></a>
<a name="index-Indentation_002c-of-foreign-code"></a>
<a name="index-C_002dM_002d_005c"></a>
<p>To re-indent a larger portion of code (e.g., when working with foreign
code written with different conventions), use <kbd>C-M-\</kbd>
(<code>indent-region</code>) after marking the relevant code.  Useful marking
commands are <kbd>C-x h</kbd> (the entire file) or <kbd>C-M-h</kbd> (the current
subprogram).  The command <kbd>C-M-q</kbd> reindents the entire current
routine.  See <a href="#Actions">Actions</a>, for information how to impose additional
formatting conventions on foreign code.
</p>
<dl>
<dt><a name="index-idlwave_002dmain_002dblock_002dindent"></a>User Option: <strong>idlwave-main-block-indent</strong> <em>(<code>2</code>)</em></dt>
<dd><p>Extra indentation for the main block of code.  That is the block between
the FUNCTION/PRO statement and the END statement for that program
unit.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dblock_002dindent"></a>User Option: <strong>idlwave-block-indent</strong> <em>(<code>3</code>)</em></dt>
<dd><p>Extra indentation applied to block lines.  If you change this, you
probably also want to change <code>idlwave-end-offset</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dend_002doffset"></a>User Option: <strong>idlwave-end-offset</strong> <em>(<code>-3</code>)</em></dt>
<dd><p>Extra indentation applied to block END lines.  A value equal to negative
<code>idlwave-block-indent</code> will make END lines line up with the block
BEGIN lines.
</p></dd></dl>

<hr>
<a name="Continued-Statement-Indentation"></a>
<div class="header">
<p>
Next: <a href="#Comment-Indentation" accesskey="n" rel="next">Comment Indentation</a>, Previous: <a href="#Code-Indentation" accesskey="p" rel="prev">Code Indentation</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Continued-Statement-Indentation-1"></a>
<h4 class="subsection">4.1.2 Continued Statement Indentation</h4>
<a name="index-Indentation_002c-continued-statement"></a>
<a name="index-Continued-statement-indentation"></a>
<p>Continuation lines (following a line ending with <code>$</code>) can receive a
fixed indentation offset from the main level, but in several situations
IDLWAVE can use a special form of indentation which aligns continued
statements more naturally.  Special indentation is calculated for
continued routine definition statements and calls, enclosing parentheses
(like function calls, structure/class definitions, explicit structures
or lists, etc.), and continued assignments.  An attempt is made to line
up with the first non-whitespace character after the relevant opening
punctuation mark (<code>,</code>,<code>(</code>,<code>{</code>,<code>[</code>,<code>=</code>).  For
lines without any non-comment characters on the line with the opening
punctuation, the continued line(s) are aligned just past the
punctuation.  An example:
</p>
<div class="example">
<pre class="example">function foo, a, b,  $
              c, d
  bar =  sin( a + b + $
              c + d)
end
</pre></div>

<p>The only drawback to this special continued statement indentation is
that it consumes more space, e.g., for long function names or left hand
sides of an assignment:
</p>
<div class="example">
<pre class="example">function thisfunctionnameisverylongsoitwillleavelittleroom, a, b, $
                                                            c, d
</pre></div>

<p>You can instruct IDLWAVE when to avoid using this special continuation
indentation by setting the variable
<code>idlwave-max-extra-continuation-indent</code>, which specifies the
maximum additional indentation beyond the basic indent to be
tolerated, otherwise defaulting to a fixed-offset from the enclosing
indent (the size of which offset is set in
<code>idlwave-continuation-indent</code>).  As a special case, continuations
of routine calls without any arguments or keywords will <em>not</em>
align the continued line, under the assumption that you continued
because you needed the space.
</p>
<p>Also, since the indentation level can be somewhat dynamic in continued
statements with special continuation indentation, especially if
<code>idlwave-max-extra-continuation-indent</code> is small, the key
<kbd>C-u <span class="key">TAB</span></kbd> will re-indent all lines in the current statement.
Note that <code>idlwave-indent-to-open-paren</code>, if non-<code>nil</code>,
overrides the <code>idlwave-max-extra-continuation-indent</code> limit, for
parentheses only, forcing them always to line up.
</p>

<dl>
<dt><a name="index-idlwave_002dcontinuation_002dindent"></a>User Option: <strong>idlwave-continuation-indent</strong> <em>(<code>2</code>)</em></dt>
<dd><p>Extra indentation applied to normal continuation lines.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dmax_002dextra_002dcontinuation_002dindent"></a>User Option: <strong>idlwave-max-extra-continuation-indent</strong> <em>(<code>20</code>)</em></dt>
<dd><p>The maximum additional indentation (over the basic continuation-indent)
that will be permitted for special continues.  To effectively disable
special continuation indentation, set to <code>0</code>.  To enable it
constantly, set to a large number (like <code>100</code>).  Note that the
indentation in a long continued statement never decreases from line to
line, outside of nested parentheses statements.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dindent_002dto_002dopen_002dparen"></a>User Option: <strong>idlwave-indent-to-open-paren</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means indent continuation lines to innermost open
parenthesis, regardless of whether the
<code>idlwave-max-extra-continuation-indent</code> limit is satisfied.
</p></dd></dl>

<hr>
<a name="Comment-Indentation"></a>
<div class="header">
<p>
Next: <a href="#Continuation-Lines" accesskey="n" rel="next">Continuation Lines</a>, Previous: <a href="#Continued-Statement-Indentation" accesskey="p" rel="prev">Continued Statement Indentation</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Comment-Indentation-1"></a>
<h4 class="subsection">4.1.3 Comment Indentation</h4>
<a name="index-Comment-indentation"></a>
<a name="index-Hanging-paragraphs"></a>
<a name="index-Paragraphs_002c-filling"></a>
<a name="index-Paragraphs_002c-hanging"></a>

<p>In IDL, lines starting with a &lsquo;<samp>;</samp>&rsquo; are called <em>comment lines</em>.
Comment lines are indented as follows:
</p>
<table>
<tr><td width="10%"><code>;;;</code></td><td width="90%">The indentation of lines starting with three semicolons remains
unchanged.</td></tr>
<tr><td width="10%"><code>;;</code></td><td width="90%">Lines starting with two semicolons are indented like the surrounding code.</td></tr>
<tr><td width="10%"><code>;</code></td><td width="90%">Lines starting with a single semicolon are indented to a minimum column.</td></tr>
</table>

<p>The indentation of comments starting in column 0 is never changed.
</p>
<dl>
<dt><a name="index-idlwave_002dno_002dchange_002dcomment"></a>User Option: <strong>idlwave-no-change-comment</strong></dt>
<dd><p>The indentation of a comment starting with this regexp will not be
changed.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dbegin_002dline_002dcomment"></a>User Option: <strong>idlwave-begin-line-comment</strong></dt>
<dd><p>A comment anchored at the beginning of line.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dcode_002dcomment"></a>User Option: <strong>idlwave-code-comment</strong></dt>
<dd><p>A comment that starts with this regexp is indented as if it is a part of
IDL code.
</p></dd></dl>

<hr>
<a name="Continuation-Lines"></a>
<div class="header">
<p>
Next: <a href="#Syntax-Highlighting" accesskey="n" rel="next">Syntax Highlighting</a>, Previous: <a href="#Comment-Indentation" accesskey="p" rel="prev">Comment Indentation</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Continuation-Lines-and-Filling"></a>
<h4 class="subsection">4.1.4 Continuation Lines and Filling</h4>
<a name="index-Continuation-lines"></a>
<a name="index-Line-splitting"></a>
<a name="index-String-splitting"></a>
<a name="index-Splitting_002c-of-lines"></a>

<a name="index-M_002dRET"></a>
<p>In IDL, a newline character terminates a statement unless preceded by a
&lsquo;<samp>$</samp>&rsquo;.  If you would like to start a continuation line, use
<kbd>M-<span class="key">RET</span></kbd>, which calls the command <code>idlwave-split-line</code>.
It inserts the continuation character &lsquo;<samp>$</samp>&rsquo;, terminates the line and
indents the new line.  The command <kbd>M-<span class="key">RET</span></kbd> can also be invoked
inside a string to split it at that point, in which case the &lsquo;<samp>+</samp>&rsquo;
concatenation operator is used.
</p>
<a name="index-Filling"></a>
<a name="index-auto_002dfill_002dmode"></a>
<a name="index-Hanging-paragraphs-1"></a>
<p>When filling comment paragraphs, IDLWAVE overloads the normal filling
functions and uses a function which creates the hanging paragraphs
customary in IDL routine headers.  When <code>auto-fill-mode</code> is turned
on (toggle with <kbd>C-c C-a</kbd>), comments will be auto-filled.  If the
first line of a paragraph contains a match for
<code>idlwave-hang-indent-regexp</code> (a dash-space by default), subsequent
lines are positioned to line up after it, as in the following example.
</p>
<div class="example">
<pre class="example">;=================================
; x - an array containing
;     lots of interesting numbers.
;
; y - another variable where
;     a hanging paragraph is used
;     to describe it.
;=================================
</pre></div>

<a name="index-M_002dq"></a>
<p>You can also refill a comment at any time paragraph with <kbd>M-q</kbd>.
Comment delimiting lines as in the above example, consisting of one or
more &lsquo;<samp>;</samp>&rsquo; followed by one or more of the characters &lsquo;<samp>+=-_*</samp>&rsquo;,
are kept in place, as is.
</p>
<dl>
<dt><a name="index-idlwave_002dfill_002dcomment_002dline_002donly"></a>User Option: <strong>idlwave-fill-comment-line-only</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means auto fill will only operate on comment lines.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dauto_002dfill_002dsplit_002dstring"></a>User Option: <strong>idlwave-auto-fill-split-string</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means auto fill will split strings with the IDL &lsquo;<samp>+</samp>&rsquo;
operator.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dsplit_002dline_002dstring"></a>User Option: <strong>idlwave-split-line-string</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means <code>idlwave-split-line</code> will split strings with
&lsquo;<samp>+</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhanging_002dindent"></a>User Option: <strong>idlwave-hanging-indent</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means comment paragraphs are indented under the hanging
indent given by <code>idlwave-hang-indent-regexp</code> match in the first
line of the paragraph.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhang_002dindent_002dregexp"></a>User Option: <strong>idlwave-hang-indent-regexp</strong> <em>(<code>&quot;- &quot;</code>)</em></dt>
<dd><p>Regular expression matching the position of the hanging indent
in the first line of a comment paragraph.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002duse_002dlast_002dhang_002dindent"></a>User Option: <strong>idlwave-use-last-hang-indent</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means use last match on line for
<code>idlwave-indent-regexp</code>.
</p></dd></dl>

<hr>
<a name="Syntax-Highlighting"></a>
<div class="header">
<p>
Next: <a href="#Octals-and-Highlighting" accesskey="n" rel="next">Octals and Highlighting</a>, Previous: <a href="#Continuation-Lines" accesskey="p" rel="prev">Continuation Lines</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Syntax-Highlighting-1"></a>
<h4 class="subsection">4.1.5 Syntax Highlighting</h4>
<a name="index-Syntax-highlighting"></a>
<a name="index-Highlighting-of-syntax"></a>
<a name="index-Font-lock"></a>

<p>Highlighting of keywords, comments, strings etc. can be accomplished
with <code>font-lock</code>.  If you are using <code>global-font-lock-mode</code>
(in Emacs), or have <code>font-lock</code> turned on in any other buffer in
XEmacs, it should also automatically work in IDLWAVE buffers.  If you&rsquo;d
prefer invoking font-lock individually by mode, you can enforce it in
<code>idlwave-mode</code> with the following line in your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'idlwave-mode-hook 'turn-on-font-lock)
</pre></div>

<p>IDLWAVE supports 3 increasing levels of syntax highlighting.
The variable <code>font-lock-maximum-decoration</code> determines which level
is selected.  Individual categories of special tokens can be selected
for highlighting using the variable
<code>idlwave-default-font-lock-items</code>.
</p>
<dl>
<dt><a name="index-idlwave_002ddefault_002dfont_002dlock_002ditems"></a>User Option: <strong>idlwave-default-font-lock-items</strong></dt>
<dd><p>Items which should be fontified on the default fontification level
2.
</p></dd></dl>

<hr>
<a name="Octals-and-Highlighting"></a>
<div class="header">
<p>
Previous: <a href="#Syntax-Highlighting" accesskey="p" rel="prev">Syntax Highlighting</a>, Up: <a href="#Code-Formatting" accesskey="u" rel="up">Code Formatting</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Octals-and-Highlighting-1"></a>
<h4 class="subsection">4.1.6 Octals and Highlighting</h4>
<a name="index-Syntax-highlighting_002c-Octals"></a>
<a name="index-Highlighting-of-syntax_002c-Octals"></a>

<p>A rare syntax highlighting problem results from an extremely unfortunate
notation for octal numbers in IDL: <code>&quot;123</code>.  This unpaired quotation
mark is very difficult to parse, given that it can be mixed on a single
line with any number of strings.  Emacs will incorrectly identify this
as a string, and the highlighting of following lines of code can be
distorted, since the string is never terminated.
</p>
<p>One solution to this involves terminating the mistakenly identified
string yourself by providing a closing quotation mark in a comment:
</p>
<div class="example">
<pre class="example">  string(&quot;305B) + $ ;&quot; &lt;--- for font-lock
   ' is an Angstrom.'
</pre></div>

<p>A far better solution is to abandon this notation for octals
altogether, and use the more sensible alternative IDL provides:
</p>
<div class="example">
<pre class="example">   string('305'OB) + ' is an Angstrom.'
</pre></div>

<p>This simultaneously solves the font-lock problem and is more
consistent with the notation for hexadecimal numbers, e.g., <code>'C5'XB</code>.
</p>
<hr>
<a name="Routine-Info"></a>
<div class="header">
<p>
Next: <a href="#Online-Help" accesskey="n" rel="next">Online Help</a>, Previous: <a href="#Code-Formatting" accesskey="p" rel="prev">Code Formatting</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Routine-Info-1"></a>
<h3 class="section">4.2 Routine Info</h3>
<a name="index-Routine-info"></a>
<a name="index-Updating-routine-info"></a>
<a name="index-Scanning-buffers-for-routine-info"></a>
<a name="index-Buffers_002c-scanning-for-routine-info"></a>
<a name="index-Shell_002c-querying-for-routine-info"></a>

<a name="index-C_002dc-C_002di"></a>
<p>IDL comes bundled with more than one thousand procedures, functions
and object methods, and large libraries typically contain hundreds or
even thousands more (each with a few to tens of keywords and
arguments).  This large command set can make it difficult to remember
the calling sequence and keywords for the routines you use, but
IDLWAVE can help.  It builds up routine information from a wide
variety of sources; IDLWAVE in fact knows far more about the
&lsquo;<samp>.pro</samp>&rsquo; routines on your system than IDL itself!  It maintains a
list of all built-in routines, with calling sequences and
keywords<a name="DOCF2" href="#FOOT2"><sup>2</sup></a>.  It also scans Emacs buffers
for routine definitions, queries the IDLWAVE-Shell for information
about routines currently compiled there, and automatically locates
library and user-created catalogs.  This information is updated
automatically, and so should usually be current.  To force a global
update and refresh the routine information, use <kbd>C-c C-i</kbd>
(<code>idlwave-update-routine-info</code>).
</p>
<a name="index-C_002dc-_003f"></a>
<p>To display the information about a routine, press <kbd>C-c ?</kbd>, which
calls the command <code>idlwave-routine-info</code>.  When the current cursor
position is on the name or in the argument list of a procedure or
function, information will be displayed about the routine.  For example,
consider the indicated cursor positions in the following line:
</p>
<div class="example">
<pre class="example">plot,x,alog(x+5*sin(x) + 2),
  |  |   |   |   |  |  |    |
  1  2   3   4   5  6  7    8
</pre></div>

<a name="index-Default-routine_002c-for-info-and-help"></a>
<p>On positions 1,2 and 8, information about the &lsquo;<samp>plot</samp>&rsquo; procedure will
be shown.  On positions 3,4, and 7, the &lsquo;<samp>alog</samp>&rsquo; function will be
described, while positions 5 and 6 will investigate the &lsquo;<samp>sin</samp>&rsquo;
function.
</p>
<p>When you ask for routine information about an object method, and the
method exists in several classes, IDLWAVE queries for the class of the
object, unless the class is already known through a text property on the
&lsquo;<samp>-&gt;</samp>&rsquo; operator (see <a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a>), or by having been explicitly included in the call
(e.g., <code>a-&gt;myclass::Foo</code>).
</p>
<a name="index-Calling-sequences"></a>
<a name="index-Keywords-of-a-routine"></a>
<a name="index-Routine-source-information"></a>
<p>The description displayed contains the calling sequence, the list of
keywords and the source location of this routine.  It looks like this:
</p>
<div class="example">
<pre class="example">Usage:    XMANAGER, NAME, ID
Keywords: BACKGROUND CATCH CLEANUP EVENT_HANDLER GROUP_LEADER
          JUST_REG MODAL NO_BLOCK
Source:   SystemLib   [LCSB] /soft1/idl53/lib/xmanager.pro
</pre></div>

<a name="index-Categories_002c-of-routines"></a>
<a name="index-Load_002dpath-shadows"></a>
<a name="index-Shadows_002c-load_002dpath"></a>
<a name="index-IDL-variable-_0021PATH"></a>
<a name="index-_0021PATH_002c-IDL-variable"></a>
<a name="index-IDL-variable-_0021DIR"></a>
<a name="index-_0021DIR_002c-IDL-variable"></a>

<p>If a definition of this routine exists in several files accessible to
IDLWAVE, several &lsquo;<samp>Source</samp>&rsquo; lines will point to the different
files.  This may indicate that your routine is shadowing a system
library routine, which may or may not be what you want
(see <a href="#Load_002dPath-Shadows">Load-Path Shadows</a>).  The information about the calling
sequence and keywords is derived from the first source listed.
Library routines are available only if you have scanned your local IDL
directories or are using pre-scanned libraries (see <a href="#Catalogs">Catalogs</a>).
The source entry consists of a <em>source category</em>, a set of
<em>flags</em> and the path to the <em>source file</em>.  The following
default categories exist:
</p>
<table>
<tr><td width="15%"><i>System</i></td><td width="85%">A system routine of unknown origin.  When the system library has
been scanned as part of a catalog (see <a href="#Catalogs">Catalogs</a>), this category
will automatically split into the next two.</td></tr>
<tr><td width="15%"><i>Builtin</i></td><td width="85%">A builtin system routine with no source code available.</td></tr>
<tr><td width="15%"><i>SystemLib</i></td><td width="85%">A library system routine in the official lib directory <samp>!DIR/lib</samp>.</td></tr>
<tr><td width="15%"><i>Obsolete</i></td><td width="85%">A library routine in the official lib directory <samp>!DIR/lib/obsolete</samp>.</td></tr>
<tr><td width="15%"><i>Library</i></td><td width="85%">A routine in a file on IDL&rsquo;s search path <code>!PATH</code>.</td></tr>
<tr><td width="15%"><i>Other</i></td><td width="85%">Any other routine with a file not known to be on the search path.</td></tr>
<tr><td width="15%"><i>Unresolved</i></td><td width="85%">An otherwise unknown routine the shell lists as unresolved
(referenced, but not compiled).</td></tr>
</table>

<p>Any routines discovered in library catalogs (see <a href="#Library-Catalogs">Library Catalogs</a>), will display the category assigned during creation,
e.g., &lsquo;<samp>NasaLib</samp>&rsquo;.  For routines not discovered in this way, you can
create additional categories based on the routine&rsquo;s filename using the
variable <code>idlwave-special-lib-alist</code>.
</p>
<a name="index-Flags_002c-in-routine-info"></a>
<a name="index-Duplicate-routines"></a>
<a name="index-Multiply-defined-routines"></a>
<a name="index-Routine-definitions_002c-multiple"></a>
<p>The flags <code>[LCSB]</code> indicate the source of the information IDLWAVE
has regarding the file: from a library catalog (<code><span class="nolinebreak">[L---]</span></code><!-- /@w -->),
from a user catalog (<code><span class="nolinebreak">[-C--]</span></code><!-- /@w -->, from the IDL Shell
(<code><span class="nolinebreak">[--S-]</span></code><!-- /@w -->) or from an Emacs buffer (<code><span class="nolinebreak">[---B]</span></code><!-- /@w -->).
Combinations are possible (a compiled library routine visited in a
buffer might read <code><span class="nolinebreak">[L-SB]</span></code><!-- /@w -->).  If a file contains multiple
definitions of the same routine, the file name will be prefixed with
&lsquo;<samp>(Nx)</samp>&rsquo; where &lsquo;<samp>N</samp>&rsquo; is the number of definitions.
</p>
<a name="index-Online-Help-from-the-routine-info-buffer"></a>
<a name="index-Active-text_002c-in-routine-info"></a>
<a name="index-Inserting-keywords_002c-from-routine-info"></a>
<a name="index-Source-file_002c-access-from-routine-info"></a>
<p>Some of the text in the <samp>*Help*</samp> routine info buffer will be active
(it is highlighted when the mouse moves over it).  Typically, clicking
with the right mouse button invokes online help lookup, and clicking
with the middle mouse button inserts keywords or visits files:
</p>
<table>
<tr><td width="15%"><i>Usage</i></td><td width="85%">If online help is installed, a click with the <em>right</em> mouse
button on the <i>Usage:</i> line will access the help for the
routine (see <a href="#Online-Help">Online Help</a>).</td></tr>
<tr><td width="15%"><i>Keyword</i></td><td width="85%">Online help about keywords is also available with the
<em>right</em> mouse button.  Clicking on a keyword with the <em>middle</em>
mouse button will insert this keyword in the buffer from where
<code>idlwave-routine-info</code> was called.  Holding down <tt class="key">SHIFT</tt> while
clicking also adds the initial &lsquo;<samp>/</samp>&rsquo;.</td></tr>
<tr><td width="15%"><i>Source</i></td><td width="85%">Clicking with the <em>middle</em> mouse button on a &lsquo;<samp>Source</samp>&rsquo; line
finds the source file of the routine and visits it in another window.
Another click on the same line switches back to the buffer from which
<kbd>C-c ?</kbd> was called.  If you use the <em>right</em> mouse button, the
source will not be visited by a buffer, but displayed in the online help
window.</td></tr>
<tr><td width="15%"><i>Classes</i></td><td width="85%">The <i>Classes</i> line is only included in the routine info window if
the current class inherits from other classes.  You can click with the
<em>middle</em> mouse button to display routine info about the current
method in other classes on the inheritance chain, if such a method
exists there.</td></tr>
</table>

<dl>
<dt><a name="index-idlwave_002dresize_002droutine_002dhelp_002dwindow"></a>User Option: <strong>idlwave-resize-routine-help-window</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means resize the Routine-info <samp>*Help*</samp> window to
fit the content.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dspecial_002dlib_002dalist"></a>User Option: <strong>idlwave-special-lib-alist</strong></dt>
<dd><p>Alist of regular expressions matching special library directories.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002drinfo_002dmax_002dsource_002dlines"></a>User Option: <strong>idlwave-rinfo-max-source-lines</strong> <em>(<code>5</code>)</em></dt>
<dd><p>Maximum number of source files displayed in the Routine Info window.
</p></dd></dl>


<A NAME="ONLINE_HELP"></A>
<hr>
<a name="Online-Help"></a>
<div class="header">
<p>
Next: <a href="#Completion" accesskey="n" rel="next">Completion</a>, Previous: <a href="#Routine-Info" accesskey="p" rel="prev">Routine Info</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Online-Help-1"></a>
<h3 class="section">4.3 Online Help</h3>

<a name="index-Online-Help"></a>
<a name="index-idlw_002dhelp_002etxt"></a>
<a name="index-idlw_002dhelp_002eel"></a>
<a name="index-Installing-online-help"></a>
<a name="index-Online-Help_002c-Installation"></a>
<a name="index-Speed_002c-of-online-help"></a>
<a name="index-XML-Help-Catalog"></a>

<p>For IDL system routines, extensive documentation is supplied with IDL.
IDLWAVE can access the HTML version of this documentation very quickly
and accurately, based on the local context.  This can be <em>much</em>
faster than using the IDL online help application, because IDLWAVE
usually gets you to the right place in the documentation directly&mdash;e.g.,
a specific keyword of a routine&mdash;without any additional browsing
and scrolling.
</p>
<p>For this online help to work, an HTML version of the IDL documentation
is required.  Beginning with IDL 6.2, HTML documentation is distributed
directly with IDL, along with an XML-based catalog of routine
information.  By default, IDLWAVE automatically attempts to convert this
XML catalog into a format Emacs can more easily understand, and caches
this information in your <code>idlwave_config_directory</code>
(<samp>~/.emacs.d/idlwave/</samp>, by default).  It also re-scans the XML catalog if
it is newer than the current cached version.  You can force rescan with
the menu entry <code>IDLWAVE-&gt;Routine Info-&gt;Rescan XML Help Catalog</code>.
</p>
<p>Before IDL 6.2, the HTML help was not distributed with IDL, and was not
part of the standalone IDLWAVE distribution, but had to be downloaded
separately.  This is no longer necessary: all help and routine
information is supplied with IDL versions 6.2 and later.
</p>
<p>There are a variety of options for displaying the HTML help: see below.
Help for routines without HTML documentation is also available, by using
the routine documentation header and/or routine source.
</p>
<a name="index-M_002d_003f"></a>
<p>In any IDL program (or, as with most IDLWAVE commands, in the IDL
Shell), press <kbd>M-?</kbd> (<code>idlwave-context-help</code>), or click with
<kbd>S-mouse-3</kbd> to access context sensitive online help.  The following
locations are recognized context for help:
</p>
<a name="index-Context_002c-for-online-help"></a>
<table>
<tr><td width="25%"><i>Routine names</i></td><td width="75%">The name of a routine (function, procedure, method).</td></tr>
<tr><td width="25%"><i>Keyword Parameters</i></td><td width="75%">A keyword parameter of a routine.</td></tr>
<tr><td width="25%"><i>System Variables</i></td><td width="75%">System variables like <code>!DPI</code>.</td></tr>
<tr><td width="25%"><i>System Variable Tags</i></td><td width="75%">System variables tags like <code>!D.X_SIZE</code>.</td></tr>
<tr><td width="25%"><i>IDL Statements</i></td><td width="75%">Statements like <code>PRO</code>, <code>REPEAT</code>, <code>COMPILE_OPT</code>, etc.</td></tr>
<tr><td width="25%"><i>IDL Controls</i></td><td width="75%">Control structures like <code>FOR</code>, <code>SWITCH</code>, etc.</td></tr>
<tr><td width="25%"><i>Class names</i></td><td width="75%">A class name in an <code>OBJ_NEW</code> call.</td></tr>
<tr><td width="25%"><i>Class Init Keywords</i></td><td width="75%">Beyond the class name in an <code>OBJ_NEW</code> call.</td></tr>
<tr><td width="25%"><i>Executive Command</i></td><td width="75%">An executive command like <code>.RUN</code>.  Mostly useful in the shell.</td></tr>
<tr><td width="25%"><i>Structure Tags</i></td><td width="75%">Structure tags like <code>state.xsize</code></td></tr>
<tr><td width="25%"><i>Class Tags</i></td><td width="75%">Class tags like <code>self.value</code>.</td></tr>
<tr><td width="25%"><i>Default</i></td><td width="75%">The routine that would be selected for routine info display.</td></tr>
</table>

<a name="index-OBJ_005fNEW_002c-special-online-help"></a>
<p>Note that the <code>OBJ_NEW</code> function is special in that the help
displayed depends on the cursor position.  If the cursor is on the
&lsquo;<samp>OBJ_NEW</samp>&rsquo;, this function is described.  If it is on the class
name inside the quotes, the documentation for the class is pulled up.
If the cursor is <em>after</em> the class name, anywhere in the argument
list, the documentation for the corresponding <code>Init</code> method and
its keywords is targeted.
</p>
<p>Apart from an IDLWAVE buffer or shell, there are two more places from
which online help can be accessed.
</p>
<ul>
<li> Online help for routines and keywords can be accessed through the
Routine Info display.  Click with <kbd>mouse-3</kbd> on an item to see the
corresponding help (see <a href="#Routine-Info">Routine Info</a>).
</li><li> When using completion and Emacs pops up a <samp>*Completions*</samp> buffer
with possible completions, clicking with <kbd>mouse-3</kbd> on a completion
item invokes help on that item (see <a href="#Completion">Completion</a>).  Items for which
help is available in the online system documentation (vs. just the
program source itself) will be emphasized (e.g., colored blue).
</li></ul>
<p>In both cases, a blue face indicates that the item is documented in
the IDL manual, but an attempt will be made to visit non-blue items
directly in the originating source file.
</p>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Help-with-HTML-Documentation" accesskey="1">Help with HTML Documentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Help-with-Source" accesskey="2">Help with Source</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Help-with-HTML-Documentation"></a>
<div class="header">
<p>
Next: <a href="#Help-with-Source" accesskey="n" rel="next">Help with Source</a>, Up: <a href="#Online-Help" accesskey="u" rel="up">Online Help</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Help-with-HTML-Documentation-1"></a>
<h4 class="subsection">4.3.1 Help with HTML Documentation</h4>
<a name="index-HTML-Help"></a>
<a name="index-Help-using-HTML-manuals"></a>
<a name="index-IDL-manual_002c-HTML-version"></a>
<a name="index-IDL-Assistant"></a>

<p>Help using the HTML documentation is invoked with the built-in Emacs
command <code>browse-url</code>, which displays the relevant help topic in a
browser of your choosing.  Beginning with version 6.2, IDL comes with
the help browser <em>IDL Assistant</em>, which it uses by default for
displaying online help on all supported platforms.  This browser
offers topical searches, an index, and is also now the default and
recommended IDLWAVE help browser.  The variable
<code>idlwave-help-use-assistant</code> controls whether this browser is
used.  Note that, due to limitations in the Assistant, invoking help
within IDLWAVE and <code>? topic</code> within IDL will result in two
running copies of Assistant.
</p>
<p>Aside from the IDL Assistant, there are many possible browsers to choose
among, with differing advantages and disadvantages.  The variable
<code>idlwave-help-browser-function</code> controls which browser help is sent
to (as long as <code>idlwave-help-use-assistant</code> is not set).  This
function is used to set the variable <code>browse-url-browser-function</code>
locally for IDLWAVE help only.  Customize the latter variable to see
what choices of browsers your system offers.  Certain browsers like
<code>w3</code> (bundled with many versions of Emacs) and <code>w3m</code>
(<a href="http://emacs-w3m.namazu.org/">http://emacs-w3m.namazu.org/</a>) are run within Emacs, and use
Emacs buffers to display the HTML help.  This can be convenient,
especially on small displays, and images can even be displayed in-line
on newer Emacs versions.  However, better formatting results are often
achieved with external browsers, like Mozilla.  IDLWAVE assumes any
browser function containing &quot;w3&quot; is displayed in a local buffer.  If you
are using another Emacs-local browser for which this is not true, set
the variable <code>idlwave-help-browser-is-local</code>.
</p>
<p>With IDL 6.2 or later, it is important to ensure that the variable
<code>idlwave-system-directory</code> is set (see <a href="#Catalogs">Catalogs</a>).  One easy way
to ensure this is to run the IDL Shell (<kbd>C-c C-s</kbd>).  It will be
queried for this directory, and the results will be cached to file for
subsequent use.
</p>
<p>See <a href="#HTML-Help-Browser-Tips">HTML Help Browser Tips</a>, for more information on selecting and
configuring a browser for use with IDL&rsquo;s HTML help system.
</p>
<dl>
<dt><a name="index-idlwave_002dhtml_002dsystem_002dhelp_002dlocation"></a>User Option: <strong>idlwave-html-system-help-location</strong> <em><samp>help/online_help</samp></em></dt>
<dd><p>Relative directory of the system-supplied HTML help directory,
considered with respect to <code>idlwave-system-directory</code>.  Relevant
for IDL 6.2 and greater.  Should not change.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhtml_002dhelp_002dlocation"></a>User Option: <strong>idlwave-html-help-location</strong> <em><samp>/usr/local/etc/</samp></em></dt>
<dd><p>The directory where the <samp>idl_html_help</samp> HTML directory live.
Obsolete and ignored for IDL 6.2 and greater
(<code>idlwave-html-system-help-location</code> is used instead).
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002duse_002dassistant"></a>User Option: <strong>idlwave-help-use-assistant</strong> <em><code>t</code></em></dt>
<dd><p>If set, use the IDL Assistant if possible for online HTML help,
otherwise use the browser function specified in
<code>idlwave-help-browser-function</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dbrowser_002dfunction"></a>User Option: <strong>idlwave-help-browser-function</strong></dt>
<dd><p>The browser function to use to display IDLWAVE HTML help.  Should be
one of the functions available for setting
<code>browse-url-browser-function</code>, which see.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dbrowser_002dis_002dlocal"></a>User Option: <strong>idlwave-help-browser-is-local</strong></dt>
<dd><p>Is the browser selected in <code>idlwave-help-browser-function</code> run in a
local Emacs buffer or window?  Defaults to <code>t</code> if the function
contains &quot;-w3&quot;.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dlink_002dface"></a>User Option: <strong>idlwave-help-link-face</strong></dt>
<dd><p>The face for links to IDLWAVE online help.
</p></dd></dl>

<hr>
<a name="Help-with-Source"></a>
<div class="header">
<p>
Previous: <a href="#Help-with-HTML-Documentation" accesskey="p" rel="prev">Help with HTML Documentation</a>, Up: <a href="#Online-Help" accesskey="u" rel="up">Online Help</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Help-with-Source-1"></a>
<h4 class="subsection">4.3.2 Help with Source</h4>
<a name="index-Help-using-routine-source"></a>

<a name="index-Source-code_002c-as-online-help"></a>
<a name="index-DocLib-header_002c-as-online-help"></a>
<p>For routines which are not documented in an HTML manual (for example
personal or library routines), the source code itself is used as help
text.  If the requested information can be found in a (more or less)
standard DocLib file header, IDLWAVE shows the header (scrolling down to
a keyword, if appropriate).  Otherwise the routine definition statement
(<code>pro</code>/<code>function</code>) is shown.  The doclib header sections which
are searched for include &lsquo;<samp>NAME</samp>&rsquo; and &lsquo;<samp>KEYWORDS</samp>&rsquo;.  Localization
support can be added by customizing the <code>idlwave-help-doclib-name</code>
and <code>idlwave-help-doclib-keyword</code> variables.
</p>
<a name="index-Structure-tags_002c-in-online-help"></a>
<a name="index-Class-tags_002c-in-online-help"></a>
<p>Help is also available for class structure tags (<code>self.TAG</code>), and
generic structure tags, if structure tag completion is enabled
(see <a href="#Structure-Tag-Completion">Structure Tag Completion</a>).  This is implemented by visiting the
tag within the class or structure definition source itself.  Help is not
available on built-in system class tags.
</p>
<p>The help window is normally displayed in the same frame, but can be
popped-up in a separate frame.  The following commands can be used to
navigate inside the help system for source files:
</p>
<table>
<tr><td width="15%"><kbd><span class="key">SPACE</span></kbd></td><td width="85%">Scroll forward one page.</td></tr>
<tr><td width="15%"><kbd><span class="key">RET</span></kbd></td><td width="85%">Scroll forward one line.</td></tr>
<tr><td width="15%"><kbd><span class="key">DEL</span></kbd></td><td width="85%">Scroll back one page.</td></tr>
<tr><td width="15%"><kbd>h</kbd></td><td width="85%">Jump to DocLib Header of the routine whose source is displayed
as help.</td></tr>
<tr><td width="15%"><kbd>H</kbd></td><td width="85%">Jump to the first DocLib Header in the file.</td></tr>
<tr><td width="15%"><kbd>.</kbd> <span class="roman">(Dot)</span></td><td width="85%">Jump back and forth between the routine definition (the
<code>pro</code>/<code>function</code> statement) and the description of the help
item in the DocLib header.</td></tr>
<tr><td width="15%"><kbd>F</kbd></td><td width="85%">Fontify the buffer like source code.  See the variable <code>idlwave-help-fontify-source-code</code>.</td></tr>
<tr><td width="15%"><kbd>q</kbd></td><td width="85%">Kill the help window.</td></tr>
</table>


<dl>
<dt><a name="index-idlwave_002dhelp_002duse_002ddedicated_002dframe"></a>User Option: <strong>idlwave-help-use-dedicated-frame</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means use a separate frame for Online Help if possible.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dframe_002dparameters"></a>User Option: <strong>idlwave-help-frame-parameters</strong></dt>
<dd><p>The frame parameters for the special Online Help frame.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dmax_002dpopup_002dmenu_002ditems"></a>User Option: <strong>idlwave-max-popup-menu-items</strong> <em>(<code>20</code>)</em></dt>
<dd><p>Maximum number of items per pane in pop-up menus.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dextra_002dhelp_002dfunction"></a>User Option: <strong>idlwave-extra-help-function</strong></dt>
<dd><p>Function to call for help if the normal help fails.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dfontify_002dsource_002dcode"></a>User Option: <strong>idlwave-help-fontify-source-code</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means fontify source code displayed as help.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002dsource_002dtry_002dheader"></a>User Option: <strong>idlwave-help-source-try-header</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means try to find help in routine header when
displaying source file.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002ddoclib_002dname"></a>User Option: <strong>idlwave-help-doclib-name</strong> <em>(<code>&quot;name&quot;</code>)</em></dt>
<dd><p>The case-insensitive heading word in doclib headers to locate the
<em>name</em> section.  Can be a regexp, e.g., <code>&quot;\\(name\\|nom\\)&quot;</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhelp_002ddoclib_002dkeyword"></a>User Option: <strong>idlwave-help-doclib-keyword</strong> <em>(<code>&quot;KEYWORD&quot;</code>)</em></dt>
<dd><p>The case-insensitive heading word in doclib headers to locate the
<em>keywords</em> section.  Can be a regexp.
</p></dd></dl>


<hr>
<a name="Completion"></a>
<div class="header">
<p>
Next: <a href="#Routine-Source" accesskey="n" rel="next">Routine Source</a>, Previous: <a href="#Online-Help" accesskey="p" rel="prev">Online Help</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Completion-1"></a>
<h3 class="section">4.4 Completion</h3>
<a name="index-Completion"></a>
<a name="index-Keyword-completion"></a>
<a name="index-Method-completion"></a>
<a name="index-Object-method-completion"></a>
<a name="index-Class-name-completion"></a>
<a name="index-Function-name-completion"></a>
<a name="index-Procedure-name-completion"></a>

<a name="index-M_002dTAB"></a>
<a name="index-C_002dc-C_002di-1"></a>
<p>IDLWAVE offers completion for class names, routine names, keywords,
system variables, system variable tags, class structure tags, regular
structure tags and file names.  As in many programming modes, completion
is bound to <kbd>M-<span class="key">TAB</span></kbd> (or simply <kbd><span class="key">TAB</span></kbd> in the IDLWAVE
Shell; see <a href="#Using-the-Shell">Using the Shell</a>).  Completion uses exactly the same
internal information as routine info, so when necessary (rarely) it can
be updated with <kbd>C-c C-i</kbd> (<code>idlwave-update-routine-info</code>).
</p>
<p>The completion function is context sensitive and figures out what to
complete based on the location of the point.  Here are example lines and
what <kbd>M-<span class="key">TAB</span></kbd> would try to complete when the cursor is on the
position marked with a &lsquo;<samp>_</samp>&rsquo;:
</p>
<div class="example">
<pre class="example">plo_                    <span class="roman">Procedure</span>
x = a_                  <span class="roman">Function</span>
plot,xra_               <span class="roman">Keyword of <code>plot</code> procedure</span>
plot,x,y,/x_            <span class="roman">Keyword of <code>plot</code> procedure</span>
plot,min(_              <span class="roman">Keyword of <code>min</code> function</span>
obj -&gt; a_               <span class="roman">Object method (procedure)</span>
a[2,3] = obj -&gt; a_      <span class="roman">Object method (function)</span>
x = obj_new('IDL_       <span class="roman">Class name</span>
x = obj_new('MyCl',a_   <span class="roman">Keyword to <code>Init</code> method in class <code>MyCl</code></span>
pro A_                  <span class="roman">Class name</span>
pro _                   <span class="roman">Fill in <code>Class::</code> of first method in this file</span>
!v_                     <span class="roman">System variable</span>
!version.t_             <span class="roman">Structure tag of system variable</span>
self.g_                 <span class="roman">Class structure tag in methods</span>
state.w_                <span class="roman">Structure tag, if tag completion enabled</span>
name = 'a_              <span class="roman">File name (default inside quotes)</span>
</pre></div>

<a name="index-Completion_002c-ambiguity"></a>
<a name="index-Completion_002c-forcing-function-name"></a>
<p>The only place where completion is ambiguous is procedure/function
<em>keywords</em> versus <em>functions</em>.  After &lsquo;<samp>plot,x,_</samp>&rsquo;, IDLWAVE
will always assume a keyword to &lsquo;<samp>plot</samp>&rsquo;.  However, a function is
also a possible completion here.  You can force completion of a function
name at such a location by using a prefix arg: <kbd>C-u M-<span class="key">TAB</span></kbd>.
</p>
<p>Giving two prefix arguments (<kbd>C-u C-u M-<span class="key">TAB</span></kbd>) prompts for a
regular expression to search among the commands to be completed.  As
an example, completing a blank line in this way will allow you to
search for a procedure matching a regexp.
</p>
<a name="index-Scrolling-the-_002aCompletions_002a-window"></a>
<a name="index-Completion_002c-scrolling"></a>
<a name="index-Completion_002c-Online-Help"></a>
<a name="index-Online-Help-in-_002aCompletions_002a-buffer"></a>
<p>If the list of completions is too long to fit in the
<samp>*Completions*</samp> window, the window can be scrolled by pressing
<kbd>M-<span class="key">TAB</span></kbd> repeatedly.  Online help (if installed) for each
possible completion is available by clicking with <kbd>mouse-3</kbd> on the
item.  Items for which system online help (from the IDL manual) is
available will be emphasized (e.g., colored blue).  For other items, the
corresponding source code or DocLib header will be used as the help
text.
</p>
<a name="index-Completion_002c-canceling"></a>
<a name="index-Canceling-completion"></a>
<p>Completion is not a blocking operation; you are free to continue
editing, enter commands, or simply ignore the <samp>*Completions*</samp>
buffer during a completion operation.  If, however, the most recent
command was a completion, <kbd>C-g</kbd> will remove the buffer and restore
the window configuration.  You can also remove the buffer at any time
with no negative consequences.
</p>
<dl>
<dt><a name="index-idlwave_002dkeyword_002dcompletion_002dadds_002dequal"></a>User Option: <strong>idlwave-keyword-completion-adds-equal</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means completion automatically adds &lsquo;<samp>=</samp>&rsquo; after
completed keywords.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dfunction_002dcompletion_002dadds_002dparen"></a>User Option: <strong>idlwave-function-completion-adds-paren</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means completion automatically adds &lsquo;<samp>(</samp>&rsquo; after
completed function.  A value of 2 means also add the closing
parenthesis and position the cursor between the two.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dcompletion_002drestore_002dwindow_002dconfiguration"></a>User Option: <strong>idlwave-completion-restore-window-configuration</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means restore window configuration after successful
completion.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dhighlight_002dhelp_002dlinks_002din_002dcompletion"></a>User Option: <strong>idlwave-highlight-help-links-in-completion</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means highlight completions for which system help is
available.
</p></dd></dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Case-of-Completed-Words" accesskey="1">Case of Completed Words</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CaseOFcomPletedWords
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Object-Method-Completion-and-Class-Ambiguity" accesskey="2">Object Method Completion and Class Ambiguity</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">obj-&gt;Method, what?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Object-Method-Completion-in-the-Shell" accesskey="3">Object Method Completion in the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Class-and-Keyword-Inheritance" accesskey="4">Class and Keyword Inheritance</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">obj-&gt;Method, _EXTRA=e
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Structure-Tag-Completion" accesskey="5">Structure Tag Completion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completing state.Tag
</td></tr>
</table>

<hr>
<a name="Case-of-Completed-Words"></a>
<div class="header">
<p>
Next: <a href="#Object-Method-Completion-and-Class-Ambiguity" accesskey="n" rel="next">Object Method Completion and Class Ambiguity</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Case-of-Completed-Words-1"></a>
<h4 class="subsection">4.4.1 Case of Completed Words</h4>
<a name="index-Case-of-completed-words"></a>
<a name="index-Mixed-case-completion"></a>
<p>IDL is a case-insensitive language, so casing is a matter of style
only.  IDLWAVE helps maintain a consistent casing style for completed
items.  The case of the completed words is determined by what is
already in the buffer.  As an exception, when the partial word being
completed is all lower case, the completion will be lower case as
well.  If at least one character is upper case, the string will be
completed in upper case or mixed case, depending on the value of the
variable <code>idlwave-completion-case</code>.  The default is to use upper
case for procedures, functions and keywords, and mixed case for object
class names and methods, similar to the conventions in the IDL
manuals.  For instance, to enable mixed-case completion for routines
in addition to classes and methods, you need an entry such as
<code>(routine . preserve)</code> in that variable.  To enable total control
over the case of completed items, independent of buffer context, set
<code>idlwave-completion-force-default-case</code> to non-<code>nil</code>.
</p>
<dl>
<dt><a name="index-idlwave_002dcompletion_002dcase"></a>User Option: <strong>idlwave-completion-case</strong></dt>
<dd><p>Association list setting the case (UPPER/lower/Capitalized/MixedCase...)
of completed words.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dcompletion_002dforce_002ddefault_002dcase"></a>User Option: <strong>idlwave-completion-force-default-case</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means completion will always honor the settings in
<code>idlwave-completion-case</code>.  When <code>nil</code> (the default), entirely lower
case strings will always be completed to lower case, no matter what the
settings in <code>idlwave-completion-case</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dcomplete_002dempty_002dstring_002das_002dlower_002dcase"></a>User Option: <strong>idlwave-complete-empty-string-as-lower-case</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means the empty string is considered lower case for
completion.
</p></dd></dl>

<hr>
<a name="Object-Method-Completion-and-Class-Ambiguity"></a>
<div class="header">
<p>
Next: <a href="#Object-Method-Completion-in-the-Shell" accesskey="n" rel="next">Object Method Completion in the Shell</a>, Previous: <a href="#Case-of-Completed-Words" accesskey="p" rel="prev">Case of Completed Words</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Object-Method-Completion-and-Class-Ambiguity-1"></a>
<h4 class="subsection">4.4.2 Object Method Completion and Class Ambiguity</h4>
<a name="index-Object-methods"></a>
<a name="index-Class-ambiguity"></a>
<a name="index-self-object_002c-default-class"></a>
<p>An object method is not uniquely determined without the object&rsquo;s class.
Since the class is almost always omitted in the calling source (as
required to obtain the true benefits of object-based programming),
IDLWAVE considers all available methods in all classes as possible
method name completions.  The combined list of keywords of the current
method in <em>all</em> known classes which contain that method will be
considered for keyword completion.  In the <samp>*Completions*</samp> buffer,
the matching classes will be shown next to each item (see option
<code>idlwave-completion-show-classes</code>).  As a special case, the class
of an object called &lsquo;<samp>self</samp>&rsquo; is always taken to be the class of the
current routine, when in an IDLWAVE buffer.  All inherits classes are
considered as well.
</p>
<a name="index-Forcing-class-query_002e"></a>
<a name="index-Class-query_002c-forcing"></a>
<p>You can also call <code>idlwave-complete</code> with a prefix arg: <kbd>C-u
M-<span class="key">TAB</span></kbd>.  IDLWAVE will then prompt you for the class in order to
narrow down the number of possible completions.  The variable
<code>idlwave-query-class</code> can be configured to make such prompting the
default for all methods (not recommended), or selectively for very
common methods for which the number of completing keywords would be too
large (e.g., <code>Init,SetProperty,GetProperty</code>).
</p>
<a name="index-Saving-object-class-on-_002d_003e"></a>
<a name="index-_002d_003e"></a>
<p>After you have specified the class for a particular statement (e.g., when
completing the method), IDLWAVE can remember it for the rest of the
editing session.  Subsequent completions in the same statement
(e.g., keywords) can then reuse this class information.  This works by
placing a text property on the method invocation operator &lsquo;<samp>-&gt;</samp>&rsquo;,
after which the operator will be shown in a different face (bold by
default).  The variable <code>idlwave-store-inquired-class</code> can be used
to turn it off or on.
</p>
<dl>
<dt><a name="index-idlwave_002dcompletion_002dshow_002dclasses"></a>User Option: <strong>idlwave-completion-show-classes</strong> <em>(<code>1</code>)</em></dt>
<dd><p>Non-<code>nil</code> means show up to that many classes in
<samp>*Completions*</samp> buffer when completing object methods and
keywords.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dcompletion_002dfontify_002dclasses"></a>User Option: <strong>idlwave-completion-fontify-classes</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means fontify the classes in completions buffer.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dquery_002dclass"></a>User Option: <strong>idlwave-query-class</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Association list governing query for object classes during completion.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dstore_002dinquired_002dclass"></a>User Option: <strong>idlwave-store-inquired-class</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means store class of a method call as text property on
&lsquo;<samp>-&gt;</samp>&rsquo;.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dclass_002darrow_002dface"></a>User Option: <strong>idlwave-class-arrow-face</strong></dt>
<dd><p>Face to highlight object operator arrows &lsquo;<samp>-&gt;</samp>&rsquo; which carry a saved
class text property.
</p></dd></dl>

<hr>
<a name="Object-Method-Completion-in-the-Shell"></a>
<div class="header">
<p>
Next: <a href="#Class-and-Keyword-Inheritance" accesskey="n" rel="next">Class and Keyword Inheritance</a>, Previous: <a href="#Object-Method-Completion-and-Class-Ambiguity" accesskey="p" rel="prev">Object Method Completion and Class Ambiguity</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Object-Method-Completion-in-the-Shell-1"></a>
<h4 class="subsection">4.4.3 Object Method Completion in the Shell</h4>
<a name="index-Method-Completion-in-Shell"></a>
<p>In the IDLWAVE Shell (see <a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a>), objects on which
methods are being invoked have a special property: they must exist as
variables, and so their class can be determined (for instance, using the
<code>obj_class()</code> function).  In the Shell, when attempting completion,
routine info, or online help within a method routine, a query is sent to
determine the class of the object.  If this query is successful, the
class found will be used to select appropriate completions, routine
info, or help.  If unsuccessful, information from all known classes will
be used (as in the buffer).
</p>
<hr>
<a name="Class-and-Keyword-Inheritance"></a>
<div class="header">
<p>
Next: <a href="#Structure-Tag-Completion" accesskey="n" rel="next">Structure Tag Completion</a>, Previous: <a href="#Object-Method-Completion-in-the-Shell" accesskey="p" rel="prev">Object Method Completion in the Shell</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Class-and-Keyword-Inheritance-1"></a>
<h4 class="subsection">4.4.4 Class and Keyword Inheritance</h4>
<a name="index-Inheritance_002c-class"></a>
<a name="index-Keyword-inheritance"></a>
<a name="index-Inheritance_002c-keyword"></a>

<p>Class inheritance affects which methods are called in IDL.  An object of
a class which inherits methods from one or more superclasses can
override that method by defining its own method of the same name, extend
the method by calling the method(s) of its superclass(es) in its
version, or inherit the method directly by making no modifications.
IDLWAVE examines class definitions during completion and routine
information display, and records all inheritance information it finds.
This information is displayed if appropriate with the calling sequence
for methods (see <a href="#Routine-Info">Routine Info</a>), as long as variable
<code>idlwave-support-inheritance</code> is non-<code>nil</code>.
</p>
<p>In many class methods, <em>keyword</em> inheritance (<code>_EXTRA</code> and
<code>_REF_EXTRA</code>) is used hand-in-hand with class inheritance and
method overriding.  E.g., in a <code>SetProperty</code> method, this technique
allows a single call <code>obj-&gt;SetProperty</code> to set properties up the
entire class inheritance chain.  This is often referred to as
<em>chaining</em>, and is characterized by chained method calls like
<code><span class="nolinebreak">self-&gt;MySuperClass::SetProperty,_EXTRA=e</span></code><!-- /@w -->.
</p>
<p>IDLWAVE can accommodate this special synergy between class and keyword
inheritance: if <code>_EXTRA</code> or <code>_REF_EXTRA</code> is detected among a
method&rsquo;s keyword parameters, all keywords of superclass versions of
the method being considered can be included in completion.  There is
of course no guarantee that this type of keyword chaining actually
occurs, but for some methods it&rsquo;s a very convenient assumption.  The
variable <code>idlwave-keyword-class-inheritance</code> can be used to
configure which methods have keyword inheritance treated in this
simple, class-driven way.  By default, only <code>Init</code> and
<code>(Get|Set)Property</code> are.  The completion buffer will label
keywords based on their originating class.
</p>
<dl>
<dt><a name="index-idlwave_002dsupport_002dinheritance"></a>User Option: <strong>idlwave-support-inheritance</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means consider inheritance during completion, online help etc.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dkeyword_002dclass_002dinheritance"></a>User Option: <strong>idlwave-keyword-class-inheritance</strong></dt>
<dd><p>A list of regular expressions to match methods for which simple
class-driven keyword inheritance will be used for Completion.
</p></dd></dl>

<hr>
<a name="Structure-Tag-Completion"></a>
<div class="header">
<p>
Previous: <a href="#Class-and-Keyword-Inheritance" accesskey="p" rel="prev">Class and Keyword Inheritance</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Structure-Tag-Completion-1"></a>
<h4 class="subsection">4.4.5 Structure Tag Completion</h4>
<a name="index-Completion_002c-structure-tag"></a>
<a name="index-Structure-tag-completion"></a>

<p>In many programs, especially those involving widgets, large structures
(e.g., the &lsquo;<samp>state</samp>&rsquo; structure) are used to communicate among
routines.  It is very convenient to be able to complete structure tags,
in the same way as for instance variables (tags) of the &lsquo;<samp>self</samp>&rsquo;
object (see <a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a>).  Add-in
code for structure tag completion is available in the form of a loadable
completion module: <samp>idlw-complete-structtag.el</samp>.  Tag completion in
structures is highly ambiguous (much more so than &lsquo;<samp>self</samp>&rsquo;
completion), so <code>idlw-complete-structtag</code> makes an unusual and very
specific assumption: the exact same variable name is used to refer to
the structure in all parts of the program.  This is entirely unenforced
by the IDL language, but is a typical convention.  If you consistently
refer to the same structure with the same variable name
(e.g., &lsquo;<samp>state</samp>&rsquo;), structure tags which are read from its definition
in the same file can be used for completion.
</p>
<p>Structure tag completion is not enabled by default.  To enable it,
simply add the following to your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">   (add-hook 'idlwave-load-hook
             (lambda () (require 'idlw-complete-structtag)))
</pre></div>

<p>Once enabled, you&rsquo;ll also be able to access online help on the structure
tags, using the usual methods (see <a href="#Online-Help">Online Help</a>).  In addition,
structure variables in the shell will be queried for tag names, similar
to the way object variables in the shell are queried for method names.
So, e.g.:
</p>
<div class="example">
<pre class="example">IDL&gt; st.[Tab]
</pre></div>

<p>will complete with all structure fields of the structure
<code>st</code>.
</p>
<hr>
<a name="Routine-Source"></a>
<div class="header">
<p>
Next: <a href="#Resolving-Routines" accesskey="n" rel="next">Resolving Routines</a>, Previous: <a href="#Completion" accesskey="p" rel="prev">Completion</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Routine-Source-1"></a>
<h3 class="section">4.5 Routine Source</h3>
<a name="index-Routine-source-file"></a>
<a name="index-Module-source-file"></a>
<a name="index-Source-file_002c-of-a-routine"></a>
<a name="index-C_002dc-C_002dv"></a>
<p>In addition to clicking on a <i>Source:</i> line in the routine info
window, there is another way to quickly visit the source file of a
routine.  The command <kbd>C-c C-v</kbd> (<code>idlwave-find-module</code>) asks
for a module name, offering the same default as
<code>idlwave-routine-info</code> would have used, taken from nearby buffer
contents.  In the minibuffer, specify a complete routine name (including
any class part).  IDLWAVE will display the source file in another
window, positioned at the routine in question.  You can also limit this
to a routine in the current buffer only, with completion, and a
context-sensitive default, by using a single prefix (<kbd>C-u C-c C-v</kbd>)
or the convenience binding <kbd>C-c C-t</kbd>.
</p>
<a name="index-Buffers_002c-killing"></a>
<a name="index-Killing-autoloaded-buffers"></a>
<p>Since getting the source of a routine into a buffer is so easy with
IDLWAVE, too many buffers visiting different IDL source files are
sometimes created.  The special command <kbd>C-c C-k</kbd>
(<code>idlwave-kill-autoloaded-buffers</code>) can be used to easily remove
these buffers.
</p>
<hr>
<a name="Resolving-Routines"></a>
<div class="header">
<p>
Next: <a href="#Code-Templates" accesskey="n" rel="next">Code Templates</a>, Previous: <a href="#Routine-Source" accesskey="p" rel="prev">Routine Source</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Resolving-Routines-1"></a>
<h3 class="section">4.6 Resolving Routines</h3>
<a name="index-RESOLVE_005fROUTINE"></a>
<a name="index-Compiling-library-modules"></a>
<a name="index-Routines_002c-resolving"></a>

<p>The key sequence <kbd>C-c =</kbd> calls the command <code>idlwave-resolve</code>
and sends the line &lsquo;<samp>RESOLVE_ROUTINE, '<var>routine_name</var>'</samp>&rsquo; to IDL
in order to resolve (compile) it.  The default routine to be resolved is
taken from context, but you get a chance to edit it.  Usually this is
not necessary, since IDL automatically discovers routines on its path.
</p>
<p><code>idlwave-resolve</code> is one way to get a library module within reach
of IDLWAVE&rsquo;s routine info collecting functions.  A better way is to
keep routine information available in catalogs (see <a href="#Catalogs">Catalogs</a>).
Routine info on modules will then be available without the need to
compile the modules first, and even without a running shell.
</p>
<p>See <a href="#Sources-of-Routine-Info">Sources of Routine Info</a>, for more information on the ways IDLWAVE
collects data about routines, and how to update this information.
</p>
<hr>
<a name="Code-Templates"></a>
<div class="header">
<p>
Next: <a href="#Abbreviations" accesskey="n" rel="next">Abbreviations</a>, Previous: <a href="#Resolving-Routines" accesskey="p" rel="prev">Resolving Routines</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Code-Templates-1"></a>
<h3 class="section">4.7 Code Templates</h3>
<a name="index-Code-templates"></a>
<a name="index-Templates"></a>

<p>IDLWAVE can insert IDL code templates into the buffer.  For a few
templates, this is done with direct key bindings:
</p>
<table>
<tr><td width="15%"><kbd>C-c C-c</kbd></td><td width="85%"><code>CASE</code> statement template</td></tr>
<tr><td width="15%"><kbd>C-c C-f</kbd></td><td width="85%"><code>FOR</code> loop template</td></tr>
<tr><td width="15%"><kbd>C-c C-r</kbd></td><td width="85%"><code>REPEAT</code> loop template</td></tr>
<tr><td width="15%"><kbd>C-c C-w</kbd></td><td width="85%"><code>WHILE</code> loop template</td></tr>
</table>

<p>All code templates are also available as abbreviations
(see <a href="#Abbreviations">Abbreviations</a>).
</p>
<hr>
<a name="Abbreviations"></a>
<div class="header">
<p>
Next: <a href="#Actions" accesskey="n" rel="next">Actions</a>, Previous: <a href="#Code-Templates" accesskey="p" rel="prev">Code Templates</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Abbreviations-1"></a>
<h3 class="section">4.8 Abbreviations</h3>
<a name="index-Abbreviations"></a>

<p>Special abbreviations exist to enable rapid entry of commonly used
commands.  Emacs abbreviations are expanded by typing text into the
buffer and pressing <tt class="key">SPC</tt> or <tt class="key">RET</tt>.  The special abbreviations
used to insert code templates all start with a &lsquo;<samp>\</samp>&rsquo; (the backslash),
or, optionally, any other character set in
<code>idlwave-abbrev-start-char</code>. IDLWAVE ensures that abbreviations are
only expanded where they should be (i.e., not in a string or comment),
and permits the point to be moved after an abbreviation expansion:
very useful for positioning the mark inside of parentheses, etc.
</p>
<p>Special abbreviations are pre-defined for code templates and other
useful items.  To visit the full list of abbreviations, use <kbd>M-x
idlwave-list-abbrevs</kbd>.
</p>
<p>Template abbreviations:
</p>
<table>
<tr><td width="15%"><code>\pr</code></td><td width="85%"><code>PROCEDURE</code> template</td></tr>
<tr><td width="15%"><code>\fu</code></td><td width="85%"><code>FUNCTION</code> template</td></tr>
<tr><td width="15%"><code>\c</code></td><td width="85%"><code>CASE</code> statement template</td></tr>
<tr><td width="15%"><code>\f</code></td><td width="85%"><code>FOR</code> loop template</td></tr>
<tr><td width="15%"><code>\r</code></td><td width="85%"><code>REPEAT</code> loop template</td></tr>
<tr><td width="15%"><code>\w</code></td><td width="85%"><code>WHILE</code> loop template</td></tr>
<tr><td width="15%"><code>\i</code></td><td width="85%"><code>IF</code> statement template</td></tr>
<tr><td width="15%"><code>\elif</code></td><td width="85%"><code>IF-ELSE</code> statement template</td></tr>
</table>

<p>String abbreviations:
</p>
<table>
<tr><td width="15%"><code>\ap</code></td><td width="85%"><code>arg_present()</code></td></tr>
<tr><td width="15%"><code>\b</code></td><td width="85%"><code>begin</code></td></tr>
<tr><td width="15%"><code>\cb</code></td><td width="85%"><code>byte()</code></td></tr>
<tr><td width="15%"><code>\cc</code></td><td width="85%"><code>complex()</code></td></tr>
<tr><td width="15%"><code>\cd</code></td><td width="85%"><code>double()</code></td></tr>
<tr><td width="15%"><code>\cf</code></td><td width="85%"><code>float()</code></td></tr>
<tr><td width="15%"><code>\cl</code></td><td width="85%"><code>long()</code></td></tr>
<tr><td width="15%"><code>\co</code></td><td width="85%"><code>common</code></td></tr>
<tr><td width="15%"><code>\cs</code></td><td width="85%"><code>string()</code></td></tr>
<tr><td width="15%"><code>\cx</code></td><td width="85%"><code>fix()</code></td></tr>
<tr><td width="15%"><code>\e</code></td><td width="85%"><code>else</code></td></tr>
<tr><td width="15%"><code>\ec</code></td><td width="85%"><code>endcase</code></td></tr>
<tr><td width="15%"><code>\ee</code></td><td width="85%"><code>endelse</code></td></tr>
<tr><td width="15%"><code>\ef</code></td><td width="85%"><code>endfor</code></td></tr>
<tr><td width="15%"><code>\ei</code></td><td width="85%"><code>endif else if</code></td></tr>
<tr><td width="15%"><code>\el</code></td><td width="85%"><code>endif else</code></td></tr>
<tr><td width="15%"><code>\en</code></td><td width="85%"><code>endif</code></td></tr>
<tr><td width="15%"><code>\er</code></td><td width="85%"><code>endrep</code></td></tr>
<tr><td width="15%"><code>\es</code></td><td width="85%"><code>endswitch</code></td></tr>
<tr><td width="15%"><code>\ew</code></td><td width="85%"><code>endwhile</code></td></tr>
<tr><td width="15%"><code>\g</code></td><td width="85%"><code>goto,</code></td></tr>
<tr><td width="15%"><code>\h</code></td><td width="85%"><code>help,</code></td></tr>
<tr><td width="15%"><code>\ik</code></td><td width="85%"><code>if keyword_set() then</code></td></tr>
<tr><td width="15%"><code>\iap</code></td><td width="85%"><code>if arg_present() then</code></td></tr>
<tr><td width="15%"><code>\ine</code></td><td width="85%"><code>if n_elements() eq 0 then</code></td></tr>
<tr><td width="15%"><code>\inn</code></td><td width="85%"><code>if n_elements() ne 0 then</code></td></tr>
<tr><td width="15%"><code>\k</code></td><td width="85%"><code>keyword_set()</code></td></tr>
<tr><td width="15%"><code>\n</code></td><td width="85%"><code>n_elements()</code></td></tr>
<tr><td width="15%"><code>\np</code></td><td width="85%"><code>n_params()</code></td></tr>
<tr><td width="15%"><code>\oi</code></td><td width="85%"><code>on_ioerror,</code></td></tr>
<tr><td width="15%"><code>\or</code></td><td width="85%"><code>openr,</code></td></tr>
<tr><td width="15%"><code>\ou</code></td><td width="85%"><code>openu,</code></td></tr>
<tr><td width="15%"><code>\ow</code></td><td width="85%"><code>openw,</code></td></tr>
<tr><td width="15%"><code>\p</code></td><td width="85%"><code>print,</code></td></tr>
<tr><td width="15%"><code>\pt</code></td><td width="85%"><code>plot,</code></td></tr>
<tr><td width="15%"><code>\pv</code></td><td width="85%"><code>ptr_valid()</code></td></tr>
<tr><td width="15%"><code>\re</code></td><td width="85%"><code>read,</code></td></tr>
<tr><td width="15%"><code>\rf</code></td><td width="85%"><code>readf,</code></td></tr>
<tr><td width="15%"><code>\rt</code></td><td width="85%"><code>return</code></td></tr>
<tr><td width="15%"><code>\ru</code></td><td width="85%"><code>readu,</code></td></tr>
<tr><td width="15%"><code>\s</code></td><td width="85%"><code>size()</code></td></tr>
<tr><td width="15%"><code>\sc</code></td><td width="85%"><code>strcompress()</code></td></tr>
<tr><td width="15%"><code>\sl</code></td><td width="85%"><code>strlowcase()</code></td></tr>
<tr><td width="15%"><code>\sm</code></td><td width="85%"><code>strmid()</code></td></tr>
<tr><td width="15%"><code>\sn</code></td><td width="85%"><code>strlen()</code></td></tr>
<tr><td width="15%"><code>\sp</code></td><td width="85%"><code>strpos()</code></td></tr>
<tr><td width="15%"><code>\sr</code></td><td width="85%"><code>strtrim()</code></td></tr>
<tr><td width="15%"><code>\st</code></td><td width="85%"><code>strput()</code></td></tr>
<tr><td width="15%"><code>\su</code></td><td width="85%"><code>strupcase()</code></td></tr>
<tr><td width="15%"><code>\t</code></td><td width="85%"><code>then</code></td></tr>
<tr><td width="15%"><code>\u</code></td><td width="85%"><code>until</code></td></tr>
<tr><td width="15%"><code>\wc</code></td><td width="85%"><code>widget_control,</code></td></tr>
<tr><td width="15%"><code>\wi</code></td><td width="85%"><code>widget_info()</code></td></tr>
<tr><td width="15%"><code>\wu</code></td><td width="85%"><code>writeu,</code></td></tr>
</table>

<p>You can easily add your own abbreviations or override existing
abbrevs with <code>define-abbrev</code> in your mode hook, using the
convenience function <code>idlwave-define-abbrev</code>:
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'idlwave-mode-hook
          (lambda ()
            (idlwave-define-abbrev &quot;wb&quot; &quot;widget_base()&quot;
                     (idlwave-keyword-abbrev 1))
            (idlwave-define-abbrev &quot;ine&quot; &quot;IF N_Elements() EQ 0 THEN&quot;
                     (idlwave-keyword-abbrev 11))))
</pre></div>

<p>Notice how the abbreviation (here <em>wb</em>) and its expansion
(<em>widget_base()</em>) are given as arguments, and the single argument to
<code>idlwave-keyword-abbrev</code> (here <em>1</em>) specifies how far back to
move the point upon expansion (in this example, to put it between the
parentheses).
</p>
<p>The abbreviations are expanded in upper or lower case, depending upon
the variables <code>idlwave-abbrev-change-case</code> and, for reserved word
templates, <code>idlwave-reserved-word-upcase</code> (see <a href="#Case-Changes">Case Changes</a>).
</p>
<dl>
<dt><a name="index-idlwave_002dabbrev_002dstart_002dchar"></a>User Option: <strong>idlwave-abbrev-start-char</strong> <em>(<code>&quot;\&quot;</code>)</em></dt>
<dd><p>A single character string used to start abbreviations in abbrev mode.
Beware of common characters which might naturally occur in sequence with
abbreviation strings.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dabbrev_002dmove"></a>User Option: <strong>idlwave-abbrev-move</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means the abbrev hook can move point, e.g., to end up
between the parentheses of a function call.
</p></dd></dl>

<hr>
<a name="Actions"></a>
<div class="header">
<p>
Next: <a href="#Doc-Header" accesskey="n" rel="next">Doc Header</a>, Previous: <a href="#Abbreviations" accesskey="p" rel="prev">Abbreviations</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Actions-1"></a>
<h3 class="section">4.9 Actions</h3>
<a name="index-Actions"></a>
<a name="index-Coding-standards_002c-enforcing"></a>

<p><em>Actions</em> are special formatting commands which are executed
automatically while you write code in order to check the structure of
the program or to enforce coding standards.  Most actions which have
been implemented in IDLWAVE are turned off by default, assuming that the
average user wants her code the way she writes it.  But if you are a
lazy typist and want your code to adhere to certain standards, actions
can be helpful.
</p>
<p>Actions can be applied in three ways:
</p>
<ul>
<li> Some actions are applied directly while typing.  For example, pressing
&lsquo;<samp>=</samp>&rsquo; can run a check to make sure that this operator is surrounded
by spaces and insert these spaces if necessary.  Pressing <tt class="key">SPC</tt>
after a reserved word can call a command to change the word to upper
case.
</li><li> When a line is re-indented with <tt class="key">TAB</tt>, actions can be applied to the
entire line.  To enable this, the variable <code>idlwave-do-actions</code>
must be non-<code>nil</code>.
</li><li> <a name="index-Foreign-code_002c-adapting-1"></a>
<a name="index-Actions_002c-applied-to-foreign-code"></a>
Actions can also be applied to a larger piece of code, e.g., to convert
foreign code to your own style.  To do this, mark the relevant part of
the code and execute <kbd>M-x expand-region-abbrevs</kbd>.  Useful marking
commands are <kbd>C-x h</kbd> (the entire file) or <kbd>C-M-h</kbd> (the current
subprogram). See <a href="#Code-Indentation">Code Indentation</a>, for information how to adjust the
indentation of the code.
</li></ul>

<dl>
<dt><a name="index-idlwave_002ddo_002dactions"></a>User Option: <strong>idlwave-do-actions</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means performs actions when indenting.  Individual action
settings are described below and set separately.
</p></dd></dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Block-Boundary-Check" accesskey="1">Block Boundary Check</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Is the END statement correct?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Padding-Operators" accesskey="2">Padding Operators</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enforcing space around &lsquo;<samp>=</samp>&rsquo; etc
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Case-Changes" accesskey="3">Case Changes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enforcing upper case keywords
</td></tr>
</table>

<hr>
<a name="Block-Boundary-Check"></a>
<div class="header">
<p>
Next: <a href="#Padding-Operators" accesskey="n" rel="next">Padding Operators</a>, Up: <a href="#Actions" accesskey="u" rel="up">Actions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Block-Boundary-Check-1"></a>
<h4 class="subsection">4.9.1 Block Boundary Check</h4>
<a name="index-Block-boundary-check"></a>
<a name="index-END-type-checking"></a>
<a name="index-END_002c-automatic-insertion"></a>
<a name="index-END_002c-expanding"></a>
<a name="index-Block_002c-closing"></a>
<a name="index-Closing-a-block"></a>

<p>Whenever you type an <code>END</code> statement, IDLWAVE finds the
corresponding start of the block and the cursor blinks back to that
location for a second.  If you have typed a specific <code>END</code>, like
<code>ENDIF</code> or <code>ENDCASE</code>, you get a warning if that terminator
does not match the type of block it terminates.
</p>
<p>Set the variable <code>idlwave-expand-generic-end</code> in order to have all
generic <code>END</code> statements automatically expanded to the appropriate
type.  You can also type <kbd>C-c ]</kbd> to close the current block by
inserting the appropriate <code>END</code> statement.
</p>
<dl>
<dt><a name="index-idlwave_002dshow_002dblock"></a>User Option: <strong>idlwave-show-block</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means point blinks to block beginning for
<code>idlwave-show-begin</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dexpand_002dgeneric_002dend"></a>User Option: <strong>idlwave-expand-generic-end</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means expand generic END to ENDIF/ENDELSE/ENDWHILE etc.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dreindent_002dend"></a>User Option: <strong>idlwave-reindent-end</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means re-indent line after END was typed.
</p></dd></dl>

<hr>
<a name="Padding-Operators"></a>
<div class="header">
<p>
Next: <a href="#Case-Changes" accesskey="n" rel="next">Case Changes</a>, Previous: <a href="#Block-Boundary-Check" accesskey="p" rel="prev">Block Boundary Check</a>, Up: <a href="#Actions" accesskey="u" rel="up">Actions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Padding-Operators-1"></a>
<h4 class="subsection">4.9.2 Padding Operators</h4>
<a name="index-Padding-operators-with-spaces"></a>
<a name="index-Operators_002c-padding-with-spaces"></a>
<a name="index-Space_002c-around-operators"></a>

<p>Some operators can be automatically surrounded by spaces.  This can
happen when the operator is typed, or later when the line is indented.
IDLWAVE can pad the operators &lsquo;<samp>&lt;</samp>&rsquo;, &lsquo;<samp>&gt;</samp>&rsquo;, &lsquo;<samp>,</samp>&rsquo;, &lsquo;<samp>=</samp>&rsquo;,
and &lsquo;<samp>-&gt;</samp>&rsquo;, as well as the modified assignment operators
(&lsquo;<samp>AND=</samp>&rsquo;, &lsquo;<samp>OR=</samp>&rsquo;, etc.).  This feature is turned off by default.
If you want to turn it on, customize the variables
<code>idlwave-surround-by-blank</code> and <code>idlwave-do-actions</code> and turn
both on.  You can also define similar actions for other operators by
using the function <code>idlwave-action-and-binding</code> in the mode hook.
For example, to enforce space padding of the &lsquo;<samp>+</samp>&rsquo; and &lsquo;<samp>*</samp>&rsquo;
operators (outside of strings and comments, of course), try this in
<samp>.emacs</samp>
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'idlwave-mode-hook
  (lambda ()
     (setq idlwave-surround-by-blank t)  ; Turn this type of actions on
     (idlwave-action-and-binding &quot;*&quot; '(idlwave-surround 1 1))
     (idlwave-action-and-binding &quot;+&quot; '(idlwave-surround 1 1))))
</pre></div>

<p>Note that the modified assignment operators which begin with a word
(&lsquo;<samp>AND=</samp>&rsquo;, &lsquo;<samp>OR=</samp>&rsquo;, &lsquo;<samp>NOT=</samp>&rsquo;, etc.) require a leading space to
be recognized (e.g., <code>vAND=4</code> would be interpreted as a variable
<code>vAND</code>).  Also note that since, e.g., <code>&gt;</code> and <code>&gt;=</code> are
both valid operators, it is impossible to surround both by blanks while
they are being typed.  Similarly with <code>&amp;</code> and <code>&amp;&amp;</code>.  For
these, a compromise is made: the padding is placed on the left, and if
the longer operator is keyed in, on the right as well (otherwise you
must insert spaces to pad right yourself, or press simply press Tab to
repad everything if <code>idlwave-do-actions</code> is on).
</p>
<dl>
<dt><a name="index-idlwave_002dsurround_002dby_002dblank"></a>User Option: <strong>idlwave-surround-by-blank</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means enable <code>idlwave-surround</code>.  If non-<code>nil</code>,
&lsquo;<samp>=</samp>&rsquo;, &lsquo;<samp>&lt;</samp>&rsquo;, &lsquo;<samp>&gt;</samp>&rsquo;, &lsquo;<samp>&amp;</samp>&rsquo;, &lsquo;<samp>,</samp>&rsquo;, &lsquo;<samp>-&gt;</samp>&rsquo;, and the
modified assignment operators (&lsquo;<samp>AND=</samp>&rsquo;, &lsquo;<samp>OR=</samp>&rsquo;, etc.) are
surrounded with spaces by <code>idlwave-surround</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dpad_002dkeyword"></a>User Option: <strong>idlwave-pad-keyword</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means space-pad the &lsquo;<samp>=</samp>&rsquo; in keyword assignments.
</p></dd></dl>

<hr>
<a name="Case-Changes"></a>
<div class="header">
<p>
Previous: <a href="#Padding-Operators" accesskey="p" rel="prev">Padding Operators</a>, Up: <a href="#Actions" accesskey="u" rel="up">Actions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Case-Changes-1"></a>
<h4 class="subsection">4.9.3 Case Changes</h4>
<a name="index-Case-changes"></a>
<a name="index-Upcase_002c-enforcing-for-reserved-words"></a>
<a name="index-Downcase_002c-enforcing-for-reserved-words"></a>

<p>Actions can be used to change the case of reserved words or expanded
abbreviations by customizing the variables
<code>idlwave-abbrev-change-case</code> and
<code>idlwave-reserved-word-upcase</code>.  If you want to change the case of
additional words automatically, put something like the following into
your <samp>.emacs</samp> file:
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'idlwave-mode-hook
  (lambda ()
     ;;  Capitalize system vars
     (idlwave-action-and-binding idlwave-sysvar '(capitalize-word 1) t)
     ;;  Capitalize procedure name
     (idlwave-action-and-binding &quot;\\&lt;\\(pro\\|function\\)\\&gt;[ \t]*\\&lt;&quot;
                                 '(capitalize-word 1) t)
     ;;  Capitalize common block name
     (idlwave-action-and-binding &quot;\\&lt;common\\&gt;[ \t]+\\&lt;&quot;
                                 '(capitalize-word 1) t)))
</pre></div>

<p>For more information, see the documentation string for the function
<code>idlwave-action-and-binding</code>.  For information on controlling the
case of routines, keywords, classes, and methods as they are completed, see
<a href="#Completion">Completion</a>.
</p>
<dl>
<dt><a name="index-idlwave_002dabbrev_002dchange_002dcase"></a>User Option: <strong>idlwave-abbrev-change-case</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means all abbrevs will be forced to either upper or lower
case.  Valid values are <code>nil</code>, <code>t</code>, and <code>down</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dreserved_002dword_002dupcase"></a>User Option: <strong>idlwave-reserved-word-upcase</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means reserved words will be made upper case via abbrev
expansion.
</p></dd></dl>


<hr>
<a name="Doc-Header"></a>
<div class="header">
<p>
Next: <a href="#Motion-Commands" accesskey="n" rel="next">Motion Commands</a>, Previous: <a href="#Actions" accesskey="p" rel="prev">Actions</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Documentation-Header"></a>
<h3 class="section">4.10 Documentation Header</h3>
<a name="index-Documentation-header"></a>
<a name="index-DocLib-header"></a>
<a name="index-Modification-timestamp"></a>
<a name="index-Header_002c-for-file-documentation"></a>
<a name="index-Timestamp_002c-in-doc-header_002e"></a>
<a name="index-Changelog_002c-in-doc-header_002e"></a>

<a name="index-C_002dc-C_002dh"></a>
<a name="index-C_002dc-C_002dm"></a>
<p>The command <kbd>C-c C-h</kbd> inserts a standard routine header into the
buffer, with the usual fields for documentation (a different header can
be specified with <code>idlwave-file-header</code>).  One of the keywords is
&lsquo;<samp>MODIFICATION HISTORY</samp>&rsquo; under which the changes to a routine can be
recorded.  The command <kbd>C-c C-m</kbd> jumps to the &lsquo;<samp>MODIFICATION
HISTORY</samp>&rsquo; of the current routine or file and inserts the user name with a
timestamp.
</p>
<dl>
<dt><a name="index-idlwave_002dfile_002dheader"></a>User Option: <strong>idlwave-file-header</strong></dt>
<dd><p>The doc-header template or a path to a file containing it.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dheader_002dto_002dbeginning_002dof_002dfile"></a>User Option: <strong>idlwave-header-to-beginning-of-file</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means the documentation header will always be at start
of file.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dtimestamp_002dhook"></a>User Option: <strong>idlwave-timestamp-hook</strong></dt>
<dd><p>The hook function used to update the timestamp of a function.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002ddoc_002dmodifications_002dkeyword"></a>User Option: <strong>idlwave-doc-modifications-keyword</strong></dt>
<dd><p>The modifications keyword to use with the log documentation commands.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002ddoclib_002dstart"></a>User Option: <strong>idlwave-doclib-start</strong></dt>
<dd><p>Regexp matching the start of a document library header.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002ddoclib_002dend"></a>User Option: <strong>idlwave-doclib-end</strong></dt>
<dd><p>Regexp matching the start of a document library header.
</p></dd></dl>

<hr>
<a name="Motion-Commands"></a>
<div class="header">
<p>
Next: <a href="#Misc-Options" accesskey="n" rel="next">Misc Options</a>, Previous: <a href="#Doc-Header" accesskey="p" rel="prev">Doc Header</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Motion-Commands-1"></a>
<h3 class="section">4.11 Motion Commands</h3>
<a name="index-Motion-commands"></a>
<a name="index-Program-structure_002c-moving-through"></a>
<a name="index-Code-structure_002c-moving-through"></a>
<a name="index-Func_002dmenu_002c-XEmacs-package"></a>
<a name="index-Imenu_002c-Emacs-package"></a>
<a name="index-Function-definitions_002c-jumping-to"></a>
<a name="index-Procedure-definitions_002c-jumping-to"></a>

<p>IDLWAVE supports both <samp>Imenu</samp> and <samp>Func-menu</samp>, two packages
which make it easy to jump to the definitions of functions and
procedures in the current file with a pop-up selection.  To bind
<samp>Imenu</samp> to a mouse-press, use in your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(define-key global-map [S-down-mouse-3] 'imenu)
</pre></div>

<a name="index-Speedbar_002c-Emacs-package"></a>

<p>In addition, <samp>Speedbar</samp> support allows convenient navigation of a
source tree of IDL routine files, quickly stepping to routine
definitions.  See <code>Tools-&gt;Display Speedbar</code>.
</p>
<p>Several commands allow you to move quickly through the structure of an
IDL program:
</p>
<table>
<tr><td width="15%"><kbd>C-M-a</kbd></td><td width="85%">Beginning of subprogram</td></tr>
<tr><td width="15%"><kbd>C-M-e</kbd></td><td width="85%">End of subprogram</td></tr>
<tr><td width="15%"><kbd>C-c {</kbd></td><td width="85%">Beginning of block (stay inside the block)</td></tr>
<tr><td width="15%"><kbd>C-c }</kbd></td><td width="85%">End of block (stay inside the block)</td></tr>
<tr><td width="15%"><kbd>C-M-n</kbd></td><td width="85%">Forward block (on same level)</td></tr>
<tr><td width="15%"><kbd>C-M-p</kbd></td><td width="85%">Backward block (on same level)</td></tr>
<tr><td width="15%"><kbd>C-M-d</kbd></td><td width="85%">Down block (enters a block)</td></tr>
<tr><td width="15%"><kbd>C-M-u</kbd></td><td width="85%">Backward up block (leaves a block)</td></tr>
<tr><td width="15%"><kbd>C-c C-n</kbd></td><td width="85%">Next Statement</td></tr>
</table>


<hr>
<a name="Misc-Options"></a>
<div class="header">
<p>
Previous: <a href="#Motion-Commands" accesskey="p" rel="prev">Motion Commands</a>, Up: <a href="#The-IDLWAVE-Major-Mode" accesskey="u" rel="up">The IDLWAVE Major Mode</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-Options"></a>
<h3 class="section">4.12 Miscellaneous Options</h3>
<a name="index-Hooks"></a>

<dl>
<dt><a name="index-idlwave_002dhelp_002dapplication"></a>User Option: <strong>idlwave-help-application</strong></dt>
<dd><p>The external application providing reference help for programming.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dstartup_002dmessage"></a>User Option: <strong>idlwave-startup-message</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means display a startup message when <code>idlwave-mode</code>&rsquo;
is first called.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dmode_002dhook"></a>User Option: <strong>idlwave-mode-hook</strong></dt>
<dd><p>Normal hook.  Executed when a buffer is put into <code>idlwave-mode</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dload_002dhook"></a>User Option: <strong>idlwave-load-hook</strong></dt>
<dd><p>Normal hook.  Executed when <samp>idlwave.el</samp> is loaded.
</p></dd></dl>

<hr>
<a name="The-IDLWAVE-Shell"></a>
<div class="header">
<p>
Next: <a href="#Acknowledgments" accesskey="n" rel="next">Acknowledgments</a>, Previous: <a href="#The-IDLWAVE-Major-Mode" accesskey="p" rel="prev">The IDLWAVE Major Mode</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-IDLWAVE-Shell-1"></a>
<h2 class="chapter">5 The IDLWAVE Shell</h2>
<a name="index-IDLWAVE-shell"></a>
<a name="index-Major-mode_002c-idlwave_002dshell_002dmode"></a>
<a name="index-IDL_002c-as-Emacs-subprocess"></a>
<a name="index-Subprocess-of-Emacs_002c-IDL"></a>
<a name="index-Comint_002c-Emacs-package"></a>
<a name="index-Windows"></a>
<a name="index-macOS"></a>

<p>The IDLWAVE shell is an Emacs major mode which permits running the IDL
program as an inferior process of Emacs, and works closely with the
IDLWAVE major mode in buffers.  It can be used to work with IDL
interactively, to compile and run IDL programs in Emacs buffers and to
debug these programs.  The IDLWAVE shell is built on <samp>comint</samp>, an
Emacs packages which handles the communication with the IDL program.
Unfortunately, IDL for Windows does not have command-prompt versions and
thus do not allow the interaction with Emacs, so the IDLWAVE shell
currently works under only Unix and macOS.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Starting-the-Shell" accesskey="1">Starting the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to launch IDL as a subprocess
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Using-the-Shell" accesskey="2">Using the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interactively working with the Shell
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Commands-Sent-to-the-Shell" accesskey="3">Commands Sent to the Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-IDL-Programs" accesskey="4">Debugging IDL Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Examining-Variables" accesskey="5">Examining Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Custom-Expression-Examination" accesskey="6">Custom Expression Examination</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Starting-the-Shell"></a>
<div class="header">
<p>
Next: <a href="#Using-the-Shell" accesskey="n" rel="next">Using the Shell</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Starting-the-Shell-1"></a>
<h3 class="section">5.1 Starting the Shell</h3>
<a name="index-Starting-the-shell"></a>
<a name="index-Shell_002c-starting"></a>
<a name="index-Dedicated-frame_002c-for-shell-buffer"></a>
<a name="index-Frame_002c-for-shell-buffer"></a>
<a name="index-Subprocess-of-Emacs_002c-IDL-1"></a>

<a name="index-C_002dc-C_002ds"></a>
<p>The IDLWAVE shell can be started with the command <kbd>M-x
idlwave-shell</kbd>.  In <code>idlwave-mode</code> the function is bound to
<kbd>C-c C-s</kbd>.  It creates a buffer <samp>*idl*</samp> which is used to
interact with the shell.  If the shell is already running, <kbd>C-c
C-s</kbd> will simply switch to the shell buffer.  The command <kbd>C-c
C-l</kbd> (<code>idlwave-shell-recenter-shell-window</code>) displays the shell
window without selecting it.  The shell can also be started
automatically when another command tries to send a command to it.  To
enable auto start, set the variable
<code>idlwave-shell-automatic-start</code> to <code>t</code>.
</p>
<p>In order to create a separate frame for the IDLWAVE shell buffer, call
<code>idlwave-shell</code> with a prefix argument: <kbd>C-u C-c C-s</kbd> or
<kbd>C-u C-c C-l</kbd>.  If you always want a dedicated frame for the shell
window, configure the variable
<code>idlwave-shell-use-dedicated-frame</code>.
</p>
<p>To launch a quick IDLWAVE shell directly from a shell prompt without
an IDLWAVE buffer (e.g., as a replacement for running inside an
xterm), define a system alias with the following content:
</p>
<div class="example">
<pre class="example">emacs -geometry 80x32 -eval &quot;(idlwave-shell 'quick)&quot;
</pre></div>

<p>Replace the &lsquo;<samp>-geometry 80x32</samp>&rsquo; option with &lsquo;<samp>-nw</samp>&rsquo; if you prefer
the Emacs process to run directly inside the terminal window.
</p>
<a name="index-ENVI"></a>
<a name="index-IDL_003e-Prompt"></a>

<p>To use IDLWAVE with ENVI or other custom packages which change the
&lsquo;<samp>IDL&gt; </samp>&rsquo; prompt, you must change the
<code>idlwave-shell-prompt-pattern</code>, which defaults to &lsquo;<samp>&quot;^ ?IDL&gt;
&quot;</samp>&rsquo;.  Normally, you can just replace the &lsquo;<samp>IDL</samp>&rsquo; in this expression
with the prompt you see.  A suitable pattern which matches the prompt
for both ENVI and IDL simultaneously is &lsquo;<samp>&quot;^ ?\\(ENVI\\|IDL\\)&gt; &quot;</samp>&rsquo;.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dexplicit_002dfile_002dname"></a>User Option: <strong>idlwave-shell-explicit-file-name</strong> <em>(<samp>idl</samp>)</em></dt>
<dd><p>This is the command to run IDL.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dcommand_002dline_002doptions"></a>User Option: <strong>idlwave-shell-command-line-options</strong></dt>
<dd><p>A list of command line options for calling the IDL program.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dprompt_002dpattern"></a>User Option: <strong>idlwave-shell-prompt-pattern</strong></dt>
<dd><p>Regexp to match IDL prompt at beginning of a line.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dprocess_002dname"></a>User Option: <strong>idlwave-shell-process-name</strong></dt>
<dd><p>Name to be associated with the IDL process.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dautomatic_002dstart"></a>User Option: <strong>idlwave-shell-automatic-start</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means attempt to invoke idlwave-shell if not already
running.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dinitial_002dcommands"></a>User Option: <strong>idlwave-shell-initial-commands</strong></dt>
<dd><p>Initial commands, separated by newlines, to send to IDL.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dsave_002dcommand_002dhistory"></a>User Option: <strong>idlwave-shell-save-command-history</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means preserve command history between sessions.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dcommand_002dhistory_002dfile"></a>User Option: <strong>idlwave-shell-command-history-file</strong> <em>(<samp>~/.emacs.d/idlwave/.idlwhist</samp>)</em></dt>
<dd><p>The file in which the command history of the idlwave shell is saved.
Unless it&rsquo;s an absolute path, it goes in
<code>idlwave-config-directory</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002duse_002ddedicated_002dframe"></a>User Option: <strong>idlwave-shell-use-dedicated-frame</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means IDLWAVE should use a special frame to display the
shell buffer.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002duse_002ddedicated_002dwindow"></a>User Option: <strong>idlwave-shell-use-dedicated-window</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means use a dedicated window for the shell, taking care
not it replace it with other buffers.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dframe_002dparameters"></a>User Option: <strong>idlwave-shell-frame-parameters</strong></dt>
<dd><p>The frame parameters for a dedicated idlwave-shell frame.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002draise_002dframe"></a>User Option: <strong>idlwave-shell-raise-frame</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means <code>idlwave-shell</code> raises the frame showing the shell
window.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dtemp_002dpro_002dprefix"></a>User Option: <strong>idlwave-shell-temp-pro-prefix</strong></dt>
<dd><p>The prefix for temporary IDL files used when compiling regions.
</p></dd></dl>

<a name="index-Hooks-1"></a>
<dl>
<dt><a name="index-idlwave_002dshell_002dmode_002dhook"></a>User Option: <strong>idlwave-shell-mode-hook</strong></dt>
<dd><p>Hook for customizing <code>idlwave-shell-mode</code>.
</p></dd></dl>

<hr>
<a name="Using-the-Shell"></a>
<div class="header">
<p>
Next: <a href="#Commands-Sent-to-the-Shell" accesskey="n" rel="next">Commands Sent to the Shell</a>, Previous: <a href="#Starting-the-Shell" accesskey="p" rel="prev">Starting the Shell</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Using-the-Shell-1"></a>
<h3 class="section">5.2 Using the Shell</h3>
<a name="index-Comint"></a>
<a name="index-Shell_002c-basic-commands"></a>

<p>The IDLWAVE shell works in the same fashion as other shell modes in
Emacs.  It provides command history, command line editing and job
control.  The <tt class="key">UP</tt> and <tt class="key">DOWN</tt> arrows cycle through the input
history just like in an X terminal<a name="DOCF3" href="#FOOT3"><sup>3</sup></a>.  The history is preserved
between emacs and IDL sessions.  Here is a list of commonly used
commands:
</p>
<table>
<tr><td width="12%"><tt class="key">UP</tt>, <tt class="key">M-p</tt></td><td width="88%">Cycle backwards in input history</td></tr>
<tr><td width="12%"><tt class="key">DOWN</tt>, <tt class="key">M-n</tt></td><td width="88%">Cycle forwards in input history</td></tr>
<tr><td width="12%"><kbd>M-r</kbd></td><td width="88%">Previous input matching a regexp</td></tr>
<tr><td width="12%"><kbd>M-s</kbd></td><td width="88%">Next input matching a regexp</td></tr>
<tr><td width="12%"><kbd>return</kbd></td><td width="88%">Send input or copy line to current prompt</td></tr>
<tr><td width="12%"><kbd>C-c C-a</kbd></td><td width="88%">Beginning of line; skip prompt</td></tr>
<tr><td width="12%"><kbd>C-c C-u</kbd></td><td width="88%">Kill input to beginning of line</td></tr>
<tr><td width="12%"><kbd>C-c C-w</kbd></td><td width="88%">Kill word before cursor</td></tr>
<tr><td width="12%"><kbd>C-c C-c</kbd></td><td width="88%">Send ^C</td></tr>
<tr><td width="12%"><kbd>C-c C-z</kbd></td><td width="88%">Send ^Z</td></tr>
<tr><td width="12%"><kbd>C-c C-\</kbd></td><td width="88%">Send ^\</td></tr>
<tr><td width="12%"><kbd>C-c C-o</kbd></td><td width="88%">Delete last batch of process output</td></tr>
<tr><td width="12%"><kbd>C-c C-r</kbd></td><td width="88%">Show last batch of process output</td></tr>
<tr><td width="12%"><kbd>C-c C-l</kbd></td><td width="88%">List input history</td></tr>
</table>

<p>In addition to these standard <samp>comint</samp> commands,
<code>idlwave-shell-mode</code> provides many of the same commands which
simplify writing IDL code available in IDLWAVE buffers.  This includes
abbreviations, online help, and completion.  See <a href="#Routine-Info">Routine Info</a> and
<a href="#Online-Help">Online Help</a> and <a href="#Completion">Completion</a> for more information on these
commands.
</p>
<a name="index-Completion_002c-in-the-shell"></a>
<a name="index-Routine-info_002c-in-the-shell"></a>
<a name="index-Online-Help_002c-in-the-shell"></a>
<table>
<tr><td width="12%"><kbd><span class="key">TAB</span></kbd></td><td width="88%">Completion of file names (between quotes and after executive
commands &lsquo;<samp>.run</samp>&rsquo; and &lsquo;<samp>.compile</samp>&rsquo;), routine names, class names,
keywords, system variables, system variable tags etc.
(<code>idlwave-shell-complete</code>).</td></tr>
<tr><td width="12%"><kbd>M-<span class="key">TAB</span></kbd></td><td width="88%">Same as <tt class="key">TAB</tt></td></tr>
<tr><td width="12%"><kbd>C-c ?</kbd></td><td width="88%">Routine Info display (<code>idlwave-routine-info</code>)</td></tr>
<tr><td width="12%"><kbd>M-?</kbd></td><td width="88%">IDL online help on routine (<code>idlwave-routine-info-from-idlhelp</code>)</td></tr>
<tr><td width="12%"><kbd>C-c C-i</kbd></td><td width="88%">Update routine info from buffers and shell
(<code>idlwave-update-routine-info</code>)</td></tr>
<tr><td width="12%"><kbd>C-c C-v</kbd></td><td width="88%">Find the source file of a routine (<code>idlwave-find-module</code>)</td></tr>
<tr><td width="12%"><kbd>C-c C-t</kbd></td><td width="88%">Find the source file of a routine in the currently visited file
(<code>idlwave-find-module-this-file</code>).</td></tr>
<tr><td width="12%"><kbd>C-c =</kbd></td><td width="88%">Compile a library routine (<code>idlwave-resolve</code>)</td></tr>
</table>

<dl>
<dt><a name="index-idlwave_002dshell_002darrows_002ddo_002dhistory"></a>User Option: <strong>idlwave-shell-arrows-do-history</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means <tt class="key">UP</tt> and <tt class="key">DOWN</tt> arrows move through command
history like xterm.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dcomint_002dsettings"></a>User Option: <strong>idlwave-shell-comint-settings</strong></dt>
<dd><p>Alist of special settings for the comint variables in the IDLWAVE Shell.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dfile_002dname_002dchars"></a>User Option: <strong>idlwave-shell-file-name-chars</strong></dt>
<dd><p>The characters allowed in file names, as a string.  Used for file name
completion.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dgraphics_002dwindow_002dsize"></a>User Option: <strong>idlwave-shell-graphics-window-size</strong></dt>
<dd><p>Size of IDL graphics windows popped up by special IDLWAVE command.
</p></dd></dl>

<a name="index-Input-mode"></a>
<a name="index-Character-input-mode-_0028Shell_0029"></a>
<a name="index-Line-input-mode-_0028Shell_0029"></a>
<a name="index-Magic-spells_002c-for-input-mode"></a>
<a name="index-Spells_002c-magic"></a>
<p>IDLWAVE works in line input mode: You compose a full command line, using
all the power Emacs gives you to do this.  When you press <tt class="key">RET</tt>, the
whole line is sent to IDL.  Sometimes it is necessary to send single
characters (without a newline), for example when an IDL program is
waiting for single character input with the <code>GET_KBRD</code> function.
You can send a single character to IDL with the command <kbd>C-c C-x</kbd>
(<code>idlwave-shell-send-char</code>).  When you press <kbd>C-c C-y</kbd>
(<code>idlwave-shell-char-mode-loop</code>), IDLWAVE runs a blocking loop
which accepts characters and immediately sends them to IDL.  The loop
can be exited with <kbd>C-g</kbd>.  It terminates also automatically when the
current IDL command is finished.  Check the documentation of the two
variables described below for a way to make IDL programs trigger
automatic switches of the input mode.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002duse_002dinput_002dmode_002dmagic"></a>User Option: <strong>idlwave-shell-use-input-mode-magic</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>Non-<code>nil</code> means IDLWAVE should check for input mode spells in
output.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dinput_002dmode_002dspells"></a>User Option: <strong>idlwave-shell-input-mode-spells</strong></dt>
<dd><p>The three regular expressions which match the magic spells for input
modes.
</p></dd></dl>

<hr>
<a name="Commands-Sent-to-the-Shell"></a>
<div class="header">
<p>
Next: <a href="#Debugging-IDL-Programs" accesskey="n" rel="next">Debugging IDL Programs</a>, Previous: <a href="#Using-the-Shell" accesskey="p" rel="prev">Using the Shell</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Commands-Sent-to-the-Shell-1"></a>
<h3 class="section">5.3 Commands Sent to the Shell</h3>
<a name="index-Commands-in-shell_002c-showing"></a>
<a name="index-Showing-commands-in-shell"></a>

<p>The IDLWAVE buffers and shell interact very closely.  In addition to the
normal commands you enter at the <code>IDL&gt;</code> prompt, many other special
commands are sent to the shell, sometimes as a direct result of invoking
a key command, menu item, or toolbar button, but also automatically, as
part of the normal flow of information updates between the buffer and
shell.
</p>
<p>The commands sent include <code>breakpoint</code>, <code>.step</code> and other
debug commands (see <a href="#Debugging-IDL-Programs">Debugging IDL Programs</a>), <code>.run</code> and other
compilation statements (see <a href="#Compiling-Programs">Compiling Programs</a>), examination
commands like <code>print</code> and <code>help</code> (see <a href="#Examining-Variables">Examining Variables</a>), and other special purpose commands designed to keep
information on the running shell current.
</p>
<p>By default, much of this background shell input and output is hidden
from the user, but this is configurable.  The custom variable
<code>idlwave-abbrev-show-commands</code> allows you to configure which
commands sent to the shell are shown there.  For a related customization
for separating the output of <em>examine</em> commands, see <a href="#Examining-Variables">Examining Variables</a>.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dshow_002dcommands"></a>User Option: <strong>idlwave-shell-show-commands</strong> <em>(<code>'(run misc breakpoint)</code>)</em></dt>
<dd><p>A list of command types to echo in the shell when sent.  Possible values
are <code>run</code> for <code>.run</code>, <code>.compile</code> and other run commands,
<code>misc</code> for lesser used commands like <code>window</code>,
<code>retall</code>,<code>close</code>, etc., <code>breakpoint</code> for breakpoint
setting and clearing commands, and <code>debug</code> for other debug,
stepping, and continue commands.  In addition, if the variable is set to
the single symbol <code>'everything</code>, all the copious shell input is
displayed (which is probably only useful for debugging purposes).
N.B. For hidden commands which produce output by side-effect, that
output remains hidden (e.g., stepping through a <code>print</code> command).
As a special case, any error message in the output will be displayed
(e.g., stepping to an error).
</p></dd></dl>

<hr>
<a name="Debugging-IDL-Programs"></a>
<div class="header">
<p>
Next: <a href="#Examining-Variables" accesskey="n" rel="next">Examining Variables</a>, Previous: <a href="#Commands-Sent-to-the-Shell" accesskey="p" rel="prev">Commands Sent to the Shell</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Debugging-IDL-Programs-1"></a>
<h3 class="section">5.4 Debugging IDL Programs</h3>
<a name="index-Debugging"></a>
<a name="index-Keybindings-for-debugging"></a>
<a name="index-Toolbar"></a>

<p>Programs can be compiled, run, and debugged directly from the source
buffer in Emacs, walking through arbitrarily deeply nested code,
printing expressions and skipping up and down the calling stack along
the way.  IDLWAVE makes compiling and debugging IDL programs far less
cumbersome by providing a full-featured, key/menu/toolbar-driven
interface to commands like <code>breakpoint</code>, <code>.step</code>,
<code>.run</code>, etc.  It can even perform complex debug operations not
natively supported by IDL (like continuing to the line at the cursor).
</p>
<p>The IDLWAVE shell installs key bindings both in the shell buffer and
in all IDL code buffers of the current Emacs session, so debug
commands work in both places (in the shell, commands operate on the
last file compiled).  On Emacs versions which support it, a debugging
toolbar is also installed.  The toolbar display can be toggled with
<kbd>C-c C-d C-t</kbd> (<code>idlwave-shell-toggle-toolbar</code>).
</p>

<dl>
<dt><a name="index-idlwave_002dshell_002duse_002dtoolbar"></a>User Option: <strong>idlwave-shell-use-toolbar</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means use the debugging toolbar in all IDL related
buffers.
</p></dd></dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#A-Tale-of-Two-Modes" accesskey="1">A Tale of Two Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debug-Key-Bindings" accesskey="2">Debug Key Bindings</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Breakpoints-and-Stepping" accesskey="3">Breakpoints and Stepping</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Compiling-Programs" accesskey="4">Compiling Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Walking-the-Calling-Stack" accesskey="5">Walking the Calling Stack</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Electric-Debug-Mode" accesskey="6">Electric Debug Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>


<hr>
<a name="A-Tale-of-Two-Modes"></a>
<div class="header">
<p>
Next: <a href="#Debug-Key-Bindings" accesskey="n" rel="next">Debug Key Bindings</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="A-Tale-of-Two-Modes-1"></a>
<h4 class="subsection">5.4.1 A Tale of Two Modes</h4>
<a name="index-Electric-Debug-Mode"></a>
<a name="index-Debugging-Interface"></a>

<p>The many debugging, compiling, and examination commands provided in
IDLWAVE are available simultaneously through two different interfaces:
the original, multi-key command interface, and the new Electric Debug
Mode.  The functionality they offer is similar, but the way you interact
with them is quite different.  The main difference is that, in Electric
Debug Mode, the source buffers are made read-only, and single
key-strokes are used to step through, examine expressions, set and
remove breakpoints, etc.  The same variables, prefix arguments, and
settings apply to both versions, and both can be used interchangeably.
By default, when breakpoints are hit, Electric Debug Mode is enabled.
The traditional interface is described first.  See <a href="#Electric-Debug-Mode">Electric Debug Mode</a>, for more on that mode.  Note that electric debug mode can be
prevented from activating automatically by customizing the variable
<code>idlwave-shell-automatic-electric-debug</code>.
</p>
<hr>
<a name="Debug-Key-Bindings"></a>
<div class="header">
<p>
Next: <a href="#Breakpoints-and-Stepping" accesskey="n" rel="next">Breakpoints and Stepping</a>, Previous: <a href="#A-Tale-of-Two-Modes" accesskey="p" rel="prev">A Tale of Two Modes</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Debug-Key-Bindings-1"></a>
<h4 class="subsection">5.4.2 Debug Key Bindings</h4>
<a name="index-C_002dc-C_002dd"></a>
<a name="index-Key-bindings"></a>

<p>The standard debugging key bindings are always available by default on
the prefix key <kbd>C-c C-d</kbd>, so, for example, setting a breakpoint is
done with <kbd>C-c C-d C-b</kbd>, and compiling a source file with <kbd>C-c
C-d C-c</kbd>.  You can also easily configure IDLWAVE to use one or more
modifier keys not in use by other commands, in lieu of the prefix
<kbd>C-c C-d</kbd> (though these bindings will typically also be available;
see <code>idlwave-shell-activate-prefix-keybindings</code>).  For
example, if you include in <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-shell-debug-modifiers '(control shift))
</pre></div>

<p>a breakpoint can then be set by pressing <kbd>b</kbd> while holding down
<kbd>shift</kbd> and <kbd>control</kbd> keys, i.e., <kbd>C-S-b</kbd>.  Compiling a
source file will be on <kbd>C-S-c</kbd>, deleting a breakpoint <kbd>C-S-d</kbd>,
etc.  In the remainder of this chapter we will assume that the
<kbd>C-c C-d</kbd> bindings are active, but each of these bindings will
have an equivalent shortcut if modifiers are given in the
<code>idlwave-shell-debug-modifiers</code> variable (see <a href="#Lesson-II_002d_002d_002dCustomization">Lesson II---Customization</a>).  A much simpler and faster form of debugging for
running code is also available by default; see <a href="#Electric-Debug-Mode">Electric Debug Mode</a>.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dprefix_002dkey"></a>User Option: <strong>idlwave-shell-prefix-key</strong> <em>(<kbd>C-c C-d</kbd>)</em></dt>
<dd><p>The prefix key for the debugging map
<code>idlwave-shell-mode-prefix-map</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dactivate_002dprefix_002dkeybindings"></a>User Option: <strong>idlwave-shell-activate-prefix-keybindings</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means debug commands will be bound to the prefix
key, like <kbd>C-c C-d C-b</kbd>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002ddebug_002dmodifiers"></a>User Option: <strong>idlwave-shell-debug-modifiers</strong> <em>(<code>nil</code>)</em></dt>
<dd><p>List of modifier keys to use for additional, alternative binding of
debugging commands in the shell and source buffers.  Can be one or
more of <code>control</code>, <code>meta</code>, <code>super</code>, <code>hyper</code>,
<code>alt</code>, and <code>shift</code>.
</p></dd></dl>

<hr>
<a name="Breakpoints-and-Stepping"></a>
<div class="header">
<p>
Next: <a href="#Compiling-Programs" accesskey="n" rel="next">Compiling Programs</a>, Previous: <a href="#Debug-Key-Bindings" accesskey="p" rel="prev">Debug Key Bindings</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Breakpoints-and-Stepping-1"></a>
<h4 class="subsection">5.4.3 Breakpoints and Stepping</h4>
<a name="index-Breakpoints"></a>
<a name="index-Stepping"></a>
<a name="index-Execution_002c-controlled"></a>

<a name="index-C_002dc-C_002dd-C_002db"></a>
<a name="index-C_002dc-C_002dd-C_002db-1"></a>
<p>IDLWAVE helps you set breakpoints and step through code.  Setting a
breakpoint in the current line of the source buffer is accomplished
with <kbd>C-c C-d C-b</kbd> (<code>idlwave-shell-break-here</code>).  With a
prefix arg of 1 (i.e., <kbd>C-1 C-c C-d C-b</kbd>), the breakpoint gets a
<code>/ONCE</code> keyword, meaning that it will be deleted after first use.
With a numeric prefix greater than one (e.g., <kbd>C-4 C-c C-d C-b</kbd>),
the breakpoint will only be active the <code>nth</code> time it is hit.
With a single non-numeric prefix (i.e., <kbd>C-u C-c C-d C-b</kbd>), prompt
for a condition: an IDL expression to be evaluated and trigger the
breakpoint only if true.  To clear the breakpoint in the current line,
use <kbd>C-c C-d C-d</kbd> (<code>idlwave-clear-current-bp</code>).  When
executed from the shell window, the breakpoint where IDL is currently
stopped will be deleted.  To clear all breakpoints, use <kbd>C-c C-d
C-a</kbd> (<code>idlwave-clear-all-bp</code>).  Breakpoints can also be disabled
and re-enabled: <kbd>C-c C-d C-\</kbd>
(<code>idlwave-shell-toggle-enable-current-bp</code>).
</p>
<p>Breakpoint lines are highlighted or indicated with an icon in the source
code (different icons for conditional, after, and other break types).
Disabled breakpoints are <em>grayed out</em> by default.  Note that IDL
places breakpoints as close as possible on or after the line you
specify.  IDLWAVE queries the shell for the actual breakpoint location
which was set, so the exact line you specify may not be marked.  You can
re-sync the breakpoint list and update the display at any time (e.g., if
you add or remove some on the command line) using <kbd>C-c C-d C-l</kbd>.
</p>
<p>In recent IDLWAVE versions, the breakpoint line is highlighted when the
mouse is moved over it, and a tooltip pops up describing the break
details.  <kbd>mouse-3</kbd> on the breakpoint line pops up a menu of
breakpoint actions, including clearing, disabling, and adding or
changing break conditions or &ldquo;after&rdquo; break count.
</p>
<p>Once the program has stopped somewhere, you can step through it.  The
most important stepping commands are <kbd>C-c C-d C-s</kbd> to execute one
line of IDL code (&quot;step into&quot;); <kbd>C-c C-d C-n</kbd> to step a single line,
treating procedure and function calls as a single step (&quot;step over&quot;);
<kbd>C-c C-d C-h</kbd> to continue execution to the line at the cursor and
<kbd>C-c C-d C-r</kbd> to continue execution.  See <a href="#Commands-Sent-to-the-Shell">Commands Sent to the Shell</a>, for information on displaying or hiding the breakpoint and
stepping commands the shell receives.  Here is a summary of the
breakpoint and stepping commands:
</p>
<table>
<tr><td width="23%"><kbd>C-c C-d C-b</kbd></td><td width="77%">Set breakpoint (<code>idlwave-shell-break-here</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-i</kbd></td><td width="77%">Set breakpoint in module named here (<code>idlwave-shell-break-in</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-d</kbd></td><td width="77%">Clear current breakpoint (<code>idlwave-shell-clear-current-bp</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-a</kbd></td><td width="77%">Clear all breakpoints (<code>idlwave-shell-clear-all-bp</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d [</kbd></td><td width="77%">Go to the previous breakpoint (<code>idlwave-shell-goto-previous-bp</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d ]</kbd></td><td width="77%">Go to the next breakpoint (<code>idlwave-shell-goto-next-bp</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-\</kbd></td><td width="77%">Disable/Enable current breakpoint (<code>idlwave-shell-toggle-enable-current-bp</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-j</kbd></td><td width="77%">Set a breakpoint at the beginning of the enclosing routine.</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-s</kbd></td><td width="77%">Step, into function calls (<code>idlwave-shell-step</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-n</kbd></td><td width="77%">Step, over function calls (<code>idlwave-shell-stepover</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-k</kbd></td><td width="77%">Skip one statement (<code>idlwave-shell-skip</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-u</kbd></td><td width="77%">Continue to end of block (<code>idlwave-shell-up</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-m</kbd></td><td width="77%">Continue to end of function (<code>idlwave-shell-return</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-o</kbd></td><td width="77%">Continue past end of function (<code>idlwave-shell-out</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-h</kbd></td><td width="77%">Continue to line at cursor position (<code>idlwave-shell-to-here</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-r</kbd></td><td width="77%">Continue execution to next breakpoint, if any (<code>idlwave-shell-cont</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-up</kbd></td><td width="77%">Show higher level in calling stack (<code>idlwave-shell-stack-up</code>)</td></tr>
<tr><td width="23%"><kbd>C-c C-d C-down</kbd></td><td width="77%">Show lower level in calling stack (<code>idlwave-shell-stack-down</code>)</td></tr>
</table>

<p>All of these commands have equivalents in Electric Debug Mode, which
provides faster single-key access (see <a href="#Electric-Debug-Mode">Electric Debug Mode</a>).
</p>
<p>The line where IDL is currently stopped, at breakpoints, halts, and
errors, etc., is marked with a color overlay or arrow, depending on the
setting in <code>idlwave-shell-mark-stop-line</code>.  If an overlay face is
used to mark the stop line (as it is by default), when stepping through
code, the face color is temporarily changed to gray, until IDL completes
the next command and moves to the new line.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dmark_002dbreakpoints"></a>User Option: <strong>idlwave-shell-mark-breakpoints</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means mark breakpoints in the source file buffers.  The
value indicates the preferred method.  Valid values are <code>nil</code>,
<code>t</code>, <code>face</code>, and <code>glyph</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dbreakpoint_002dface"></a>User Option: <strong>idlwave-shell-breakpoint-face</strong></dt>
<dd><p>The face for breakpoint lines in the source code if
<code>idlwave-shell-mark-breakpoints</code> has the value <code>face</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dbreakpoint_002dpopup_002dmenu"></a>User Option: <strong>idlwave-shell-breakpoint-popup-menu</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Whether to pop-up a menu and present a tooltip description on
breakpoint lines.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dmark_002dstop_002dline"></a>User Option: <strong>idlwave-shell-mark-stop-line</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means mark the source code line where IDL is currently
stopped.  The value specifies the preferred method.  Valid values are
<code>nil</code>, <code>t</code>, <code>arrow</code>, and <code>face</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002doverlay_002darrow"></a>User Option: <strong>idlwave-shell-overlay-arrow</strong> <em>(<code>&quot;&gt;&quot;</code>)</em></dt>
<dd><p>The overlay arrow to display at source lines where execution halts, if
configured in <code>idlwave-shell-mark-stop-line</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dstop_002dline_002dface"></a>User Option: <strong>idlwave-shell-stop-line-face</strong></dt>
<dd><p>The face which highlights the source line where IDL is stopped, if
configured in <code>idlwave-shell-mark-stop-line</code>.
</p></dd></dl>


<hr>
<a name="Compiling-Programs"></a>
<div class="header">
<p>
Next: <a href="#Walking-the-Calling-Stack" accesskey="n" rel="next">Walking the Calling Stack</a>, Previous: <a href="#Breakpoints-and-Stepping" accesskey="p" rel="prev">Breakpoints and Stepping</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Compiling-Programs-1"></a>
<h4 class="subsection">5.4.4 Compiling Programs</h4>
<a name="index-Compiling-programs"></a>
<a name="index-Programs_002c-compiling"></a>
<a name="index-Default-command-line_002c-executing"></a>
<a name="index-Executing-a-default-command-line"></a>

<a name="index-C_002dc-C_002dd-C_002dc"></a>
<p>In order to compile the current buffer under the IDLWAVE shell, press
<kbd>C-c C-d C-c</kbd> (<code>idlwave-save-and-run</code>).  This first saves the
current buffer and then sends the command &lsquo;<samp>.run path/to/file</samp>&rsquo; to the
shell.  You can also execute <kbd>C-c C-d C-c</kbd> from the shell buffer, in
which case the most recently compiled buffer will be saved and
re-compiled.
</p>
<p>When developing or debugging a program, it is often necessary to execute
the same command line many times.  A convenient way to do this is
<kbd>C-c C-d C-y</kbd> (<code>idlwave-shell-execute-default-command-line</code>).
This command first resets IDL from a state of interrupted execution by
closing all files and returning to the main interpreter level.  Then a
default command line is send to the shell.  To edit the default command
line, call <code>idlwave-shell-execute-default-command-line</code> with a
prefix argument: <kbd>C-u C-c C-d C-y</kbd>.  If no default command line has
been set (or you give two prefix arguments), the last command on the
<code>comint</code> input history is sent.
</p>
<a name="index-C_002dc-C_002dd-C_002de"></a>
<a name="index-Compiling-regions"></a>
<p>For quickly compiling and running the currently marked region as a main
level program <kbd>C-c C-d C-e</kbd> (<code>idlwave-shell-run-region</code>) is
very useful.  A temporary file is created holding the contents of the
current region (with <code>END</code> appended), and run from the shell.
</p>
<hr>
<a name="Walking-the-Calling-Stack"></a>
<div class="header">
<p>
Next: <a href="#Electric-Debug-Mode" accesskey="n" rel="next">Electric Debug Mode</a>, Previous: <a href="#Compiling-Programs" accesskey="p" rel="prev">Compiling Programs</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Walking-the-Calling-Stack-1"></a>
<h4 class="subsection">5.4.5 Walking the Calling Stack</h4>
<a name="index-Calling-stack_002c-walking"></a>

<p>While debugging a program, it can be very useful to check the context in
which the current routine was called, for instance to help understand
the value of the arguments passed.  To do so conveniently you need to
examine the calling stack.  If execution is stopped somewhere deep in a
program, you can use the commands <kbd>C-c C-d C-<span class="key">UP</span></kbd>
(<code>idlwave-shell-stack-up</code>) and <kbd>C-c C-d C-<span class="key">DOWN</span></kbd>
(<code>idlwave-shell-stack-down</code>), or the corresponding toolbar buttons,
to move up or down through the calling stack.  The mode line of the
shell window will indicate the position within the stack with a label
like &lsquo;<samp>[-3:MYPRO]</samp>&rsquo;.  The line of IDL code at that stack position
will be highlighted.  If you continue execution, IDLWAVE will
automatically return to the current level. See <a href="#Examining-Variables">Examining Variables</a>,
for information how to examine the value of variables and expressions on
higher calling stack levels.
</p>
<A NAME="EDEBUG"></A>
<hr>
<a name="Electric-Debug-Mode"></a>
<div class="header">
<p>
Previous: <a href="#Walking-the-Calling-Stack" accesskey="p" rel="prev">Walking the Calling Stack</a>, Up: <a href="#Debugging-IDL-Programs" accesskey="u" rel="up">Debugging IDL Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Electric-Debug-Mode-1"></a>
<h4 class="subsection">5.4.6 Electric Debug Mode</h4>
<a name="index-Electric-Debug-Mode-1"></a>
<a name="index-_002aDebugging_002a"></a>

<p>Even with a convenient debug key prefix enabled, repetitive stepping,
variable examination (see <a href="#Examining-Variables">Examining Variables</a>), and other debugging
activities can be awkward and slow using commands which require multiple
keystrokes.  Luckily, there&rsquo;s a better way, inspired by the lisp e-debug
mode, and available through the <em>Electric Debug Mode</em>.  By default,
as soon as a breakpoint is hit, this minor mode is enabled.  The buffer
showing the line where execution has halted is switched to Electric
Debug Mode.  This mode is visible as &lsquo;<samp>*Debugging*</samp>&rsquo; in the mode
line, and a different face (violet by default, if color is available)
for the line stopped at point.  The buffer is made read-only and
single-character bindings for the most commonly used debugging commands
are enabled.  These character commands (a list of which is available
with <kbd>C-?</kbd>) are:
</p>
<table>
<tr><td width="20%"><kbd>a</kbd></td><td width="80%">Clear all breakpoints (<code>idlwave-shell-clear-all-bp</code>)</td></tr>
<tr><td width="20%"><kbd>b</kbd></td><td width="80%">Set breakpoint, <kbd>C-u b</kbd> for a conditional break, <kbd>C-n b</kbd> for nth hit (<code>idlwave-shell-break-here</code>)</td></tr>
<tr><td width="20%"><kbd>d</kbd></td><td width="80%">Clear current breakpoint (<code>idlwave-shell-clear-current-bp</code>)</td></tr>
<tr><td width="20%"><kbd>e</kbd></td><td width="80%">Prompt for expression to print (<code>idlwave-shell-clear-current-bp</code>).</td></tr>
<tr><td width="20%"><kbd>h</kbd></td><td width="80%">Continue to the line at cursor position (<code>idlwave-shell-to-here</code>)</td></tr>
<tr><td width="20%"><kbd>i</kbd></td><td width="80%">Set breakpoint in module named here (<code>idlwave-shell-break-in</code>)</td></tr>
<tr><td width="20%"><kbd>[</kbd></td><td width="80%">Go to the previous breakpoint in the file (<code>idlwave-shell-goto-previous-bp</code>)</td></tr>
<tr><td width="20%"><kbd>]</kbd></td><td width="80%">Go to the next breakpoint in the file
(<code>idlwave-shell-goto-next-bp</code>)</td></tr>
<tr><td width="20%"><kbd>\</kbd></td><td width="80%">Disable/Enable current breakpoint (<code>idlwave-shell-toggle-enable-current-bp</code>)</td></tr>
<tr><td width="20%"><kbd>j</kbd></td><td width="80%">Set breakpoint at beginning of enclosing routine (<code>idlwave-shell-break-this-module</code>)</td></tr>
<tr><td width="20%"><kbd>k</kbd></td><td width="80%">Skip one statement (<code>idlwave-shell-skip</code>)</td></tr>
<tr><td width="20%"><kbd>m</kbd></td><td width="80%">Continue to end of function (<code>idlwave-shell-return</code>)</td></tr>
<tr><td width="20%"><kbd>n</kbd></td><td width="80%">Step, over function calls (<code>idlwave-shell-stepover</code>)</td></tr>
<tr><td width="20%"><kbd>o</kbd></td><td width="80%">Continue past end of function (<code>idlwave-shell-out</code>)</td></tr>
<tr><td width="20%"><kbd>p</kbd></td><td width="80%">Print expression near point or in region with <kbd>C-u p</kbd> (<code>idlwave-shell-print</code>)</td></tr>
<tr><td width="20%"><kbd>q</kbd></td><td width="80%">End the debugging session and return to the Shell&rsquo;s main level
(<code>idlwave-shell-retall</code>)</td></tr>
<tr><td width="20%"><kbd>r</kbd></td><td width="80%">Continue execution to next breakpoint, if any (<code>idlwave-shell-cont</code>)</td></tr>
<tr><td width="20%"><kbd>s</kbd> or <kbd><span class="key">SPACE</span></kbd></td><td width="80%">Step, into function calls (<code>idlwave-shell-step</code>)</td></tr>
<tr><td width="20%"><kbd>t</kbd></td><td width="80%">Print a calling-level traceback in the shell</td></tr>
<tr><td width="20%"><kbd>u</kbd></td><td width="80%">Continue to end of block (<code>idlwave-shell-up</code>)</td></tr>
<tr><td width="20%"><kbd>v</kbd></td><td width="80%">Turn Electric Debug Mode off
(<code>idlwave-shell-electric-debug-mode</code>)</td></tr>
<tr><td width="20%"><kbd>x</kbd></td><td width="80%">Examine expression near point (or in region with <kbd>C-u x</kbd>)
with shortcut of examine type.</td></tr>
<tr><td width="20%"><kbd>z</kbd></td><td width="80%">Reset IDL (<code>idlwave-shell-reset</code>)</td></tr>
<tr><td width="20%"><kbd>+</kbd> or <kbd>=</kbd></td><td width="80%">Show higher level in calling stack (<code>idlwave-shell-stack-up</code>)</td></tr>
<tr><td width="20%"><kbd>-</kbd> or <kbd>_</kbd></td><td width="80%">Show lower level in calling stack (<code>idlwave-shell-stack-down</code>)</td></tr>
<tr><td width="20%"><kbd>?</kbd></td><td width="80%">Help on expression near point or in region with <kbd>C-u ?</kbd>
(<code>idlwave-shell-help-expression</code>)</td></tr>
<tr><td width="20%"><kbd>C-?</kbd></td><td width="80%">Show help on the commands available.</td></tr>
</table>

<p>Most single-character electric debug bindings use the final keystroke
of the equivalent multiple key commands (which are of course also
still available), but some differ (e.g., <kbd>e</kbd>,<kbd>t</kbd>,<kbd>q</kbd>,<kbd>x</kbd>).
Some have additional convenience bindings (like <kbd><span class="key">SPACE</span></kbd> for
stepping).  All prefix and other argument options described in this
section for the commands invoked by electric debug bindings are still
valid.  For example, <kbd>C-u b</kbd> sets a conditional breakpoint, just
as it did with <kbd>C-u C-c C-d C-b</kbd>.
</p>
<p>You can toggle the electric debug mode at any time in a buffer using
<kbd>C-c C-d C-v</kbd> (<kbd>v</kbd> to turn it off while in the mode), or from
the Debug menu.  Normally the mode will be enabled and disabled at the
appropriate times, but occasionally you might want to edit a file
while still debugging it, or switch to the mode for conveniently
setting lots of breakpoints.
</p>
<p>To quickly abandon a debugging session and return to normal editing at
the Shell&rsquo;s main level, use <kbd>q</kbd> (<code>idlwave-shell-retall</code>).
This disables electric debug mode in all IDLWAVE buffers<a name="DOCF4" href="#FOOT4"><sup>4</sup></a>.  Help is
available for the command shortcuts with <kbd>C-?</kbd>.  If you find this
mode gets in your way, you can keep it from automatically activating
by setting the variable <code>idlwave-shell-automatic-electric-debug</code>
to <code>nil</code>, or <code>'breakpoint</code>.  If you&rsquo;d like the convenient
electric debug shortcuts available also when run-time errors are
encountered, set to <code>t</code>.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dautomatic_002delectric_002ddebug"></a>User Option: <strong>idlwave-shell-automatic-electric-debug</strong> <em>(<code>'breakpoint</code>)</em></dt>
<dd><p>Whether to enter electric debug mode automatically when a breakpoint
or run-time error is encountered, and then disable it in all buffers
when the $MAIN$ level is reached (either through normal program
execution, or retall).  In addition to <code>nil</code> for never, and
<code>t</code> for both breakpoints and errors, this can be
<code>'breakpoint</code> (the default) to enable it only at breakpoint
halts.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002delectric_002dstop_002dcolor"></a>User Option: <strong>idlwave-shell-electric-stop-color</strong> <em>(Violet)</em></dt>
<dd><p>Default color of the stopped line overlay when in electric debug mode.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002delectric_002dstop_002dline_002dface"></a>User Option: <strong>idlwave-shell-electric-stop-line-face</strong></dt>
<dd><p>The face to use for the stopped line.  Defaults to a face similar to the
modeline, with color <code>idlwave-shell-electric-stop-color</code>.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002delectric_002dzap_002dto_002dfile"></a>User Option: <strong>idlwave-shell-electric-zap-to-file</strong> <em>(<code>t</code>)</em></dt>
<dd><p>If set, when entering electric debug mode, select the window displaying
the file where point is stopped.  This takes point away from the shell
window, but is useful for immediate stepping, etc.
</p></dd></dl>

<A NAME="EXAMINE"></A>
<hr>
<a name="Examining-Variables"></a>
<div class="header">
<p>
Next: <a href="#Custom-Expression-Examination" accesskey="n" rel="next">Custom Expression Examination</a>, Previous: <a href="#Debugging-IDL-Programs" accesskey="p" rel="prev">Debugging IDL Programs</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Examining-Variables-1"></a>
<h3 class="section">5.5 Examining Variables</h3>
<a name="index-PRINT-expressions"></a>
<a name="index-HELP_002c-on-expressions"></a>
<a name="index-Expressions_002c-printing-_0026-help"></a>
<a name="index-Examining-expressions"></a>
<a name="index-Printing-expressions"></a>
<a name="index-Mouse-binding-to-print-expressions"></a>

<a name="index-C_002dc-C_002dd-C_002dp"></a>
<p>Do you find yourself repeatedly typing, e.g., <code>print,n_elements(x)</code>,
and similar statements to remind yourself of the
type/size/structure/value/etc. of variables and expressions in your code
or at the command line?  IDLWAVE has a suite of special commands to
automate these types of variable or expression examinations.  They work
by sending statements to the shell formatted to include the indicated
expression, and can be accessed in several ways.
</p>
<p>These <em>examine</em> commands can be used in the shell or buffer at any
time (as long as the shell is running), and are very useful when
execution is stopped in a buffer due to a triggered breakpoint or error,
or while composing a long command in the IDLWAVE shell.  In the latter
case, the command is sent to the shell and its output is visible, but
point remains unmoved in the command being composed: you can inspect
the constituents of a command you&rsquo;re building without interrupting the
process of building it!  You can even print arbitrary expressions from
older input or output further up in the shell window; any expression,
variable, number, or function you see can be examined.
</p>
<p>If the variable <code>idlwave-shell-separate-examine-output</code> is
non-<code>nil</code> (the default), all examine output will be sent to a
special <samp>*Examine*</samp> buffer, rather than the shell.  The output of
prior examine commands is saved in this buffer.  In this buffer <tt class="key">c</tt>
clears the contents, and <tt class="key">q</tt> hides the buffer.
</p>
<p>The two most basic examine commands are bound to <kbd>C-c C-d C-p</kbd>, to
print the expression at point, and <kbd>C-c C-d ?</kbd>, to invoke help on
this expression<a name="DOCF5" href="#FOOT5"><sup>5</sup></a>.  The expression at point is
either an array expression or a function call, or the contents of a pair
of parentheses.  The chosen expression is highlighted, and
simultaneously the resulting output is highlighted in the shell or
separate output buffer.  Calling the above commands with a prefix
argument will use the current region as expression instead of using the
one at point. which can be useful for examining complicated, multi-line
expressions.  Two prefix arguments (<kbd>C-u C-u C-c C-d C-p</kbd>) will
prompt for an expression to print directly.  By default, when invoking
print, only an initial portion of long arrays will be printed, up to
<code>idlwave-shell-max-print-length</code>.
</p>
<p>For added speed and convenience, there are mouse bindings which allow
you to click on expressions and examine their values.  Use
<kbd>S-mouse-2</kbd> to print an expression and <kbd>C-M-mouse-2</kbd> to invoke
help (i.e., you need to hold down <tt class="key">META</tt> and <tt class="key">CONTROL</tt> while
clicking with the middle mouse button).  If you simply click, the
nearest expression will be selected in the same manner as described
above.  You can also <em>drag</em> the mouse in order to highlight
exactly the specific expression or sub-expression you want to examine.
For custom expression examination, and the powerful customizable
pop-up examine selection, See <a href="#Custom-Expression-Examination">Custom Expression Examination</a>.
</p>
<a name="index-Printing-expressions_002c-on-calling-stack"></a>
<a name="index-Restrictions-for-expression-printing"></a>
<p>The same variable inspection commands work both in the IDL Shell and
IDLWAVE buffers, and even for variables at higher levels of the calling
stack.  For instance, if you&rsquo;re stopped at a breakpoint in a routine,
you can examine the values of variables and expressions inside its
calling routine, and so on, all the way up through the calling stack.
Simply step up the stack, and print variables as you see them
(see <a href="#Walking-the-Calling-Stack">Walking the Calling Stack</a>, for information on stepping back
through the calling stack).  The following restrictions apply for all
levels except the current:
</p>
<ul>
<li> Array expressions must use the &lsquo;<samp>[ ]</samp>&rsquo; index delimiters.  Identifiers
with a &lsquo;<samp>( )</samp>&rsquo; will be interpreted as function calls.
</li><li> <a name="index-ROUTINE_005fNAMES_002c-IDL-procedure"></a>
N.B.: printing values of expressions on higher levels of the calling
stack uses the <em>unsupported</em> IDL routine <code>ROUTINE_NAMES</code>,
which may or may not be available in future versions of IDL.  Caveat
Examinor.
</li></ul>

<dl>
<dt><a name="index-idlwave_002dshell_002dexpression_002dface"></a>User Option: <strong>idlwave-shell-expression-face</strong></dt>
<dd><p>The face for <code>idlwave-shell-expression-overlay</code>.
Allows you to choose the font, color and other properties for
the expression printed by IDL.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002doutput_002dface"></a>User Option: <strong>idlwave-shell-output-face</strong></dt>
<dd><p>The face for <code>idlwave-shell-output-overlay</code>.
Allows to choose the font, color and other properties for the most
recent output of IDL when examining an expression.&quot;
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dseparate_002dexamine_002doutput"></a>User Option: <strong>idlwave-shell-separate-examine-output</strong> <em>(<code>t</code>)</em></dt>
<dd><p>If non-<code>nil</code>, re-direct the output of examine commands to a special
<samp>*Examine*</samp> buffer, instead of in the shell itself.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dshell_002dmax_002dprint_002dlength"></a>User Option: <strong>idlwave-shell-max-print-length</strong> <em>(200)</em></dt>
<dd><p>The maximum number of leading array entries to print, when examining
array expressions.
</p></dd></dl>

<hr>
<a name="Custom-Expression-Examination"></a>
<div class="header">
<p>
Previous: <a href="#Examining-Variables" accesskey="p" rel="prev">Examining Variables</a>, Up: <a href="#The-IDLWAVE-Shell" accesskey="u" rel="up">The IDLWAVE Shell</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Custom-Expression-Examination-1"></a>
<h3 class="section">5.6 Custom Expression Examination</h3>
<a name="index-Expressions_002c-custom-examination"></a>
<a name="index-Custom-expression-examination"></a>

<p>The variety of possible variable and expression examination commands is
endless (just look, for instance, at the keyword list to
<code>widget_info()</code>).  Rather than attempt to include them all, IDLWAVE
provides two easy methods to customize your own commands, with a special
mouse examine command, and two macros for generating your own examine
key and mouse bindings.
</p>
<p>The most powerful and flexible mouse examine command of all is
available on <kbd>C-S-mouse-2</kbd>.  Just as for all the other mouse
examine commands, it permits click or drag expression selection, but
instead of sending hard-coded commands to the shell, it pops-up a
customizable selection list of examine functions to choose among,
configured with the <code>idlwave-shell-examine-alist</code>
variable<a name="DOCF6" href="#FOOT6"><sup>6</sup></a>.  This variable is a list of key-value pairs (an
<em>alist</em> in Emacs parlance), where the key gives a name to be
shown for the examine command, and the value is the command strings
itself, in which the text <code>___</code> (three underscores) will be
replaced by the selected expression before being sent to the shell.
An example might be key <code>Structure Help</code> with value
<code>help,___,/STRUCTURE</code>.  In that case, you&rsquo;d be prompted with
<em>Structure Help</em>, which might send something like
<code>help,var,/STRUCTURE</code> to the shell for output.
<code>idlwave-shell-examine-alist</code> comes configured by default with a
large list of examine commands, but you can easily customize it to add
your own.
</p>
<p>In addition to configuring the functions available to the pop-up mouse
command, you can easily create your own customized bindings to inspect
expressions using the two convenience macros
<code>idlwave-shell-examine</code> and <code>idlwave-shell-mouse-examine</code>.
These create keyboard or mouse-based custom inspections of variables,
sharing all the same properties of the built-in examine commands.
Both functions take a single string argument sharing the syntax of the
<code>idlwave-shell-examine-alist</code> values, e.g.:
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'idlwave-shell-mode-hook
          (lambda ()
            (idlwave-shell-define-key-both [s-down-mouse-2]
                                 (idlwave-shell-mouse-examine
                                  &quot;print, size(___,/DIMENSIONS)&quot;))
            (idlwave-shell-define-key-both [f9] (idlwave-shell-examine
                                       &quot;print, size(___,/DIMENSIONS)&quot;))
            (idlwave-shell-define-key-both [f10] (idlwave-shell-examine
                                        &quot;print,size(___,/TNAME)&quot;))
            (idlwave-shell-define-key-both [f11] (idlwave-shell-examine
                                        &quot;help,___,/STRUCTURE&quot;))))
</pre></div>

<p>Now pressing <tt class="key">f9</tt>, or middle-mouse dragging with the
<tt class="key">SUPER</tt> key depressed, will print the dimensions of the nearby or
highlighted expression.  Pressing <tt class="key">f10</tt> will give the type string,
and <tt class="key">f11</tt> will show the contents of a nearby structure.  As you can
see, the possibilities are only marginally finite.
</p>
<dl>
<dt><a name="index-idlwave_002dshell_002dexamine_002dalist"></a>User Option: <strong>idlwave-shell-examine-alist</strong></dt>
<dd><p>An alist of examine commands in which the keys name the command and
are displayed in the selection pop-up, and the values are custom IDL
examine command strings to send, after all instances of <code>___</code>
(three underscores) are replaced by the indicated expression.
</p></dd></dl>

<hr>
<a name="Acknowledgments"></a>
<div class="header">
<p>
Next: <a href="#Sources-of-Routine-Info" accesskey="n" rel="next">Sources of Routine Info</a>, Previous: <a href="#The-IDLWAVE-Shell" accesskey="p" rel="prev">The IDLWAVE Shell</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Acknowledgments-1"></a>
<h2 class="chapter">6 Acknowledgments</h2>
<a name="index-Acknowledgments"></a>
<a name="index-Maintainer_002c-of-IDLWAVE"></a>
<a name="index-Authors_002c-of-IDLWAVE"></a>
<a name="index-Contributors_002c-to-IDLWAVE"></a>
<a name="index-Email-address_002c-of-Maintainer"></a>
<a name="index-Thanks"></a>

<p>The main contributors to the IDLWAVE package have been:
</p>
<ul class="no-bullet">
<li>- <a href="mailto:chase@att.com"><b>Chris Chase</b></a>, the original author.
Chris wrote <samp>idl.el</samp> and <samp>idl-shell.el</samp> and maintained them
for several years.

</li><li>- <a href="mailto:dominik@astro.uva.nl"><b>Carsten Dominik</b></a> was in charge
of the package from version 3.0, during which time he overhauled almost
everything, modernized IDLWAVE with many new features, and developed the
manual.

</li><li>- <a href="mailto:jdsmith@as.arizona.edu"><b>J.D. Smith</b></a>, the current
maintainer, as of version 4.10, helped shape object method completion
and most new features introduced in versions 4.x, and introduced many
new features for IDLWAVE versions 5.x and 6.x.
</li></ul>

<p>The following people have also contributed to the development of IDLWAVE
with patches, ideas, bug reports and suggestions.
</p>
<ul class="no-bullet">
<li>- Ulrik Dickow &lt;dickow__at__nbi.dk&gt;
</li><li>- Eric E. Dors &lt;edors__at__lanl.gov&gt;
</li><li>- Stein Vidar H. Haugan &lt;s.v.h.haugan__at__astro.uio.no&gt;
</li><li>- David Huenemoerder &lt;dph__at__space.mit.edu&gt;
</li><li>- Kevin Ivory &lt;Kevin.Ivory__at__linmpi.mpg.de&gt;
</li><li>- Dick Jackson &lt;dick__at__d-jackson.com&gt;
</li><li>- Xuyong Liu &lt;liu__at__stsci.edu&gt;
</li><li>- Simon Marshall &lt;Simon.Marshall__at__esrin.esa.it&gt;
</li><li>- Craig Markwardt &lt;craigm__at__cow.physics.wisc.edu&gt;
</li><li>- Laurent Mugnier &lt;mugnier__at__onera.fr&gt;
</li><li>- Lubos Pochman &lt;lubos__at__rsinc.com&gt;
</li><li>- Bob Portmann &lt;portmann__at__al.noaa.gov&gt;
</li><li>- Patrick M. Ryan &lt;pat__at__jaameri.gsfc.nasa.gov&gt;
</li><li>- Marty Ryba &lt;ryba__at__ll.mit.edu&gt;
</li><li>- Phil Williams &lt;williams__at__irc.chmcc.org&gt;
</li><li>- Phil Sterne &lt;sterne__at__dublin.llnl.gov&gt;
</li><li>- Paul Sorenson &lt;aardvark62__at__msn.com&gt;
</li></ul>

<p>Doug Dirks was instrumental in providing the crucial IDL XML catalog to
support HTML help with IDL v6.2 and later, and Ali Bahrami provided
scripts and documentation to interface with the IDL Assistant.
</p>
<p>Thanks to everyone!
</p>
<hr>
<a name="Sources-of-Routine-Info"></a>
<div class="header">
<p>
Next: <a href="#HTML-Help-Browser-Tips" accesskey="n" rel="next">HTML Help Browser Tips</a>, Previous: <a href="#Acknowledgments" accesskey="p" rel="prev">Acknowledgments</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Sources-of-Routine-Info-1"></a>
<h2 class="appendix">Appendix A Sources of Routine Info</h2>

<a name="index-Sources-of-routine-information"></a>
<p>In <a href="#Routine-Info">Routine Info</a> and <a href="#Completion">Completion</a> we showed how IDLWAVE
displays the calling sequence and keywords of routines, and completes
routine names and keywords.  For these features to work, IDLWAVE must
know about the accessible routines.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Routine-Definitions" accesskey="1">Routine Definitions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Where IDL Routines are defined.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Routine-Information-Sources" accesskey="2">Routine Information Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">So how does IDLWAVE know about...
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Catalogs" accesskey="3">Catalogs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Load_002dPath-Shadows" accesskey="4">Load-Path Shadows</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Routines defined in several places
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Documentation-Scan" accesskey="5">Documentation Scan</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Scanning the IDL Manuals
</td></tr>
</table>

<hr>
<a name="Routine-Definitions"></a>
<div class="header">
<p>
Next: <a href="#Routine-Information-Sources" accesskey="n" rel="next">Routine Information Sources</a>, Up: <a href="#Sources-of-Routine-Info" accesskey="u" rel="up">Sources of Routine Info</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Routine-Definitions-1"></a>
<h3 class="appendixsec">A.1 Routine Definitions</h3>
<a name="index-Routine-definitions"></a>
<a name="index-IDL-variable-_0021PATH-1"></a>
<a name="index-_0021PATH_002c-IDL-variable-1"></a>
<a name="index-CALL_005fEXTERNAL_002c-IDL-routine"></a>
<a name="index-LINKIMAGE_002c-IDL-routine"></a>
<a name="index-External-routines"></a>

<p>Routines which can be used in an IDL program can be defined in
several places:
</p>
<ol>
<li> <em>Builtin routines</em> are defined inside IDL itself.  The source code
of such routines is not available, but instead are learned about through
the IDL documentation.
</li><li> Routines which are <em>part of the current program</em>, are defined in a
file explicitly compiled by the user.  This file may or may not be
located on the IDL search path.
</li><li> <em>Library routines</em> are defined in files located on IDL&rsquo;s search
path.  When a library routine is called for the first time, IDL will
find the source file and compile it dynamically.  A special sub-category
of library routines are the <em>system routines</em> distributed with IDL,
and usually available in the <samp>lib</samp> subdirectory of the IDL
distribution.
</li><li> External routines written in other languages (like Fortran or C) can be
called with <code>CALL_EXTERNAL</code>, linked into IDL via <code>LINKIMAGE</code>,
or included as dynamically loaded modules (DLMs).  Currently IDLWAVE
cannot provide routine info and completion for such external routines,
except by querying the Shell for calling information (DLMs only).
</li></ol>

<hr>
<a name="Routine-Information-Sources"></a>
<div class="header">
<p>
Next: <a href="#Catalogs" accesskey="n" rel="next">Catalogs</a>, Previous: <a href="#Routine-Definitions" accesskey="p" rel="prev">Routine Definitions</a>, Up: <a href="#Sources-of-Routine-Info" accesskey="u" rel="up">Sources of Routine Info</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Routine-Information-Sources-1"></a>
<h3 class="appendixsec">A.2 Routine Information Sources</h3>
<a name="index-Routine-info-sources"></a>
<a name="index-Builtin-list-of-routines"></a>
<a name="index-Updating-routine-info-1"></a>
<a name="index-Scanning-buffers-for-routine-info-1"></a>
<a name="index-Buffers_002c-scanning-for-routine-info-1"></a>
<a name="index-Shell_002c-querying-for-routine-info-1"></a>

<p>To maintain the most comprehensive information about all IDL
routines on a system, IDLWAVE collects data from many sources:
</p>
<ol>
<li> It has a <em>builtin list</em> with information about the routines IDL
ships with.  IDLWAVE 6.1 is distributed with a list of
4346 routines and object methods, reflecting IDL version
6.3.  As of IDL v6.2, the routine info is distributed
directly with IDL in the form of an XML catalog which IDLWAVE scans.
Formerly, this list was created by scanning the IDL manuals to produce
the file <samp>idlw-rinfo.el</samp>.

</li><li> IDLWAVE <em>scans</em> all its <em>buffers</em> in the current Emacs session
for routine definitions.  This is done automatically when routine
information or completion is first requested by the user.  Each new
buffer and each buffer saved after making changes is also scanned. The
command <kbd>C-c C-i</kbd> (<code>idlwave-update-routine-info</code>) can be used
at any time to rescan all buffers.

</li><li> If you have an IDLWAVE-Shell running in the Emacs session, IDLWAVE will
<em>query the shell</em> for compiled routines and their arguments.  This
happens automatically when routine information or completion is first
requested by the user.  Each time an Emacs buffer is compiled with
<kbd>C-c C-d C-c</kbd>, the routine info for that file is queried.  Though
rarely necessary, the command <kbd>C-c C-i</kbd>
(<code>idlwave-update-routine-info</code>) can be used to explicitly update
the shell routine data.

</li><li> Many popular libraries are distributed with routine information already
scanned into <em>library catalogs</em> (see <a href="#Library-Catalogs">Library Catalogs</a>).  These
per-directory catalog files can also be built by the user with the
supplied <samp>idlwave_catalog</samp> tool.  They are automatically discovered
by IDLWAVE.

</li><li> IDLWAVE can scan selected directories of source files and store the
result in a single <em>user catalog</em> file which will be
automatically loaded just like <samp>idlw-rinfo.el</samp>. See <a href="#User-Catalog">User Catalog</a>, for information on how to scan files in this way.
</li></ol>

<p>Loading all the routine and catalog information can be a time consuming
process, especially over slow networks.  Depending on the system and
network configuration it could take up to 30 seconds (though locally on
fast systems is usually only a few seconds).  In order to minimize the
wait time upon your first completion or routine info command in a
session, IDLWAVE uses Emacs idle time to do the initialization in six
steps, yielding to user input in between.  If this gets into your way,
set the variable <code>idlwave-init-rinfo-when-idle-after</code> to 0 (zero).
The more routines documented in library and user catalogs, the slower
the loading will be, so reducing this number can help alleviate any long
load times.
</p>
<dl>
<dt><a name="index-idlwave_002dinit_002drinfo_002dwhen_002didle_002dafter"></a>User Option: <strong>idlwave-init-rinfo-when-idle-after</strong> <em>(<code>10</code>)</em></dt>
<dd><p>Seconds of idle time before routine info is automatically initialized.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dscan_002dall_002dbuffers_002dfor_002droutine_002dinfo"></a>User Option: <strong>idlwave-scan-all-buffers-for-routine-info</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means scan all buffers for IDL programs when updating
info.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dquery_002dshell_002dfor_002droutine_002dinfo"></a>User Option: <strong>idlwave-query-shell-for-routine-info</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Non-<code>nil</code> means query the shell for info about compiled routines.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dauto_002droutine_002dinfo_002dupdates"></a>User Option: <strong>idlwave-auto-routine-info-updates</strong></dt>
<dd><p>Controls under what circumstances routine info is updated automatically.
</p></dd></dl>

<A NAME="CATALOGS"></A>
<hr>
<a name="Catalogs"></a>
<div class="header">
<p>
Next: <a href="#Load_002dPath-Shadows" accesskey="n" rel="next">Load-Path Shadows</a>, Previous: <a href="#Routine-Information-Sources" accesskey="p" rel="prev">Routine Information Sources</a>, Up: <a href="#Sources-of-Routine-Info" accesskey="u" rel="up">Sources of Routine Info</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Catalogs-1"></a>
<h3 class="appendixsec">A.3 Catalogs</h3>
<a name="index-Catalogs"></a>

<p><em>Catalogs</em> are files containing scanned information on individual
routines, including arguments and keywords, calling sequence, file path,
class and procedure vs. function type, etc.  They represent a way of
extending the internal built-in information available for IDL system
routines (see <a href="#Routine-Info">Routine Info</a>) to other source collections.
</p>
<p>Starting with version 5.0, there are two types of catalogs available
with IDLWAVE.  The traditional <em>user catalog</em> and the newer
<em>library catalogs</em>.  Although they can be used interchangeably, the
library catalogs are more flexible, and preferred.  There are few
occasions when a user catalog might be preferred&mdash;read below.  Both
types of catalogs can coexist without causing problems.
</p>
<p>To facilitate the catalog systems, IDLWAVE stores information it gathers
from the shell about the IDL search paths, and can write this
information out automatically, or on-demand (menu <code>Debug-&gt;Save Path
Info</code>).  On systems with no shell from which to discover the path
information (e.g., Windows), a library path must be specified in
<code>idlwave-library-path</code> to allow library catalogs to be located, and
to setup directories for user catalog scan (see <a href="#User-Catalog">User Catalog</a> for
more on this variable).  Note that, before the shell is running, IDLWAVE
can only know about the IDL search path by consulting the file pointed
to by <code>idlwave-path-file</code> (<samp>~/.emacs.d/idlwave/idlpath.el</samp>, by
default).  If <code>idlwave-auto-write-path</code> is enabled (which is the
default), the paths are written out whenever the IDLWAVE shell is
started.
</p>
<dl>
<dt><a name="index-idlwave_002dauto_002dwrite_002dpath"></a>User Option: <strong>idlwave-auto-write-path</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Write out information on the !PATH and !DIR paths from IDL automatically
when they change and when the Shell is closed.  These paths are needed
to locate library catalogs.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dlibrary_002dpath"></a>User Option: <strong>idlwave-library-path</strong></dt>
<dd><p>IDL library path for Windows and macOS.  Under Unix/macOS, will be
obtained from the Shell when run.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dsystem_002ddirectory"></a>User Option: <strong>idlwave-system-directory</strong></dt>
<dd><p>The IDL system directory for Windows and macOS.  Also needed for
locating HTML help and the IDL Assistant for IDL v6.2 and later.  Under
Unix/macOS, will be obtained from the Shell and recorded, if run.
</p></dd></dl>

<dl>
<dt><a name="index-idlwave_002dconfig_002ddirectory"></a>User Option: <strong>idlwave-config-directory</strong> <em>(<samp>~/.emacs.d/idlwave</samp>)</em></dt>
<dd><p>Default path where IDLWAVE saves configuration information, a user
catalog (if any), and a cached scan of the XML catalog (IDL v6.2 and
later).
</p></dd></dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Library-Catalogs" accesskey="1">Library Catalogs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User-Catalog" accesskey="2">User Catalog</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<A NAME="LIBRARY_CATALOGS"></A>
<hr>
<a name="Library-Catalogs"></a>
<div class="header">
<p>
Next: <a href="#User-Catalog" accesskey="n" rel="next">User Catalog</a>, Up: <a href="#Catalogs" accesskey="u" rel="up">Catalogs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Library-Catalogs-1"></a>
<h4 class="appendixsubsec">A.3.1 Library Catalogs</h4>
<a name="index-_002eidlwave_005fcatalog"></a>
<a name="index-Library-catalogs"></a>
<a name="index-idlwave_005fcatalog"></a>

<p>Library catalogs consist of files named <samp>.idlwave_catalog</samp> stored
in directories containing <code>.pro</code> routine files.  They are
discovered on the IDL search path and loaded automatically when routine
information is read.  Each catalog file documents the routines found in
that directory&mdash;one catalog per directory.  Every catalog has a
library name associated with it (e.g., <em>AstroLib</em>).  This name will
be shown briefly when the catalog is found, and in the routine info of
routines it documents.
</p>
<p>Many popular libraries of routines are shipped with IDLWAVE catalog
files by default, and so will be automatically discovered.  Library
catalogs are scanned externally to Emacs using a tool provided with
IDLWAVE.  Each catalog can be re-scanned independently of any other.
Catalogs can easily be made available system-wide with a common source
repository, providing uniform routine information, and lifting the
burden of scanning from the user (who may not even know they&rsquo;re using a
scanned catalog).  Since all catalogs are independent, they can be
re-scanned automatically to gather updates, e.g., in a <samp>cron</samp> job.
Scanning is much faster than with the built-in user catalog method.  One
minor disadvantage: the entire IDL search path is scanned for catalog
files every time IDLWAVE starts up, which might be slow if accessing IDL
routines over a slow network.
</p>
<p>A Perl tool to create library catalogs is distributed with IDLWAVE:
<code>idlwave_catalog</code>.  It can be called quite simply:
</p><div class="example">
<pre class="example">idlwave_catalog MyLib
</pre></div>

<p>This will scan all directories recursively beneath the current and
populate them with <samp>.idlwave_catalog</samp> files, tagging the routines
found there with the name library &ldquo;MyLib&rdquo;.  The full usage
information:
</p>
<div class="example">
<pre class="example">Usage: idlwave_catalog  [-l] [-v] [-d] [-s] [-f] [-h] libname
       libname - Unique name of the catalog (4 or more alphanumeric
                 characters).
            -l - Scan local directory only, otherwise recursively
                 catalog all directories at or beneath this one.
            -v - Print verbose information.
            -d - Instead of scanning, delete all .idlwave_catalog files
                 here or below.
            -s - Be silent.
            -f - Force overwriting any catalogs found with a different
                 library name.
            -h - Print this usage.
</pre></div>

<p>To re-load the library catalogs on the IDL path, force a system routine
info update using a single prefix to <code>idlwave-update-routine-info</code>:
<kbd>C-u C-c C-i</kbd>.
</p>
<dl>
<dt><a name="index-idlwave_002duse_002dlibrary_002dcatalogs"></a>User Option: <strong>idlwave-use-library-catalogs</strong> <em>(<code>t</code>)</em></dt>
<dd><p>Whether to search for and load library catalogs.  Disable if load
performance is a problem and/or the catalogs are not needed.
</p></dd></dl>

<hr>
<a name="User-Catalog"></a>
<div class="header">
<p>
Previous: <a href="#Library-Catalogs" accesskey="p" rel="prev">Library Catalogs</a>, Up: <a href="#Catalogs" accesskey="u" rel="up">Catalogs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="User-Catalog-1"></a>
<h4 class="appendixsubsec">A.3.2 User Catalog</h4>
<a name="index-User-catalog"></a>
<a name="index-IDL-library-routine-info"></a>
<a name="index-Windows-1"></a>
<a name="index-macOS-1"></a>
<a name="index-IDL-variable-_0021DIR-1"></a>
<a name="index-_0021DIR_002c-IDL-variable-1"></a>

<p>The user catalog is the old routine catalog system.  It is produced
within Emacs, and stored in a single file in the user&rsquo;s home directory
(<samp>.emacs.d/idlwave/idlusercat.el</samp> by default).  Although library catalogs
are more flexible, there may be reasons to prefer a user catalog
instead, including:
</p>
<ul>
<li> The scan is internal to Emacs, so you don&rsquo;t need a working Perl
installation, as you do for library catalogs.
</li><li> Can be used to scan directories for which the user has no write
privileges.
</li><li> Easy widget-based path selection.
</li></ul>

<p>However, no routine info is available in the user catalog by default;
the user must actively complete a scan.  In addition, this type of
catalog is all or nothing: if a single routine changes, the entire
catalog must be rescanned to update it.  Creating the user catalog is
also much slower than scanning library catalogs.
</p>
<p>You can scan any of the directories on the currently known path.  Under
Windows, you need to specify the IDL search path in
the variable <code>idlwave-library-path</code>, and the location of the IDL
directory (the value of the <code>!DIR</code> system variable) in the variable
<code>idlwave-system-directory</code>, like this<a name="DOCF7" href="#FOOT7"><sup>7</sup></a>:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-library-path
        '(&quot;+c:/RSI/IDL56/lib/&quot; &quot;+c:/user/me/idllibs&quot;))
(setq idlwave-system-directory &quot;c:/RSI/IDL56/&quot;)
</pre></div>

<p>Under GNU/Linux and UNIX, these values will be automatically
gathered from the IDLWAVE shell, if run.
</p>
<p>The command <kbd>M-x idlwave-create-user-catalog-file</kbd> (or the menu item
&lsquo;<samp>IDLWAVE-&gt;Routine Info-&gt;Select Catalog Directories</samp>&rsquo;) can then be
used to create a user catalog.  It brings up a widget in which you can
select some or all directories on the search path.  Directories which
already contain a library catalog are marked with &lsquo;<samp>[LIB]</samp>&rsquo;, and need
not be scanned (although there is no harm if you do so, other than the
additional memory used for the duplication).
</p>
<p>After selecting directories, click on the &lsquo;<samp>[Scan&nbsp;&amp;&nbsp;Save]</samp>&rsquo;<!-- /@w -->
button in the widget to scan all files in the selected directories and
write out the resulting routine information.  In order to update the
library information using the directory selection, call the command
<code>idlwave-update-routine-info</code> with a double prefix argument:
<kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-i</span></kbd><!-- /@w -->.  This will rescan files in the previously
selected directories, write an updated version of the user catalog file
and rebuild IDLWAVE&rsquo;s internal lists.  If you give three prefix
arguments <kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-i</span></kbd><!-- /@w -->, updating will be done with a
background job<a name="DOCF8" href="#FOOT8"><sup>8</sup></a>.  You can continue
to work, and the library catalog will be re-read when it is ready.  If
you find you need to update the user catalog often, you should consider
building a library catalog for your routines instead (see <a href="#Library-Catalogs">Library Catalogs</a>).
</p>
<dl>
<dt><a name="index-idlwave_002dspecial_002dlib_002dalist-1"></a>User Option: <strong>idlwave-special-lib-alist</strong></dt>
<dd><p>Alist of regular expressions matching special library directories for
labeling in routine-info display.
</p></dd></dl>

<hr>
<a name="Load_002dPath-Shadows"></a>
<div class="header">
<p>
Next: <a href="#Documentation-Scan" accesskey="n" rel="next">Documentation Scan</a>, Previous: <a href="#Catalogs" accesskey="p" rel="prev">Catalogs</a>, Up: <a href="#Sources-of-Routine-Info" accesskey="u" rel="up">Sources of Routine Info</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Load_002dPath-Shadows-1"></a>
<h3 class="appendixsec">A.4 Load-Path Shadows</h3>
<a name="index-Load_002dpath-shadows-1"></a>
<a name="index-Shadows_002c-load_002dpath-1"></a>
<a name="index-Duplicate-routines-1"></a>
<a name="index-Multiply-defined-routines-1"></a>
<a name="index-Routine-definitions_002c-multiple-1"></a>
<a name="index-Application_002c-testing-for-shadowing"></a>
<a name="index-Buffer_002c-testing-for-shadowing"></a>

<p>IDLWAVE can compile a list of routines which are (re-)defined in more
than one file.  Since one definition will hide (shadow) the others
depending on which file is compiled first, such multiple definitions are
called &quot;load-path shadows&quot;.  IDLWAVE has several routines to scan for
load path shadows.  The output is placed into the special buffer
<samp>*Shadows*</samp>.  The format of the output is identical to the source
section of the routine info buffer (see <a href="#Routine-Info">Routine Info</a>).  The
different definitions of a routine are ordered by <em>likelihood of
use</em>.  So the first entry will be most likely the one you&rsquo;ll get if an
unsuspecting command uses that routine.  Before listing shadows, you
should make sure that routine info is up-to-date by pressing <kbd>C-c
C-i</kbd>.  Here are the different routines (also available in the Menu
&lsquo;<samp>IDLWAVE-&gt;Routine Info</samp>&rsquo;):
</p>
<dl compact="compact">
<dt><kbd>M-x idlwave-list-buffer-load-path-shadows</kbd></dt>
<dd><p>This command checks the names of all routines defined in the current
buffer for shadowing conflicts with other routines accessible to
IDLWAVE.  The command also has a key binding: <kbd>C-c C-b</kbd>
</p></dd>
<dt><kbd>M-x idlwave-list-shell-load-path-shadows</kbd>.</dt>
<dd><p>Checks all routines compiled under the shell for shadowing.  This is
very useful when you have written a complete application.  Just compile
the application, use <code>RESOLVE_ALL</code> to compile any routines used by
your code, update the routine info inside IDLWAVE with <kbd>C-c C-i</kbd> and
then check for shadowing.
</p></dd>
<dt><kbd>M-x idlwave-list-all-load-path-shadows</kbd></dt>
<dd><p>This command checks all routines accessible to IDLWAVE for conflicts.
</p></dd>
</dl>

<p>For these commands to work fully you need to scan the entire load path
in either a user or library catalog.  Also, IDLWAVE should be able to
distinguish between the system library files (normally installed in
<samp>/usr/local/rsi/idl/lib</samp>) and any site specific or user specific
files.  Therefore, such local files should not be installed inside the
<samp>lib</samp> directory of the IDL directory.  This is also advisable for
many other reasons.
</p>
<a name="index-Windows-2"></a>
<a name="index-IDL-variable-_0021DIR-2"></a>
<a name="index-_0021DIR_002c-IDL-variable-2"></a>
<p>Users of Windows also must set the variable
<code>idlwave-system-directory</code> to the value of the <code>!DIR</code> system
variable in IDL.  IDLWAVE appends <samp>lib</samp> to the value of this
variable and assumes that all files found on that path are system
routines.
</p>
<p>Another way to find out if a specific routine has multiple definitions
on the load path is routine info display (see <a href="#Routine-Info">Routine Info</a>).
</p>
<hr>
<a name="Documentation-Scan"></a>
<div class="header">
<p>
Previous: <a href="#Load_002dPath-Shadows" accesskey="p" rel="prev">Load-Path Shadows</a>, Up: <a href="#Sources-of-Routine-Info" accesskey="u" rel="up">Sources of Routine Info</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Documentation-Scan-1"></a>
<h3 class="appendixsec">A.5 Documentation Scan</h3>
<a name="index-get_005fhtml_005frinfo"></a>
<a name="index-idlw_002drinfo_002eel"></a>
<a name="index-Scanning-the-documentation"></a>
<a name="index-Perl-program_002c-to-create-idlw_002drinfo_002eel"></a>

<p><strong>Starting with version 6.2, IDL is distributed directly with HTML
online help, and an XML-based catalog of routine information</strong>.  This
makes scanning the manuals with the tool <samp>get_html_rinfo</samp>, and the
<samp>idlw-rinfo.el</samp> file it produced, as described here, entirely
unnecessary.  The information is left here for users wishing to produce
a catalog of older IDL versions&rsquo; help.
</p>

<p>IDLWAVE derives its knowledge about system routines from the IDL
manuals.  The file <samp>idlw-rinfo.el</samp> contains the routine information
for the IDL system routines, and links to relevant sections of the HTML
documentation.  The Online Help feature of IDLWAVE requires HTML
versions of the IDL manuals to be available; the HTML documentation is
not distributed with IDLWAVE by default, but must be downloaded
separately.
</p>
<p>The HTML files and related images can be produced from the
<samp>idl.chm</samp> HTMLHelp file distributed with IDL using the free
Microsoft HTML Help Workshop.  If you are lucky, the maintainer of
IDLWAVE will always have access to the newest version of IDL and provide
updates.  The IDLWAVE distribution also contains the Perl program
<samp>get_html_rinfo</samp> which constructs the <samp>idlw-rinfo.el</samp> file by
scanning the HTML documents produced from the IDL documentation.
Instructions on how to use <samp>get_html_rinfo</samp> are in the program
itself.
</p>
<hr>
<a name="HTML-Help-Browser-Tips"></a>
<div class="header">
<p>
Next: <a href="#Configuration-Examples" accesskey="n" rel="next">Configuration Examples</a>, Previous: <a href="#Sources-of-Routine-Info" accesskey="p" rel="prev">Sources of Routine Info</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="HTML-Help-Browser-Tips-1"></a>
<h2 class="appendix">Appendix B HTML Help Browser Tips</h2>
<a name="index-Browser-Tips"></a>

<p>There are a wide variety of possible browsers to use for displaying
the online HTML help available with IDLWAVE (starting with version
5.0). Since IDL v6.2, a single cross-platform HTML help browser, the
<em>IDL Assistant</em> is distributed with IDL.  If this help browser is
available, it is the preferred choice, and the default.  The variable
<code>idlwave-help-use-assistant</code>, enabled by default, controls
whether this help browser is used.  If you use the IDL Assistant, the
tips here are not relevant.
</p>
<p>Since IDLWAVE runs on many different system types, a single browser
configuration is not possible, but choices abound.  The default
<code>idlwave-help-browser-function</code> inherits the browser configured
in <code>browse-url-browser-function</code>.
</p>
<p>Note that the HTML files decompiled from the help sources contain
specific references to the &lsquo;<samp>Symbol</samp>&rsquo; font, which by default is not
permitted in normal encodings (it&rsquo;s invalid, technically).  Though it
only impacts a few symbols, you can trick Mozilla-based browsers into
recognizing &lsquo;<samp>Symbol</samp>&rsquo; by following the directions
<a href="http://hutchinson.belmont.ma.us/tth/Xfonts.html">here</a>.  With
this fix in place, HTML help pages look almost identical to their PDF
equivalents (yet can be bookmarked, browsed as history, searched,
etc.).
</p>

<hr>
<a name="Configuration-Examples"></a>
<div class="header">
<p>
Next: <a href="#Windows-and-macOS" accesskey="n" rel="next">Windows and macOS</a>, Previous: <a href="#HTML-Help-Browser-Tips" accesskey="p" rel="prev">HTML Help Browser Tips</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Configuration-Examples-1"></a>
<h2 class="appendix">Appendix C Configuration Examples</h2>
<a name="index-Configuration-examples"></a>
<a name="index-Example-configuration"></a>
<a name="index-_002eemacs"></a>
<a name="index-Default-settings_002c-of-options"></a>
<a name="index-Interview_002c-with-the-maintainer"></a>

<p><b>Question:</b> You have all these complicated configuration options in
your package, but which ones do <em>you</em> as the maintainer actually
set in your own configuration?
</p>
<p><b>Answer:</b> Not many, beyond custom key bindings.  I set most defaults
the way that seems best.  However, the default settings do not turn on
features which:
</p>
<ul class="no-bullet">
<li>- are not self-evident (i.e., too magic) when used by an unsuspecting user.
</li><li>- are too intrusive.
</li><li>- will not work properly on all Emacs installations.
</li><li>- break with widely used standards.
</li><li>- use function or other non-standard keys.
</li><li>- are purely personal customizations, like additional key bindings, and
library names.
</li></ul>

<p>To see what I mean, here is the <em>entire</em> configuration
the old maintainer had in his <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-shell-debug-modifiers '(control shift)
      idlwave-store-inquired-class t
      idlwave-shell-automatic-start t
      idlwave-main-block-indent 2
      idlwave-init-rinfo-when-idle-after 2
      idlwave-help-dir &quot;~/lib/emacs/idlwave&quot;
      idlwave-special-lib-alist '((&quot;/idl-astro/&quot; . &quot;AstroLib&quot;)
                                  (&quot;/jhuapl/&quot; . &quot;JHUAPL-Lib&quot;)
                                  (&quot;/dominik/lib/idl/&quot; . &quot;MyLib&quot;)))
</pre></div>

<p>However, if you are an Emacs power-user and want IDLWAVE to work
completely differently, you can change almost every aspect of it.  Here
is an example of a much more extensive configuration of IDLWAVE.  The
user is King!
</p>
<div class="example">
<pre class="example">;;; Settings for IDLWAVE mode

(setq idlwave-block-indent 3)           ; Indentation settings
(setq idlwave-main-block-indent 3)
(setq idlwave-end-offset -3)
(setq idlwave-continuation-indent 1)
(setq idlwave-begin-line-comment &quot;^;[^;]&quot;)  ; Leave &quot;;&quot; but not &quot;;;&quot;
                                            ; anchored at start of line.
(setq idlwave-surround-by-blank t)      ; Turn on padding ops =,&lt;,&gt;
(setq idlwave-pad-keyword nil)          ; Remove spaces for keyword '='
(setq idlwave-expand-generic-end t)     ; convert END to ENDIF etc...
(setq idlwave-reserved-word-upcase t)   ; Make reserved words upper case
                                        ; (with abbrevs only)
(setq idlwave-abbrev-change-case nil)   ; Don't force case of expansions
(setq idlwave-hang-indent-regexp &quot;: &quot;)  ; Change from &quot;- &quot; for auto-fill
(setq idlwave-show-block nil)           ; Turn off blinking to begin
(setq idlwave-abbrev-move t)            ; Allow abbrevs to move point
(setq idlwave-query-class '((method-default . nil) ; No query for method
                            (keyword-default . nil); or keyword completion
                            (&quot;INIT&quot; . t)           ; except for these
                            (&quot;CLEANUP&quot; . t)
                            (&quot;SETPROPERTY&quot; .t)
                            (&quot;GETPROPERTY&quot; .t)))

;; Using w3m for help (must install w3m and emacs-w3m)
(autoload 'w3m-browse-url &quot;w3m&quot; &quot;Interface for w3m on Emacs.&quot; t)
(setq idlwave-help-browser-function 'w3m-browse-url
      w3m-use-tab nil ; no tabs, location line, or toolbar
      w3m-use-header-line nil
      w3m-use-toolbar nil)

;; Close my help window or frame when w3m closes with 'q'.
(defadvice w3m-close-window (after idlwave-close activate)
  (if (boundp 'idlwave-help-frame)
      (idlwave-help-quit)))

;; Some setting can only be done from a mode hook.  Here is an example:
(add-hook 'idlwave-mode-hook
  (lambda ()
    (setq case-fold-search nil)          ; Make searches case sensitive
    ;; Run other functions here
    (font-lock-mode 1)                   ; Turn on font-lock mode
    (idlwave-auto-fill-mode 0)           ; Turn off auto filling
    (setq idlwave-help-browser-function 'browse-url-w3)

    ;; Pad with 1 space (if -n is used then make the
    ;; padding a minimum of n spaces.)  The defaults use -1
    ;; instead of 1.
    (idlwave-action-and-binding &quot;=&quot; '(idlwave-expand-equal 1 1))
    (idlwave-action-and-binding &quot;&lt;&quot; '(idlwave-surround 1 1))
    (idlwave-action-and-binding &quot;&gt;&quot; '(idlwave-surround 1 1 '(?-)))
    (idlwave-action-and-binding &quot;&amp;&quot; '(idlwave-surround 1 1))

    ;; Only pad after comma and with exactly 1 space
    (idlwave-action-and-binding &quot;,&quot; '(idlwave-surround nil 1))
    (idlwave-action-and-binding &quot;&amp;&quot; '(idlwave-surround 1 1))

    ;; Pad only after '-&gt;', remove any space before the arrow
    (idlwave-action-and-binding &quot;-&gt;&quot;  '(idlwave-surround 0 -1 nil 2))

    ;; Set some personal bindings
    ;; (In this case, makes ',' have the normal self-insert behavior.)
    (local-set-key &quot;,&quot; 'self-insert-command)
    (local-set-key [f5] 'idlwave-shell-break-here)
    (local-set-key [f6] 'idlwave-shell-clear-current-bp)

    ;; Create a newline, indenting the original and new line.
    ;; A similar function that does _not_ reindent the original
    ;; line is on &quot;\C-j&quot; (The default for emacs programming modes).
    (local-set-key &quot;\n&quot; 'idlwave-newline)
    ;; (local-set-key &quot;\C-j&quot; 'idlwave-newline) ; My preference.

    ;; Some personal abbreviations
    (define-abbrev idlwave-mode-abbrev-table
      (concat idlwave-abbrev-start-char &quot;wb&quot;) &quot;widget_base()&quot;
      (idlwave-keyword-abbrev 1))
    (define-abbrev idlwave-mode-abbrev-table
      (concat idlwave-abbrev-start-char &quot;on&quot;) &quot;obj_new()&quot;
      (idlwave-keyword-abbrev 1))
    ))

;;; Settings for IDLWAVE SHELL mode

(setq idlwave-shell-overlay-arrow &quot;=&gt;&quot;)        ; default is &quot;&gt;&quot;
(setq idlwave-shell-use-dedicated-frame t)     ; Make a dedicated frame
(setq idlwave-shell-prompt-pattern &quot;^WAVE&gt; &quot;)  ; default is &quot;^IDL&gt; &quot;
(setq idlwave-shell-explicit-file-name &quot;wave&quot;)
(setq idlwave-shell-process-name &quot;wave&quot;)
(setq idlwave-shell-use-toolbar nil)           ; No toolbar

;; Most shell interaction settings can be done from the shell-mode-hook.
(add-hook 'idlwave-shell-mode-hook
          (lambda ()
            ;; Set up some custom key and mouse examine commands
            (idlwave-shell-define-key-both [s-down-mouse-2]
                                 (idlwave-shell-mouse-examine
                                  &quot;print, size(___,/DIMENSIONS)&quot;))
            (idlwave-shell-define-key-both [f9] (idlwave-shell-examine
                                       &quot;print, size(___,/DIMENSIONS)&quot;))
            (idlwave-shell-define-key-both [f10] (idlwave-shell-examine
                                        &quot;print,size(___,/TNAME)&quot;))
            (idlwave-shell-define-key-both [f11] (idlwave-shell-examine
                                        &quot;help,___,/STRUCTURE&quot;))))
</pre></div>

<A NAME="WINDOWS_MAC"></A>
<hr>
<a name="Windows-and-macOS"></a>
<div class="header">
<p>
Next: <a href="#Troubleshooting" accesskey="n" rel="next">Troubleshooting</a>, Previous: <a href="#Configuration-Examples" accesskey="p" rel="prev">Configuration Examples</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Windows-and-macOS-1"></a>
<h2 class="appendix">Appendix D Windows and macOS</h2>
<a name="index-Windows-3"></a>
<a name="index-macOS-2"></a>

<p>IDLWAVE was developed on a UNIX system.  However, thanks to the
portability of Emacs, much of IDLWAVE does also work under different
operating systems like Windows (with NTEmacs or NTXEmacs).
</p>
<p>The only real problem is that there is no command-line version of IDL
for Windows with which IDLWAVE can interact.  As a
result, the IDLWAVE Shell does not work and you have to rely on IDLDE
to run and debug your programs.  However, editing IDL source files
with Emacs/IDLWAVE works with all bells and whistles, including
routine info, completion and fast online help.  Only a small amount of
additional information must be specified in your <samp>.emacs</samp> file:
the path names which, on a UNIX system, are automatically gathered by
talking to the IDL program.
</p>
<p>Here is an example of the additional configuration needed for a Windows
system.  I am assuming that IDLWAVE has been installed in
&lsquo;<samp>C:\Program&nbsp;Files\IDLWAVE</samp>&rsquo;<!-- /@w --> and that IDL is installed in
&lsquo;<samp>C:\RSI\IDL63</samp>&rsquo;<!-- /@w -->.
</p>
<div class="lisp">
<pre class="lisp">;; location of the lisp files (only needed if IDLWAVE is not part of
;; your default X/Emacs installation)
(setq load-path (cons &quot;c:/program files/IDLWAVE&quot; load-path))

;; The location of the IDL library directories, both standard,  and your own.
;; note that the initial &quot;+&quot; expands the path recursively
(setq idlwave-library-path
        '(&quot;+c:/RSI/IDL63/lib/&quot; &quot;+c:/path/to/my/idllibs&quot; ))

;; location of the IDL system directory (try &quot;print,!DIR&quot;)
(setq idlwave-system-directory &quot;c:/RSI/IDL63/&quot;)

</pre></div>

<p>Furthermore, Windows sometimes tries to outsmart you; make
sure you check the following things:
</p>
<ul>
<li> When you download the IDLWAVE distribution, make sure you save the
file under the names <samp>idlwave.tar.gz</samp>.
</li><li> M-TAB switches among running programs&mdash;use Esc-TAB
instead.
</li><li> Other issues as yet unnamed...
</li></ul>

<p>Windows users who&rsquo;d like to make use of IDLWAVE&rsquo;s context-aware HTML
help can skip the browser and use the HTMLHelp functionality directly.
See <a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a>.
</p>
<A NAME="TROUBLE"></A>
<hr>
<a name="Troubleshooting"></a>
<div class="header">
<p>
Next: <a href="#GNU-Free-Documentation-License" accesskey="n" rel="next">GNU Free Documentation License</a>, Previous: <a href="#Windows-and-macOS" accesskey="p" rel="prev">Windows and macOS</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Troubleshooting-1"></a>
<h2 class="appendix">Appendix E Troubleshooting</h2>
<a name="index-Troubleshooting"></a>

<p>Although IDLWAVE usually installs and works without difficulty, a few
common problems and their solutions are documented below.
</p>
<ol>
<li> <strong>Whenever an IDL error occurs or a breakpoint is hit, I get
errors or strange behavior when I try to type anything into some of my
IDLWAVE buffers.</strong>

<p>This is a <em>feature</em>, not an error.  You&rsquo;re in <em>Electric
Debug Mode</em> (see <a href="#Electric-Debug-Mode">Electric Debug Mode</a>).  You should see
<code>*Debugging*</code> in the mode-line.  The buffer is read-only and all
debugging and examination commands are available as single keystrokes;
<kbd>C-?</kbd> lists these shortcuts.  Use <kbd>q</kbd> to quit the mode, and
customize the variable <code>idlwave-shell-automatic-electric-debug</code>
if you prefer not to enter electric debug on breakpoints&hellip; but
you really should try it before you disable it!  You can also
customize this variable to enter debug mode when errors are
encountered.
</p>
</li><li> <strong>I get errors like &lsquo;<samp>Searching for program: no such
file or directory, idl</samp>&rsquo; when attempting to start the IDL shell.</strong>

<p>IDLWAVE needs to know where IDL is in order to run it as a process.
By default, it attempts to invoke it simply as &lsquo;<samp>idl</samp>&rsquo;, which
presumes such an executable is on your search path.  You need to
ensure &lsquo;<samp>idl</samp>&rsquo; is on your &lsquo;<samp>$PATH</samp>&rsquo;, or specify the full
pathname to the idl program with the variable
<code>idlwave-shell-explicit-file-name</code>.  Note that you may need to
set your shell search path in two places when running Emacs as an Aqua
application with macOS; see the next topic.
</p>
</li><li> <strong>IDLWAVE is disregarding my &lsquo;<samp>IDL_PATH</samp>&rsquo; which I set
under macOS</strong>

<p>If you run Emacs directly as an Aqua application, rather than from the
console shell, the environment is set not from your usual shell
configuration files (e.g., <samp>.cshrc</samp>), but from the file
<samp>~/.MacOSX/environment.plist</samp>.  Either include your path settings
there, or start Emacs and IDLWAVE from the shell.
</p>
</li><li> <strong>I get errors like &lsquo;<samp>Symbol's function is void:
overlayp</samp>&rsquo;</strong>

<p>You don&rsquo;t have the &lsquo;<samp>fsf-compat</samp>&rsquo; package installed, which IDLWAVE
needs to run under XEmacs.  Install it, or find an XEmacs distribution
which includes it by default.
</p>
</li><li> <strong>I&rsquo;m getting errors like &lsquo;<samp>Symbol's value as variable is void:
cl-builtin-gethash</samp>&rsquo; on completion or routine info.</strong>

<p>This error arises if you upgraded Emacs from 20.x to 21.x without
re-installing IDLWAVE.  Old Emacs and new Emacs are not byte-compatible
in compiled lisp files.  Presumably, you kept the original .elc files in
place, and this is the source of the error.  If you recompile (or just
&quot;make; make install&quot;) from source, it should resolve this problem.
Another option is to recompile the <samp>idlw*.el</samp> files by hand using
<kbd>M-x byte-compile-file</kbd>.
</p>
</li><li> <strong><kbd>M-<span class="key">TAB</span></kbd> doesn&rsquo;t complete words, it switches
windows on my desktop.</strong>

<p>Your system is trapping <kbd>M-<span class="key">TAB</span></kbd> and using it for its own
nefarious purposes: Emacs never sees the keystrokes.  On many Unix
systems, you can reconfigure your window manager to use another key
sequence for switching among windows.  Another option is to use the
equivalent sequence <kbd><span class="key">ESC</span>-<span class="key">TAB</span></kbd>.
</p>
</li><li> <strong>When stopping at breakpoints or errors, IDLWAVE does not
seem to highlight the relevant line in the source.</strong>

<p>IDLWAVE scans for error and halt messages and highlights the stop
location in the correct file.  However, if you&rsquo;ve changed the system
variable &lsquo;<samp>!ERROR_STATE.MSG_PREFIX</samp>&rsquo;, it is unable to parse these
message correctly.  Don&rsquo;t do that.
</p>
</li><li> <strong>IDLWAVE doesn&rsquo;t work correctly when using ENVI.</strong>

<p>Though IDLWAVE was not written with ENVI in mind, it works just fine
with it, as long as you update the prompt it&rsquo;s looking for (&lsquo;<samp>IDL&gt;
</samp>&rsquo; by default).  You can do this with the variable
<code>idlwave-shell-prompt-pattern</code> (see <a href="#Starting-the-Shell">Starting the Shell</a>), e.g.,
in your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setq idlwave-shell-prompt-pattern &quot;^\r? ?\\(ENVI\\|IDL\\)&gt; &quot;)
</pre></div>

</li><li> <strong>Attempts to set breakpoints fail: no breakpoint is
indicated in the IDLWAVE buffer.</strong>

<p>IDL changed its breakpoint reporting format starting with IDLv5.5.  The
first version of IDLWAVE to support the new format is IDLWAVE v4.10.  If
you have an older version and are using IDL &gt;v5.5, you need to upgrade,
and/or make sure your recent version of IDLWAVE is being found on the
Emacs load-path (see the next entry).  You can list the version being
used with <kbd>C-h v idlwave-mode-version <span class="key">RET</span></kbd>.
</p>
</li><li> <strong>I installed a new version of IDLWAVE, but the old
version is still being used</strong> or <strong>IDLWAVE works, but when I
tried to install the optional modules <samp>idlw-roprompt.el</samp> or
<samp>idlw-complete-structtag</samp>, I get errors like &lsquo;<samp>Cannot open
load file</samp>&rsquo;</strong>.

<p>The problem is that your Emacs is not finding the version of IDLWAVE you
installed.  Many Emacsen come with an older bundled copy of IDLWAVE
(e.g., v4.7 for Emacs 21.x), which is likely what&rsquo;s being used instead.
You need to make sure your Emacs <em>load-path</em> contains the directory
where IDLWAVE is installed (<samp>/usr/local/share/emacs/site-lisp</samp>, by
default), <em>before</em> Emacs&rsquo;s default search directories.  You can
accomplish this by putting the following in your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setq load-path (cons &quot;/usr/local/share/emacs/site-lisp&quot; load-path))
</pre></div>

<p>You can check on your load-path value using <kbd>C-h v
load-path <span class="key">RET</span></kbd>, and <kbd>C-h m</kbd> in an IDLWAVE buffer should show
you the version Emacs is using.
</p>
</li><li> <strong>IDLWAVE is screwing up the formatting of my <samp>.idl</samp> files.</strong>

<p>Actually, this isn&rsquo;t IDLWAVE at all, but &lsquo;<samp>idl-mode</samp>&rsquo;, an unrelated
programming mode for CORBA&rsquo;s Interface Definition Language (you should
see &lsquo;<samp>(IDL)</samp>&rsquo;, not &lsquo;<samp>(IDLWAVE)</samp>&rsquo; in the mode-line).  One
solution: don&rsquo;t name your file <samp>.idl</samp>, but rather <samp>.pro</samp>.
Another solution: make sure <samp>.idl</samp> files load IDLWAVE instead of
&lsquo;<samp>idl-mode</samp>&rsquo; by adding the following to your <samp>.emacs</samp>:
</p>
<div class="lisp">
<pre class="lisp">(setcdr (rassoc 'idl-mode auto-mode-alist) 'idlwave-mode)
</pre></div>

</li><li> <strong>The routine info for my local routines is out of date!</strong>

<p>IDLWAVE collects routine info from various locations (see <a href="#Routine-Information-Sources">Routine Information Sources</a>).  Routines in files visited in a buffer or
compiled in the shell should be up to date.  For other routines, the
information is only as current as the most recent scan.  If you have a
rapidly changing set of routines, and you&rsquo;d like the latest routine
information to be available for it, one powerful technique is to make
use of the library catalog tool, &lsquo;<samp>idlwave_catalog</samp>&rsquo;.  Simply add a
line to your &lsquo;<samp>cron</samp>&rsquo; file (&lsquo;<samp>crontab -e</samp>&rsquo; will let you edit this
on some systems), like this
</p>
<div class="example">
<pre class="example">45 3 * * 1-5 (cd /path/to/myidllib; /path/to/idlwave_catalog MyLib)
</pre></div>

<p>where &lsquo;<samp>MyLib</samp>&rsquo; is the name of your library.  This will
rescan all <samp>.pro</samp> files at or below <samp>/path/to/myidllib</samp> every
week night at 3:45am.  You can even scan site-wide libraries with this
method, and the most recent information will be available to all users.
Since the scanning is very fast, there is very little impact.
</p>
</li><li> <strong>All the Greek-font characters in the HTML help are
displayed as Latin characters!</strong>

<p>Unfortunately, the HTMLHelp files RSI provides attempt to switch to
&lsquo;<samp>Symbol</samp>&rsquo; font to display Greek characters, which is not really an
permitted method for doing this in HTML.  There is a &quot;workaround&quot; for
some browsers: See <a href="#HTML-Help-Browser-Tips">HTML Help Browser Tips</a>.
</p>
</li><li> <strong>In the shell, my long commands are truncated at 256 characters!</strong>

<p>This actually happens when running IDL in an XTerm as well.  There are
a couple of workarounds: <code>define_key,/control,'^d'</code> (e.g., in
your <samp>$IDL_STARTUP</samp> file) will disable the &lsquo;<samp>EOF</samp>&rsquo; character
and give you a 512 character limit.  You won&rsquo;t be able to use
<tt class="key">C-d</tt> to quit the shell, however.  Another possibility is
<code>!EDIT_INPUT=0</code>, which gives you an <em>infinite</em> limit (OK, a
memory-bounded limit), but disables the processing of background
widget events (those with <code>/NO_BLOCK</code> passed to <code>XManager</code>).
</p>
</li><li> <strong>When I invoke IDL HTML help on a routine, the page which
is loaded is one page off, e.g., for <code>CONVERT_COORD</code>, I get
<code>CONTOUR</code>.</strong>

<p>You have a mismatch between your help index and the HTML help package
you downloaded.  You need to ensure you download a &ldquo;downgrade kit&rdquo; if
you are using anything older than the latest HTML help package.  A new
help package appears with each IDL release (assuming the documentation
is updated).
Starting with IDL 6.2, the HTML help and its catalog are
distributed with IDL, and so should never be inconsistent.
</p>
</li><li> <strong>I get errors such as &lsquo;<samp>void-variable
browse-url-browser-function</samp>&rsquo; or similar when attempting to load IDLWAVE
under XEmacs.</strong>

<p>You don&rsquo;t have the &lsquo;<samp>browse-url</samp>&rsquo; (or other required) XEmacs package.
Unlike Emacs, XEmacs distributes many packages separately from the
main program.  IDLWAVE is actually among these, but is not always the
most up to date.  When installing IDLWAVE as an XEmacs package, it
should prompt you for required additional packages.  When installing it
from source, it won&rsquo;t and you&rsquo;ll get this error.  The easiest solution
is to install all the packages when you install XEmacs (the so-called
&lsquo;<samp>sumo</samp>&rsquo; bundle).  The minimum set of XEmacs packages required by
IDLWAVE is &lsquo;<samp>fsf-compat, xemacs-base, mail-lib</samp>&rsquo;.
</p>
</li></ol>

<hr>
<a name="GNU-Free-Documentation-License"></a>
<div class="header">
<p>
Next: <a href="#Index" accesskey="n" rel="next">Index</a>, Previous: <a href="#Troubleshooting" accesskey="p" rel="prev">Troubleshooting</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-Free-Documentation-License-1"></a>
<h2 class="appendix">Appendix F GNU Free Documentation License</h2>
<div align="center">Version 1.3, 3 November 2008
</div>

<div class="display">
<pre class="display">Copyright &copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<a href="https://fsf.org/">https://fsf.org/</a>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></div>

<ol start="0">
<li> PREAMBLE

<p>The purpose of this License is to make a manual, textbook, or other
functional and useful document <em>free</em> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</p>
<p>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</p>
<p>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</p>
</li><li> APPLICABILITY AND DEFINITIONS

<p>This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The &ldquo;Document&rdquo;, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as &ldquo;you&rdquo;.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</p>
<p>A &ldquo;Modified Version&rdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</p>
<p>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document&rsquo;s overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</p>
<p>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</p>
<p>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</p>
<p>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.
</p>
<p>Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input
format, SGML or XML using a publicly available
DTD, and standard-conforming simple HTML,
PostScript or PDF designed for human modification.  Examples
of transparent image formats include PNG, XCF and
JPG.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, SGML or
XML for which the DTD and/or processing tools are
not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for
output purposes only.
</p>
<p>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &ldquo;Title Page&rdquo; means
the text near the most prominent appearance of the work&rsquo;s title,
preceding the beginning of the body of the text.
</p>
<p>The &ldquo;publisher&rdquo; means any person or entity that distributes copies
of the Document to the public.
</p>
<p>A section &ldquo;Entitled XYZ&rdquo; means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, &ldquo;Endorsements&rdquo;, or &ldquo;History&rdquo;.)  To &ldquo;Preserve the Title&rdquo;
of such a section when you modify the Document means that it remains a
section &ldquo;Entitled XYZ&rdquo; according to this definition.
</p>
<p>The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</p>
</li><li> VERBATIM COPYING

<p>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</p>
<p>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</p>
</li><li> COPYING IN QUANTITY

<p>If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document&rsquo;s license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</p>
<p>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</p>
<p>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</p>
<p>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</p>
</li><li> MODIFICATIONS

<p>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</p>
<ol type="A" start="1">
<li> Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

</li><li> List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

</li><li> State on the Title page the name of the publisher of the
Modified Version, as the publisher.

</li><li> Preserve all the copyright notices of the Document.

</li><li> Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

</li><li> Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

</li><li> Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document&rsquo;s license notice.

</li><li> Include an unaltered copy of this License.

</li><li> Preserve the section Entitled &ldquo;History&rdquo;, Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled &ldquo;History&rdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

</li><li> Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &ldquo;History&rdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

</li><li> For any section Entitled &ldquo;Acknowledgements&rdquo; or &ldquo;Dedications&rdquo;, Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

</li><li> Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

</li><li> Delete any section Entitled &ldquo;Endorsements&rdquo;.  Such a section
may not be included in the Modified Version.

</li><li> Do not retitle any existing section to be Entitled &ldquo;Endorsements&rdquo; or
to conflict in title with any Invariant Section.

</li><li> Preserve any Warranty Disclaimers.
</li></ol>

<p>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version&rsquo;s license notice.
These titles must be distinct from any other section titles.
</p>
<p>You may add a section Entitled &ldquo;Endorsements&rdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&mdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</p>
<p>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</p>
<p>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</p>
</li><li> COMBINING DOCUMENTS

<p>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</p>
<p>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</p>
<p>In the combination, you must combine any sections Entitled &ldquo;History&rdquo;
in the various original documents, forming one section Entitled
&ldquo;History&rdquo;; likewise combine any sections Entitled &ldquo;Acknowledgements&rdquo;,
and any sections Entitled &ldquo;Dedications&rdquo;.  You must delete all
sections Entitled &ldquo;Endorsements.&rdquo;
</p>
</li><li> COLLECTIONS OF DOCUMENTS

<p>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</p>
<p>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</p>
</li><li> AGGREGATION WITH INDEPENDENT WORKS

<p>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an &ldquo;aggregate&rdquo; if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation&rsquo;s users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</p>
<p>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document&rsquo;s Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</p>
</li><li> TRANSLATION

<p>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</p>
<p>If a section in the Document is Entitled &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, or &ldquo;History&rdquo;, the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</p>
</li><li> TERMINATION

<p>You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.
</p>
<p>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.
</p>
</li><li> FUTURE REVISIONS OF THIS LICENSE

<p>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<a href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</p>
<p>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy&rsquo;s public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.
</p>
</li><li> RELICENSING

<p>&ldquo;Massive Multiauthor Collaboration Site&rdquo; (or &ldquo;MMC Site&rdquo;) means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
&ldquo;Massive Multiauthor Collaboration&rdquo; (or &ldquo;MMC&rdquo;) contained in the
site means any set of copyrightable works thus published on the MMC
site.
</p>
<p>&ldquo;CC-BY-SA&rdquo; means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.
</p>
<p>&ldquo;Incorporate&rdquo; means to publish or republish a Document, in whole or
in part, as part of another Document.
</p>
<p>An MMC is &ldquo;eligible for relicensing&rdquo; if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.
</p>
<p>The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.
</p>
</li></ol>

<a name="ADDENDUM_003a-How-to-use-this-License-for-your-documents"></a>
<h3 class="heading">ADDENDUM: How to use this License for your documents</h3>

<p>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</p>
<div class="smallexample">
<pre class="smallexample">  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</pre></div>

<p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the &ldquo;with&hellip;Texts.&rdquo; line with this:
</p>
<div class="smallexample">
<pre class="smallexample">    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.
</pre></div>

<p>If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</p>
<p>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</p>

<hr>
<a name="Index"></a>
<div class="header">
<p>
Previous: <a href="#GNU-Free-Documentation-License" accesskey="p" rel="prev">GNU Free Documentation License</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Index-1"></a>
<h2 class="unnumbered">Index</h2>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Index_cp_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-2"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-3"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-4"><b>.</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-X"><b>X</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-cp" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_symbol-1">!</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021DIR_002c-IDL-variable"><code>!DIR</code>, IDL variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021DIR_002c-IDL-variable-1"><code>!DIR</code>, IDL variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021DIR_002c-IDL-variable-2"><code>!DIR</code>, IDL variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021PATH_002c-IDL-variable"><code>!PATH</code>, IDL variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0021PATH_002c-IDL-variable-1"><code>!PATH</code>, IDL variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_symbol-2">*</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002aDebugging_002a">&lsquo;<samp>*Debugging*</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_symbol-3">-</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_003e"><code>-&gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_symbol-4">.</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002eemacs"><samp>.emacs</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Configuration-Examples">Configuration Examples</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002eidlwave_005fcatalog"><samp>.idlwave_catalog</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Library-Catalogs">Library Catalogs</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Abbreviations">Abbreviations</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Abbreviations">Abbreviations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Acknowledgments">Acknowledgments</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Actions">Actions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Actions">Actions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Actions_002c-applied-to-foreign-code">Actions, applied to foreign code</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Actions">Actions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Active-text_002c-in-routine-info">Active text, in routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Application_002c-testing-for-shadowing">Application, testing for shadowing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Authors_002c-of-IDLWAVE">Authors, of IDLWAVE</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-auto_002dfill_002dmode"><code>auto-fill-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Block-boundary-check">Block boundary check</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Block_002c-closing">Block, closing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Breakpoints">Breakpoints</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Browser-Tips">Browser Tips</a>:</td><td>&nbsp;</td><td valign="top"><a href="#HTML-Help-Browser-Tips">HTML Help Browser Tips</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Buffer_002c-testing-for-shadowing">Buffer, testing for shadowing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Buffers_002c-killing">Buffers, killing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Buffers_002c-scanning-for-routine-info">Buffers, scanning for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Buffers_002c-scanning-for-routine-info-1">Buffers, scanning for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Builtin-list-of-routines">Builtin list of routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-_003f">C-c ?</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd">C-c C-d</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debug-Key-Bindings">Debug Key Bindings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd-C_002db">C-c C-d C-b</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd-C_002db-1">C-c C-d C-b</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd-C_002dc">C-c C-d C-c</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd-C_002de">C-c C-d C-e</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dd-C_002dp">C-c C-d C-p</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dh">C-c C-h</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002di">C-c C-i</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002di-1">C-c C-i</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dm">C-c C-m</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002ds">C-c C-s</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dc-C_002dv">C-c C-v</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002dM_002d_005c">C-M-\</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calling-sequences">Calling sequences</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Calling-stack_002c-walking">Calling stack, walking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Walking-the-Calling-Stack">Walking the Calling Stack</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CALL_005fEXTERNAL_002c-IDL-routine"><code>CALL_EXTERNAL</code>, IDL routine</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Canceling-completion">Canceling completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Case-changes">Case changes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-Changes">Case Changes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Case-of-completed-words">Case of completed words</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-of-Completed-Words">Case of Completed Words</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Catalogs">Catalogs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Catalogs">Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Categories_002c-of-routines">Categories, of routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cc_002dmode_002eel">cc-mode.el</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Changelog_002c-in-doc-header_002e">Changelog, in doc header.</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Character-input-mode-_0028Shell_0029">Character input mode (Shell)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Class-ambiguity">Class ambiguity</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Class-name-completion">Class name completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Class-query_002c-forcing">Class query, forcing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Class-tags_002c-in-online-help">Class tags, in online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Closing-a-block">Closing a block</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Code-formatting">Code formatting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Formatting">Code Formatting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Code-indentation">Code indentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Code-structure_002c-moving-through">Code structure, moving through</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Code-templates">Code templates</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Templates">Code Templates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Coding-standards_002c-enforcing">Coding standards, enforcing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Actions">Actions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Comint">Comint</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Comint_002c-Emacs-package">Comint, Emacs package</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Commands-in-shell_002c-showing">Commands in shell, showing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Commands-Sent-to-the-Shell">Commands Sent to the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Comment-indentation">Comment indentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compiling-library-modules">Compiling library modules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Resolving-Routines">Resolving Routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compiling-programs">Compiling programs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compiling-regions">Compiling regions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion">Completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-ambiguity">Completion, ambiguity</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-canceling">Completion, canceling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-forcing-function-name">Completion, forcing function name</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-in-the-shell">Completion, in the shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-Online-Help">Completion, Online Help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-scrolling">Completion, scrolling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Completion_002c-structure-tag">Completion, structure tag</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Structure-Tag-Completion">Structure Tag Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Configuration-examples">Configuration examples</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Configuration-Examples">Configuration Examples</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Context_002c-for-online-help">Context, for online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Continuation-lines">Continuation lines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Continued-statement-indentation">Continued statement indentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continued-Statement-Indentation">Continued Statement Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Contributors_002c-to-IDLWAVE">Contributors, to IDLWAVE</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CORBA-_0028Common-Object-Request-Broker-Architecture_0029">CORBA (Common Object Request Broker Architecture)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Custom-expression-examination">Custom expression examination</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Custom-Expression-Examination">Custom Expression Examination</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Debugging">Debugging</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-IDL-Programs">Debugging IDL Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Debugging-Interface">Debugging Interface</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Tale-of-Two-Modes">A Tale of Two Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dedicated-frame_002c-for-shell-buffer">Dedicated frame, for shell buffer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Default-command-line_002c-executing">Default command line, executing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Default-routine_002c-for-info-and-help">Default routine, for info and help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Default-settings_002c-of-options">Default settings, of options</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Configuration-Examples">Configuration Examples</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DocLib-header">DocLib header</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DocLib-header_002c-as-online-help">DocLib header, as online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Documentation-header">Documentation header</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Downcase_002c-enforcing-for-reserved-words">Downcase, enforcing for reserved words</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-Changes">Case Changes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Duplicate-routines">Duplicate routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Duplicate-routines-1">Duplicate routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Electric-Debug-Mode">Electric Debug Mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Tale-of-Two-Modes">A Tale of Two Modes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Electric-Debug-Mode-1">Electric Debug Mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Email-address_002c-of-Maintainer">Email address, of Maintainer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-END-type-checking"><code>END</code> type checking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-END_002c-automatic-insertion"><code>END</code>, automatic insertion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-END_002c-expanding"><code>END</code>, expanding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ENVI">ENVI</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Examining-expressions">Examining expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-configuration">Example configuration</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Configuration-Examples">Configuration Examples</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Executing-a-default-command-line">Executing a default command line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Execution_002c-controlled">Execution, controlled</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Expressions_002c-custom-examination">Expressions, custom examination</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Custom-Expression-Examination">Custom Expression Examination</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Expressions_002c-printing-_0026-help">Expressions, printing &amp; help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-External-routines">External routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Feature-overview">Feature overview</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Filling">Filling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Flags_002c-in-routine-info">Flags, in routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Font-lock">Font lock</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Highlighting">Syntax Highlighting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Forcing-class-query_002e">Forcing class query.</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Foreign-code_002c-adapting">Foreign code, adapting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Foreign-code_002c-adapting-1">Foreign code, adapting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Actions">Actions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Formatting_002c-of-code">Formatting, of code</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Formatting">Code Formatting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Frame_002c-for-shell-buffer">Frame, for shell buffer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Func_002dmenu_002c-XEmacs-package"><samp>Func-menu</samp>, XEmacs package</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Function-definitions_002c-jumping-to">Function definitions, jumping to</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Function-name-completion">Function name completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Getting-Started">Getting Started</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Getting-Started">Getting Started</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-get_005fhtml_005frinfo"><samp>get_html_rinfo</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Documentation-Scan">Documentation Scan</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hanging-paragraphs">Hanging paragraphs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hanging-paragraphs-1">Hanging paragraphs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Header_002c-for-file-documentation">Header, for file documentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Help-using-HTML-manuals">Help using HTML manuals</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Help-using-routine-source">Help using routine source</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HELP_002c-on-expressions"><code>HELP</code>, on expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Highlighting-of-syntax">Highlighting of syntax</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Highlighting">Syntax Highlighting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Highlighting-of-syntax_002c-Octals">Highlighting of syntax, Octals</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Octals-and-Highlighting">Octals and Highlighting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hooks">Hooks</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Misc-Options">Misc Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hooks-1">Hooks</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HTML-Help">HTML Help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-Assistant">IDL Assistant</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-library-routine-info">IDL library routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-manual_002c-HTML-version">IDL manual, HTML version</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-variable-_0021DIR">IDL variable <code>!DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-variable-_0021DIR-1">IDL variable <code>!DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-variable-_0021DIR-2">IDL variable <code>!DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-variable-_0021PATH">IDL variable <code>!PATH</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL-variable-_0021PATH-1">IDL variable <code>!PATH</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL_002c-as-Emacs-subprocess">IDL, as Emacs subprocess</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idl_002dshell_002eel"><samp>idl-shell.el</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idl_002eel"><samp>idl.el</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDL_003e-Prompt">IDL&gt; Prompt</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlw_002dhelp_002eel"><samp>idlw-help.el</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlw_002dhelp_002etxt"><samp>idlw-help.txt</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlw_002drinfo_002eel"><samp>idlw-rinfo.el</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Documentation-Scan">Documentation Scan</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDLWAVE-in-a-Nutshell">IDLWAVE in a Nutshell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#IDLWAVE-in-a-Nutshell">IDLWAVE in a Nutshell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDLWAVE-major-mode">IDLWAVE major mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Major-Mode">The IDLWAVE Major Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-IDLWAVE-shell">IDLWAVE shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dabbrev_002dchange_002dcase"><code>idlwave-abbrev-change-case</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-Changes">Case Changes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dabbrev_002dmove"><code>idlwave-abbrev-move</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Abbreviations">Abbreviations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dabbrev_002dstart_002dchar"><code>idlwave-abbrev-start-char</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Abbreviations">Abbreviations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dauto_002dfill_002dsplit_002dstring"><code>idlwave-auto-fill-split-string</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dauto_002droutine_002dinfo_002dupdates"><code>idlwave-auto-routine-info-updates</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dauto_002dwrite_002dpath"><code>idlwave-auto-write-path</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Catalogs">Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dbegin_002dline_002dcomment"><code>idlwave-begin-line-comment</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dblock_002dindent"><code>idlwave-block-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dclass_002darrow_002dface"><code>idlwave-class-arrow-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcode_002dcomment"><code>idlwave-code-comment</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcomplete_002dempty_002dstring_002das_002dlower_002dcase"><code>idlwave-complete-empty-string-as-lower-case</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-of-Completed-Words">Case of Completed Words</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcompletion_002dcase"><code>idlwave-completion-case</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-of-Completed-Words">Case of Completed Words</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcompletion_002dfontify_002dclasses"><code>idlwave-completion-fontify-classes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcompletion_002dforce_002ddefault_002dcase"><code>idlwave-completion-force-default-case</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-of-Completed-Words">Case of Completed Words</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcompletion_002drestore_002dwindow_002dconfiguration"><code>idlwave-completion-restore-window-configuration</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcompletion_002dshow_002dclasses"><code>idlwave-completion-show-classes</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dconfig_002ddirectory"><code>idlwave-config-directory</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Catalogs">Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dcontinuation_002dindent"><code>idlwave-continuation-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continued-Statement-Indentation">Continued Statement Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002ddefault_002dfont_002dlock_002ditems"><code>idlwave-default-font-lock-items</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Highlighting">Syntax Highlighting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002ddo_002dactions"><code>idlwave-do-actions</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Actions">Actions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002ddoc_002dmodifications_002dkeyword"><code>idlwave-doc-modifications-keyword</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002ddoclib_002dend"><code>idlwave-doclib-end</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002ddoclib_002dstart"><code>idlwave-doclib-start</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dend_002doffset"><code>idlwave-end-offset</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dexpand_002dgeneric_002dend"><code>idlwave-expand-generic-end</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dextra_002dhelp_002dfunction"><code>idlwave-extra-help-function</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dfile_002dheader"><code>idlwave-file-header</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dfill_002dcomment_002dline_002donly"><code>idlwave-fill-comment-line-only</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dfunction_002dcompletion_002dadds_002dparen"><code>idlwave-function-completion-adds-paren</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhang_002dindent_002dregexp"><code>idlwave-hang-indent-regexp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhanging_002dindent"><code>idlwave-hanging-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dheader_002dto_002dbeginning_002dof_002dfile"><code>idlwave-header-to-beginning-of-file</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dapplication"><code>idlwave-help-application</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Misc-Options">Misc Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dbrowser_002dfunction"><code>idlwave-help-browser-function</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dbrowser_002dis_002dlocal"><code>idlwave-help-browser-is-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002ddoclib_002dkeyword"><code>idlwave-help-doclib-keyword</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002ddoclib_002dname"><code>idlwave-help-doclib-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dfontify_002dsource_002dcode"><code>idlwave-help-fontify-source-code</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dframe_002dparameters"><code>idlwave-help-frame-parameters</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dlink_002dface"><code>idlwave-help-link-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002dsource_002dtry_002dheader"><code>idlwave-help-source-try-header</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002duse_002dassistant"><code>idlwave-help-use-assistant</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhelp_002duse_002ddedicated_002dframe"><code>idlwave-help-use-dedicated-frame</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhighlight_002dhelp_002dlinks_002din_002dcompletion"><code>idlwave-highlight-help-links-in-completion</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhtml_002dhelp_002dlocation"><code>idlwave-html-help-location</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dhtml_002dsystem_002dhelp_002dlocation"><code>idlwave-html-system-help-location</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-HTML-Documentation">Help with HTML Documentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dindent_002dto_002dopen_002dparen"><code>idlwave-indent-to-open-paren</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continued-Statement-Indentation">Continued Statement Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dinit_002drinfo_002dwhen_002didle_002dafter"><code>idlwave-init-rinfo-when-idle-after</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dkeyword_002dclass_002dinheritance"><code>idlwave-keyword-class-inheritance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dkeyword_002dcompletion_002dadds_002dequal"><code>idlwave-keyword-completion-adds-equal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dlibrary_002dpath"><code>idlwave-library-path</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Catalogs">Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dload_002dhook"><code>idlwave-load-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Misc-Options">Misc Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dmain_002dblock_002dindent"><code>idlwave-main-block-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dmax_002dextra_002dcontinuation_002dindent"><code>idlwave-max-extra-continuation-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continued-Statement-Indentation">Continued Statement Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dmax_002dpopup_002dmenu_002ditems"><code>idlwave-max-popup-menu-items</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dmode_002dhook"><code>idlwave-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Misc-Options">Misc Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dno_002dchange_002dcomment"><code>idlwave-no-change-comment</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dpad_002dkeyword"><code>idlwave-pad-keyword</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Padding-Operators">Padding Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dquery_002dclass"><code>idlwave-query-class</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dquery_002dshell_002dfor_002droutine_002dinfo"><code>idlwave-query-shell-for-routine-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dreindent_002dend"><code>idlwave-reindent-end</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dreserved_002dword_002dupcase"><code>idlwave-reserved-word-upcase</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-Changes">Case Changes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dresize_002droutine_002dhelp_002dwindow"><code>idlwave-resize-routine-help-window</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002drinfo_002dmax_002dsource_002dlines"><code>idlwave-rinfo-max-source-lines</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dscan_002dall_002dbuffers_002dfor_002droutine_002dinfo"><code>idlwave-scan-all-buffers-for-routine-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dactivate_002dprefix_002dkeybindings"><code>idlwave-shell-activate-prefix-keybindings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debug-Key-Bindings">Debug Key Bindings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002darrows_002ddo_002dhistory"><code>idlwave-shell-arrows-do-history</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dautomatic_002delectric_002ddebug"><code>idlwave-shell-automatic-electric-debug</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dautomatic_002dstart"><code>idlwave-shell-automatic-start</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dbreakpoint_002dface"><code>idlwave-shell-breakpoint-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dbreakpoint_002dpopup_002dmenu"><code>idlwave-shell-breakpoint-popup-menu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dcomint_002dsettings"><code>idlwave-shell-comint-settings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dcommand_002dhistory_002dfile"><code>idlwave-shell-command-history-file</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dcommand_002dline_002doptions"><code>idlwave-shell-command-line-options</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002ddebug_002dmodifiers"><code>idlwave-shell-debug-modifiers</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debug-Key-Bindings">Debug Key Bindings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002delectric_002dstop_002dcolor"><code>idlwave-shell-electric-stop-color</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002delectric_002dstop_002dline_002dface"><code>idlwave-shell-electric-stop-line-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002delectric_002dzap_002dto_002dfile"><code>idlwave-shell-electric-zap-to-file</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Electric-Debug-Mode">Electric Debug Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dexamine_002dalist"><code>idlwave-shell-examine-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Custom-Expression-Examination">Custom Expression Examination</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dexplicit_002dfile_002dname"><code>idlwave-shell-explicit-file-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dexpression_002dface"><code>idlwave-shell-expression-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dfile_002dname_002dchars"><code>idlwave-shell-file-name-chars</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dframe_002dparameters"><code>idlwave-shell-frame-parameters</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dgraphics_002dwindow_002dsize"><code>idlwave-shell-graphics-window-size</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dinitial_002dcommands"><code>idlwave-shell-initial-commands</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dinput_002dmode_002dspells"><code>idlwave-shell-input-mode-spells</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dmark_002dbreakpoints"><code>idlwave-shell-mark-breakpoints</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dmark_002dstop_002dline"><code>idlwave-shell-mark-stop-line</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dmax_002dprint_002dlength"><code>idlwave-shell-max-print-length</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dmode_002dhook"><code>idlwave-shell-mode-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002doutput_002dface"><code>idlwave-shell-output-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002doverlay_002darrow"><code>idlwave-shell-overlay-arrow</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dprefix_002dkey"><code>idlwave-shell-prefix-key</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debug-Key-Bindings">Debug Key Bindings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dprocess_002dname"><code>idlwave-shell-process-name</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dprompt_002dpattern"><code>idlwave-shell-prompt-pattern</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002draise_002dframe"><code>idlwave-shell-raise-frame</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dsave_002dcommand_002dhistory"><code>idlwave-shell-save-command-history</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dseparate_002dexamine_002doutput"><code>idlwave-shell-separate-examine-output</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dshow_002dcommands"><code>idlwave-shell-show-commands</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Commands-Sent-to-the-Shell">Commands Sent to the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dstop_002dline_002dface"><code>idlwave-shell-stop-line-face</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002dtemp_002dpro_002dprefix"><code>idlwave-shell-temp-pro-prefix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002duse_002ddedicated_002dframe"><code>idlwave-shell-use-dedicated-frame</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002duse_002ddedicated_002dwindow"><code>idlwave-shell-use-dedicated-window</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002duse_002dinput_002dmode_002dmagic"><code>idlwave-shell-use-input-mode-magic</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshell_002duse_002dtoolbar"><code>idlwave-shell-use-toolbar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-IDL-Programs">Debugging IDL Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dshow_002dblock"><code>idlwave-show-block</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Block-Boundary-Check">Block Boundary Check</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dspecial_002dlib_002dalist"><code>idlwave-special-lib-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dspecial_002dlib_002dalist-1"><code>idlwave-special-lib-alist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dsplit_002dline_002dstring"><code>idlwave-split-line-string</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dstartup_002dmessage"><code>idlwave-startup-message</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Misc-Options">Misc Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dstore_002dinquired_002dclass"><code>idlwave-store-inquired-class</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dsupport_002dinheritance"><code>idlwave-support-inheritance</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dsurround_002dby_002dblank"><code>idlwave-surround-by-blank</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Padding-Operators">Padding Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dsystem_002ddirectory"><code>idlwave-system-directory</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Catalogs">Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002dtimestamp_002dhook"><code>idlwave-timestamp-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002duse_002dlast_002dhang_002dindent"><code>idlwave-use-last-hang-indent</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_002duse_002dlibrary_002dcatalogs"><code>idlwave-use-library-catalogs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Library-Catalogs">Library Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-idlwave_005fcatalog"><code>idlwave_catalog</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Library-Catalogs">Library Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Imenu_002c-Emacs-package"><samp>Imenu</samp>, Emacs package</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Indentation">Indentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Indentation_002c-continued-statement">Indentation, continued statement</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continued-Statement-Indentation">Continued Statement Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Indentation_002c-of-foreign-code">Indentation, of foreign code</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Indentation">Code Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Inheritance_002c-class">Inheritance, class</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Inheritance_002c-keyword">Inheritance, keyword</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Input-mode">Input mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Inserting-keywords_002c-from-routine-info">Inserting keywords, from routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installing-online-help">Installing online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Interactive-Data-Language">Interactive Data Language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Interface-Definition-Language">Interface Definition Language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Interview_002c-with-the-maintainer">Interview, with the maintainer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Configuration-Examples">Configuration Examples</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Introduction">Introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-K">K</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Key-bindings">Key bindings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debug-Key-Bindings">Debug Key Bindings</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keybindings-for-debugging">Keybindings for debugging</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-IDL-Programs">Debugging IDL Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keyword-completion">Keyword completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keyword-inheritance">Keyword inheritance</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Class-and-Keyword-Inheritance">Class and Keyword Inheritance</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Keywords-of-a-routine">Keywords of a routine</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Killing-autoloaded-buffers">Killing autoloaded buffers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Library-catalogs">Library catalogs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Library-Catalogs">Library Catalogs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Line-input-mode-_0028Shell_0029">Line input mode (Shell)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Line-splitting">Line splitting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LINKIMAGE_002c-IDL-routine"><code>LINKIMAGE</code>, IDL routine</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Load_002dpath-shadows">Load-path shadows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Load_002dpath-shadows-1">Load-path shadows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002d_003f">M-?</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dq">M-q</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dRET">M-<tt class="key">RET</tt></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-M_002dTAB">M-<tt class="key">TAB</tt></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-macOS">macOS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-macOS-1">macOS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-macOS-2">macOS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Windows-and-macOS">Windows and macOS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Magic-spells_002c-for-input-mode">Magic spells, for input mode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Maintainer_002c-of-IDLWAVE">Maintainer, of IDLWAVE</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Major-mode_002c-idlwave_002dmode">Major mode, <code>idlwave-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Major-Mode">The IDLWAVE Major Mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Major-mode_002c-idlwave_002dshell_002dmode">Major mode, <code>idlwave-shell-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Method-completion">Method completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Method-Completion-in-Shell">Method Completion in Shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-in-the-Shell">Object Method Completion in the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mixed-case-completion">Mixed case completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-of-Completed-Words">Case of Completed Words</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Modification-timestamp">Modification timestamp</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Module-source-file">Module source file</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Motion-commands">Motion commands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mouse-binding-to-print-expressions">Mouse binding to print expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiply-defined-routines">Multiply defined routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiply-defined-routines-1">Multiply defined routines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Nutshell_002c-IDLWAVE-in-a">Nutshell, IDLWAVE in a</a>:</td><td>&nbsp;</td><td valign="top"><a href="#IDLWAVE-in-a-Nutshell">IDLWAVE in a Nutshell</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Object-method-completion">Object method completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Object-methods">Object methods</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJ_005fNEW_002c-special-online-help"><code>OBJ_NEW</code>, special online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Online-Help">Online Help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Online-Help-from-the-routine-info-buffer">Online Help from the routine info buffer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Online-Help-in-_002aCompletions_002a-buffer">Online Help in <samp>*Completions*</samp> buffer</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Online-Help_002c-in-the-shell">Online Help, in the shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Online-Help_002c-Installation">Online Help, Installation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Operators_002c-padding-with-spaces">Operators, padding with spaces</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Padding-Operators">Padding Operators</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Padding-operators-with-spaces">Padding operators with spaces</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Padding-Operators">Padding Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Paragraphs_002c-filling">Paragraphs, filling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Paragraphs_002c-hanging">Paragraphs, hanging</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Comment-Indentation">Comment Indentation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Perl-program_002c-to-create-idlw_002drinfo_002eel">Perl program, to create <samp>idlw-rinfo.el</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Documentation-Scan">Documentation Scan</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PRINT-expressions"><code>PRINT</code> expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Printing-expressions">Printing expressions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Printing-expressions_002c-on-calling-stack">Printing expressions, on calling stack</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Procedure-definitions_002c-jumping-to">Procedure definitions, jumping to</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Procedure-name-completion">Procedure name completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Program-structure_002c-moving-through">Program structure, moving through</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programs_002c-compiling">Programs, compiling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Compiling-Programs">Compiling Programs</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-Q">Q</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Quick_002dStart">Quick-Start</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Getting-Started">Getting Started</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-RESOLVE_005fROUTINE"><code>RESOLVE_ROUTINE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Resolving-Routines">Resolving Routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Restrictions-for-expression-printing">Restrictions for expression printing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-definitions">Routine definitions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Definitions">Routine Definitions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-definitions_002c-multiple">Routine definitions, multiple</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-definitions_002c-multiple-1">Routine definitions, multiple</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-info">Routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-info-sources">Routine info sources</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-info_002c-in-the-shell">Routine info, in the shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-source-file">Routine source file</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routine-source-information">Routine source information</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Routines_002c-resolving">Routines, resolving</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Resolving-Routines">Resolving Routines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ROUTINE_005fNAMES_002c-IDL-procedure">ROUTINE_NAMES, IDL procedure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Examining-Variables">Examining Variables</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Saving-object-class-on-_002d_003e">Saving object class on <code>-&gt;</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scanning-buffers-for-routine-info">Scanning buffers for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scanning-buffers-for-routine-info-1">Scanning buffers for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scanning-the-documentation">Scanning the documentation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Documentation-Scan">Documentation Scan</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scrolling-the-_002aCompletions_002a-window">Scrolling the <samp>*Completions*</samp> window</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Completion">Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-self-object_002c-default-class"><code>self</code> object, default class</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Object-Method-Completion-and-Class-Ambiguity">Object Method Completion and Class Ambiguity</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shadows_002c-load_002dpath">Shadows, load-path</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shadows_002c-load_002dpath-1">Shadows, load-path</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shell_002c-basic-commands">Shell, basic commands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shell_002c-querying-for-routine-info">Shell, querying for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shell_002c-querying-for-routine-info-1">Shell, querying for routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shell_002c-starting">Shell, starting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Showing-commands-in-shell">Showing commands in shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Commands-Sent-to-the-Shell">Commands Sent to the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Source-code_002c-as-online-help">Source code, as online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Source-file_002c-access-from-routine-info">Source file, access from routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Source-file_002c-of-a-routine">Source file, of a routine</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Source">Routine Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Sources-of-routine-information">Sources of routine information</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Sources-of-Routine-Info">Sources of Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Space_002c-around-operators">Space, around operators</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Padding-Operators">Padding Operators</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Speed_002c-of-online-help">Speed, of online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Speedbar_002c-Emacs-package"><samp>Speedbar</samp>, Emacs package</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Motion-Commands">Motion Commands</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Spells_002c-magic">Spells, magic</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Using-the-Shell">Using the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Splitting_002c-of-lines">Splitting, of lines</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Starting-the-shell">Starting the shell</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Stepping">Stepping</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Breakpoints-and-Stepping">Breakpoints and Stepping</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-String-splitting">String splitting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Continuation-Lines">Continuation Lines</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Structure-tag-completion">Structure tag completion</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Structure-Tag-Completion">Structure Tag Completion</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Structure-tags_002c-in-online-help">Structure tags, in online help</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Help-with-Source">Help with Source</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subprocess-of-Emacs_002c-IDL">Subprocess of Emacs, IDL</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subprocess-of-Emacs_002c-IDL-1">Subprocess of Emacs, IDL</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Starting-the-Shell">Starting the Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Summary-of-important-commands">Summary of important commands</a>:</td><td>&nbsp;</td><td valign="top"><a href="#IDLWAVE-in-a-Nutshell">IDLWAVE in a Nutshell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Syntax-highlighting">Syntax highlighting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Syntax-Highlighting">Syntax Highlighting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Syntax-highlighting_002c-Octals">Syntax highlighting, Octals</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Octals-and-Highlighting">Octals and Highlighting</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Templates">Templates</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Code-Templates">Code Templates</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Thanks">Thanks</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Acknowledgments">Acknowledgments</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Timestamp_002c-in-doc-header_002e">Timestamp, in doc header.</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Doc-Header">Doc Header</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Toolbar">Toolbar</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-IDL-Programs">Debugging IDL Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Troubleshooting">Troubleshooting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Troubleshooting">Troubleshooting</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Tutorial">Tutorial</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Getting-Started">Getting Started</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Upcase_002c-enforcing-for-reserved-words">Upcase, enforcing for reserved words</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Case-Changes">Case Changes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Updating-routine-info">Updating routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Info">Routine Info</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Updating-routine-info-1">Updating routine info</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Routine-Information-Sources">Routine Information Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-User-catalog">User catalog</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Windows">Windows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-IDLWAVE-Shell">The IDLWAVE Shell</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Windows-1">Windows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Catalog">User Catalog</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Windows-2">Windows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Load_002dPath-Shadows">Load-Path Shadows</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Windows-3">Windows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Windows-and-macOS">Windows and macOS</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Index_cp_letter-X">X</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-XML-Help-Catalog">XML Help Catalog</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Online-Help">Online Help</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Index_cp_symbol-1"><b>!</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-2"><b>*</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-3"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_symbol-4"><b>.</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-K"><b>K</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-Q"><b>Q</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Index_cp_letter-X"><b>X</b></a>
 &nbsp; 
</td></tr></table>

<div class="footnote">
<hr>
<h4 class="footnotes-heading">Footnotes</h4>

<h3><a name="FOOT1" href="#DOCF1">(1)</a></h3>
<p>IDLWAVE can also be used
for editing source files for the related WAVE/CL language, but with only
limited support.</p>
<h3><a name="FOOT2" href="#DOCF2">(2)</a></h3>
<p>This list is created by scanning the IDL manuals and
might contain (very few) errors.  Please report any errors to the
maintainer, so that they can be fixed.</p>
<h3><a name="FOOT3" href="#DOCF3">(3)</a></h3>
<p>This is different from
normal Emacs/Comint behavior, but more like an xterm.  If you prefer the
default comint functionality, check the variable
<code>idlwave-shell-arrows-do-history</code>.</p>
<h3><a name="FOOT4" href="#DOCF4">(4)</a></h3>
<p>Note
that this binding is not symmetric: <kbd>C-c C-d C-q</kbd> is bound to
<code>idlwave-shell-quit</code>, which quits your IDL session.</p>
<h3><a name="FOOT5" href="#DOCF5">(5)</a></h3>
<p>Available as <kbd>p</kbd> and <kbd>?</kbd> in Electric
Debug Mode (see <a href="#Electric-Debug-Mode">Electric Debug Mode</a>)</p>
<h3><a name="FOOT6" href="#DOCF6">(6)</a></h3>
<p>In Electric Debug Mode (see <a href="#Electric-Debug-Mode">Electric Debug Mode</a>), the key <kbd>x</kbd> provides a single-character shortcut interface
to the same examine functions for the expression at point or marked by
the region.</p>
<h3><a name="FOOT7" href="#DOCF7">(7)</a></h3>
<p>The initial &lsquo;<samp>+</samp>&rsquo;
leads to recursive expansion of the path, just like in IDL</p>
<h3><a name="FOOT8" href="#DOCF8">(8)</a></h3>
<p>Unix systems only, I think.</p>
</div>
<hr>



</body>
</html>
